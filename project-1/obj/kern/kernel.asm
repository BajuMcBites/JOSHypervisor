
obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
    vmcall
#endif
	
    movl $multiboot_info, %eax
  100000:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  100005:	89 18                	mov    %ebx,(%rax)

#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
  100007:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472(%rip)        # 100482 <verify_cpu_no_longmode+0x36f>
  10000e:	34 12 
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  100010:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100015:	e8 cc 00 00 00       	callq  1000e6 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
  10001a:	b8 20 00 00 00       	mov    $0x20,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
#endif
    movl %eax,%cr4
  10001f:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100022:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100027:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100029:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002e:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  100030:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100035:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  10003a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  100040:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100042:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100047:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10004a:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004d:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  100050:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100055:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  10005a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100060:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100062:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100067:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006c:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006f:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100072:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100074:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100079:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007e:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100083:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100089:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008e:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  100090:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100092:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100095:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100098:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009d:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  1000a0:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a3:	75 e9                	jne    10008e <_head64+0x8e>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a5:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000aa:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ad:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b2:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b4:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b8:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000ba:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bd:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000c0:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c5:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000ca:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000cf:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d2:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d5:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000da:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dd:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000df:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e4:	50                   	push   %rax

00000000001000e5 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e5:	cb                   	lret   

00000000001000e6 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e6:	9c                   	pushfq 
    popl %eax
  1000e7:	58                   	pop    %rax
    movl %eax,%ecx
  1000e8:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000ea:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ef:	50                   	push   %rax
    popfl
  1000f0:	9d                   	popfq  
    pushfl
  1000f1:	9c                   	pushfq 
    popl %eax
  1000f2:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f3:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f5:	74 1c                	je     100113 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f7:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fc:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fe:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100101:	72 10                	jb     100113 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100103:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100108:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  10010a:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  100110:	74 01                	je     100113 <verify_cpu_no_longmode>

    ret
  100112:	c3                   	retq   

0000000000100113 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100113:	eb fe                	jmp    100113 <verify_cpu_no_longmode>
  100115:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011c:	00 00 00 
  10011f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100126:	00 00 00 
  100129:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100130:	00 00 00 
  100133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10013a:	00 00 00 
  10013d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100144:	00 00 00 
  100147:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014e:	00 00 00 
  100151:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100158:	00 00 00 
  10015b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100162:	00 00 00 
  100165:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016c:	00 00 00 
  10016f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100176:	00 00 00 
  100179:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100180:	00 00 00 
  100183:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10018a:	00 00 00 
  10018d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100194:	00 00 00 
  100197:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019e:	00 00 00 
  1001a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a8:	00 00 00 
  1001ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b2:	00 00 00 
  1001b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bc:	00 00 00 
  1001bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c6:	00 00 00 
  1001c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d0:	00 00 00 
  1001d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001da:	00 00 00 
  1001dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e4:	00 00 00 
  1001e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ee:	00 00 00 
  1001f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f8:	00 00 00 
  1001fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100202:	00 00 00 
  100205:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020c:	00 00 00 
  10020f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100216:	00 00 00 
  100219:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100220:	00 00 00 
  100223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10022a:	00 00 00 
  10022d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100234:	00 00 00 
  100237:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023e:	00 00 00 
  100241:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100248:	00 00 00 
  10024b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100252:	00 00 00 
  100255:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025c:	00 00 00 
  10025f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100266:	00 00 00 
  100269:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100270:	00 00 00 
  100273:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10027a:	00 00 00 
  10027d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100284:	00 00 00 
  100287:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028e:	00 00 00 
  100291:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100298:	00 00 00 
  10029b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a2:	00 00 00 
  1002a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ac:	00 00 00 
  1002af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b6:	00 00 00 
  1002b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c0:	00 00 00 
  1002c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ca:	00 00 00 
  1002cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d4:	00 00 00 
  1002d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002de:	00 00 00 
  1002e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e8:	00 00 00 
  1002eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f2:	00 00 00 
  1002f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fc:	00 00 00 
  1002ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100306:	00 00 00 
  100309:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100310:	00 00 00 
  100313:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10031a:	00 00 00 
  10031d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100324:	00 00 00 
  100327:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032e:	00 00 00 
  100331:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100338:	00 00 00 
  10033b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100342:	00 00 00 
  100345:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034c:	00 00 00 
  10034f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100356:	00 00 00 
  100359:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100360:	00 00 00 
  100363:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10036a:	00 00 00 
  10036d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100374:	00 00 00 
  100377:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037e:	00 00 00 
  100381:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100388:	00 00 00 
  10038b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100392:	00 00 00 
  100395:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039c:	00 00 00 
  10039f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a6:	00 00 00 
  1003a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b0:	00 00 00 
  1003b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ba:	00 00 00 
  1003bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c4:	00 00 00 
  1003c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ce:	00 00 00 
  1003d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d8:	00 00 00 
  1003db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e2:	00 00 00 
  1003e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ec:	00 00 00 
  1003ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f6:	00 00 00 
  1003f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100400:	00 00 00 
  100403:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10040a:	00 00 00 
  10040d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100414:	00 00 00 
  100417:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041e:	00 00 00 
  100421:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100428:	00 00 00 
  10042b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100432:	00 00 00 
  100435:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043c:	00 00 00 
  10043f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100446:	00 00 00 
  100449:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100450:	00 00 00 
  100453:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10045a:	00 00 00 
  10045d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100464:	00 00 00 
  100467:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046e:	00 00 00 
  100471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100478:	00 00 00 
  10047b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100482:	00 00 00 
  100485:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048c:	00 00 00 
  10048f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100496:	00 00 00 
  100499:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a0:	00 00 00 
  1004a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004aa:	00 00 00 
  1004ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b4:	00 00 00 
  1004b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004be:	00 00 00 
  1004c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c8:	00 00 00 
  1004cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d2:	00 00 00 
  1004d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004dc:	00 00 00 
  1004df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e6:	00 00 00 
  1004e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f0:	00 00 00 
  1004f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004fa:	00 00 00 
  1004fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100504:	00 00 00 
  100507:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050e:	00 00 00 
  100511:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100518:	00 00 00 
  10051b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100522:	00 00 00 
  100525:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052c:	00 00 00 
  10052f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100536:	00 00 00 
  100539:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100540:	00 00 00 
  100543:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10054a:	00 00 00 
  10054d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100554:	00 00 00 
  100557:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055e:	00 00 00 
  100561:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100568:	00 00 00 
  10056b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100572:	00 00 00 
  100575:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057c:	00 00 00 
  10057f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100586:	00 00 00 
  100589:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100590:	00 00 00 
  100593:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10059a:	00 00 00 
  10059d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a4:	00 00 00 
  1005a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ae:	00 00 00 
  1005b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b8:	00 00 00 
  1005bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c2:	00 00 00 
  1005c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cc:	00 00 00 
  1005cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d6:	00 00 00 
  1005d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e0:	00 00 00 
  1005e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ea:	00 00 00 
  1005ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f4:	00 00 00 
  1005f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fe:	00 00 00 
  100601:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100608:	00 00 00 
  10060b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100612:	00 00 00 
  100615:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061c:	00 00 00 
  10061f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100626:	00 00 00 
  100629:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100630:	00 00 00 
  100633:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10063a:	00 00 00 
  10063d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100644:	00 00 00 
  100647:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064e:	00 00 00 
  100651:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100658:	00 00 00 
  10065b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100662:	00 00 00 
  100665:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066c:	00 00 00 
  10066f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100676:	00 00 00 
  100679:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100680:	00 00 00 
  100683:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10068a:	00 00 00 
  10068d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100694:	00 00 00 
  100697:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069e:	00 00 00 
  1006a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a8:	00 00 00 
  1006ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b2:	00 00 00 
  1006b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bc:	00 00 00 
  1006bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c6:	00 00 00 
  1006c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d0:	00 00 00 
  1006d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006da:	00 00 00 
  1006dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e4:	00 00 00 
  1006e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ee:	00 00 00 
  1006f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f8:	00 00 00 
  1006fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100702:	00 00 00 
  100705:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070c:	00 00 00 
  10070f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100716:	00 00 00 
  100719:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100720:	00 00 00 
  100723:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10072a:	00 00 00 
  10072d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100734:	00 00 00 
  100737:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073e:	00 00 00 
  100741:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100748:	00 00 00 
  10074b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100752:	00 00 00 
  100755:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075c:	00 00 00 
  10075f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100766:	00 00 00 
  100769:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100770:	00 00 00 
  100773:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10077a:	00 00 00 
  10077d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100784:	00 00 00 
  100787:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078e:	00 00 00 
  100791:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100798:	00 00 00 
  10079b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a2:	00 00 00 
  1007a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ac:	00 00 00 
  1007af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b6:	00 00 00 
  1007b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c0:	00 00 00 
  1007c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ca:	00 00 00 
  1007cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d4:	00 00 00 
  1007d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007de:	00 00 00 
  1007e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e8:	00 00 00 
  1007eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f2:	00 00 00 
  1007f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fc:	00 00 00 
  1007ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100806:	00 00 00 
  100809:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100810:	00 00 00 
  100813:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10081a:	00 00 00 
  10081d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100824:	00 00 00 
  100827:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082e:	00 00 00 
  100831:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100838:	00 00 00 
  10083b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100842:	00 00 00 
  100845:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084c:	00 00 00 
  10084f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100856:	00 00 00 
  100859:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100860:	00 00 00 
  100863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10086a:	00 00 00 
  10086d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100874:	00 00 00 
  100877:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087e:	00 00 00 
  100881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100888:	00 00 00 
  10088b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100892:	00 00 00 
  100895:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089c:	00 00 00 
  10089f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a6:	00 00 00 
  1008a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b0:	00 00 00 
  1008b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ba:	00 00 00 
  1008bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c4:	00 00 00 
  1008c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ce:	00 00 00 
  1008d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d8:	00 00 00 
  1008db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e2:	00 00 00 
  1008e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ec:	00 00 00 
  1008ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f6:	00 00 00 
  1008f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100900:	00 00 00 
  100903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10090a:	00 00 00 
  10090d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100914:	00 00 00 
  100917:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091e:	00 00 00 
  100921:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100928:	00 00 00 
  10092b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100932:	00 00 00 
  100935:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093c:	00 00 00 
  10093f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100946:	00 00 00 
  100949:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100950:	00 00 00 
  100953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10095a:	00 00 00 
  10095d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100964:	00 00 00 
  100967:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096e:	00 00 00 
  100971:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100978:	00 00 00 
  10097b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100982:	00 00 00 
  100985:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098c:	00 00 00 
  10098f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100996:	00 00 00 
  100999:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a0:	00 00 00 
  1009a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009aa:	00 00 00 
  1009ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b4:	00 00 00 
  1009b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009be:	00 00 00 
  1009c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c8:	00 00 00 
  1009cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d2:	00 00 00 
  1009d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009dc:	00 00 00 
  1009df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e6:	00 00 00 
  1009e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f0:	00 00 00 
  1009f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009fa:	00 00 00 
  1009fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a04:	00 00 00 
  100a07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0e:	00 00 00 
  100a11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a18:	00 00 00 
  100a1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a22:	00 00 00 
  100a25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2c:	00 00 00 
  100a2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a36:	00 00 00 
  100a39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a40:	00 00 00 
  100a43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a4a:	00 00 00 
  100a4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a54:	00 00 00 
  100a57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5e:	00 00 00 
  100a61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a68:	00 00 00 
  100a6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a72:	00 00 00 
  100a75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7c:	00 00 00 
  100a7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a86:	00 00 00 
  100a89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a90:	00 00 00 
  100a93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a9a:	00 00 00 
  100a9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa4:	00 00 00 
  100aa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aae:	00 00 00 
  100ab1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab8:	00 00 00 
  100abb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac2:	00 00 00 
  100ac5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acc:	00 00 00 
  100acf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad6:	00 00 00 
  100ad9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae0:	00 00 00 
  100ae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aea:	00 00 00 
  100aed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af4:	00 00 00 
  100af7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afe:	00 00 00 
  100b01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b08:	00 00 00 
  100b0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b12:	00 00 00 
  100b15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1c:	00 00 00 
  100b1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b26:	00 00 00 
  100b29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b30:	00 00 00 
  100b33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b3a:	00 00 00 
  100b3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b44:	00 00 00 
  100b47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4e:	00 00 00 
  100b51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b58:	00 00 00 
  100b5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b62:	00 00 00 
  100b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6c:	00 00 00 
  100b6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b76:	00 00 00 
  100b79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b80:	00 00 00 
  100b83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b8a:	00 00 00 
  100b8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b94:	00 00 00 
  100b97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9e:	00 00 00 
  100ba1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba8:	00 00 00 
  100bab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb2:	00 00 00 
  100bb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbc:	00 00 00 
  100bbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc6:	00 00 00 
  100bc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd0:	00 00 00 
  100bd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bda:	00 00 00 
  100bdd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be4:	00 00 00 
  100be7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bee:	00 00 00 
  100bf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf8:	00 00 00 
  100bfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c02:	00 00 00 
  100c05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0c:	00 00 00 
  100c0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c16:	00 00 00 
  100c19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c20:	00 00 00 
  100c23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c2a:	00 00 00 
  100c2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c34:	00 00 00 
  100c37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3e:	00 00 00 
  100c41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c48:	00 00 00 
  100c4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c52:	00 00 00 
  100c55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5c:	00 00 00 
  100c5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c66:	00 00 00 
  100c69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c70:	00 00 00 
  100c73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c7a:	00 00 00 
  100c7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c84:	00 00 00 
  100c87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8e:	00 00 00 
  100c91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c98:	00 00 00 
  100c9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca2:	00 00 00 
  100ca5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cac:	00 00 00 
  100caf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb6:	00 00 00 
  100cb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc0:	00 00 00 
  100cc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cca:	00 00 00 
  100ccd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd4:	00 00 00 
  100cd7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cde:	00 00 00 
  100ce1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce8:	00 00 00 
  100ceb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf2:	00 00 00 
  100cf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfc:	00 00 00 
  100cff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d06:	00 00 00 
  100d09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d10:	00 00 00 
  100d13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d1a:	00 00 00 
  100d1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d24:	00 00 00 
  100d27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2e:	00 00 00 
  100d31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d38:	00 00 00 
  100d3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d42:	00 00 00 
  100d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4c:	00 00 00 
  100d4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d56:	00 00 00 
  100d59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d60:	00 00 00 
  100d63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d6a:	00 00 00 
  100d6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d74:	00 00 00 
  100d77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7e:	00 00 00 
  100d81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d88:	00 00 00 
  100d8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d92:	00 00 00 
  100d95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9c:	00 00 00 
  100d9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da6:	00 00 00 
  100da9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db0:	00 00 00 
  100db3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dba:	00 00 00 
  100dbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc4:	00 00 00 
  100dc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dce:	00 00 00 
  100dd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd8:	00 00 00 
  100ddb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de2:	00 00 00 
  100de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dec:	00 00 00 
  100def:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df6:	00 00 00 
  100df9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e00:	00 00 00 
  100e03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e0a:	00 00 00 
  100e0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e14:	00 00 00 
  100e17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1e:	00 00 00 
  100e21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e28:	00 00 00 
  100e2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e32:	00 00 00 
  100e35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3c:	00 00 00 
  100e3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e46:	00 00 00 
  100e49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e50:	00 00 00 
  100e53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e5a:	00 00 00 
  100e5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e64:	00 00 00 
  100e67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6e:	00 00 00 
  100e71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e78:	00 00 00 
  100e7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e82:	00 00 00 
  100e85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8c:	00 00 00 
  100e8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e96:	00 00 00 
  100e99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea0:	00 00 00 
  100ea3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eaa:	00 00 00 
  100ead:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb4:	00 00 00 
  100eb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebe:	00 00 00 
  100ec1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec8:	00 00 00 
  100ecb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed2:	00 00 00 
  100ed5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edc:	00 00 00 
  100edf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee6:	00 00 00 
  100ee9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef0:	00 00 00 
  100ef3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100efa:	00 00 00 
  100efd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f04:	00 00 00 
  100f07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0e:	00 00 00 
  100f11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f18:	00 00 00 
  100f1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f22:	00 00 00 
  100f25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2c:	00 00 00 
  100f2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f36:	00 00 00 
  100f39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f40:	00 00 00 
  100f43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f4a:	00 00 00 
  100f4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f54:	00 00 00 
  100f57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5e:	00 00 00 
  100f61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f68:	00 00 00 
  100f6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f72:	00 00 00 
  100f75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7c:	00 00 00 
  100f7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f86:	00 00 00 
  100f89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f90:	00 00 00 
  100f93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f9a:	00 00 00 
  100f9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa4:	00 00 00 
  100fa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fae:	00 00 00 
  100fb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb8:	00 00 00 
  100fbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc2:	00 00 00 
  100fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcc:	00 00 00 
  100fcf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd6:	00 00 00 
  100fd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe0:	00 00 00 
  100fe3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fea:	00 00 00 
  100fed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff4:	00 00 00 
  100ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  100ffe:	00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 50 23 04 80 	movabs $0x8004235038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 50 23 04 80 	movabs $0x8004235000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 99 00 20 04 80 	movabs $0x8004200099,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004200060:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004200064:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004200067:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420006b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420006e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004200072:	f0 87 02             	lock xchg %eax,(%rdx)
  8004200075:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004200078:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420007b:	c9                   	leaveq 
  800420007c:	c3                   	retq   

000000800420007d <lock_kernel>:
  800420007d:	55                   	push   %rbp
  800420007e:	48 89 e5             	mov    %rsp,%rbp
  8004200081:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004200088:	00 00 00 
  800420008b:	48 b8 55 81 21 04 80 	movabs $0x8004218155,%rax
  8004200092:	00 00 00 
  8004200095:	ff d0                	callq  *%rax
  8004200097:	5d                   	pop    %rbp
  8004200098:	c3                   	retq   

0000008004200099 <i386_init>:
  8004200099:	55                   	push   %rbp
  800420009a:	48 89 e5             	mov    %rsp,%rbp
  800420009d:	48 ba 10 f0 71 04 80 	movabs $0x800471f010,%rdx
  80042000a4:	00 00 00 
  80042000a7:	48 b8 b0 cb 4d 04 80 	movabs $0x80044dcbb0,%rax
  80042000ae:	00 00 00 
  80042000b1:	48 29 c2             	sub    %rax,%rdx
  80042000b4:	48 89 d0             	mov    %rdx,%rax
  80042000b7:	48 89 c2             	mov    %rax,%rdx
  80042000ba:	be 00 00 00 00       	mov    $0x0,%esi
  80042000bf:	48 bf b0 cb 4d 04 80 	movabs $0x80044dcbb0,%rdi
  80042000c6:	00 00 00 
  80042000c9:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  80042000d0:	00 00 00 
  80042000d3:	ff d0                	callq  *%rax
  80042000d5:	48 b8 9a 11 20 04 80 	movabs $0x800420119a,%rax
  80042000dc:	00 00 00 
  80042000df:	ff d0                	callq  *%rax
  80042000e1:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042000e6:	48 bf c0 e8 21 04 80 	movabs $0x800421e8c0,%rdi
  80042000ed:	00 00 00 
  80042000f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042000f5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042000fc:	00 00 00 
  80042000ff:	ff d2                	callq  *%rdx
  8004200101:	48 b8 10 f0 71 04 80 	movabs $0x800471f010,%rax
  8004200108:	00 00 00 
  800420010b:	48 89 c6             	mov    %rax,%rsi
  800420010e:	48 bf 00 00 01 04 80 	movabs $0x8004010000,%rdi
  8004200115:	00 00 00 
  8004200118:	48 b8 e8 67 21 04 80 	movabs $0x80042167e8,%rax
  800420011f:	00 00 00 
  8004200122:	ff d0                	callq  *%rax
  8004200124:	48 ba d0 c5 6d 04 80 	movabs $0x80046dc5d0,%rdx
  800420012b:	00 00 00 
  800420012e:	48 89 02             	mov    %rax,(%rdx)
  8004200131:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200136:	48 ba 31 26 20 04 80 	movabs $0x8004202631,%rdx
  800420013d:	00 00 00 
  8004200140:	ff d2                	callq  *%rdx
  8004200142:	48 b8 61 7f 20 04 80 	movabs $0x8004207f61,%rax
  8004200149:	00 00 00 
  800420014c:	ff d0                	callq  *%rax
  800420014e:	48 b8 ef 9d 20 04 80 	movabs $0x8004209def,%rax
  8004200155:	00 00 00 
  8004200158:	ff d0                	callq  *%rax
  800420015a:	48 b8 75 77 21 04 80 	movabs $0x8004217775,%rax
  8004200161:	00 00 00 
  8004200164:	ff d0                	callq  *%rax
  8004200166:	48 b8 d3 7b 21 04 80 	movabs $0x8004217bd3,%rax
  800420016d:	00 00 00 
  8004200170:	ff d0                	callq  *%rax
  8004200172:	48 b8 77 99 20 04 80 	movabs $0x8004209977,%rax
  8004200179:	00 00 00 
  800420017c:	ff d0                	callq  *%rax
  800420017e:	48 b8 f0 95 21 04 80 	movabs $0x80042195f0,%rax
  8004200185:	00 00 00 
  8004200188:	ff d0                	callq  *%rax
  800420018a:	48 b8 b4 95 21 04 80 	movabs $0x80042195b4,%rax
  8004200191:	00 00 00 
  8004200194:	ff d0                	callq  *%rax
  8004200196:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  800420019d:	00 00 00 
  80042001a0:	ff d0                	callq  *%rax
  80042001a2:	48 b8 fc 01 20 04 80 	movabs $0x80042001fc,%rax
  80042001a9:	00 00 00 
  80042001ac:	ff d0                	callq  *%rax
  80042001ae:	be 01 00 00 00       	mov    $0x1,%esi
  80042001b3:	48 bf 90 f3 2b 04 80 	movabs $0x80042bf390,%rdi
  80042001ba:	00 00 00 
  80042001bd:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  80042001c4:	00 00 00 
  80042001c7:	ff d0                	callq  *%rax
  80042001c9:	be 00 00 00 00       	mov    $0x0,%esi
  80042001ce:	48 bf 60 79 4a 04 80 	movabs $0x80044a7960,%rdi
  80042001d5:	00 00 00 
  80042001d8:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  80042001df:	00 00 00 
  80042001e2:	ff d0                	callq  *%rax
  80042001e4:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042001eb:	00 00 00 
  80042001ee:	ff d0                	callq  *%rax
  80042001f0:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  80042001f7:	00 00 00 
  80042001fa:	ff d0                	callq  *%rax

00000080042001fc <boot_aps>:
  80042001fc:	55                   	push   %rbp
  80042001fd:	48 89 e5             	mov    %rsp,%rbp
  8004200200:	48 83 ec 30          	sub    $0x30,%rsp
  8004200204:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  800420020b:	00 
  800420020c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200210:	48 c1 e8 0c          	shr    $0xc,%rax
  8004200214:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200217:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420021a:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004200221:	00 00 00 
  8004200224:	48 8b 00             	mov    (%rax),%rax
  8004200227:	48 39 c2             	cmp    %rax,%rdx
  800420022a:	72 32                	jb     800420025e <boot_aps+0x62>
  800420022c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200230:	48 89 c1             	mov    %rax,%rcx
  8004200233:	48 ba e0 e8 21 04 80 	movabs $0x800421e8e0,%rdx
  800420023a:	00 00 00 
  800420023d:	be 01 01 00 00       	mov    $0x101,%esi
  8004200242:	48 bf 03 e9 21 04 80 	movabs $0x800421e903,%rdi
  8004200249:	00 00 00 
  800420024c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200251:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200258:	00 00 00 
  800420025b:	41 ff d0             	callq  *%r8
  800420025e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200265:	00 00 00 
  8004200268:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420026c:	48 01 d0             	add    %rdx,%rax
  800420026f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004200273:	48 ba 9e 72 21 04 80 	movabs $0x800421729e,%rdx
  800420027a:	00 00 00 
  800420027d:	48 b8 b8 71 21 04 80 	movabs $0x80042171b8,%rax
  8004200284:	00 00 00 
  8004200287:	48 29 c2             	sub    %rax,%rdx
  800420028a:	48 89 d0             	mov    %rdx,%rax
  800420028d:	48 89 c2             	mov    %rax,%rdx
  8004200290:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200294:	48 be b8 71 21 04 80 	movabs $0x80042171b8,%rsi
  800420029b:	00 00 00 
  800420029e:	48 89 c7             	mov    %rax,%rdi
  80042002a1:	48 b8 53 0e 21 04 80 	movabs $0x8004210e53,%rax
  80042002a8:	00 00 00 
  80042002ab:	ff d0                	callq  *%rax
  80042002ad:	48 b8 20 e0 6d 04 80 	movabs $0x80046de020,%rax
  80042002b4:	00 00 00 
  80042002b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042002bb:	e9 0e 01 00 00       	jmpq   80042003ce <boot_aps+0x1d2>
  80042002c0:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042002c7:	00 00 00 
  80042002ca:	ff d0                	callq  *%rax
  80042002cc:	48 98                	cltq   
  80042002ce:	48 c1 e0 03          	shl    $0x3,%rax
  80042002d2:	48 89 c2             	mov    %rax,%rdx
  80042002d5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042002d9:	48 01 c2             	add    %rax,%rdx
  80042002dc:	48 b8 20 e0 6d 04 80 	movabs $0x80046de020,%rax
  80042002e3:	00 00 00 
  80042002e6:	48 01 d0             	add    %rdx,%rax
  80042002e9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042002ed:	75 05                	jne    80042002f4 <boot_aps+0xf8>
  80042002ef:	e9 d2 00 00 00       	jmpq   80042003c6 <boot_aps+0x1ca>
  80042002f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042002f8:	48 b8 20 e0 6d 04 80 	movabs $0x80046de020,%rax
  80042002ff:	00 00 00 
  8004200302:	48 29 c2             	sub    %rax,%rdx
  8004200305:	48 89 d0             	mov    %rdx,%rax
  8004200308:	48 c1 f8 03          	sar    $0x3,%rax
  800420030c:	48 89 c2             	mov    %rax,%rdx
  800420030f:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200316:	f0 f0 f0 
  8004200319:	48 0f af c2          	imul   %rdx,%rax
  800420031d:	48 83 c0 01          	add    $0x1,%rax
  8004200321:	48 c1 e0 10          	shl    $0x10,%rax
  8004200325:	48 89 c2             	mov    %rax,%rdx
  8004200328:	48 b8 00 f0 6d 04 80 	movabs $0x80046df000,%rax
  800420032f:	00 00 00 
  8004200332:	48 01 c2             	add    %rax,%rdx
  8004200335:	48 b8 e0 c5 6d 04 80 	movabs $0x80046dc5e0,%rax
  800420033c:	00 00 00 
  800420033f:	48 89 10             	mov    %rdx,(%rax)
  8004200342:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200346:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420034a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004200351:	00 00 00 
  8004200354:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200358:	77 32                	ja     800420038c <boot_aps+0x190>
  800420035a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420035e:	48 89 c1             	mov    %rax,%rcx
  8004200361:	48 ba 18 e9 21 04 80 	movabs $0x800421e918,%rdx
  8004200368:	00 00 00 
  800420036b:	be 0b 01 00 00       	mov    $0x10b,%esi
  8004200370:	48 bf 03 e9 21 04 80 	movabs $0x800421e903,%rdi
  8004200377:	00 00 00 
  800420037a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420037f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200386:	00 00 00 
  8004200389:	41 ff d0             	callq  *%r8
  800420038c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004200393:	ff ff ff 
  8004200396:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420039a:	48 01 d0             	add    %rdx,%rax
  800420039d:	89 c2                	mov    %eax,%edx
  800420039f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003a3:	0f b6 00             	movzbl (%rax),%eax
  80042003a6:	0f b6 c0             	movzbl %al,%eax
  80042003a9:	89 d6                	mov    %edx,%esi
  80042003ab:	89 c7                	mov    %eax,%edi
  80042003ad:	48 b8 3a 7e 21 04 80 	movabs $0x8004217e3a,%rax
  80042003b4:	00 00 00 
  80042003b7:	ff d0                	callq  *%rax
  80042003b9:	90                   	nop
  80042003ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003be:	8b 40 04             	mov    0x4(%rax),%eax
  80042003c1:	83 f8 01             	cmp    $0x1,%eax
  80042003c4:	75 f4                	jne    80042003ba <boot_aps+0x1be>
  80042003c6:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042003cd:	00 
  80042003ce:	48 b8 48 e2 6d 04 80 	movabs $0x80046de248,%rax
  80042003d5:	00 00 00 
  80042003d8:	8b 00                	mov    (%rax),%eax
  80042003da:	48 98                	cltq   
  80042003dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042003e0:	48 89 c2             	mov    %rax,%rdx
  80042003e3:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003e7:	48 01 c2             	add    %rax,%rdx
  80042003ea:	48 b8 20 e0 6d 04 80 	movabs $0x80046de020,%rax
  80042003f1:	00 00 00 
  80042003f4:	48 01 d0             	add    %rdx,%rax
  80042003f7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042003fb:	0f 87 bf fe ff ff    	ja     80042002c0 <boot_aps+0xc4>
  8004200401:	c9                   	leaveq 
  8004200402:	c3                   	retq   

0000008004200403 <mp_main>:
  8004200403:	55                   	push   %rbp
  8004200404:	48 89 e5             	mov    %rsp,%rbp
  8004200407:	48 83 ec 10          	sub    $0x10,%rsp
  800420040b:	48 b8 e8 c5 6d 04 80 	movabs $0x80046dc5e8,%rax
  8004200412:	00 00 00 
  8004200415:	48 8b 00             	mov    (%rax),%rax
  8004200418:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420041c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200420:	0f 22 d8             	mov    %rax,%cr3
  8004200423:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420042a:	00 00 00 
  800420042d:	ff d0                	callq  *%rax
  800420042f:	89 c6                	mov    %eax,%esi
  8004200431:	48 bf 3c e9 21 04 80 	movabs $0x800421e93c,%rdi
  8004200438:	00 00 00 
  800420043b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200440:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004200447:	00 00 00 
  800420044a:	ff d2                	callq  *%rdx
  800420044c:	48 b8 d3 7b 21 04 80 	movabs $0x8004217bd3,%rax
  8004200453:	00 00 00 
  8004200456:	ff d0                	callq  *%rax
  8004200458:	48 b8 2e 80 20 04 80 	movabs $0x800420802e,%rax
  800420045f:	00 00 00 
  8004200462:	ff d0                	callq  *%rax
  8004200464:	48 b8 f2 c4 20 04 80 	movabs $0x800420c4f2,%rax
  800420046b:	00 00 00 
  800420046e:	ff d0                	callq  *%rax
  8004200470:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004200477:	00 00 00 
  800420047a:	ff d0                	callq  *%rax
  800420047c:	48 98                	cltq   
  800420047e:	48 c1 e0 03          	shl    $0x3,%rax
  8004200482:	48 89 c2             	mov    %rax,%rdx
  8004200485:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200489:	48 01 d0             	add    %rdx,%rax
  800420048c:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004200493:	00 00 00 
  8004200496:	48 01 d0             	add    %rdx,%rax
  8004200499:	48 83 c0 04          	add    $0x4,%rax
  800420049d:	be 01 00 00 00       	mov    $0x1,%esi
  80042004a2:	48 89 c7             	mov    %rax,%rdi
  80042004a5:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  80042004ac:	00 00 00 
  80042004af:	ff d0                	callq  *%rax
  80042004b1:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  80042004b8:	00 00 00 
  80042004bb:	ff d0                	callq  *%rax
  80042004bd:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  80042004c4:	00 00 00 
  80042004c7:	ff d0                	callq  *%rax

00000080042004c9 <_panic>:
  80042004c9:	55                   	push   %rbp
  80042004ca:	48 89 e5             	mov    %rsp,%rbp
  80042004cd:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042004d4:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042004db:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042004e1:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042004e8:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042004ef:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042004f6:	84 c0                	test   %al,%al
  80042004f8:	74 20                	je     800420051a <_panic+0x51>
  80042004fa:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042004fe:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200502:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200506:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420050a:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420050e:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200512:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200516:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420051a:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200521:	48 b8 d8 c5 6d 04 80 	movabs $0x80046dc5d8,%rax
  8004200528:	00 00 00 
  800420052b:	48 8b 00             	mov    (%rax),%rax
  800420052e:	48 85 c0             	test   %rax,%rax
  8004200531:	74 05                	je     8004200538 <_panic+0x6f>
  8004200533:	e9 b5 00 00 00       	jmpq   80042005ed <_panic+0x124>
  8004200538:	48 b8 d8 c5 6d 04 80 	movabs $0x80046dc5d8,%rax
  800420053f:	00 00 00 
  8004200542:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200549:	48 89 10             	mov    %rdx,(%rax)
  800420054c:	fa                   	cli    
  800420054d:	fc                   	cld    
  800420054e:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200555:	00 00 00 
  8004200558:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420055f:	00 00 00 
  8004200562:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200566:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420056d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200574:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420057b:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004200582:	00 00 00 
  8004200585:	ff d0                	callq  *%rax
  8004200587:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  800420058d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004200594:	89 c6                	mov    %eax,%esi
  8004200596:	48 bf 58 e9 21 04 80 	movabs $0x800421e958,%rdi
  800420059d:	00 00 00 
  80042005a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005a5:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  80042005ac:	00 00 00 
  80042005af:	41 ff d0             	callq  *%r8
  80042005b2:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042005b9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042005c0:	48 89 d6             	mov    %rdx,%rsi
  80042005c3:	48 89 c7             	mov    %rax,%rdi
  80042005c6:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  80042005cd:	00 00 00 
  80042005d0:	ff d0                	callq  *%rax
  80042005d2:	48 bf 7a e9 21 04 80 	movabs $0x800421e97a,%rdi
  80042005d9:	00 00 00 
  80042005dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005e1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042005e8:	00 00 00 
  80042005eb:	ff d2                	callq  *%rdx
  80042005ed:	bf 00 00 00 00       	mov    $0x0,%edi
  80042005f2:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  80042005f9:	00 00 00 
  80042005fc:	ff d0                	callq  *%rax
  80042005fe:	eb ed                	jmp    80042005ed <_panic+0x124>

0000008004200600 <_warn>:
  8004200600:	55                   	push   %rbp
  8004200601:	48 89 e5             	mov    %rsp,%rbp
  8004200604:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420060b:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  8004200612:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200618:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420061f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200626:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420062d:	84 c0                	test   %al,%al
  800420062f:	74 20                	je     8004200651 <_warn+0x51>
  8004200631:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200635:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200639:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420063d:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200641:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200645:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200649:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420064d:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200651:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200658:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420065f:	00 00 00 
  8004200662:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200669:	00 00 00 
  800420066c:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200670:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200677:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420067e:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200685:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800420068b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004200692:	48 89 c6             	mov    %rax,%rsi
  8004200695:	48 bf 7c e9 21 04 80 	movabs $0x800421e97c,%rdi
  800420069c:	00 00 00 
  800420069f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006a4:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042006ab:	00 00 00 
  80042006ae:	ff d1                	callq  *%rcx
  80042006b0:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006b7:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006be:	48 89 d6             	mov    %rdx,%rsi
  80042006c1:	48 89 c7             	mov    %rax,%rdi
  80042006c4:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  80042006cb:	00 00 00 
  80042006ce:	ff d0                	callq  *%rax
  80042006d0:	48 bf 7a e9 21 04 80 	movabs $0x800421e97a,%rdi
  80042006d7:	00 00 00 
  80042006da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006df:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042006e6:	00 00 00 
  80042006e9:	ff d2                	callq  *%rdx
  80042006eb:	c9                   	leaveq 
  80042006ec:	c3                   	retq   

00000080042006ed <delay>:
  80042006ed:	55                   	push   %rbp
  80042006ee:	48 89 e5             	mov    %rsp,%rbp
  80042006f1:	48 83 ec 20          	sub    $0x20,%rsp
  80042006f5:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042006fc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042006ff:	89 c2                	mov    %eax,%edx
  8004200701:	ec                   	in     (%dx),%al
  8004200702:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200705:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  800420070c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420070f:	89 c2                	mov    %eax,%edx
  8004200711:	ec                   	in     (%dx),%al
  8004200712:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200715:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  800420071c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420071f:	89 c2                	mov    %eax,%edx
  8004200721:	ec                   	in     (%dx),%al
  8004200722:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200725:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  800420072c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420072f:	89 c2                	mov    %eax,%edx
  8004200731:	ec                   	in     (%dx),%al
  8004200732:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200735:	c9                   	leaveq 
  8004200736:	c3                   	retq   

0000008004200737 <serial_proc_data>:
  8004200737:	55                   	push   %rbp
  8004200738:	48 89 e5             	mov    %rsp,%rbp
  800420073b:	48 83 ec 10          	sub    $0x10,%rsp
  800420073f:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200746:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200749:	89 c2                	mov    %eax,%edx
  800420074b:	ec                   	in     (%dx),%al
  800420074c:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420074f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200753:	0f b6 c0             	movzbl %al,%eax
  8004200756:	83 e0 01             	and    $0x1,%eax
  8004200759:	85 c0                	test   %eax,%eax
  800420075b:	75 07                	jne    8004200764 <serial_proc_data+0x2d>
  800420075d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200762:	eb 17                	jmp    800420077b <serial_proc_data+0x44>
  8004200764:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800420076b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420076e:	89 c2                	mov    %eax,%edx
  8004200770:	ec                   	in     (%dx),%al
  8004200771:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200774:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200778:	0f b6 c0             	movzbl %al,%eax
  800420077b:	c9                   	leaveq 
  800420077c:	c3                   	retq   

000000800420077d <serial_intr>:
  800420077d:	55                   	push   %rbp
  800420077e:	48 89 e5             	mov    %rsp,%rbp
  8004200781:	48 b8 00 d0 4d 04 80 	movabs $0x80044dd000,%rax
  8004200788:	00 00 00 
  800420078b:	0f b6 00             	movzbl (%rax),%eax
  800420078e:	84 c0                	test   %al,%al
  8004200790:	74 16                	je     80042007a8 <serial_intr+0x2b>
  8004200792:	48 bf 37 07 20 04 80 	movabs $0x8004200737,%rdi
  8004200799:	00 00 00 
  800420079c:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  80042007a3:	00 00 00 
  80042007a6:	ff d0                	callq  *%rax
  80042007a8:	5d                   	pop    %rbp
  80042007a9:	c3                   	retq   

00000080042007aa <serial_putc>:
  80042007aa:	55                   	push   %rbp
  80042007ab:	48 89 e5             	mov    %rsp,%rbp
  80042007ae:	48 83 ec 28          	sub    $0x28,%rsp
  80042007b2:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042007b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042007bc:	eb 10                	jmp    80042007ce <serial_putc+0x24>
  80042007be:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  80042007c5:	00 00 00 
  80042007c8:	ff d0                	callq  *%rax
  80042007ca:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042007ce:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042007d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042007d8:	89 c2                	mov    %eax,%edx
  80042007da:	ec                   	in     (%dx),%al
  80042007db:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042007de:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042007e2:	0f b6 c0             	movzbl %al,%eax
  80042007e5:	83 e0 20             	and    $0x20,%eax
  80042007e8:	85 c0                	test   %eax,%eax
  80042007ea:	75 09                	jne    80042007f5 <serial_putc+0x4b>
  80042007ec:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  80042007f3:	7e c9                	jle    80042007be <serial_putc+0x14>
  80042007f5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042007f8:	0f b6 c0             	movzbl %al,%eax
  80042007fb:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  8004200802:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200805:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200809:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420080c:	ee                   	out    %al,(%dx)
  800420080d:	c9                   	leaveq 
  800420080e:	c3                   	retq   

000000800420080f <serial_init>:
  800420080f:	55                   	push   %rbp
  8004200810:	48 89 e5             	mov    %rsp,%rbp
  8004200813:	48 83 ec 50          	sub    $0x50,%rsp
  8004200817:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  800420081e:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  8004200822:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200826:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200829:	ee                   	out    %al,(%dx)
  800420082a:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  8004200831:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200835:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200839:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420083c:	ee                   	out    %al,(%dx)
  800420083d:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  8004200844:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200848:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  800420084c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420084f:	ee                   	out    %al,(%dx)
  8004200850:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200857:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  800420085b:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420085f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200862:	ee                   	out    %al,(%dx)
  8004200863:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  800420086a:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  800420086e:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200872:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200875:	ee                   	out    %al,(%dx)
  8004200876:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  800420087d:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  8004200881:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200885:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004200888:	ee                   	out    %al,(%dx)
  8004200889:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  8004200890:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  8004200894:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004200898:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420089b:	ee                   	out    %al,(%dx)
  800420089c:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008a3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042008a6:	89 c2                	mov    %eax,%edx
  80042008a8:	ec                   	in     (%dx),%al
  80042008a9:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042008ac:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042008b0:	3c ff                	cmp    $0xff,%al
  80042008b2:	0f 95 c2             	setne  %dl
  80042008b5:	48 b8 00 d0 4d 04 80 	movabs $0x80044dd000,%rax
  80042008bc:	00 00 00 
  80042008bf:	88 10                	mov    %dl,(%rax)
  80042008c1:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008c8:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042008cb:	89 c2                	mov    %eax,%edx
  80042008cd:	ec                   	in     (%dx),%al
  80042008ce:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042008d1:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042008d8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042008db:	89 c2                	mov    %eax,%edx
  80042008dd:	ec                   	in     (%dx),%al
  80042008de:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042008e1:	48 b8 00 d0 4d 04 80 	movabs $0x80044dd000,%rax
  80042008e8:	00 00 00 
  80042008eb:	0f b6 00             	movzbl (%rax),%eax
  80042008ee:	84 c0                	test   %al,%al
  80042008f0:	74 23                	je     8004200915 <serial_init+0x106>
  80042008f2:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  80042008f9:	00 00 00 
  80042008fc:	0f b7 00             	movzwl (%rax),%eax
  80042008ff:	0f b7 c0             	movzwl %ax,%eax
  8004200902:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200907:	89 c7                	mov    %eax,%edi
  8004200909:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004200910:	00 00 00 
  8004200913:	ff d0                	callq  *%rax
  8004200915:	c9                   	leaveq 
  8004200916:	c3                   	retq   

0000008004200917 <lpt_putc>:
  8004200917:	55                   	push   %rbp
  8004200918:	48 89 e5             	mov    %rsp,%rbp
  800420091b:	48 83 ec 38          	sub    $0x38,%rsp
  800420091f:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200922:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200929:	eb 10                	jmp    800420093b <lpt_putc+0x24>
  800420092b:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  8004200932:	00 00 00 
  8004200935:	ff d0                	callq  *%rax
  8004200937:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420093b:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200942:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200945:	89 c2                	mov    %eax,%edx
  8004200947:	ec                   	in     (%dx),%al
  8004200948:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  800420094b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420094f:	84 c0                	test   %al,%al
  8004200951:	78 09                	js     800420095c <lpt_putc+0x45>
  8004200953:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420095a:	7e cf                	jle    800420092b <lpt_putc+0x14>
  800420095c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420095f:	0f b6 c0             	movzbl %al,%eax
  8004200962:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200969:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800420096c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200970:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200973:	ee                   	out    %al,(%dx)
  8004200974:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  800420097b:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  800420097f:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200983:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200986:	ee                   	out    %al,(%dx)
  8004200987:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  800420098e:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  8004200992:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200996:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200999:	ee                   	out    %al,(%dx)
  800420099a:	c9                   	leaveq 
  800420099b:	c3                   	retq   

000000800420099c <cga_init>:
  800420099c:	55                   	push   %rbp
  800420099d:	48 89 e5             	mov    %rsp,%rbp
  80042009a0:	48 83 ec 30          	sub    $0x30,%rsp
  80042009a4:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  80042009ab:	00 00 00 
  80042009ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009b6:	0f b7 00             	movzwl (%rax),%eax
  80042009b9:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  80042009bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009c1:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  80042009c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009ca:	0f b7 00             	movzwl (%rax),%eax
  80042009cd:	66 3d 5a a5          	cmp    $0xa55a,%ax
  80042009d1:	74 20                	je     80042009f3 <cga_init+0x57>
  80042009d3:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  80042009da:	00 00 00 
  80042009dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009e1:	48 b8 04 d0 4d 04 80 	movabs $0x80044dd004,%rax
  80042009e8:	00 00 00 
  80042009eb:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  80042009f1:	eb 1b                	jmp    8004200a0e <cga_init+0x72>
  80042009f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009f7:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  80042009fb:	66 89 10             	mov    %dx,(%rax)
  80042009fe:	48 b8 04 d0 4d 04 80 	movabs $0x80044dd004,%rax
  8004200a05:	00 00 00 
  8004200a08:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200a0e:	48 b8 04 d0 4d 04 80 	movabs $0x80044dd004,%rax
  8004200a15:	00 00 00 
  8004200a18:	8b 00                	mov    (%rax),%eax
  8004200a1a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200a1d:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200a21:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200a25:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200a28:	ee                   	out    %al,(%dx)
  8004200a29:	48 b8 04 d0 4d 04 80 	movabs $0x80044dd004,%rax
  8004200a30:	00 00 00 
  8004200a33:	8b 00                	mov    (%rax),%eax
  8004200a35:	83 c0 01             	add    $0x1,%eax
  8004200a38:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a3b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200a3e:	89 c2                	mov    %eax,%edx
  8004200a40:	ec                   	in     (%dx),%al
  8004200a41:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200a44:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200a48:	0f b6 c0             	movzbl %al,%eax
  8004200a4b:	c1 e0 08             	shl    $0x8,%eax
  8004200a4e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200a51:	48 b8 04 d0 4d 04 80 	movabs $0x80044dd004,%rax
  8004200a58:	00 00 00 
  8004200a5b:	8b 00                	mov    (%rax),%eax
  8004200a5d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200a60:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a64:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200a68:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200a6b:	ee                   	out    %al,(%dx)
  8004200a6c:	48 b8 04 d0 4d 04 80 	movabs $0x80044dd004,%rax
  8004200a73:	00 00 00 
  8004200a76:	8b 00                	mov    (%rax),%eax
  8004200a78:	83 c0 01             	add    $0x1,%eax
  8004200a7b:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a7e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200a81:	89 c2                	mov    %eax,%edx
  8004200a83:	ec                   	in     (%dx),%al
  8004200a84:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200a87:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200a8b:	0f b6 c0             	movzbl %al,%eax
  8004200a8e:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200a91:	48 b8 08 d0 4d 04 80 	movabs $0x80044dd008,%rax
  8004200a98:	00 00 00 
  8004200a9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200a9f:	48 89 10             	mov    %rdx,(%rax)
  8004200aa2:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200aa5:	89 c2                	mov    %eax,%edx
  8004200aa7:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200aae:	00 00 00 
  8004200ab1:	66 89 10             	mov    %dx,(%rax)
  8004200ab4:	c9                   	leaveq 
  8004200ab5:	c3                   	retq   

0000008004200ab6 <cga_putc>:
  8004200ab6:	55                   	push   %rbp
  8004200ab7:	48 89 e5             	mov    %rsp,%rbp
  8004200aba:	48 83 ec 40          	sub    $0x40,%rsp
  8004200abe:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200ac1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ac4:	b0 00                	mov    $0x0,%al
  8004200ac6:	85 c0                	test   %eax,%eax
  8004200ac8:	75 07                	jne    8004200ad1 <cga_putc+0x1b>
  8004200aca:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200ad1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ad4:	0f b6 c0             	movzbl %al,%eax
  8004200ad7:	83 f8 09             	cmp    $0x9,%eax
  8004200ada:	0f 84 f6 00 00 00    	je     8004200bd6 <cga_putc+0x120>
  8004200ae0:	83 f8 09             	cmp    $0x9,%eax
  8004200ae3:	7f 0a                	jg     8004200aef <cga_putc+0x39>
  8004200ae5:	83 f8 08             	cmp    $0x8,%eax
  8004200ae8:	74 18                	je     8004200b02 <cga_putc+0x4c>
  8004200aea:	e9 3e 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200aef:	83 f8 0a             	cmp    $0xa,%eax
  8004200af2:	74 75                	je     8004200b69 <cga_putc+0xb3>
  8004200af4:	83 f8 0d             	cmp    $0xd,%eax
  8004200af7:	0f 84 89 00 00 00    	je     8004200b86 <cga_putc+0xd0>
  8004200afd:	e9 2b 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200b02:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200b09:	00 00 00 
  8004200b0c:	0f b7 00             	movzwl (%rax),%eax
  8004200b0f:	66 85 c0             	test   %ax,%ax
  8004200b12:	74 50                	je     8004200b64 <cga_putc+0xae>
  8004200b14:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200b1b:	00 00 00 
  8004200b1e:	0f b7 00             	movzwl (%rax),%eax
  8004200b21:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200b24:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200b2b:	00 00 00 
  8004200b2e:	66 89 10             	mov    %dx,(%rax)
  8004200b31:	48 b8 08 d0 4d 04 80 	movabs $0x80044dd008,%rax
  8004200b38:	00 00 00 
  8004200b3b:	48 8b 10             	mov    (%rax),%rdx
  8004200b3e:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200b45:	00 00 00 
  8004200b48:	0f b7 00             	movzwl (%rax),%eax
  8004200b4b:	0f b7 c0             	movzwl %ax,%eax
  8004200b4e:	48 01 c0             	add    %rax,%rax
  8004200b51:	48 01 c2             	add    %rax,%rdx
  8004200b54:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200b57:	b0 00                	mov    $0x0,%al
  8004200b59:	83 c8 20             	or     $0x20,%eax
  8004200b5c:	66 89 02             	mov    %ax,(%rdx)
  8004200b5f:	e9 04 01 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b64:	e9 ff 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b69:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200b70:	00 00 00 
  8004200b73:	0f b7 00             	movzwl (%rax),%eax
  8004200b76:	8d 50 50             	lea    0x50(%rax),%edx
  8004200b79:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200b80:	00 00 00 
  8004200b83:	66 89 10             	mov    %dx,(%rax)
  8004200b86:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200b8d:	00 00 00 
  8004200b90:	0f b7 30             	movzwl (%rax),%esi
  8004200b93:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200b9a:	00 00 00 
  8004200b9d:	0f b7 08             	movzwl (%rax),%ecx
  8004200ba0:	0f b7 c1             	movzwl %cx,%eax
  8004200ba3:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200ba9:	c1 e8 10             	shr    $0x10,%eax
  8004200bac:	89 c2                	mov    %eax,%edx
  8004200bae:	66 c1 ea 06          	shr    $0x6,%dx
  8004200bb2:	89 d0                	mov    %edx,%eax
  8004200bb4:	c1 e0 02             	shl    $0x2,%eax
  8004200bb7:	01 d0                	add    %edx,%eax
  8004200bb9:	c1 e0 04             	shl    $0x4,%eax
  8004200bbc:	29 c1                	sub    %eax,%ecx
  8004200bbe:	89 ca                	mov    %ecx,%edx
  8004200bc0:	29 d6                	sub    %edx,%esi
  8004200bc2:	89 f2                	mov    %esi,%edx
  8004200bc4:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200bcb:	00 00 00 
  8004200bce:	66 89 10             	mov    %dx,(%rax)
  8004200bd1:	e9 92 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200bd6:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bdb:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200be2:	00 00 00 
  8004200be5:	ff d0                	callq  *%rax
  8004200be7:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bec:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200bf3:	00 00 00 
  8004200bf6:	ff d0                	callq  *%rax
  8004200bf8:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bfd:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c04:	00 00 00 
  8004200c07:	ff d0                	callq  *%rax
  8004200c09:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c0e:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c15:	00 00 00 
  8004200c18:	ff d0                	callq  *%rax
  8004200c1a:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c1f:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c26:	00 00 00 
  8004200c29:	ff d0                	callq  *%rax
  8004200c2b:	eb 3b                	jmp    8004200c68 <cga_putc+0x1b2>
  8004200c2d:	48 b8 08 d0 4d 04 80 	movabs $0x80044dd008,%rax
  8004200c34:	00 00 00 
  8004200c37:	48 8b 30             	mov    (%rax),%rsi
  8004200c3a:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200c41:	00 00 00 
  8004200c44:	0f b7 00             	movzwl (%rax),%eax
  8004200c47:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200c4a:	48 ba 10 d0 4d 04 80 	movabs $0x80044dd010,%rdx
  8004200c51:	00 00 00 
  8004200c54:	66 89 0a             	mov    %cx,(%rdx)
  8004200c57:	0f b7 c0             	movzwl %ax,%eax
  8004200c5a:	48 01 c0             	add    %rax,%rax
  8004200c5d:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200c61:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c64:	66 89 02             	mov    %ax,(%rdx)
  8004200c67:	90                   	nop
  8004200c68:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200c6f:	00 00 00 
  8004200c72:	0f b7 00             	movzwl (%rax),%eax
  8004200c75:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200c79:	0f 86 89 00 00 00    	jbe    8004200d08 <cga_putc+0x252>
  8004200c7f:	48 b8 08 d0 4d 04 80 	movabs $0x80044dd008,%rax
  8004200c86:	00 00 00 
  8004200c89:	48 8b 00             	mov    (%rax),%rax
  8004200c8c:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200c93:	48 b8 08 d0 4d 04 80 	movabs $0x80044dd008,%rax
  8004200c9a:	00 00 00 
  8004200c9d:	48 8b 00             	mov    (%rax),%rax
  8004200ca0:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200ca5:	48 89 ce             	mov    %rcx,%rsi
  8004200ca8:	48 89 c7             	mov    %rax,%rdi
  8004200cab:	48 b8 53 0e 21 04 80 	movabs $0x8004210e53,%rax
  8004200cb2:	00 00 00 
  8004200cb5:	ff d0                	callq  *%rax
  8004200cb7:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200cbe:	eb 22                	jmp    8004200ce2 <cga_putc+0x22c>
  8004200cc0:	48 b8 08 d0 4d 04 80 	movabs $0x80044dd008,%rax
  8004200cc7:	00 00 00 
  8004200cca:	48 8b 00             	mov    (%rax),%rax
  8004200ccd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200cd0:	48 63 d2             	movslq %edx,%rdx
  8004200cd3:	48 01 d2             	add    %rdx,%rdx
  8004200cd6:	48 01 d0             	add    %rdx,%rax
  8004200cd9:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200cde:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200ce2:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200ce9:	7e d5                	jle    8004200cc0 <cga_putc+0x20a>
  8004200ceb:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200cf2:	00 00 00 
  8004200cf5:	0f b7 00             	movzwl (%rax),%eax
  8004200cf8:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200cfb:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200d02:	00 00 00 
  8004200d05:	66 89 10             	mov    %dx,(%rax)
  8004200d08:	48 b8 04 d0 4d 04 80 	movabs $0x80044dd004,%rax
  8004200d0f:	00 00 00 
  8004200d12:	8b 00                	mov    (%rax),%eax
  8004200d14:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200d17:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200d1b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200d1f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200d22:	ee                   	out    %al,(%dx)
  8004200d23:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200d2a:	00 00 00 
  8004200d2d:	0f b7 00             	movzwl (%rax),%eax
  8004200d30:	66 c1 e8 08          	shr    $0x8,%ax
  8004200d34:	0f b6 c0             	movzbl %al,%eax
  8004200d37:	48 ba 04 d0 4d 04 80 	movabs $0x80044dd004,%rdx
  8004200d3e:	00 00 00 
  8004200d41:	8b 12                	mov    (%rdx),%edx
  8004200d43:	83 c2 01             	add    $0x1,%edx
  8004200d46:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200d49:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200d4c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200d50:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200d53:	ee                   	out    %al,(%dx)
  8004200d54:	48 b8 04 d0 4d 04 80 	movabs $0x80044dd004,%rax
  8004200d5b:	00 00 00 
  8004200d5e:	8b 00                	mov    (%rax),%eax
  8004200d60:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200d63:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200d67:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200d6b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200d6e:	ee                   	out    %al,(%dx)
  8004200d6f:	48 b8 10 d0 4d 04 80 	movabs $0x80044dd010,%rax
  8004200d76:	00 00 00 
  8004200d79:	0f b7 00             	movzwl (%rax),%eax
  8004200d7c:	0f b6 c0             	movzbl %al,%eax
  8004200d7f:	48 ba 04 d0 4d 04 80 	movabs $0x80044dd004,%rdx
  8004200d86:	00 00 00 
  8004200d89:	8b 12                	mov    (%rdx),%edx
  8004200d8b:	83 c2 01             	add    $0x1,%edx
  8004200d8e:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200d91:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200d94:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200d98:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200d9b:	ee                   	out    %al,(%dx)
  8004200d9c:	c9                   	leaveq 
  8004200d9d:	c3                   	retq   

0000008004200d9e <kbd_proc_data>:
  8004200d9e:	55                   	push   %rbp
  8004200d9f:	48 89 e5             	mov    %rsp,%rbp
  8004200da2:	48 83 ec 20          	sub    $0x20,%rsp
  8004200da6:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dad:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200db0:	89 c2                	mov    %eax,%edx
  8004200db2:	ec                   	in     (%dx),%al
  8004200db3:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200db6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200dba:	0f b6 c0             	movzbl %al,%eax
  8004200dbd:	83 e0 01             	and    $0x1,%eax
  8004200dc0:	85 c0                	test   %eax,%eax
  8004200dc2:	75 0a                	jne    8004200dce <kbd_proc_data+0x30>
  8004200dc4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200dc9:	e9 fc 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200dce:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dd5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200dd8:	89 c2                	mov    %eax,%edx
  8004200dda:	ec                   	in     (%dx),%al
  8004200ddb:	88 45 eb             	mov    %al,-0x15(%rbp)
	return data;
  8004200dde:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200de2:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200de5:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200de9:	75 27                	jne    8004200e12 <kbd_proc_data+0x74>
  8004200deb:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200df2:	00 00 00 
  8004200df5:	8b 00                	mov    (%rax),%eax
  8004200df7:	83 c8 40             	or     $0x40,%eax
  8004200dfa:	89 c2                	mov    %eax,%edx
  8004200dfc:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200e03:	00 00 00 
  8004200e06:	89 10                	mov    %edx,(%rax)
  8004200e08:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e0d:	e9 b8 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e12:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e16:	84 c0                	test   %al,%al
  8004200e18:	79 65                	jns    8004200e7f <kbd_proc_data+0xe1>
  8004200e1a:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200e21:	00 00 00 
  8004200e24:	8b 00                	mov    (%rax),%eax
  8004200e26:	83 e0 40             	and    $0x40,%eax
  8004200e29:	85 c0                	test   %eax,%eax
  8004200e2b:	75 09                	jne    8004200e36 <kbd_proc_data+0x98>
  8004200e2d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e31:	83 e0 7f             	and    $0x7f,%eax
  8004200e34:	eb 04                	jmp    8004200e3a <kbd_proc_data+0x9c>
  8004200e36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e3a:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200e3d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e41:	48 ba 60 50 23 04 80 	movabs $0x8004235060,%rdx
  8004200e48:	00 00 00 
  8004200e4b:	48 98                	cltq   
  8004200e4d:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200e51:	83 c8 40             	or     $0x40,%eax
  8004200e54:	0f b6 c0             	movzbl %al,%eax
  8004200e57:	f7 d0                	not    %eax
  8004200e59:	89 c2                	mov    %eax,%edx
  8004200e5b:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200e62:	00 00 00 
  8004200e65:	8b 00                	mov    (%rax),%eax
  8004200e67:	21 c2                	and    %eax,%edx
  8004200e69:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200e70:	00 00 00 
  8004200e73:	89 10                	mov    %edx,(%rax)
  8004200e75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e7a:	e9 4b 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e7f:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200e86:	00 00 00 
  8004200e89:	8b 00                	mov    (%rax),%eax
  8004200e8b:	83 e0 40             	and    $0x40,%eax
  8004200e8e:	85 c0                	test   %eax,%eax
  8004200e90:	74 21                	je     8004200eb3 <kbd_proc_data+0x115>
  8004200e92:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200e96:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200e9d:	00 00 00 
  8004200ea0:	8b 00                	mov    (%rax),%eax
  8004200ea2:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200ea5:	89 c2                	mov    %eax,%edx
  8004200ea7:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200eae:	00 00 00 
  8004200eb1:	89 10                	mov    %edx,(%rax)
  8004200eb3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200eb7:	48 ba 60 50 23 04 80 	movabs $0x8004235060,%rdx
  8004200ebe:	00 00 00 
  8004200ec1:	48 98                	cltq   
  8004200ec3:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ec7:	0f b6 d0             	movzbl %al,%edx
  8004200eca:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200ed1:	00 00 00 
  8004200ed4:	8b 00                	mov    (%rax),%eax
  8004200ed6:	09 c2                	or     %eax,%edx
  8004200ed8:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200edf:	00 00 00 
  8004200ee2:	89 10                	mov    %edx,(%rax)
  8004200ee4:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200ee8:	48 ba 60 51 23 04 80 	movabs $0x8004235160,%rdx
  8004200eef:	00 00 00 
  8004200ef2:	48 98                	cltq   
  8004200ef4:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ef8:	0f b6 d0             	movzbl %al,%edx
  8004200efb:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200f02:	00 00 00 
  8004200f05:	8b 00                	mov    (%rax),%eax
  8004200f07:	31 c2                	xor    %eax,%edx
  8004200f09:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200f10:	00 00 00 
  8004200f13:	89 10                	mov    %edx,(%rax)
  8004200f15:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200f1c:	00 00 00 
  8004200f1f:	8b 00                	mov    (%rax),%eax
  8004200f21:	83 e0 03             	and    $0x3,%eax
  8004200f24:	89 c2                	mov    %eax,%edx
  8004200f26:	48 b8 60 55 23 04 80 	movabs $0x8004235560,%rax
  8004200f2d:	00 00 00 
  8004200f30:	89 d2                	mov    %edx,%edx
  8004200f32:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004200f36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f3a:	48 01 d0             	add    %rdx,%rax
  8004200f3d:	0f b6 00             	movzbl (%rax),%eax
  8004200f40:	0f b6 c0             	movzbl %al,%eax
  8004200f43:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004200f46:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200f4d:	00 00 00 
  8004200f50:	8b 00                	mov    (%rax),%eax
  8004200f52:	83 e0 08             	and    $0x8,%eax
  8004200f55:	85 c0                	test   %eax,%eax
  8004200f57:	74 22                	je     8004200f7b <kbd_proc_data+0x1dd>
  8004200f59:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004200f5d:	7e 0c                	jle    8004200f6b <kbd_proc_data+0x1cd>
  8004200f5f:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  8004200f63:	7f 06                	jg     8004200f6b <kbd_proc_data+0x1cd>
  8004200f65:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004200f69:	eb 10                	jmp    8004200f7b <kbd_proc_data+0x1dd>
  8004200f6b:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  8004200f6f:	7e 0a                	jle    8004200f7b <kbd_proc_data+0x1dd>
  8004200f71:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004200f75:	7f 04                	jg     8004200f7b <kbd_proc_data+0x1dd>
  8004200f77:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004200f7b:	48 b8 28 d2 4d 04 80 	movabs $0x80044dd228,%rax
  8004200f82:	00 00 00 
  8004200f85:	8b 00                	mov    (%rax),%eax
  8004200f87:	f7 d0                	not    %eax
  8004200f89:	83 e0 06             	and    $0x6,%eax
  8004200f8c:	85 c0                	test   %eax,%eax
  8004200f8e:	75 37                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f90:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  8004200f97:	75 2e                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f99:	48 bf 96 e9 21 04 80 	movabs $0x800421e996,%rdi
  8004200fa0:	00 00 00 
  8004200fa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200fa8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004200faf:	00 00 00 
  8004200fb2:	ff d2                	callq  *%rdx
  8004200fb4:	c7 45 e4 92 00 00 00 	movl   $0x92,-0x1c(%rbp)
  8004200fbb:	c6 45 e3 03          	movb   $0x3,-0x1d(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200fbf:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200fc3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200fc6:	ee                   	out    %al,(%dx)
  8004200fc7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200fca:	c9                   	leaveq 
  8004200fcb:	c3                   	retq   

0000008004200fcc <kbd_intr>:
  8004200fcc:	55                   	push   %rbp
  8004200fcd:	48 89 e5             	mov    %rsp,%rbp
  8004200fd0:	48 bf 9e 0d 20 04 80 	movabs $0x8004200d9e,%rdi
  8004200fd7:	00 00 00 
  8004200fda:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  8004200fe1:	00 00 00 
  8004200fe4:	ff d0                	callq  *%rax
  8004200fe6:	5d                   	pop    %rbp
  8004200fe7:	c3                   	retq   

0000008004200fe8 <kbd_init>:
  8004200fe8:	55                   	push   %rbp
  8004200fe9:	48 89 e5             	mov    %rsp,%rbp
  8004200fec:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  8004200ff3:	00 00 00 
  8004200ff6:	ff d0                	callq  *%rax
  8004200ff8:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004200fff:	00 00 00 
  8004201002:	0f b7 00             	movzwl (%rax),%eax
  8004201005:	0f b7 c0             	movzwl %ax,%eax
  8004201008:	25 fd ff 00 00       	and    $0xfffd,%eax
  800420100d:	89 c7                	mov    %eax,%edi
  800420100f:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004201016:	00 00 00 
  8004201019:	ff d0                	callq  *%rax
  800420101b:	5d                   	pop    %rbp
  800420101c:	c3                   	retq   

000000800420101d <cons_intr>:
  800420101d:	55                   	push   %rbp
  800420101e:	48 89 e5             	mov    %rsp,%rbp
  8004201021:	48 83 ec 20          	sub    $0x20,%rsp
  8004201025:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201029:	eb 6a                	jmp    8004201095 <cons_intr+0x78>
  800420102b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420102f:	75 02                	jne    8004201033 <cons_intr+0x16>
  8004201031:	eb 62                	jmp    8004201095 <cons_intr+0x78>
  8004201033:	48 b8 20 d0 4d 04 80 	movabs $0x80044dd020,%rax
  800420103a:	00 00 00 
  800420103d:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004201043:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201046:	48 ba 20 d0 4d 04 80 	movabs $0x80044dd020,%rdx
  800420104d:	00 00 00 
  8004201050:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  8004201056:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004201059:	89 d1                	mov    %edx,%ecx
  800420105b:	48 ba 20 d0 4d 04 80 	movabs $0x80044dd020,%rdx
  8004201062:	00 00 00 
  8004201065:	89 c0                	mov    %eax,%eax
  8004201067:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420106a:	48 b8 20 d0 4d 04 80 	movabs $0x80044dd020,%rax
  8004201071:	00 00 00 
  8004201074:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420107a:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420107f:	75 14                	jne    8004201095 <cons_intr+0x78>
  8004201081:	48 b8 20 d0 4d 04 80 	movabs $0x80044dd020,%rax
  8004201088:	00 00 00 
  800420108b:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  8004201092:	00 00 00 
  8004201095:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201099:	ff d0                	callq  *%rax
  800420109b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420109e:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042010a2:	75 87                	jne    800420102b <cons_intr+0xe>
  80042010a4:	c9                   	leaveq 
  80042010a5:	c3                   	retq   

00000080042010a6 <cons_getc>:
  80042010a6:	55                   	push   %rbp
  80042010a7:	48 89 e5             	mov    %rsp,%rbp
  80042010aa:	48 83 ec 10          	sub    $0x10,%rsp
  80042010ae:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  80042010b5:	00 00 00 
  80042010b8:	ff d0                	callq  *%rax
  80042010ba:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042010c1:	00 00 00 
  80042010c4:	ff d0                	callq  *%rax
  80042010c6:	48 b8 20 d0 4d 04 80 	movabs $0x80044dd020,%rax
  80042010cd:	00 00 00 
  80042010d0:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  80042010d6:	48 b8 20 d0 4d 04 80 	movabs $0x80044dd020,%rax
  80042010dd:	00 00 00 
  80042010e0:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042010e6:	39 c2                	cmp    %eax,%edx
  80042010e8:	74 69                	je     8004201153 <cons_getc+0xad>
  80042010ea:	48 b8 20 d0 4d 04 80 	movabs $0x80044dd020,%rax
  80042010f1:	00 00 00 
  80042010f4:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  80042010fa:	8d 48 01             	lea    0x1(%rax),%ecx
  80042010fd:	48 ba 20 d0 4d 04 80 	movabs $0x80044dd020,%rdx
  8004201104:	00 00 00 
  8004201107:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  800420110d:	48 ba 20 d0 4d 04 80 	movabs $0x80044dd020,%rdx
  8004201114:	00 00 00 
  8004201117:	89 c0                	mov    %eax,%eax
  8004201119:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420111d:	0f b6 c0             	movzbl %al,%eax
  8004201120:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201123:	48 b8 20 d0 4d 04 80 	movabs $0x80044dd020,%rax
  800420112a:	00 00 00 
  800420112d:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201133:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004201138:	75 14                	jne    800420114e <cons_getc+0xa8>
  800420113a:	48 b8 20 d0 4d 04 80 	movabs $0x80044dd020,%rax
  8004201141:	00 00 00 
  8004201144:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  800420114b:	00 00 00 
  800420114e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201151:	eb 05                	jmp    8004201158 <cons_getc+0xb2>
  8004201153:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201158:	c9                   	leaveq 
  8004201159:	c3                   	retq   

000000800420115a <cons_putc>:
  800420115a:	55                   	push   %rbp
  800420115b:	48 89 e5             	mov    %rsp,%rbp
  800420115e:	48 83 ec 10          	sub    $0x10,%rsp
  8004201162:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201165:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201168:	89 c7                	mov    %eax,%edi
  800420116a:	48 b8 aa 07 20 04 80 	movabs $0x80042007aa,%rax
  8004201171:	00 00 00 
  8004201174:	ff d0                	callq  *%rax
  8004201176:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201179:	89 c7                	mov    %eax,%edi
  800420117b:	48 b8 17 09 20 04 80 	movabs $0x8004200917,%rax
  8004201182:	00 00 00 
  8004201185:	ff d0                	callq  *%rax
  8004201187:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420118a:	89 c7                	mov    %eax,%edi
  800420118c:	48 b8 b6 0a 20 04 80 	movabs $0x8004200ab6,%rax
  8004201193:	00 00 00 
  8004201196:	ff d0                	callq  *%rax
  8004201198:	c9                   	leaveq 
  8004201199:	c3                   	retq   

000000800420119a <cons_init>:
  800420119a:	55                   	push   %rbp
  800420119b:	48 89 e5             	mov    %rsp,%rbp
  800420119e:	48 b8 9c 09 20 04 80 	movabs $0x800420099c,%rax
  80042011a5:	00 00 00 
  80042011a8:	ff d0                	callq  *%rax
  80042011aa:	48 b8 e8 0f 20 04 80 	movabs $0x8004200fe8,%rax
  80042011b1:	00 00 00 
  80042011b4:	ff d0                	callq  *%rax
  80042011b6:	48 b8 0f 08 20 04 80 	movabs $0x800420080f,%rax
  80042011bd:	00 00 00 
  80042011c0:	ff d0                	callq  *%rax
  80042011c2:	48 b8 00 d0 4d 04 80 	movabs $0x80044dd000,%rax
  80042011c9:	00 00 00 
  80042011cc:	0f b6 00             	movzbl (%rax),%eax
  80042011cf:	83 f0 01             	xor    $0x1,%eax
  80042011d2:	84 c0                	test   %al,%al
  80042011d4:	74 1b                	je     80042011f1 <cons_init+0x57>
  80042011d6:	48 bf a2 e9 21 04 80 	movabs $0x800421e9a2,%rdi
  80042011dd:	00 00 00 
  80042011e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042011e5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042011ec:	00 00 00 
  80042011ef:	ff d2                	callq  *%rdx
  80042011f1:	5d                   	pop    %rbp
  80042011f2:	c3                   	retq   

00000080042011f3 <cputchar>:
  80042011f3:	55                   	push   %rbp
  80042011f4:	48 89 e5             	mov    %rsp,%rbp
  80042011f7:	48 83 ec 10          	sub    $0x10,%rsp
  80042011fb:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042011fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201201:	89 c7                	mov    %eax,%edi
  8004201203:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  800420120a:	00 00 00 
  800420120d:	ff d0                	callq  *%rax
  800420120f:	c9                   	leaveq 
  8004201210:	c3                   	retq   

0000008004201211 <getchar>:
  8004201211:	55                   	push   %rbp
  8004201212:	48 89 e5             	mov    %rsp,%rbp
  8004201215:	48 83 ec 10          	sub    $0x10,%rsp
  8004201219:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  8004201220:	00 00 00 
  8004201223:	ff d0                	callq  *%rax
  8004201225:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201228:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420122c:	74 eb                	je     8004201219 <getchar+0x8>
  800420122e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201231:	c9                   	leaveq 
  8004201232:	c3                   	retq   

0000008004201233 <iscons>:
  8004201233:	55                   	push   %rbp
  8004201234:	48 89 e5             	mov    %rsp,%rbp
  8004201237:	48 83 ec 04          	sub    $0x4,%rsp
  800420123b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420123e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201243:	c9                   	leaveq 
  8004201244:	c3                   	retq   

0000008004201245 <mon_help>:
  8004201245:	55                   	push   %rbp
  8004201246:	48 89 e5             	mov    %rsp,%rbp
  8004201249:	48 83 ec 30          	sub    $0x30,%rsp
  800420124d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201250:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201254:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201258:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420125f:	eb 6c                	jmp    80042012cd <mon_help+0x88>
  8004201261:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  8004201268:	00 00 00 
  800420126b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420126e:	48 63 d0             	movslq %eax,%rdx
  8004201271:	48 89 d0             	mov    %rdx,%rax
  8004201274:	48 01 c0             	add    %rax,%rax
  8004201277:	48 01 d0             	add    %rdx,%rax
  800420127a:	48 c1 e0 03          	shl    $0x3,%rax
  800420127e:	48 01 c8             	add    %rcx,%rax
  8004201281:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004201285:	48 be 80 55 23 04 80 	movabs $0x8004235580,%rsi
  800420128c:	00 00 00 
  800420128f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201292:	48 63 d0             	movslq %eax,%rdx
  8004201295:	48 89 d0             	mov    %rdx,%rax
  8004201298:	48 01 c0             	add    %rax,%rax
  800420129b:	48 01 d0             	add    %rdx,%rax
  800420129e:	48 c1 e0 03          	shl    $0x3,%rax
  80042012a2:	48 01 f0             	add    %rsi,%rax
  80042012a5:	48 8b 00             	mov    (%rax),%rax
  80042012a8:	48 89 ca             	mov    %rcx,%rdx
  80042012ab:	48 89 c6             	mov    %rax,%rsi
  80042012ae:	48 bf 56 ea 21 04 80 	movabs $0x800421ea56,%rdi
  80042012b5:	00 00 00 
  80042012b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012bd:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042012c4:	00 00 00 
  80042012c7:	ff d1                	callq  *%rcx
  80042012c9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042012cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d0:	83 f8 03             	cmp    $0x3,%eax
  80042012d3:	76 8c                	jbe    8004201261 <mon_help+0x1c>
  80042012d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012da:	c9                   	leaveq 
  80042012db:	c3                   	retq   

00000080042012dc <mon_kerninfo>:
  80042012dc:	55                   	push   %rbp
  80042012dd:	48 89 e5             	mov    %rsp,%rbp
  80042012e0:	48 83 ec 30          	sub    $0x30,%rsp
  80042012e4:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042012e7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042012eb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042012ef:	48 bf 5f ea 21 04 80 	movabs $0x800421ea5f,%rdi
  80042012f6:	00 00 00 
  80042012f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012fe:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201305:	00 00 00 
  8004201308:	ff d2                	callq  *%rdx
  800420130a:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201311:	00 00 00 
  8004201314:	48 bf 78 ea 21 04 80 	movabs $0x800421ea78,%rdi
  800420131b:	00 00 00 
  800420131e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201323:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420132a:	00 00 00 
  800420132d:	ff d2                	callq  *%rdx
  800420132f:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  8004201336:	00 00 00 
  8004201339:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004201340:	00 00 00 
  8004201343:	48 bf a0 ea 21 04 80 	movabs $0x800421eaa0,%rdi
  800420134a:	00 00 00 
  800420134d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201352:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004201359:	00 00 00 
  800420135c:	ff d1                	callq  *%rcx
  800420135e:	48 ba a6 e8 21 00 00 	movabs $0x21e8a6,%rdx
  8004201365:	00 00 00 
  8004201368:	48 be a6 e8 21 04 80 	movabs $0x800421e8a6,%rsi
  800420136f:	00 00 00 
  8004201372:	48 bf c8 ea 21 04 80 	movabs $0x800421eac8,%rdi
  8004201379:	00 00 00 
  800420137c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201381:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004201388:	00 00 00 
  800420138b:	ff d1                	callq  *%rcx
  800420138d:	48 ba b0 cb 4d 00 00 	movabs $0x4dcbb0,%rdx
  8004201394:	00 00 00 
  8004201397:	48 be b0 cb 4d 04 80 	movabs $0x80044dcbb0,%rsi
  800420139e:	00 00 00 
  80042013a1:	48 bf f0 ea 21 04 80 	movabs $0x800421eaf0,%rdi
  80042013a8:	00 00 00 
  80042013ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013b0:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042013b7:	00 00 00 
  80042013ba:	ff d1                	callq  *%rcx
  80042013bc:	48 ba 10 f0 71 00 00 	movabs $0x71f010,%rdx
  80042013c3:	00 00 00 
  80042013c6:	48 be 10 f0 71 04 80 	movabs $0x800471f010,%rsi
  80042013cd:	00 00 00 
  80042013d0:	48 bf 18 eb 21 04 80 	movabs $0x800421eb18,%rdi
  80042013d7:	00 00 00 
  80042013da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013df:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042013e6:	00 00 00 
  80042013e9:	ff d1                	callq  *%rcx
  80042013eb:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042013f2:	00 
  80042013f3:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  80042013fa:	00 00 00 
  80042013fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201401:	48 29 c2             	sub    %rax,%rdx
  8004201404:	48 b8 10 f0 71 04 80 	movabs $0x800471f010,%rax
  800420140b:	00 00 00 
  800420140e:	48 83 e8 01          	sub    $0x1,%rax
  8004201412:	48 01 d0             	add    %rdx,%rax
  8004201415:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420141d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201422:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004201426:	48 89 d0             	mov    %rdx,%rax
  8004201429:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420142d:	48 29 c2             	sub    %rax,%rdx
  8004201430:	48 89 d0             	mov    %rdx,%rax
  8004201433:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800420143a:	48 85 c0             	test   %rax,%rax
  800420143d:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201441:	48 c1 f8 0a          	sar    $0xa,%rax
  8004201445:	48 89 c6             	mov    %rax,%rsi
  8004201448:	48 bf 40 eb 21 04 80 	movabs $0x800421eb40,%rdi
  800420144f:	00 00 00 
  8004201452:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201457:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420145e:	00 00 00 
  8004201461:	ff d2                	callq  *%rdx
  8004201463:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201468:	c9                   	leaveq 
  8004201469:	c3                   	retq   

000000800420146a <mon_backtrace>:
  800420146a:	55                   	push   %rbp
  800420146b:	48 89 e5             	mov    %rsp,%rbp
  800420146e:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  8004201475:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  800420147b:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  8004201482:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004201489:	48 89 e8             	mov    %rbp,%rax
  800420148c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  8004201490:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004201494:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  8004201498:	48 89 e0             	mov    %rsp,%rax
  800420149b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  800420149f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042014a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014a7:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042014ae:	00 
  80042014af:	74 21                	je     80042014d2 <mon_backtrace+0x68>
  80042014b1:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014b8:	48 8b 40 50          	mov    0x50(%rax),%rax
  80042014bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042014c0:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014c7:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  80042014ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014d2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80042014d9 <mon_backtrace+0x6f>
  80042014d9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042014dd:	48 bf 6a eb 21 04 80 	movabs $0x800421eb6a,%rdi
  80042014e4:	00 00 00 
  80042014e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014ec:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042014f3:	00 00 00 
  80042014f6:	ff d2                	callq  *%rdx
  80042014f8:	e9 17 03 00 00       	jmpq   8004201814 <mon_backtrace+0x3aa>
  80042014fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201505:	48 89 c6             	mov    %rax,%rsi
  8004201508:	48 bf 7c eb 21 04 80 	movabs $0x800421eb7c,%rdi
  800420150f:	00 00 00 
  8004201512:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201517:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420151e:	00 00 00 
  8004201521:	ff d1                	callq  *%rcx
  8004201523:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  800420152a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420152e:	48 89 d6             	mov    %rdx,%rsi
  8004201531:	48 89 c7             	mov    %rax,%rdi
  8004201534:	48 b8 34 fa 20 04 80 	movabs $0x800420fa34,%rax
  800420153b:	00 00 00 
  800420153e:	ff d0                	callq  *%rax
  8004201540:	85 c0                	test   %eax,%eax
  8004201542:	0f 88 9a 02 00 00    	js     80042017e2 <mon_backtrace+0x378>
  8004201548:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  800420154f:	48 05 a8 00 00 00    	add    $0xa8,%rax
  8004201555:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201559:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  8004201560:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201564:	48 89 d7             	mov    %rdx,%rdi
  8004201567:	48 29 c7             	sub    %rax,%rdi
  800420156a:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  8004201571:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  8004201577:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  800420157d:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  8004201584:	49 89 f9             	mov    %rdi,%r9
  8004201587:	49 89 f0             	mov    %rsi,%r8
  800420158a:	48 89 c6             	mov    %rax,%rsi
  800420158d:	48 bf 98 eb 21 04 80 	movabs $0x800421eb98,%rdi
  8004201594:	00 00 00 
  8004201597:	b8 00 00 00 00       	mov    $0x0,%eax
  800420159c:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  80042015a3:	00 00 00 
  80042015a6:	41 ff d2             	callq  *%r10
  80042015a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015ad:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015b1:	66 83 f8 06          	cmp    $0x6,%ax
  80042015b5:	75 15                	jne    80042015cc <mon_backtrace+0x162>
  80042015b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015bb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042015c3:	48 01 d0             	add    %rdx,%rax
  80042015c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ca:	eb 28                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015d0:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015d4:	66 83 f8 07          	cmp    $0x7,%ax
  80042015d8:	75 15                	jne    80042015ef <mon_backtrace+0x185>
  80042015da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015de:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042015e6:	48 01 d0             	add    %rdx,%rax
  80042015e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ed:	eb 05                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015ef:	e9 ee 01 00 00       	jmpq   80042017e2 <mon_backtrace+0x378>
  80042015f4:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  80042015fa:	89 c6                	mov    %eax,%esi
  80042015fc:	48 bf b3 eb 21 04 80 	movabs $0x800421ebb3,%rdi
  8004201603:	00 00 00 
  8004201606:	b8 00 00 00 00       	mov    $0x0,%eax
  800420160b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201612:	00 00 00 
  8004201615:	ff d2                	callq  *%rdx
  8004201617:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420161e:	e9 f2 00 00 00       	jmpq   8004201715 <mon_backtrace+0x2ab>
  8004201623:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201626:	48 98                	cltq   
  8004201628:	48 83 c0 0a          	add    $0xa,%rax
  800420162c:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  8004201633:	ff 
  8004201634:	48 85 c0             	test   %rax,%rax
  8004201637:	75 35                	jne    800420166e <mon_backtrace+0x204>
  8004201639:	48 b9 be eb 21 04 80 	movabs $0x800421ebbe,%rcx
  8004201640:	00 00 00 
  8004201643:	48 ba d4 eb 21 04 80 	movabs $0x800421ebd4,%rdx
  800420164a:	00 00 00 
  800420164d:	be 78 00 00 00       	mov    $0x78,%esi
  8004201652:	48 bf e9 eb 21 04 80 	movabs $0x800421ebe9,%rdi
  8004201659:	00 00 00 
  800420165c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201661:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201668:	00 00 00 
  800420166b:	41 ff d0             	callq  *%r8
  800420166e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201671:	48 98                	cltq   
  8004201673:	48 83 c0 0a          	add    $0xa,%rax
  8004201677:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  800420167e:	ff 
  800420167f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201683:	48 01 d0             	add    %rdx,%rax
  8004201686:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420168a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420168d:	48 98                	cltq   
  800420168f:	48 83 c0 08          	add    $0x8,%rax
  8004201693:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  800420169a:	83 f8 02             	cmp    $0x2,%eax
  800420169d:	74 31                	je     80042016d0 <mon_backtrace+0x266>
  800420169f:	83 f8 02             	cmp    $0x2,%eax
  80042016a2:	7f 07                	jg     80042016ab <mon_backtrace+0x241>
  80042016a4:	83 f8 01             	cmp    $0x1,%eax
  80042016a7:	74 37                	je     80042016e0 <mon_backtrace+0x276>
  80042016a9:	eb 44                	jmp    80042016ef <mon_backtrace+0x285>
  80042016ab:	83 f8 04             	cmp    $0x4,%eax
  80042016ae:	74 12                	je     80042016c2 <mon_backtrace+0x258>
  80042016b0:	83 f8 08             	cmp    $0x8,%eax
  80042016b3:	75 3a                	jne    80042016ef <mon_backtrace+0x285>
  80042016b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016b9:	48 8b 00             	mov    (%rax),%rax
  80042016bc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016c0:	eb 2d                	jmp    80042016ef <mon_backtrace+0x285>
  80042016c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016c6:	8b 00                	mov    (%rax),%eax
  80042016c8:	89 c0                	mov    %eax,%eax
  80042016ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ce:	eb 1f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016d4:	0f b7 00             	movzwl (%rax),%eax
  80042016d7:	0f b7 c0             	movzwl %ax,%eax
  80042016da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016de:	eb 0f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016e4:	0f b6 00             	movzbl (%rax),%eax
  80042016e7:	0f b6 c0             	movzbl %al,%eax
  80042016ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ee:	90                   	nop
  80042016ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042016f3:	48 89 c6             	mov    %rax,%rsi
  80042016f6:	48 bf fb eb 21 04 80 	movabs $0x800421ebfb,%rdi
  80042016fd:	00 00 00 
  8004201700:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201705:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420170c:	00 00 00 
  800420170f:	ff d2                	callq  *%rdx
  8004201711:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201715:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  800420171b:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420171e:	0f 8f ff fe ff ff    	jg     8004201623 <mon_backtrace+0x1b9>
  8004201724:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  800420172b:	0f b7 c0             	movzwl %ax,%eax
  800420172e:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  8004201733:	74 48                	je     800420177d <mon_backtrace+0x313>
  8004201735:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  800420173a:	75 17                	jne    8004201753 <mon_backtrace+0x2e9>
  800420173c:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  8004201743:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201747:	48 01 d0             	add    %rdx,%rax
  800420174a:	48 8b 00             	mov    (%rax),%rax
  800420174d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201751:	eb 2b                	jmp    800420177e <mon_backtrace+0x314>
  8004201753:	48 ba 02 ec 21 04 80 	movabs $0x800421ec02,%rdx
  800420175a:	00 00 00 
  800420175d:	be 92 00 00 00       	mov    $0x92,%esi
  8004201762:	48 bf e9 eb 21 04 80 	movabs $0x800421ebe9,%rdi
  8004201769:	00 00 00 
  800420176c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201771:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201778:	00 00 00 
  800420177b:	ff d1                	callq  *%rcx
  800420177d:	90                   	nop
  800420177e:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  8004201785:	0f b7 c0             	movzwl %ax,%eax
  8004201788:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420178d:	74 48                	je     80042017d7 <mon_backtrace+0x36d>
  800420178f:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201794:	75 17                	jne    80042017ad <mon_backtrace+0x343>
  8004201796:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  800420179d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017a1:	48 01 d0             	add    %rdx,%rax
  80042017a4:	48 8b 00             	mov    (%rax),%rax
  80042017a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ab:	eb 2b                	jmp    80042017d8 <mon_backtrace+0x36e>
  80042017ad:	48 ba 02 ec 21 04 80 	movabs $0x800421ec02,%rdx
  80042017b4:	00 00 00 
  80042017b7:	be 9d 00 00 00       	mov    $0x9d,%esi
  80042017bc:	48 bf e9 eb 21 04 80 	movabs $0x800421ebe9,%rdi
  80042017c3:	00 00 00 
  80042017c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017cb:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042017d2:	00 00 00 
  80042017d5:	ff d1                	callq  *%rcx
  80042017d7:	90                   	nop
  80042017d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017dc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042017e0:	eb 17                	jmp    80042017f9 <mon_backtrace+0x38f>
  80042017e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017e6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042017ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017f2:	48 8b 00             	mov    (%rax),%rax
  80042017f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042017f9:	48 bf 13 ec 21 04 80 	movabs $0x800421ec13,%rdi
  8004201800:	00 00 00 
  8004201803:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201808:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420180f:	00 00 00 
  8004201812:	ff d2                	callq  *%rdx
  8004201814:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201819:	0f 85 de fc ff ff    	jne    80042014fd <mon_backtrace+0x93>
  800420181f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201824:	c9                   	leaveq 
  8004201825:	c3                   	retq   

0000008004201826 <mon_exit>:
  8004201826:	55                   	push   %rbp
  8004201827:	48 89 e5             	mov    %rsp,%rbp
  800420182a:	48 83 ec 18          	sub    $0x18,%rsp
  800420182e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201831:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004201835:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201839:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420183e:	c9                   	leaveq 
  800420183f:	c3                   	retq   

0000008004201840 <runcmd>:
  8004201840:	55                   	push   %rbp
  8004201841:	48 89 e5             	mov    %rsp,%rbp
  8004201844:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420184b:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004201852:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004201859:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201860:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201863:	48 98                	cltq   
  8004201865:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  800420186c:	ff 00 00 00 00 
  8004201871:	eb 15                	jmp    8004201888 <runcmd+0x48>
  8004201873:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420187a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420187e:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  8004201885:	c6 00 00             	movb   $0x0,(%rax)
  8004201888:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420188f:	0f b6 00             	movzbl (%rax),%eax
  8004201892:	84 c0                	test   %al,%al
  8004201894:	74 2a                	je     80042018c0 <runcmd+0x80>
  8004201896:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420189d:	0f b6 00             	movzbl (%rax),%eax
  80042018a0:	0f be c0             	movsbl %al,%eax
  80042018a3:	89 c6                	mov    %eax,%esi
  80042018a5:	48 bf 15 ec 21 04 80 	movabs $0x800421ec15,%rdi
  80042018ac:	00 00 00 
  80042018af:	48 b8 55 0d 21 04 80 	movabs $0x8004210d55,%rax
  80042018b6:	00 00 00 
  80042018b9:	ff d0                	callq  *%rax
  80042018bb:	48 85 c0             	test   %rax,%rax
  80042018be:	75 b3                	jne    8004201873 <runcmd+0x33>
  80042018c0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042018c7:	0f b6 00             	movzbl (%rax),%eax
  80042018ca:	84 c0                	test   %al,%al
  80042018cc:	75 21                	jne    80042018ef <runcmd+0xaf>
  80042018ce:	90                   	nop
  80042018cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042018d2:	48 98                	cltq   
  80042018d4:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042018db:	ff 00 00 00 00 
  80042018e0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042018e4:	0f 85 a1 00 00 00    	jne    800420198b <runcmd+0x14b>
  80042018ea:	e9 92 00 00 00       	jmpq   8004201981 <runcmd+0x141>
  80042018ef:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042018f3:	75 2a                	jne    800420191f <runcmd+0xdf>
  80042018f5:	be 10 00 00 00       	mov    $0x10,%esi
  80042018fa:	48 bf 1a ec 21 04 80 	movabs $0x800421ec1a,%rdi
  8004201901:	00 00 00 
  8004201904:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201909:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201910:	00 00 00 
  8004201913:	ff d2                	callq  *%rdx
  8004201915:	b8 00 00 00 00       	mov    $0x0,%eax
  800420191a:	e9 30 01 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420191f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201922:	8d 50 01             	lea    0x1(%rax),%edx
  8004201925:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201928:	48 98                	cltq   
  800420192a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201931:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201938:	ff 
  8004201939:	eb 08                	jmp    8004201943 <runcmd+0x103>
  800420193b:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201942:	01 
  8004201943:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420194a:	0f b6 00             	movzbl (%rax),%eax
  800420194d:	84 c0                	test   %al,%al
  800420194f:	74 2a                	je     800420197b <runcmd+0x13b>
  8004201951:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201958:	0f b6 00             	movzbl (%rax),%eax
  800420195b:	0f be c0             	movsbl %al,%eax
  800420195e:	89 c6                	mov    %eax,%esi
  8004201960:	48 bf 15 ec 21 04 80 	movabs $0x800421ec15,%rdi
  8004201967:	00 00 00 
  800420196a:	48 b8 55 0d 21 04 80 	movabs $0x8004210d55,%rax
  8004201971:	00 00 00 
  8004201974:	ff d0                	callq  *%rax
  8004201976:	48 85 c0             	test   %rax,%rax
  8004201979:	74 c0                	je     800420193b <runcmd+0xfb>
  800420197b:	90                   	nop
  800420197c:	e9 07 ff ff ff       	jmpq   8004201888 <runcmd+0x48>
  8004201981:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201986:	e9 c4 00 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420198b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201992:	e9 82 00 00 00       	jmpq   8004201a19 <runcmd+0x1d9>
  8004201997:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  800420199e:	00 00 00 
  80042019a1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019a4:	48 63 d0             	movslq %eax,%rdx
  80042019a7:	48 89 d0             	mov    %rdx,%rax
  80042019aa:	48 01 c0             	add    %rax,%rax
  80042019ad:	48 01 d0             	add    %rdx,%rax
  80042019b0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019b4:	48 01 c8             	add    %rcx,%rax
  80042019b7:	48 8b 10             	mov    (%rax),%rdx
  80042019ba:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042019c1:	48 89 d6             	mov    %rdx,%rsi
  80042019c4:	48 89 c7             	mov    %rax,%rdi
  80042019c7:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  80042019ce:	00 00 00 
  80042019d1:	ff d0                	callq  *%rax
  80042019d3:	85 c0                	test   %eax,%eax
  80042019d5:	75 3e                	jne    8004201a15 <runcmd+0x1d5>
  80042019d7:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  80042019de:	00 00 00 
  80042019e1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019e4:	48 63 d0             	movslq %eax,%rdx
  80042019e7:	48 89 d0             	mov    %rdx,%rax
  80042019ea:	48 01 c0             	add    %rax,%rax
  80042019ed:	48 01 d0             	add    %rdx,%rax
  80042019f0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019f4:	48 01 c8             	add    %rcx,%rax
  80042019f7:	48 83 c0 10          	add    $0x10,%rax
  80042019fb:	48 8b 00             	mov    (%rax),%rax
  80042019fe:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201a05:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201a0c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201a0f:	89 cf                	mov    %ecx,%edi
  8004201a11:	ff d0                	callq  *%rax
  8004201a13:	eb 3a                	jmp    8004201a4f <runcmd+0x20f>
  8004201a15:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201a19:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201a1c:	83 f8 03             	cmp    $0x3,%eax
  8004201a1f:	0f 86 72 ff ff ff    	jbe    8004201997 <runcmd+0x157>
  8004201a25:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201a2c:	48 89 c6             	mov    %rax,%rsi
  8004201a2f:	48 bf 37 ec 21 04 80 	movabs $0x800421ec37,%rdi
  8004201a36:	00 00 00 
  8004201a39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a3e:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a45:	00 00 00 
  8004201a48:	ff d2                	callq  *%rdx
  8004201a4a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a4f:	c9                   	leaveq 
  8004201a50:	c3                   	retq   

0000008004201a51 <monitor>:
  8004201a51:	55                   	push   %rbp
  8004201a52:	48 89 e5             	mov    %rsp,%rbp
  8004201a55:	48 83 ec 20          	sub    $0x20,%rsp
  8004201a59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201a5d:	48 bf 50 ec 21 04 80 	movabs $0x800421ec50,%rdi
  8004201a64:	00 00 00 
  8004201a67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a6c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a73:	00 00 00 
  8004201a76:	ff d2                	callq  *%rdx
  8004201a78:	48 bf 78 ec 21 04 80 	movabs $0x800421ec78,%rdi
  8004201a7f:	00 00 00 
  8004201a82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a87:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a8e:	00 00 00 
  8004201a91:	ff d2                	callq  *%rdx
  8004201a93:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201a98:	74 13                	je     8004201aad <monitor+0x5c>
  8004201a9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201a9e:	48 89 c7             	mov    %rax,%rdi
  8004201aa1:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  8004201aa8:	00 00 00 
  8004201aab:	ff d0                	callq  *%rax
  8004201aad:	48 bf 9d ec 21 04 80 	movabs $0x800421ec9d,%rdi
  8004201ab4:	00 00 00 
  8004201ab7:	48 b8 6e 09 21 04 80 	movabs $0x800421096e,%rax
  8004201abe:	00 00 00 
  8004201ac1:	ff d0                	callq  *%rax
  8004201ac3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201ac7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201acc:	74 20                	je     8004201aee <monitor+0x9d>
  8004201ace:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201ad6:	48 89 d6             	mov    %rdx,%rsi
  8004201ad9:	48 89 c7             	mov    %rax,%rdi
  8004201adc:	48 b8 40 18 20 04 80 	movabs $0x8004201840,%rax
  8004201ae3:	00 00 00 
  8004201ae6:	ff d0                	callq  *%rax
  8004201ae8:	85 c0                	test   %eax,%eax
  8004201aea:	79 02                	jns    8004201aee <monitor+0x9d>
  8004201aec:	eb 02                	jmp    8004201af0 <monitor+0x9f>
  8004201aee:	eb bd                	jmp    8004201aad <monitor+0x5c>
  8004201af0:	c9                   	leaveq 
  8004201af1:	c3                   	retq   

0000008004201af2 <page2ppn>:
  8004201af2:	55                   	push   %rbp
  8004201af3:	48 89 e5             	mov    %rsp,%rbp
  8004201af6:	48 83 ec 08          	sub    $0x8,%rsp
  8004201afa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201afe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201b02:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004201b09:	00 00 00 
  8004201b0c:	48 8b 00             	mov    (%rax),%rax
  8004201b0f:	48 29 c2             	sub    %rax,%rdx
  8004201b12:	48 89 d0             	mov    %rdx,%rax
  8004201b15:	48 c1 f8 04          	sar    $0x4,%rax
  8004201b19:	c9                   	leaveq 
  8004201b1a:	c3                   	retq   

0000008004201b1b <page2pa>:
  8004201b1b:	55                   	push   %rbp
  8004201b1c:	48 89 e5             	mov    %rsp,%rbp
  8004201b1f:	48 83 ec 08          	sub    $0x8,%rsp
  8004201b23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b2b:	48 89 c7             	mov    %rax,%rdi
  8004201b2e:	48 b8 f2 1a 20 04 80 	movabs $0x8004201af2,%rax
  8004201b35:	00 00 00 
  8004201b38:	ff d0                	callq  *%rax
  8004201b3a:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201b3e:	c9                   	leaveq 
  8004201b3f:	c3                   	retq   

0000008004201b40 <pa2page>:
  8004201b40:	55                   	push   %rbp
  8004201b41:	48 89 e5             	mov    %rsp,%rbp
  8004201b44:	48 83 ec 10          	sub    $0x10,%rsp
  8004201b48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b50:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201b54:	48 89 c2             	mov    %rax,%rdx
  8004201b57:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004201b5e:	00 00 00 
  8004201b61:	48 8b 00             	mov    (%rax),%rax
  8004201b64:	48 39 c2             	cmp    %rax,%rdx
  8004201b67:	72 2a                	jb     8004201b93 <pa2page+0x53>
  8004201b69:	48 ba a8 ec 21 04 80 	movabs $0x800421eca8,%rdx
  8004201b70:	00 00 00 
  8004201b73:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201b78:	48 bf c7 ec 21 04 80 	movabs $0x800421ecc7,%rdi
  8004201b7f:	00 00 00 
  8004201b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b87:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201b8e:	00 00 00 
  8004201b91:	ff d1                	callq  *%rcx
  8004201b93:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004201b9a:	00 00 00 
  8004201b9d:	48 8b 00             	mov    (%rax),%rax
  8004201ba0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201ba4:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201ba8:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201bac:	48 01 d0             	add    %rdx,%rax
  8004201baf:	c9                   	leaveq 
  8004201bb0:	c3                   	retq   

0000008004201bb1 <page2kva>:
  8004201bb1:	55                   	push   %rbp
  8004201bb2:	48 89 e5             	mov    %rsp,%rbp
  8004201bb5:	48 83 ec 20          	sub    $0x20,%rsp
  8004201bb9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201bc1:	48 89 c7             	mov    %rax,%rdi
  8004201bc4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004201bcb:	00 00 00 
  8004201bce:	ff d0                	callq  *%rax
  8004201bd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bd8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201bdc:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201bdf:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201be2:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004201be9:	00 00 00 
  8004201bec:	48 8b 00             	mov    (%rax),%rax
  8004201bef:	48 39 c2             	cmp    %rax,%rdx
  8004201bf2:	72 32                	jb     8004201c26 <page2kva+0x75>
  8004201bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bf8:	48 89 c1             	mov    %rax,%rcx
  8004201bfb:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004201c02:	00 00 00 
  8004201c05:	be 62 00 00 00       	mov    $0x62,%esi
  8004201c0a:	48 bf c7 ec 21 04 80 	movabs $0x800421ecc7,%rdi
  8004201c11:	00 00 00 
  8004201c14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201c19:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201c20:	00 00 00 
  8004201c23:	41 ff d0             	callq  *%r8
  8004201c26:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201c2d:	00 00 00 
  8004201c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c34:	48 01 d0             	add    %rdx,%rax
  8004201c37:	c9                   	leaveq 
  8004201c38:	c3                   	retq   

0000008004201c39 <restrictive_type>:
  8004201c39:	55                   	push   %rbp
  8004201c3a:	48 89 e5             	mov    %rsp,%rbp
  8004201c3d:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c41:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201c44:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201c47:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201c4b:	74 06                	je     8004201c53 <restrictive_type+0x1a>
  8004201c4d:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201c51:	75 07                	jne    8004201c5a <restrictive_type+0x21>
  8004201c53:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201c58:	eb 3e                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c5a:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201c5e:	74 06                	je     8004201c66 <restrictive_type+0x2d>
  8004201c60:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201c64:	75 07                	jne    8004201c6d <restrictive_type+0x34>
  8004201c66:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201c6b:	eb 2b                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c6d:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201c71:	74 06                	je     8004201c79 <restrictive_type+0x40>
  8004201c73:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201c77:	75 07                	jne    8004201c80 <restrictive_type+0x47>
  8004201c79:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201c7e:	eb 18                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c80:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201c84:	74 06                	je     8004201c8c <restrictive_type+0x53>
  8004201c86:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201c8a:	75 07                	jne    8004201c93 <restrictive_type+0x5a>
  8004201c8c:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201c91:	eb 05                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c93:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201c98:	c9                   	leaveq 
  8004201c99:	c3                   	retq   

0000008004201c9a <nvram_read>:
  8004201c9a:	55                   	push   %rbp
  8004201c9b:	48 89 e5             	mov    %rsp,%rbp
  8004201c9e:	53                   	push   %rbx
  8004201c9f:	48 83 ec 18          	sub    $0x18,%rsp
  8004201ca3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201ca6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ca9:	89 c7                	mov    %eax,%edi
  8004201cab:	48 b8 fb 98 20 04 80 	movabs $0x80042098fb,%rax
  8004201cb2:	00 00 00 
  8004201cb5:	ff d0                	callq  *%rax
  8004201cb7:	89 c3                	mov    %eax,%ebx
  8004201cb9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201cbc:	83 c0 01             	add    $0x1,%eax
  8004201cbf:	89 c7                	mov    %eax,%edi
  8004201cc1:	48 b8 fb 98 20 04 80 	movabs $0x80042098fb,%rax
  8004201cc8:	00 00 00 
  8004201ccb:	ff d0                	callq  *%rax
  8004201ccd:	c1 e0 08             	shl    $0x8,%eax
  8004201cd0:	09 d8                	or     %ebx,%eax
  8004201cd2:	48 83 c4 18          	add    $0x18,%rsp
  8004201cd6:	5b                   	pop    %rbx
  8004201cd7:	5d                   	pop    %rbp
  8004201cd8:	c3                   	retq   

0000008004201cd9 <multiboot_read>:
  8004201cd9:	55                   	push   %rbp
  8004201cda:	48 89 e5             	mov    %rsp,%rbp
  8004201cdd:	41 54                	push   %r12
  8004201cdf:	53                   	push   %rbx
  8004201ce0:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201ce7:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201cee:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201cf5:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201cfc:	48 89 e0             	mov    %rsp,%rax
  8004201cff:	49 89 c4             	mov    %rax,%r12
  8004201d02:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d09:	8b 40 30             	mov    0x30(%rax),%eax
  8004201d0c:	89 c0                	mov    %eax,%eax
  8004201d0e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201d12:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d19:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201d1c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201d21:	f7 e2                	mul    %edx
  8004201d23:	89 d0                	mov    %edx,%eax
  8004201d25:	c1 e8 04             	shr    $0x4,%eax
  8004201d28:	89 c0                	mov    %eax,%eax
  8004201d2a:	48 89 c2             	mov    %rax,%rdx
  8004201d2d:	48 83 ea 01          	sub    $0x1,%rdx
  8004201d31:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201d35:	49 89 c0             	mov    %rax,%r8
  8004201d38:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201d3e:	48 89 c1             	mov    %rax,%rcx
  8004201d41:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201d46:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d4a:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201d4e:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201d53:	48 83 e8 01          	sub    $0x1,%rax
  8004201d57:	48 01 d0             	add    %rdx,%rax
  8004201d5a:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201d5f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201d64:	48 f7 f3             	div    %rbx
  8004201d67:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201d6b:	48 29 c4             	sub    %rax,%rsp
  8004201d6e:	48 89 e0             	mov    %rsp,%rax
  8004201d71:	48 83 c0 07          	add    $0x7,%rax
  8004201d75:	48 c1 e8 03          	shr    $0x3,%rax
  8004201d79:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d7d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201d81:	48 bf fb ec 21 04 80 	movabs $0x800421ecfb,%rdi
  8004201d88:	00 00 00 
  8004201d8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d90:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201d97:	00 00 00 
  8004201d9a:	ff d2                	callq  *%rdx
  8004201d9c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201da3:	e9 6c 01 00 00       	jmpq   8004201f14 <multiboot_read+0x23b>
  8004201da8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201dab:	48 63 d0             	movslq %eax,%rdx
  8004201dae:	48 89 d0             	mov    %rdx,%rax
  8004201db1:	48 01 c0             	add    %rax,%rax
  8004201db4:	48 01 d0             	add    %rdx,%rax
  8004201db7:	48 c1 e0 03          	shl    $0x3,%rax
  8004201dbb:	48 89 c2             	mov    %rax,%rdx
  8004201dbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201dc2:	48 01 d0             	add    %rdx,%rax
  8004201dc5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201dc9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dcd:	8b 40 08             	mov    0x8(%rax),%eax
  8004201dd0:	89 c0                	mov    %eax,%eax
  8004201dd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201dd6:	48 89 c2             	mov    %rax,%rdx
  8004201dd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ddd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201de0:	89 c0                	mov    %eax,%eax
  8004201de2:	48 01 d0             	add    %rdx,%rax
  8004201de5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201de9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ded:	8b 40 10             	mov    0x10(%rax),%eax
  8004201df0:	89 c0                	mov    %eax,%eax
  8004201df2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201df6:	48 89 c2             	mov    %rax,%rdx
  8004201df9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dfd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201e00:	89 c0                	mov    %eax,%eax
  8004201e02:	48 01 d0             	add    %rdx,%rax
  8004201e05:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201e09:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e0d:	8b 70 14             	mov    0x14(%rax),%esi
  8004201e10:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e14:	8b 00                	mov    (%rax),%eax
  8004201e16:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201e1a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201e1e:	41 89 f0             	mov    %esi,%r8d
  8004201e21:	89 c6                	mov    %eax,%esi
  8004201e23:	48 bf 10 ed 21 04 80 	movabs $0x800421ed10,%rdi
  8004201e2a:	00 00 00 
  8004201e2d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201e32:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004201e39:	00 00 00 
  8004201e3c:	41 ff d1             	callq  *%r9
  8004201e3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e43:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e46:	83 f8 05             	cmp    $0x5,%eax
  8004201e49:	77 0b                	ja     8004201e56 <multiboot_read+0x17d>
  8004201e4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e4f:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e52:	85 c0                	test   %eax,%eax
  8004201e54:	75 0b                	jne    8004201e61 <multiboot_read+0x188>
  8004201e56:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e5a:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201e61:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201e68:	e9 85 00 00 00       	jmpq   8004201ef2 <multiboot_read+0x219>
  8004201e6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201e71:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201e74:	48 63 d2             	movslq %edx,%rdx
  8004201e77:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201e7b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201e7f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e83:	8b 40 08             	mov    0x8(%rax),%eax
  8004201e86:	89 c0                	mov    %eax,%eax
  8004201e88:	48 c1 e0 20          	shl    $0x20,%rax
  8004201e8c:	48 89 c2             	mov    %rax,%rdx
  8004201e8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e93:	8b 40 04             	mov    0x4(%rax),%eax
  8004201e96:	89 c0                	mov    %eax,%eax
  8004201e98:	48 01 d0             	add    %rdx,%rax
  8004201e9b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201e9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201ea3:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201ea7:	76 45                	jbe    8004201eee <multiboot_read+0x215>
  8004201ea9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201eac:	83 c0 01             	add    $0x1,%eax
  8004201eaf:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201eb2:	eb 30                	jmp    8004201ee4 <multiboot_read+0x20b>
  8004201eb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201eb8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004201ebb:	48 63 d2             	movslq %edx,%rdx
  8004201ebe:	48 c1 e2 03          	shl    $0x3,%rdx
  8004201ec2:	48 01 c2             	add    %rax,%rdx
  8004201ec5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ec9:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004201ecc:	48 63 c9             	movslq %ecx,%rcx
  8004201ecf:	48 c1 e1 03          	shl    $0x3,%rcx
  8004201ed3:	48 83 e9 08          	sub    $0x8,%rcx
  8004201ed7:	48 01 c8             	add    %rcx,%rax
  8004201eda:	48 8b 00             	mov    (%rax),%rax
  8004201edd:	48 89 02             	mov    %rax,(%rdx)
  8004201ee0:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  8004201ee4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004201ee7:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004201eea:	75 c8                	jne    8004201eb4 <multiboot_read+0x1db>
  8004201eec:	eb 10                	jmp    8004201efe <multiboot_read+0x225>
  8004201eee:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  8004201ef2:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004201ef5:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004201ef8:	0f 8c 6f ff ff ff    	jl     8004201e6d <multiboot_read+0x194>
  8004201efe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f02:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201f05:	48 63 d2             	movslq %edx,%rdx
  8004201f08:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004201f0c:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004201f10:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201f14:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f17:	48 63 c8             	movslq %eax,%rcx
  8004201f1a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201f21:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201f24:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201f29:	f7 e2                	mul    %edx
  8004201f2b:	89 d0                	mov    %edx,%eax
  8004201f2d:	c1 e8 04             	shr    $0x4,%eax
  8004201f30:	89 c0                	mov    %eax,%eax
  8004201f32:	48 39 c1             	cmp    %rax,%rcx
  8004201f35:	0f 82 6d fe ff ff    	jb     8004201da8 <multiboot_read+0xcf>
  8004201f3b:	48 bf 47 ed 21 04 80 	movabs $0x800421ed47,%rdi
  8004201f42:	00 00 00 
  8004201f45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f4a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201f51:	00 00 00 
  8004201f54:	ff d2                	callq  *%rdx
  8004201f56:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  8004201f5d:	e9 93 01 00 00       	jmpq   80042020f5 <multiboot_read+0x41c>
  8004201f62:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f65:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004201f68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f6c:	48 63 d2             	movslq %edx,%rdx
  8004201f6f:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f73:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004201f77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f7b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004201f7e:	48 63 d2             	movslq %edx,%rdx
  8004201f81:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f85:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004201f89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f8d:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f90:	89 c0                	mov    %eax,%eax
  8004201f92:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f96:	48 89 c2             	mov    %rax,%rdx
  8004201f99:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f9d:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fa0:	89 c0                	mov    %eax,%eax
  8004201fa2:	48 01 d0             	add    %rdx,%rax
  8004201fa5:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004201fa9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fad:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fb0:	89 c0                	mov    %eax,%eax
  8004201fb2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fb6:	48 89 c2             	mov    %rax,%rdx
  8004201fb9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fbd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fc0:	89 c0                	mov    %eax,%eax
  8004201fc2:	48 01 d0             	add    %rdx,%rax
  8004201fc5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004201fc9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fcd:	8b 40 10             	mov    0x10(%rax),%eax
  8004201fd0:	89 c0                	mov    %eax,%eax
  8004201fd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fd6:	48 89 c2             	mov    %rax,%rdx
  8004201fd9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fdd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201fe0:	89 c0                	mov    %eax,%eax
  8004201fe2:	48 01 d0             	add    %rdx,%rax
  8004201fe5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004201fec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201ff0:	8b 40 10             	mov    0x10(%rax),%eax
  8004201ff3:	89 c0                	mov    %eax,%eax
  8004201ff5:	48 c1 e0 20          	shl    $0x20,%rax
  8004201ff9:	48 89 c2             	mov    %rax,%rdx
  8004201ffc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202000:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202003:	89 c0                	mov    %eax,%eax
  8004202005:	48 01 d0             	add    %rdx,%rax
  8004202008:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800420200f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202016:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800420201a:	48 01 d0             	add    %rdx,%rax
  800420201d:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202021:	75 7c                	jne    800420209f <multiboot_read+0x3c6>
  8004202023:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202027:	8b 50 14             	mov    0x14(%rax),%edx
  800420202a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420202e:	8b 40 14             	mov    0x14(%rax),%eax
  8004202031:	39 c2                	cmp    %eax,%edx
  8004202033:	75 6a                	jne    800420209f <multiboot_read+0x3c6>
  8004202035:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420203c:	89 c2                	mov    %eax,%edx
  800420203e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202045:	01 c2                	add    %eax,%edx
  8004202047:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420204b:	89 50 0c             	mov    %edx,0xc(%rax)
  800420204e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202055:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420205c:	48 01 d0             	add    %rdx,%rax
  800420205f:	48 c1 e8 20          	shr    $0x20,%rax
  8004202063:	89 c2                	mov    %eax,%edx
  8004202065:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202069:	89 50 10             	mov    %edx,0x10(%rax)
  800420206c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202070:	8b 50 04             	mov    0x4(%rax),%edx
  8004202073:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202077:	89 50 04             	mov    %edx,0x4(%rax)
  800420207a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420207e:	8b 50 08             	mov    0x8(%rax),%edx
  8004202081:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202085:	89 50 08             	mov    %edx,0x8(%rax)
  8004202088:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420208b:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420208e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202092:	48 63 d2             	movslq %edx,%rdx
  8004202095:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  800420209c:	00 
  800420209d:	eb 52                	jmp    80042020f1 <multiboot_read+0x418>
  800420209f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042020a6:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042020aa:	48 01 d0             	add    %rdx,%rax
  80042020ad:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042020b1:	76 3e                	jbe    80042020f1 <multiboot_read+0x418>
  80042020b3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020b7:	8b 50 14             	mov    0x14(%rax),%edx
  80042020ba:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020be:	8b 40 14             	mov    0x14(%rax),%eax
  80042020c1:	89 d6                	mov    %edx,%esi
  80042020c3:	89 c7                	mov    %eax,%edi
  80042020c5:	48 b8 39 1c 20 04 80 	movabs $0x8004201c39,%rax
  80042020cc:	00 00 00 
  80042020cf:	ff d0                	callq  *%rax
  80042020d1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  80042020d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020db:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020e1:	89 50 14             	mov    %edx,0x14(%rax)
  80042020e4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020e8:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020ee:	89 50 14             	mov    %edx,0x14(%rax)
  80042020f1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042020f5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020f8:	48 63 c8             	movslq %eax,%rcx
  80042020fb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202102:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202105:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  800420210a:	f7 e2                	mul    %edx
  800420210c:	89 d0                	mov    %edx,%eax
  800420210e:	c1 e8 04             	shr    $0x4,%eax
  8004202111:	89 c0                	mov    %eax,%eax
  8004202113:	48 39 c1             	cmp    %rax,%rcx
  8004202116:	0f 82 46 fe ff ff    	jb     8004201f62 <multiboot_read+0x289>
  800420211c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004202123:	e9 dc 00 00 00       	jmpq   8004202204 <multiboot_read+0x52b>
  8004202128:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420212c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420212f:	48 63 d2             	movslq %edx,%rdx
  8004202132:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004202136:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  800420213d:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004202144:	00 
  8004202145:	0f 84 b5 00 00 00    	je     8004202200 <multiboot_read+0x527>
  800420214b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202152:	8b 40 14             	mov    0x14(%rax),%eax
  8004202155:	83 f8 01             	cmp    $0x1,%eax
  8004202158:	74 13                	je     800420216d <multiboot_read+0x494>
  800420215a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202161:	8b 40 14             	mov    0x14(%rax),%eax
  8004202164:	83 f8 03             	cmp    $0x3,%eax
  8004202167:	0f 85 93 00 00 00    	jne    8004202200 <multiboot_read+0x527>
  800420216d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202174:	8b 40 04             	mov    0x4(%rax),%eax
  8004202177:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  800420217c:	77 49                	ja     80042021c7 <multiboot_read+0x4ee>
  800420217e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202185:	8b 40 08             	mov    0x8(%rax),%eax
  8004202188:	85 c0                	test   %eax,%eax
  800420218a:	75 3b                	jne    80042021c7 <multiboot_read+0x4ee>
  800420218c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004202193:	48 8b 10             	mov    (%rax),%rdx
  8004202196:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420219d:	8b 40 10             	mov    0x10(%rax),%eax
  80042021a0:	89 c0                	mov    %eax,%eax
  80042021a2:	48 c1 e0 20          	shl    $0x20,%rax
  80042021a6:	48 89 c1             	mov    %rax,%rcx
  80042021a9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021b0:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021b3:	89 c0                	mov    %eax,%eax
  80042021b5:	48 01 c8             	add    %rcx,%rax
  80042021b8:	48 01 c2             	add    %rax,%rdx
  80042021bb:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042021c2:	48 89 10             	mov    %rdx,(%rax)
  80042021c5:	eb 39                	jmp    8004202200 <multiboot_read+0x527>
  80042021c7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021ce:	48 8b 10             	mov    (%rax),%rdx
  80042021d1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021d8:	8b 40 10             	mov    0x10(%rax),%eax
  80042021db:	89 c0                	mov    %eax,%eax
  80042021dd:	48 c1 e0 20          	shl    $0x20,%rax
  80042021e1:	48 89 c1             	mov    %rax,%rcx
  80042021e4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021eb:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021ee:	89 c0                	mov    %eax,%eax
  80042021f0:	48 01 c8             	add    %rcx,%rax
  80042021f3:	48 01 c2             	add    %rax,%rdx
  80042021f6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021fd:	48 89 10             	mov    %rdx,(%rax)
  8004202200:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004202204:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202207:	48 63 c8             	movslq %eax,%rcx
  800420220a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202211:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202214:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202219:	f7 e2                	mul    %edx
  800420221b:	89 d0                	mov    %edx,%eax
  800420221d:	c1 e8 04             	shr    $0x4,%eax
  8004202220:	89 c0                	mov    %eax,%eax
  8004202222:	48 39 c1             	cmp    %rax,%rcx
  8004202225:	0f 82 fd fe ff ff    	jb     8004202128 <multiboot_read+0x44f>
  800420222b:	4c 89 e4             	mov    %r12,%rsp
  800420222e:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  8004202232:	5b                   	pop    %rbx
  8004202233:	41 5c                	pop    %r12
  8004202235:	5d                   	pop    %rbp
  8004202236:	c3                   	retq   

0000008004202237 <i386_detect_memory>:
  8004202237:	55                   	push   %rbp
  8004202238:	48 89 e5             	mov    %rsp,%rbp
  800420223b:	48 83 ec 50          	sub    $0x50,%rsp
  800420223f:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  8004202246:	00 
  8004202247:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800420224e:	00 
  800420224f:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  8004202256:	00 00 00 
  8004202259:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420225d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202261:	48 8b 00             	mov    (%rax),%rax
  8004202264:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202268:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420226d:	74 2d                	je     800420229c <i386_detect_memory+0x65>
  800420226f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202273:	8b 00                	mov    (%rax),%eax
  8004202275:	83 e0 40             	and    $0x40,%eax
  8004202278:	85 c0                	test   %eax,%eax
  800420227a:	74 20                	je     800420229c <i386_detect_memory+0x65>
  800420227c:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  8004202280:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  8004202284:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202288:	48 89 ce             	mov    %rcx,%rsi
  800420228b:	48 89 c7             	mov    %rax,%rdi
  800420228e:	48 b8 d9 1c 20 04 80 	movabs $0x8004201cd9,%rax
  8004202295:	00 00 00 
  8004202298:	ff d0                	callq  *%rax
  800420229a:	eb 34                	jmp    80042022d0 <i386_detect_memory+0x99>
  800420229c:	bf 15 00 00 00       	mov    $0x15,%edi
  80042022a1:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022a8:	00 00 00 
  80042022ab:	ff d0                	callq  *%rax
  80042022ad:	c1 e0 0a             	shl    $0xa,%eax
  80042022b0:	48 98                	cltq   
  80042022b2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042022b6:	bf 17 00 00 00       	mov    $0x17,%edi
  80042022bb:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022c2:	00 00 00 
  80042022c5:	ff d0                	callq  *%rax
  80042022c7:	c1 e0 0a             	shl    $0xa,%eax
  80042022ca:	48 98                	cltq   
  80042022cc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042022d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042022d4:	48 85 c0             	test   %rax,%rax
  80042022d7:	75 35                	jne    800420230e <i386_detect_memory+0xd7>
  80042022d9:	48 b9 49 ed 21 04 80 	movabs $0x800421ed49,%rcx
  80042022e0:	00 00 00 
  80042022e3:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042022ea:	00 00 00 
  80042022ed:	be 8b 00 00 00       	mov    $0x8b,%esi
  80042022f2:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042022f9:	00 00 00 
  80042022fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202301:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202308:	00 00 00 
  800420230b:	41 ff d0             	callq  *%r8
  800420230e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202312:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202316:	48 89 c2             	mov    %rax,%rdx
  8004202319:	48 b8 30 d2 4d 04 80 	movabs $0x80044dd230,%rax
  8004202320:	00 00 00 
  8004202323:	48 89 10             	mov    %rdx,(%rax)
  8004202326:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420232a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420232e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202332:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202337:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  800420233e:	00 00 00 
  8004202341:	ff d0                	callq  *%rax
  8004202343:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202348:	75 2c                	jne    8004202376 <i386_detect_memory+0x13f>
  800420234a:	bf 34 00 00 00       	mov    $0x34,%edi
  800420234f:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  8004202356:	00 00 00 
  8004202359:	ff d0                	callq  *%rax
  800420235b:	c1 e0 10             	shl    $0x10,%eax
  800420235e:	48 98                	cltq   
  8004202360:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202364:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202368:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  800420236e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202372:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202376:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420237b:	74 1a                	je     8004202397 <i386_detect_memory+0x160>
  800420237d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202381:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  8004202388:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800420238f:	00 00 00 
  8004202392:	48 89 10             	mov    %rdx,(%rax)
  8004202395:	eb 1a                	jmp    80042023b1 <i386_detect_memory+0x17a>
  8004202397:	48 b8 30 d2 4d 04 80 	movabs $0x80044dd230,%rax
  800420239e:	00 00 00 
  80042023a1:	48 8b 10             	mov    (%rax),%rdx
  80042023a4:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042023ab:	00 00 00 
  80042023ae:	48 89 10             	mov    %rdx,(%rax)
  80042023b1:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042023b8:	00 00 00 
  80042023bb:	48 8b 30             	mov    (%rax),%rsi
  80042023be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042023c2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023c6:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023ca:	48 89 c1             	mov    %rax,%rcx
  80042023cd:	48 b8 30 d2 4d 04 80 	movabs $0x80044dd230,%rax
  80042023d4:	00 00 00 
  80042023d7:	48 8b 00             	mov    (%rax),%rax
  80042023da:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023de:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023e2:	48 89 c2             	mov    %rax,%rdx
  80042023e5:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042023ec:	00 00 00 
  80042023ef:	48 8b 00             	mov    (%rax),%rax
  80042023f2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023f6:	48 c1 e8 14          	shr    $0x14,%rax
  80042023fa:	49 89 f0             	mov    %rsi,%r8
  80042023fd:	48 89 c6             	mov    %rax,%rsi
  8004202400:	48 bf 78 ed 21 04 80 	movabs $0x800421ed78,%rdi
  8004202407:	00 00 00 
  800420240a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420240f:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004202416:	00 00 00 
  8004202419:	41 ff d1             	callq  *%r9
  800420241c:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  8004202423:	00 
  8004202424:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  800420242b:	07 
  800420242c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202430:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202434:	48 c1 e8 14          	shr    $0x14,%rax
  8004202438:	48 89 c1             	mov    %rax,%rcx
  800420243b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420243f:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202443:	48 c1 e8 14          	shr    $0x14,%rax
  8004202447:	48 89 c6             	mov    %rax,%rsi
  800420244a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420244e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202452:	49 89 c8             	mov    %rcx,%r8
  8004202455:	48 89 d1             	mov    %rdx,%rcx
  8004202458:	48 89 f2             	mov    %rsi,%rdx
  800420245b:	48 89 c6             	mov    %rax,%rsi
  800420245e:	48 bf c8 ed 21 04 80 	movabs $0x800421edc8,%rdi
  8004202465:	00 00 00 
  8004202468:	b8 00 00 00 00       	mov    $0x0,%eax
  800420246d:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004202474:	00 00 00 
  8004202477:	41 ff d1             	callq  *%r9
  800420247a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420247e:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  8004202482:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  8004202487:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420248b:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004202492:	00 00 00 
  8004202495:	48 8b 00             	mov    (%rax),%rax
  8004202498:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800420249c:	76 3a                	jbe    80042024d8 <i386_detect_memory+0x2a1>
  800420249e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024a2:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042024a9:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042024b0:	00 00 00 
  80042024b3:	48 89 10             	mov    %rdx,(%rax)
  80042024b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024ba:	48 89 c6             	mov    %rax,%rsi
  80042024bd:	48 bf 30 ee 21 04 80 	movabs $0x800421ee30,%rdi
  80042024c4:	00 00 00 
  80042024c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042024cc:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042024d3:	00 00 00 
  80042024d6:	ff d2                	callq  *%rdx
  80042024d8:	c9                   	leaveq 
  80042024d9:	c3                   	retq   

00000080042024da <boot_alloc>:
  80042024da:	55                   	push   %rbp
  80042024db:	48 89 e5             	mov    %rsp,%rbp
  80042024de:	48 83 ec 40          	sub    $0x40,%rsp
  80042024e2:	89 7d cc             	mov    %edi,-0x34(%rbp)
  80042024e5:	48 b8 48 d2 4d 04 80 	movabs $0x80044dd248,%rax
  80042024ec:	00 00 00 
  80042024ef:	48 8b 00             	mov    (%rax),%rax
  80042024f2:	48 85 c0             	test   %rax,%rax
  80042024f5:	75 4e                	jne    8004202545 <boot_alloc+0x6b>
  80042024f7:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  80042024fe:	00 
  80042024ff:	48 b8 d0 c5 6d 04 80 	movabs $0x80046dc5d0,%rax
  8004202506:	00 00 00 
  8004202509:	48 8b 10             	mov    (%rax),%rdx
  800420250c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202510:	48 01 d0             	add    %rdx,%rax
  8004202513:	48 83 e8 01          	sub    $0x1,%rax
  8004202517:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420251b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420251f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202524:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004202528:	48 89 d0             	mov    %rdx,%rax
  800420252b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420252f:	48 29 c2             	sub    %rax,%rdx
  8004202532:	48 89 d0             	mov    %rdx,%rax
  8004202535:	48 89 c2             	mov    %rax,%rdx
  8004202538:	48 b8 48 d2 4d 04 80 	movabs $0x80044dd248,%rax
  800420253f:	00 00 00 
  8004202542:	48 89 10             	mov    %rdx,(%rax)
  8004202545:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004202548:	48 b8 48 d2 4d 04 80 	movabs $0x80044dd248,%rax
  800420254f:	00 00 00 
  8004202552:	48 8b 00             	mov    (%rax),%rax
  8004202555:	48 01 c2             	add    %rax,%rdx
  8004202558:	48 b8 48 d2 4d 04 80 	movabs $0x80044dd248,%rax
  800420255f:	00 00 00 
  8004202562:	48 8b 00             	mov    (%rax),%rax
  8004202565:	48 39 c2             	cmp    %rax,%rdx
  8004202568:	72 2f                	jb     8004202599 <boot_alloc+0xbf>
  800420256a:	48 b8 48 d2 4d 04 80 	movabs $0x80044dd248,%rax
  8004202571:	00 00 00 
  8004202574:	48 8b 10             	mov    (%rax),%rdx
  8004202577:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420257a:	48 01 c2             	add    %rax,%rdx
  800420257d:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004202584:	00 00 00 
  8004202587:	48 8b 00             	mov    (%rax),%rax
  800420258a:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202590:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202594:	48 39 c2             	cmp    %rax,%rdx
  8004202597:	76 2a                	jbe    80042025c3 <boot_alloc+0xe9>
  8004202599:	48 ba 60 ee 21 04 80 	movabs $0x800421ee60,%rdx
  80042025a0:	00 00 00 
  80042025a3:	be f3 00 00 00       	mov    $0xf3,%esi
  80042025a8:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042025af:	00 00 00 
  80042025b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025b7:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042025be:	00 00 00 
  80042025c1:	ff d1                	callq  *%rcx
  80042025c3:	48 b8 48 d2 4d 04 80 	movabs $0x80044dd248,%rax
  80042025ca:	00 00 00 
  80042025cd:	48 8b 00             	mov    (%rax),%rax
  80042025d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042025d4:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  80042025db:	00 
  80042025dc:	48 b8 48 d2 4d 04 80 	movabs $0x80044dd248,%rax
  80042025e3:	00 00 00 
  80042025e6:	48 8b 10             	mov    (%rax),%rdx
  80042025e9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042025ec:	48 01 d0             	add    %rdx,%rax
  80042025ef:	48 89 c2             	mov    %rax,%rdx
  80042025f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042025f6:	48 01 d0             	add    %rdx,%rax
  80042025f9:	48 83 e8 01          	sub    $0x1,%rax
  80042025fd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202601:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202605:	ba 00 00 00 00       	mov    $0x0,%edx
  800420260a:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420260e:	48 89 d0             	mov    %rdx,%rax
  8004202611:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004202615:	48 29 c2             	sub    %rax,%rdx
  8004202618:	48 89 d0             	mov    %rdx,%rax
  800420261b:	48 89 c2             	mov    %rax,%rdx
  800420261e:	48 b8 48 d2 4d 04 80 	movabs $0x80044dd248,%rax
  8004202625:	00 00 00 
  8004202628:	48 89 10             	mov    %rdx,(%rax)
  800420262b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420262f:	c9                   	leaveq 
  8004202630:	c3                   	retq   

0000008004202631 <x64_vm_init>:
  8004202631:	55                   	push   %rbp
  8004202632:	48 89 e5             	mov    %rsp,%rbp
  8004202635:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004202639:	48 b8 37 22 20 04 80 	movabs $0x8004202237,%rax
  8004202640:	00 00 00 
  8004202643:	ff d0                	callq  *%rax
  8004202645:	bf 00 10 00 00       	mov    $0x1000,%edi
  800420264a:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202651:	00 00 00 
  8004202654:	ff d0                	callq  *%rax
  8004202656:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420265a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420265e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202663:	be 00 00 00 00       	mov    $0x0,%esi
  8004202668:	48 89 c7             	mov    %rax,%rdi
  800420266b:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004202672:	00 00 00 
  8004202675:	ff d0                	callq  *%rax
  8004202677:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  800420267e:	00 00 00 
  8004202681:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202685:	48 89 10             	mov    %rdx,(%rax)
  8004202688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420268c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202690:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202697:	00 00 00 
  800420269a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420269e:	77 32                	ja     80042026d2 <x64_vm_init+0xa1>
  80042026a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026a4:	48 89 c1             	mov    %rax,%rcx
  80042026a7:	48 ba 88 ee 21 04 80 	movabs $0x800421ee88,%rdx
  80042026ae:	00 00 00 
  80042026b1:	be 18 01 00 00       	mov    $0x118,%esi
  80042026b6:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042026bd:	00 00 00 
  80042026c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042026cc:	00 00 00 
  80042026cf:	41 ff d0             	callq  *%r8
  80042026d2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042026d9:	ff ff ff 
  80042026dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026e0:	48 01 c2             	add    %rax,%rdx
  80042026e3:	48 b8 e8 c5 6d 04 80 	movabs $0x80046dc5e8,%rax
  80042026ea:	00 00 00 
  80042026ed:	48 89 10             	mov    %rdx,(%rax)
  80042026f0:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042026f7:	00 00 00 
  80042026fa:	48 8b 00             	mov    (%rax),%rax
  80042026fd:	48 c1 e0 04          	shl    $0x4,%rax
  8004202701:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202709:	89 c7                	mov    %eax,%edi
  800420270b:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202712:	00 00 00 
  8004202715:	ff d0                	callq  *%rax
  8004202717:	48 ba 00 c6 6d 04 80 	movabs $0x80046dc600,%rdx
  800420271e:	00 00 00 
  8004202721:	48 89 02             	mov    %rax,(%rdx)
  8004202724:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  800420272b:	00 00 00 
  800420272e:	48 8b 00             	mov    (%rax),%rax
  8004202731:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202735:	be 00 00 00 00       	mov    $0x0,%esi
  800420273a:	48 89 c7             	mov    %rax,%rdi
  800420273d:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004202744:	00 00 00 
  8004202747:	ff d0                	callq  *%rax
  8004202749:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  800420274e:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202755:	00 00 00 
  8004202758:	ff d0                	callq  *%rax
  800420275a:	48 ba 58 d2 4d 04 80 	movabs $0x80044dd258,%rdx
  8004202761:	00 00 00 
  8004202764:	48 89 02             	mov    %rax,(%rdx)
  8004202767:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420276e:	00 00 00 
  8004202771:	48 8b 00             	mov    (%rax),%rax
  8004202774:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  8004202779:	be 00 00 00 00       	mov    $0x0,%esi
  800420277e:	48 89 c7             	mov    %rax,%rdi
  8004202781:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004202788:	00 00 00 
  800420278b:	ff d0                	callq  *%rax
  800420278d:	48 b8 eb 2b 20 04 80 	movabs $0x8004202beb,%rax
  8004202794:	00 00 00 
  8004202797:	ff d0                	callq  *%rax
  8004202799:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042027a0:	00 00 00 
  80042027a3:	48 8b 00             	mov    (%rax),%rax
  80042027a6:	48 c1 e0 04          	shl    $0x4,%rax
  80042027aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042027ae:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  80042027b5:	00 00 00 
  80042027b8:	48 8b 00             	mov    (%rax),%rax
  80042027bb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042027bf:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027c6:	00 00 00 
  80042027c9:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042027cd:	77 32                	ja     8004202801 <x64_vm_init+0x1d0>
  80042027cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042027d3:	48 89 c1             	mov    %rax,%rcx
  80042027d6:	48 ba 88 ee 21 04 80 	movabs $0x800421ee88,%rdx
  80042027dd:	00 00 00 
  80042027e0:	be 43 01 00 00       	mov    $0x143,%esi
  80042027e5:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042027ec:	00 00 00 
  80042027ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042027f4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042027fb:	00 00 00 
  80042027fe:	41 ff d0             	callq  *%r8
  8004202801:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202808:	ff ff ff 
  800420280b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420280f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202813:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  800420281a:	00 00 00 
  800420281d:	48 8b 00             	mov    (%rax),%rax
  8004202820:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202824:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420282a:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202831:	00 00 00 
  8004202834:	48 89 c7             	mov    %rax,%rdi
  8004202837:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420283e:	00 00 00 
  8004202841:	ff d0                	callq  *%rax
  8004202843:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420284a:	00 
  800420284b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420284f:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  8004202855:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202859:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420285d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202862:	48 f7 75 d8          	divq   -0x28(%rbp)
  8004202866:	48 89 d0             	mov    %rdx,%rax
  8004202869:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420286d:	48 29 c2             	sub    %rax,%rdx
  8004202870:	48 89 d0             	mov    %rdx,%rax
  8004202873:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202877:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420287e:	00 00 00 
  8004202881:	48 8b 00             	mov    (%rax),%rax
  8004202884:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202888:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420288f:	00 00 00 
  8004202892:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004202896:	77 32                	ja     80042028ca <x64_vm_init+0x299>
  8004202898:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420289c:	48 89 c1             	mov    %rax,%rcx
  800420289f:	48 ba 88 ee 21 04 80 	movabs $0x800421ee88,%rdx
  80042028a6:	00 00 00 
  80042028a9:	be 51 01 00 00       	mov    $0x151,%esi
  80042028ae:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042028b5:	00 00 00 
  80042028b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042028bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042028c4:	00 00 00 
  80042028c7:	41 ff d0             	callq  *%r8
  80042028ca:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042028d1:	ff ff ff 
  80042028d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042028d8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042028dc:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042028e3:	00 00 00 
  80042028e6:	48 8b 00             	mov    (%rax),%rax
  80042028e9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042028ed:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  80042028f3:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  80042028fa:	00 00 00 
  80042028fd:	48 89 c7             	mov    %rax,%rdi
  8004202900:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202907:	00 00 00 
  800420290a:	ff d0                	callq  *%rax
  800420290c:	48 b8 00 50 22 04 80 	movabs $0x8004225000,%rax
  8004202913:	00 00 00 
  8004202916:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420291a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202921:	00 00 00 
  8004202924:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202928:	77 32                	ja     800420295c <x64_vm_init+0x32b>
  800420292a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420292e:	48 89 c1             	mov    %rax,%rcx
  8004202931:	48 ba 88 ee 21 04 80 	movabs $0x800421ee88,%rdx
  8004202938:	00 00 00 
  800420293b:	be 62 01 00 00       	mov    $0x162,%esi
  8004202940:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004202947:	00 00 00 
  800420294a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420294f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202956:	00 00 00 
  8004202959:	41 ff d0             	callq  *%r8
  800420295c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202963:	ff ff ff 
  8004202966:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420296a:	48 01 c2             	add    %rax,%rdx
  800420296d:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004202974:	00 00 00 
  8004202977:	48 8b 00             	mov    (%rax),%rax
  800420297a:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202980:	48 89 d1             	mov    %rdx,%rcx
  8004202983:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202988:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  800420298f:	00 00 00 
  8004202992:	48 89 c7             	mov    %rax,%rdi
  8004202995:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420299c:	00 00 00 
  800420299f:	ff d0                	callq  *%rax
  80042029a1:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042029a8:	00 00 00 
  80042029ab:	48 8b 00             	mov    (%rax),%rax
  80042029ae:	48 c1 e0 0c          	shl    $0xc,%rax
  80042029b2:	48 89 c2             	mov    %rax,%rdx
  80042029b5:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042029bc:	00 00 00 
  80042029bf:	48 8b 00             	mov    (%rax),%rax
  80042029c2:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  80042029c8:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042029cd:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  80042029d4:	00 00 00 
  80042029d7:	48 89 c7             	mov    %rax,%rdi
  80042029da:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  80042029e1:	00 00 00 
  80042029e4:	ff d0                	callq  *%rax
  80042029e6:	48 b8 00 2b 20 04 80 	movabs $0x8004202b00,%rax
  80042029ed:	00 00 00 
  80042029f0:	ff d0                	callq  *%rax
  80042029f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042029f6:	48 83 c0 08          	add    $0x8,%rax
  80042029fa:	48 8b 00             	mov    (%rax),%rax
  80042029fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a03:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202a07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a0b:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a0f:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202a12:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202a15:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004202a1c:	00 00 00 
  8004202a1f:	48 8b 00             	mov    (%rax),%rax
  8004202a22:	48 39 c2             	cmp    %rax,%rdx
  8004202a25:	72 32                	jb     8004202a59 <x64_vm_init+0x428>
  8004202a27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a2b:	48 89 c1             	mov    %rax,%rcx
  8004202a2e:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004202a35:	00 00 00 
  8004202a38:	be 82 01 00 00       	mov    $0x182,%esi
  8004202a3d:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004202a44:	00 00 00 
  8004202a47:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a4c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202a53:	00 00 00 
  8004202a56:	41 ff d0             	callq  *%r8
  8004202a59:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202a60:	00 00 00 
  8004202a63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a67:	48 01 d0             	add    %rdx,%rax
  8004202a6a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202a6e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202a72:	48 8b 00             	mov    (%rax),%rax
  8004202a75:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a7b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202a7f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202a83:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a87:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202a8a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202a8d:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004202a94:	00 00 00 
  8004202a97:	48 8b 00             	mov    (%rax),%rax
  8004202a9a:	48 39 c2             	cmp    %rax,%rdx
  8004202a9d:	72 32                	jb     8004202ad1 <x64_vm_init+0x4a0>
  8004202a9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202aa3:	48 89 c1             	mov    %rax,%rcx
  8004202aa6:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004202aad:	00 00 00 
  8004202ab0:	be 83 01 00 00       	mov    $0x183,%esi
  8004202ab5:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004202abc:	00 00 00 
  8004202abf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ac4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202acb:	00 00 00 
  8004202ace:	41 ff d0             	callq  *%r8
  8004202ad1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ad8:	00 00 00 
  8004202adb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202adf:	48 01 d0             	add    %rdx,%rax
  8004202ae2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202ae6:	48 b8 e8 c5 6d 04 80 	movabs $0x80046dc5e8,%rax
  8004202aed:	00 00 00 
  8004202af0:	48 8b 00             	mov    (%rax),%rax
  8004202af3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202af7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202afb:	0f 22 d8             	mov    %rax,%cr3
  8004202afe:	c9                   	leaveq 
  8004202aff:	c3                   	retq   

0000008004202b00 <mem_init_mp>:
  8004202b00:	55                   	push   %rbp
  8004202b01:	48 89 e5             	mov    %rsp,%rbp
  8004202b04:	48 83 ec 20          	sub    $0x20,%rsp
  8004202b08:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202b0f:	e9 cb 00 00 00       	jmpq   8004202bdf <mem_init_mp+0xdf>
  8004202b14:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202b17:	89 d0                	mov    %edx,%eax
  8004202b19:	01 c0                	add    %eax,%eax
  8004202b1b:	01 d0                	add    %edx,%eax
  8004202b1d:	c1 e0 0f             	shl    $0xf,%eax
  8004202b20:	48 98                	cltq   
  8004202b22:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202b29:	00 00 00 
  8004202b2c:	48 29 c2             	sub    %rax,%rdx
  8004202b2f:	48 89 d0             	mov    %rdx,%rax
  8004202b32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202b36:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202b39:	48 98                	cltq   
  8004202b3b:	48 c1 e0 10          	shl    $0x10,%rax
  8004202b3f:	48 89 c2             	mov    %rax,%rdx
  8004202b42:	48 b8 00 f0 6d 04 80 	movabs $0x80046df000,%rax
  8004202b49:	00 00 00 
  8004202b4c:	48 01 d0             	add    %rdx,%rax
  8004202b4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202b53:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202b5a:	00 00 00 
  8004202b5d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202b61:	77 32                	ja     8004202b95 <mem_init_mp+0x95>
  8004202b63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b67:	48 89 c1             	mov    %rax,%rcx
  8004202b6a:	48 ba 88 ee 21 04 80 	movabs $0x800421ee88,%rdx
  8004202b71:	00 00 00 
  8004202b74:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202b79:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004202b80:	00 00 00 
  8004202b83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b88:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202b8f:	00 00 00 
  8004202b92:	41 ff d0             	callq  *%r8
  8004202b95:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202b9c:	ff ff ff 
  8004202b9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ba3:	48 01 c2             	add    %rax,%rdx
  8004202ba6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202baa:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202bb1:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004202bb8:	00 00 00 
  8004202bbb:	48 8b 00             	mov    (%rax),%rax
  8004202bbe:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202bc4:	48 89 d1             	mov    %rdx,%rcx
  8004202bc7:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202bcc:	48 89 c7             	mov    %rax,%rdi
  8004202bcf:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202bd6:	00 00 00 
  8004202bd9:	ff d0                	callq  *%rax
  8004202bdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202bdf:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202be3:	0f 8e 2b ff ff ff    	jle    8004202b14 <mem_init_mp+0x14>
  8004202be9:	c9                   	leaveq 
  8004202bea:	c3                   	retq   

0000008004202beb <page_init>:
  8004202beb:	55                   	push   %rbp
  8004202bec:	48 89 e5             	mov    %rsp,%rbp
  8004202bef:	48 83 ec 50          	sub    $0x50,%rsp
  8004202bf3:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202bf8:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202bff:	00 00 00 
  8004202c02:	ff d0                	callq  *%rax
  8004202c04:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202c08:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202c0f:	00 
  8004202c10:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202c17:	00 
  8004202c18:	e9 65 02 00 00       	jmpq   8004202e82 <page_init+0x297>
  8004202c1d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c24:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202c29:	74 1a                	je     8004202c45 <page_init+0x5a>
  8004202c2b:	48 b8 30 d2 4d 04 80 	movabs $0x80044dd230,%rax
  8004202c32:	00 00 00 
  8004202c35:	48 8b 00             	mov    (%rax),%rax
  8004202c38:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202c3c:	73 07                	jae    8004202c45 <page_init+0x5a>
  8004202c3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202c45:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202c4a:	75 07                	jne    8004202c53 <page_init+0x68>
  8004202c4c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202c57:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202c5b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c62:	00 00 00 
  8004202c65:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202c69:	77 32                	ja     8004202c9d <page_init+0xb2>
  8004202c6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202c6f:	48 89 c1             	mov    %rax,%rcx
  8004202c72:	48 ba 88 ee 21 04 80 	movabs $0x800421ee88,%rdx
  8004202c79:	00 00 00 
  8004202c7c:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202c81:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004202c88:	00 00 00 
  8004202c8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c90:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202c97:	00 00 00 
  8004202c9a:	41 ff d0             	callq  *%r8
  8004202c9d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ca4:	ff ff ff 
  8004202ca7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202cab:	48 01 d0             	add    %rdx,%rax
  8004202cae:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202cb2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202cb6:	77 07                	ja     8004202cbf <page_init+0xd4>
  8004202cb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202cbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202cc3:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202cc9:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202ccd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202cd1:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202cd8:	00 00 00 
  8004202cdb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202cdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202ce3:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ce7:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202cea:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202ced:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004202cf4:	00 00 00 
  8004202cf7:	48 8b 00             	mov    (%rax),%rax
  8004202cfa:	48 39 c2             	cmp    %rax,%rdx
  8004202cfd:	72 32                	jb     8004202d31 <page_init+0x146>
  8004202cff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d03:	48 89 c1             	mov    %rax,%rcx
  8004202d06:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004202d0d:	00 00 00 
  8004202d10:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d15:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004202d1c:	00 00 00 
  8004202d1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202d24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202d2b:	00 00 00 
  8004202d2e:	41 ff d0             	callq  *%r8
  8004202d31:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202d38:	00 00 00 
  8004202d3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d3f:	48 01 d0             	add    %rdx,%rax
  8004202d42:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202d46:	0f 87 84 00 00 00    	ja     8004202dd0 <page_init+0x1e5>
  8004202d4c:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202d53:	00 00 00 
  8004202d56:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202d5c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202d60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d64:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202d68:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202d6b:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202d6e:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004202d75:	00 00 00 
  8004202d78:	48 8b 00             	mov    (%rax),%rax
  8004202d7b:	48 39 c2             	cmp    %rax,%rdx
  8004202d7e:	72 32                	jb     8004202db2 <page_init+0x1c7>
  8004202d80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d84:	48 89 c1             	mov    %rax,%rcx
  8004202d87:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004202d8e:	00 00 00 
  8004202d91:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d96:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004202d9d:	00 00 00 
  8004202da0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202da5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202dac:	00 00 00 
  8004202daf:	41 ff d0             	callq  *%r8
  8004202db2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202db9:	00 00 00 
  8004202dbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202dc0:	48 01 d0             	add    %rdx,%rax
  8004202dc3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202dc7:	76 07                	jbe    8004202dd0 <page_init+0x1e5>
  8004202dc9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202dd0:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004202dd7:	00 00 00 
  8004202dda:	48 8b 00             	mov    (%rax),%rax
  8004202ddd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202de1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202de5:	48 01 c2             	add    %rax,%rdx
  8004202de8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202deb:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202def:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004202df6:	00 00 00 
  8004202df9:	48 8b 00             	mov    (%rax),%rax
  8004202dfc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e00:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e04:	48 01 d0             	add    %rdx,%rax
  8004202e07:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202e0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202e12:	75 69                	jne    8004202e7d <page_init+0x292>
  8004202e14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202e19:	74 21                	je     8004202e3c <page_init+0x251>
  8004202e1b:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004202e22:	00 00 00 
  8004202e25:	48 8b 00             	mov    (%rax),%rax
  8004202e28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e2c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e30:	48 01 c2             	add    %rax,%rdx
  8004202e33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202e37:	48 89 10             	mov    %rdx,(%rax)
  8004202e3a:	eb 25                	jmp    8004202e61 <page_init+0x276>
  8004202e3c:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004202e43:	00 00 00 
  8004202e46:	48 8b 00             	mov    (%rax),%rax
  8004202e49:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e4d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e51:	48 01 c2             	add    %rax,%rdx
  8004202e54:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004202e5b:	00 00 00 
  8004202e5e:	48 89 10             	mov    %rdx,(%rax)
  8004202e61:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004202e68:	00 00 00 
  8004202e6b:	48 8b 00             	mov    (%rax),%rax
  8004202e6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e72:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e76:	48 01 d0             	add    %rdx,%rax
  8004202e79:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202e7d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202e82:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004202e89:	00 00 00 
  8004202e8c:	48 8b 00             	mov    (%rax),%rax
  8004202e8f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202e93:	0f 82 84 fd ff ff    	jb     8004202c1d <page_init+0x32>
  8004202e99:	c9                   	leaveq 
  8004202e9a:	c3                   	retq   

0000008004202e9b <page_alloc>:
  8004202e9b:	55                   	push   %rbp
  8004202e9c:	48 89 e5             	mov    %rsp,%rbp
  8004202e9f:	48 83 ec 20          	sub    $0x20,%rsp
  8004202ea3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202ea6:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004202ead:	00 00 00 
  8004202eb0:	48 8b 00             	mov    (%rax),%rax
  8004202eb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202eb7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202ebc:	74 5e                	je     8004202f1c <page_alloc+0x81>
  8004202ebe:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004202ec5:	00 00 00 
  8004202ec8:	48 8b 00             	mov    (%rax),%rax
  8004202ecb:	48 8b 10             	mov    (%rax),%rdx
  8004202ece:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004202ed5:	00 00 00 
  8004202ed8:	48 89 10             	mov    %rdx,(%rax)
  8004202edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202edf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202ee6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202ee9:	83 e0 01             	and    $0x1,%eax
  8004202eec:	85 c0                	test   %eax,%eax
  8004202eee:	74 2c                	je     8004202f1c <page_alloc+0x81>
  8004202ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ef4:	48 89 c7             	mov    %rax,%rdi
  8004202ef7:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004202efe:	00 00 00 
  8004202f01:	ff d0                	callq  *%rax
  8004202f03:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202f08:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f0d:	48 89 c7             	mov    %rax,%rdi
  8004202f10:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004202f17:	00 00 00 
  8004202f1a:	ff d0                	callq  *%rax
  8004202f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f20:	c9                   	leaveq 
  8004202f21:	c3                   	retq   

0000008004202f22 <page_initpp>:
  8004202f22:	55                   	push   %rbp
  8004202f23:	48 89 e5             	mov    %rsp,%rbp
  8004202f26:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f32:	ba 10 00 00 00       	mov    $0x10,%edx
  8004202f37:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f3c:	48 89 c7             	mov    %rax,%rdi
  8004202f3f:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004202f46:	00 00 00 
  8004202f49:	ff d0                	callq  *%rax
  8004202f4b:	c9                   	leaveq 
  8004202f4c:	c3                   	retq   

0000008004202f4d <page_free>:
  8004202f4d:	55                   	push   %rbp
  8004202f4e:	48 89 e5             	mov    %rsp,%rbp
  8004202f51:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f5d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202f61:	66 85 c0             	test   %ax,%ax
  8004202f64:	75 0c                	jne    8004202f72 <page_free+0x25>
  8004202f66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f6a:	48 8b 00             	mov    (%rax),%rax
  8004202f6d:	48 85 c0             	test   %rax,%rax
  8004202f70:	74 2c                	je     8004202f9e <page_free+0x51>
  8004202f72:	48 ba b0 ee 21 04 80 	movabs $0x800421eeb0,%rdx
  8004202f79:	00 00 00 
  8004202f7c:	be 3d 02 00 00       	mov    $0x23d,%esi
  8004202f81:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004202f88:	00 00 00 
  8004202f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202f90:	48 b9 00 06 20 04 80 	movabs $0x8004200600,%rcx
  8004202f97:	00 00 00 
  8004202f9a:	ff d1                	callq  *%rcx
  8004202f9c:	eb 2f                	jmp    8004202fcd <page_free+0x80>
  8004202f9e:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004202fa5:	00 00 00 
  8004202fa8:	48 8b 10             	mov    (%rax),%rdx
  8004202fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202faf:	48 89 10             	mov    %rdx,(%rax)
  8004202fb2:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004202fb9:	00 00 00 
  8004202fbc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fc0:	48 89 10             	mov    %rdx,(%rax)
  8004202fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fc7:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004202fcd:	c9                   	leaveq 
  8004202fce:	c3                   	retq   

0000008004202fcf <page_decref>:
  8004202fcf:	55                   	push   %rbp
  8004202fd0:	48 89 e5             	mov    %rsp,%rbp
  8004202fd3:	48 83 ec 10          	sub    $0x10,%rsp
  8004202fd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202fdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fdf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202fe3:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004202fe6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fea:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004202fee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ff2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202ff6:	66 85 c0             	test   %ax,%ax
  8004202ff9:	75 13                	jne    800420300e <page_decref+0x3f>
  8004202ffb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fff:	48 89 c7             	mov    %rax,%rdi
  8004203002:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004203009:	00 00 00 
  800420300c:	ff d0                	callq  *%rax
  800420300e:	c9                   	leaveq 
  800420300f:	c3                   	retq   

0000008004203010 <pml4e_walk>:
  8004203010:	55                   	push   %rbp
  8004203011:	48 89 e5             	mov    %rsp,%rbp
  8004203014:	53                   	push   %rbx
  8004203015:	48 83 ec 68          	sub    $0x68,%rsp
  8004203019:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420301d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203021:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203024:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004203029:	0f 84 4e 02 00 00    	je     800420327d <pml4e_walk+0x26d>
  800420302f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203033:	48 c1 e8 27          	shr    $0x27,%rax
  8004203037:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420303c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203043:	00 
  8004203044:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203048:	48 01 d0             	add    %rdx,%rax
  800420304b:	48 8b 00             	mov    (%rax),%rax
  800420304e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203052:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203056:	83 e0 01             	and    $0x1,%eax
  8004203059:	48 85 c0             	test   %rax,%rax
  800420305c:	0f 85 7f 01 00 00    	jne    80042031e1 <pml4e_walk+0x1d1>
  8004203062:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203066:	0f 84 75 01 00 00    	je     80042031e1 <pml4e_walk+0x1d1>
  800420306c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203073:	00 
  8004203074:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203079:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203080:	00 00 00 
  8004203083:	ff d0                	callq  *%rax
  8004203085:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203089:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420308e:	0f 84 43 01 00 00    	je     80042031d7 <pml4e_walk+0x1c7>
  8004203094:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203098:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420309c:	8d 50 01             	lea    0x1(%rax),%edx
  800420309f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030a3:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042030a7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030ab:	48 c1 e8 27          	shr    $0x27,%rax
  80042030af:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030bb:	00 
  80042030bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030c0:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042030c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030c8:	48 89 c7             	mov    %rax,%rdi
  80042030cb:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042030d2:	00 00 00 
  80042030d5:	ff d0                	callq  *%rax
  80042030d7:	48 83 c8 07          	or     $0x7,%rax
  80042030db:	48 89 03             	mov    %rax,(%rbx)
  80042030de:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030e2:	48 c1 e8 27          	shr    $0x27,%rax
  80042030e6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030f2:	00 
  80042030f3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030f7:	48 01 d0             	add    %rdx,%rax
  80042030fa:	48 8b 00             	mov    (%rax),%rax
  80042030fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203103:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203107:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420310b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420310f:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203112:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203115:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800420311c:	00 00 00 
  800420311f:	48 8b 00             	mov    (%rax),%rax
  8004203122:	48 39 c2             	cmp    %rax,%rdx
  8004203125:	72 32                	jb     8004203159 <pml4e_walk+0x149>
  8004203127:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420312b:	48 89 c1             	mov    %rax,%rcx
  800420312e:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004203135:	00 00 00 
  8004203138:	be 79 02 00 00       	mov    $0x279,%esi
  800420313d:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004203144:	00 00 00 
  8004203147:	b8 00 00 00 00       	mov    $0x0,%eax
  800420314c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203153:	00 00 00 
  8004203156:	41 ff d0             	callq  *%r8
  8004203159:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203160:	00 00 00 
  8004203163:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203167:	48 01 d0             	add    %rdx,%rax
  800420316a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420316d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203171:	48 89 ce             	mov    %rcx,%rsi
  8004203174:	48 89 c7             	mov    %rax,%rdi
  8004203177:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  800420317e:	00 00 00 
  8004203181:	ff d0                	callq  *%rax
  8004203183:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203187:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420318c:	74 09                	je     8004203197 <pml4e_walk+0x187>
  800420318e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203192:	e9 eb 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  8004203197:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420319b:	48 c1 e8 27          	shr    $0x27,%rax
  800420319f:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031a4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042031ab:	00 
  80042031ac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042031b0:	48 01 d0             	add    %rdx,%rax
  80042031b3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042031ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031be:	48 89 c7             	mov    %rax,%rdi
  80042031c1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042031c8:	00 00 00 
  80042031cb:	ff d0                	callq  *%rax
  80042031cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031d2:	e9 ab 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031dc:	e9 a1 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031e5:	83 e0 01             	and    $0x1,%eax
  80042031e8:	48 85 c0             	test   %rax,%rax
  80042031eb:	0f 84 8c 00 00 00    	je     800420327d <pml4e_walk+0x26d>
  80042031f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031f5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042031fb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042031ff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203203:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203207:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420320a:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420320d:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004203214:	00 00 00 
  8004203217:	48 8b 00             	mov    (%rax),%rax
  800420321a:	48 39 c2             	cmp    %rax,%rdx
  800420321d:	72 32                	jb     8004203251 <pml4e_walk+0x241>
  800420321f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203223:	48 89 c1             	mov    %rax,%rcx
  8004203226:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  800420322d:	00 00 00 
  8004203230:	be 83 02 00 00       	mov    $0x283,%esi
  8004203235:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420323c:	00 00 00 
  800420323f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203244:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420324b:	00 00 00 
  800420324e:	41 ff d0             	callq  *%r8
  8004203251:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203258:	00 00 00 
  800420325b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420325f:	48 01 d0             	add    %rdx,%rax
  8004203262:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203265:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203269:	48 89 ce             	mov    %rcx,%rsi
  800420326c:	48 89 c7             	mov    %rax,%rdi
  800420326f:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  8004203276:	00 00 00 
  8004203279:	ff d0                	callq  *%rax
  800420327b:	eb 05                	jmp    8004203282 <pml4e_walk+0x272>
  800420327d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203282:	48 83 c4 68          	add    $0x68,%rsp
  8004203286:	5b                   	pop    %rbx
  8004203287:	5d                   	pop    %rbp
  8004203288:	c3                   	retq   

0000008004203289 <pdpe_walk>:
  8004203289:	55                   	push   %rbp
  800420328a:	48 89 e5             	mov    %rsp,%rbp
  800420328d:	53                   	push   %rbx
  800420328e:	48 83 ec 68          	sub    $0x68,%rsp
  8004203292:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203296:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420329a:	89 55 9c             	mov    %edx,-0x64(%rbp)
  800420329d:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042032a2:	0f 84 4e 02 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  80042032a8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032ac:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042032b0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032b5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032bc:	00 
  80042032bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032c1:	48 01 d0             	add    %rdx,%rax
  80042032c4:	48 8b 00             	mov    (%rax),%rax
  80042032c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042032cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042032cf:	83 e0 01             	and    $0x1,%eax
  80042032d2:	48 85 c0             	test   %rax,%rax
  80042032d5:	0f 85 7f 01 00 00    	jne    800420345a <pdpe_walk+0x1d1>
  80042032db:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042032df:	0f 84 75 01 00 00    	je     800420345a <pdpe_walk+0x1d1>
  80042032e5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042032ec:	00 
  80042032ed:	bf 01 00 00 00       	mov    $0x1,%edi
  80042032f2:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042032f9:	00 00 00 
  80042032fc:	ff d0                	callq  *%rax
  80042032fe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203302:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203307:	0f 84 43 01 00 00    	je     8004203450 <pdpe_walk+0x1c7>
  800420330d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203311:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203315:	8d 50 01             	lea    0x1(%rax),%edx
  8004203318:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420331c:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203320:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203324:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203328:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420332d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203334:	00 
  8004203335:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203339:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800420333d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203341:	48 89 c7             	mov    %rax,%rdi
  8004203344:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420334b:	00 00 00 
  800420334e:	ff d0                	callq  *%rax
  8004203350:	48 83 c8 07          	or     $0x7,%rax
  8004203354:	48 89 03             	mov    %rax,(%rbx)
  8004203357:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420335b:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420335f:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203364:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420336b:	00 
  800420336c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203370:	48 01 d0             	add    %rdx,%rax
  8004203373:	48 8b 00             	mov    (%rax),%rax
  8004203376:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420337c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203380:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203384:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203388:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420338b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420338e:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004203395:	00 00 00 
  8004203398:	48 8b 00             	mov    (%rax),%rax
  800420339b:	48 39 c2             	cmp    %rax,%rdx
  800420339e:	72 32                	jb     80042033d2 <pdpe_walk+0x149>
  80042033a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033a4:	48 89 c1             	mov    %rax,%rcx
  80042033a7:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  80042033ae:	00 00 00 
  80042033b1:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042033b6:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042033bd:	00 00 00 
  80042033c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042033cc:	00 00 00 
  80042033cf:	41 ff d0             	callq  *%r8
  80042033d2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042033d9:	00 00 00 
  80042033dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033e0:	48 01 d0             	add    %rdx,%rax
  80042033e3:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033e6:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033ea:	48 89 ce             	mov    %rcx,%rsi
  80042033ed:	48 89 c7             	mov    %rax,%rdi
  80042033f0:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042033f7:	00 00 00 
  80042033fa:	ff d0                	callq  *%rax
  80042033fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203400:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004203405:	74 09                	je     8004203410 <pdpe_walk+0x187>
  8004203407:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420340b:	e9 eb 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203410:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203414:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203418:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420341d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203424:	00 
  8004203425:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203429:	48 01 d0             	add    %rdx,%rax
  800420342c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203433:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203437:	48 89 c7             	mov    %rax,%rdi
  800420343a:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203441:	00 00 00 
  8004203444:	ff d0                	callq  *%rax
  8004203446:	b8 00 00 00 00       	mov    $0x0,%eax
  800420344b:	e9 ab 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203450:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203455:	e9 a1 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  800420345a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420345e:	83 e0 01             	and    $0x1,%eax
  8004203461:	48 85 c0             	test   %rax,%rax
  8004203464:	0f 84 8c 00 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  800420346a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420346e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203474:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203478:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420347c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203480:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004203483:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203486:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800420348d:	00 00 00 
  8004203490:	48 8b 00             	mov    (%rax),%rax
  8004203493:	48 39 c2             	cmp    %rax,%rdx
  8004203496:	72 32                	jb     80042034ca <pdpe_walk+0x241>
  8004203498:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420349c:	48 89 c1             	mov    %rax,%rcx
  800420349f:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  80042034a6:	00 00 00 
  80042034a9:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042034ae:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042034b5:	00 00 00 
  80042034b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042034c4:	00 00 00 
  80042034c7:	41 ff d0             	callq  *%r8
  80042034ca:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042034d1:	00 00 00 
  80042034d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042034d8:	48 01 d0             	add    %rdx,%rax
  80042034db:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042034de:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042034e2:	48 89 ce             	mov    %rcx,%rsi
  80042034e5:	48 89 c7             	mov    %rax,%rdi
  80042034e8:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042034ef:	00 00 00 
  80042034f2:	ff d0                	callq  *%rax
  80042034f4:	eb 05                	jmp    80042034fb <pdpe_walk+0x272>
  80042034f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034fb:	48 83 c4 68          	add    $0x68,%rsp
  80042034ff:	5b                   	pop    %rbx
  8004203500:	5d                   	pop    %rbp
  8004203501:	c3                   	retq   

0000008004203502 <pgdir_walk>:
  8004203502:	55                   	push   %rbp
  8004203503:	48 89 e5             	mov    %rsp,%rbp
  8004203506:	53                   	push   %rbx
  8004203507:	48 83 ec 58          	sub    $0x58,%rsp
  800420350b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420350f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203513:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004203516:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  800420351b:	0f 84 fd 01 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203521:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203525:	48 c1 e8 15          	shr    $0x15,%rax
  8004203529:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420352e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203535:	00 
  8004203536:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420353a:	48 01 d0             	add    %rdx,%rax
  800420353d:	48 8b 00             	mov    (%rax),%rax
  8004203540:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203544:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203548:	83 e0 01             	and    $0x1,%eax
  800420354b:	48 85 c0             	test   %rax,%rax
  800420354e:	0f 85 2f 01 00 00    	jne    8004203683 <pgdir_walk+0x181>
  8004203554:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004203558:	0f 84 25 01 00 00    	je     8004203683 <pgdir_walk+0x181>
  800420355e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203565:	00 
  8004203566:	bf 01 00 00 00       	mov    $0x1,%edi
  800420356b:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203572:	00 00 00 
  8004203575:	ff d0                	callq  *%rax
  8004203577:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420357b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203580:	0f 84 f3 00 00 00    	je     8004203679 <pgdir_walk+0x177>
  8004203586:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420358a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420358e:	8d 50 01             	lea    0x1(%rax),%edx
  8004203591:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203595:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203599:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420359d:	48 c1 e8 15          	shr    $0x15,%rax
  80042035a1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035a6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035ad:	00 
  80042035ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035b2:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042035b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042035ba:	48 89 c7             	mov    %rax,%rdi
  80042035bd:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042035c4:	00 00 00 
  80042035c7:	ff d0                	callq  *%rax
  80042035c9:	48 83 c8 07          	or     $0x7,%rax
  80042035cd:	48 89 03             	mov    %rax,(%rbx)
  80042035d0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035d4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035d8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035dd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035e4:	00 
  80042035e5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035e9:	48 c1 e8 15          	shr    $0x15,%rax
  80042035ed:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035f2:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  80042035f9:	00 
  80042035fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035fe:	48 01 c8             	add    %rcx,%rax
  8004203601:	48 8b 00             	mov    (%rax),%rax
  8004203604:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420360a:	48 01 d0             	add    %rdx,%rax
  800420360d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203611:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203615:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203619:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420361c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420361f:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004203626:	00 00 00 
  8004203629:	48 8b 00             	mov    (%rax),%rax
  800420362c:	48 39 c2             	cmp    %rax,%rdx
  800420362f:	72 32                	jb     8004203663 <pgdir_walk+0x161>
  8004203631:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203635:	48 89 c1             	mov    %rax,%rcx
  8004203638:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  800420363f:	00 00 00 
  8004203642:	be be 02 00 00       	mov    $0x2be,%esi
  8004203647:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420364e:	00 00 00 
  8004203651:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203656:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420365d:	00 00 00 
  8004203660:	41 ff d0             	callq  *%r8
  8004203663:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420366a:	00 00 00 
  800420366d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203671:	48 01 d0             	add    %rdx,%rax
  8004203674:	e9 aa 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203679:	b8 00 00 00 00       	mov    $0x0,%eax
  800420367e:	e9 a0 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203687:	83 e0 01             	and    $0x1,%eax
  800420368a:	48 85 c0             	test   %rax,%rax
  800420368d:	0f 84 8b 00 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203693:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203697:	48 c1 e8 0c          	shr    $0xc,%rax
  800420369b:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036a7:	00 
  80042036a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042036ac:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042036b2:	48 01 d0             	add    %rdx,%rax
  80042036b5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042036b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042036c1:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042036c4:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042036c7:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042036ce:	00 00 00 
  80042036d1:	48 8b 00             	mov    (%rax),%rax
  80042036d4:	48 39 c2             	cmp    %rax,%rdx
  80042036d7:	72 32                	jb     800420370b <pgdir_walk+0x209>
  80042036d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036dd:	48 89 c1             	mov    %rax,%rcx
  80042036e0:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  80042036e7:	00 00 00 
  80042036ea:	be c3 02 00 00       	mov    $0x2c3,%esi
  80042036ef:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042036f6:	00 00 00 
  80042036f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042036fe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203705:	00 00 00 
  8004203708:	41 ff d0             	callq  *%r8
  800420370b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203712:	00 00 00 
  8004203715:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203719:	48 01 d0             	add    %rdx,%rax
  800420371c:	eb 05                	jmp    8004203723 <pgdir_walk+0x221>
  800420371e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203723:	48 83 c4 58          	add    $0x58,%rsp
  8004203727:	5b                   	pop    %rbx
  8004203728:	5d                   	pop    %rbp
  8004203729:	c3                   	retq   

000000800420372a <boot_map_region>:
  800420372a:	55                   	push   %rbp
  800420372b:	48 89 e5             	mov    %rsp,%rbp
  800420372e:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004203732:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203736:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420373a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420373e:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004203742:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  8004203746:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420374d:	00 
  800420374e:	e9 aa 02 00 00       	jmpq   80042039fd <boot_map_region+0x2d3>
  8004203753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203757:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420375b:	48 01 d0             	add    %rdx,%rax
  800420375e:	48 89 c1             	mov    %rax,%rcx
  8004203761:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203765:	ba 01 00 00 00       	mov    $0x1,%edx
  800420376a:	48 89 ce             	mov    %rcx,%rsi
  800420376d:	48 89 c7             	mov    %rax,%rdi
  8004203770:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203777:	00 00 00 
  800420377a:	ff d0                	callq  *%rax
  800420377c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203784:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004203788:	48 01 d0             	add    %rdx,%rax
  800420378b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420378f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004203794:	74 23                	je     80042037b9 <boot_map_region+0x8f>
  8004203796:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420379a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037a0:	48 89 c2             	mov    %rax,%rdx
  80042037a3:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042037a6:	48 98                	cltq   
  80042037a8:	48 09 d0             	or     %rdx,%rax
  80042037ab:	48 83 c8 01          	or     $0x1,%rax
  80042037af:	48 89 c2             	mov    %rax,%rdx
  80042037b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042037b6:	48 89 10             	mov    %rdx,(%rax)
  80042037b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042037bd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042037c1:	48 01 d0             	add    %rdx,%rax
  80042037c4:	48 c1 e8 27          	shr    $0x27,%rax
  80042037c8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037d4:	00 
  80042037d5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042037d9:	48 01 d0             	add    %rdx,%rax
  80042037dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042037e0:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042037e4:	48 01 ca             	add    %rcx,%rdx
  80042037e7:	48 c1 ea 27          	shr    $0x27,%rdx
  80042037eb:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042037f1:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042037f8:	00 
  80042037f9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042037fd:	48 01 ca             	add    %rcx,%rdx
  8004203800:	48 8b 0a             	mov    (%rdx),%rcx
  8004203803:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203806:	48 63 d2             	movslq %edx,%rdx
  8004203809:	48 09 ca             	or     %rcx,%rdx
  800420380c:	48 83 ca 01          	or     $0x1,%rdx
  8004203810:	48 89 10             	mov    %rdx,(%rax)
  8004203813:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203817:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420381b:	48 01 d0             	add    %rdx,%rax
  800420381e:	48 c1 e8 27          	shr    $0x27,%rax
  8004203822:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203827:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420382e:	00 
  800420382f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203833:	48 01 d0             	add    %rdx,%rax
  8004203836:	48 8b 00             	mov    (%rax),%rax
  8004203839:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420383f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203843:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203847:	48 c1 e8 0c          	shr    $0xc,%rax
  800420384b:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420384e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004203851:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004203858:	00 00 00 
  800420385b:	48 8b 00             	mov    (%rax),%rax
  800420385e:	48 39 c2             	cmp    %rax,%rdx
  8004203861:	72 32                	jb     8004203895 <boot_map_region+0x16b>
  8004203863:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203867:	48 89 c1             	mov    %rax,%rcx
  800420386a:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004203871:	00 00 00 
  8004203874:	be e6 02 00 00       	mov    $0x2e6,%esi
  8004203879:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004203880:	00 00 00 
  8004203883:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203888:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420388f:	00 00 00 
  8004203892:	41 ff d0             	callq  *%r8
  8004203895:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420389c:	00 00 00 
  800420389f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042038a3:	48 01 d0             	add    %rdx,%rax
  80042038a6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042038aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038ae:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038b2:	48 01 d0             	add    %rdx,%rax
  80042038b5:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042038b9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042038be:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042038c5:	00 
  80042038c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042038ca:	48 01 d0             	add    %rdx,%rax
  80042038cd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042038d1:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042038d5:	48 01 ca             	add    %rcx,%rdx
  80042038d8:	48 c1 ea 1e          	shr    $0x1e,%rdx
  80042038dc:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042038e2:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042038e9:	00 
  80042038ea:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042038ee:	48 01 ca             	add    %rcx,%rdx
  80042038f1:	48 8b 0a             	mov    (%rdx),%rcx
  80042038f4:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042038f7:	48 63 d2             	movslq %edx,%rdx
  80042038fa:	48 09 ca             	or     %rcx,%rdx
  80042038fd:	48 83 ca 01          	or     $0x1,%rdx
  8004203901:	48 89 10             	mov    %rdx,(%rax)
  8004203904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203908:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420390c:	48 01 d0             	add    %rdx,%rax
  800420390f:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203913:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203918:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420391f:	00 
  8004203920:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203924:	48 01 d0             	add    %rdx,%rax
  8004203927:	48 8b 00             	mov    (%rax),%rax
  800420392a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203930:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203934:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203938:	48 c1 e8 0c          	shr    $0xc,%rax
  800420393c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420393f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203942:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004203949:	00 00 00 
  800420394c:	48 8b 00             	mov    (%rax),%rax
  800420394f:	48 39 c2             	cmp    %rax,%rdx
  8004203952:	72 32                	jb     8004203986 <boot_map_region+0x25c>
  8004203954:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203958:	48 89 c1             	mov    %rax,%rcx
  800420395b:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004203962:	00 00 00 
  8004203965:	be e8 02 00 00       	mov    $0x2e8,%esi
  800420396a:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004203971:	00 00 00 
  8004203974:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203979:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203980:	00 00 00 
  8004203983:	41 ff d0             	callq  *%r8
  8004203986:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420398d:	00 00 00 
  8004203990:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203994:	48 01 d0             	add    %rdx,%rax
  8004203997:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420399b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420399f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039a3:	48 01 d0             	add    %rdx,%rax
  80042039a6:	48 c1 e8 15          	shr    $0x15,%rax
  80042039aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042039af:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042039b6:	00 
  80042039b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042039bb:	48 01 d0             	add    %rdx,%rax
  80042039be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042039c2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042039c6:	48 01 ca             	add    %rcx,%rdx
  80042039c9:	48 c1 ea 15          	shr    $0x15,%rdx
  80042039cd:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042039d3:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042039da:	00 
  80042039db:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042039df:	48 01 ca             	add    %rcx,%rdx
  80042039e2:	48 8b 0a             	mov    (%rdx),%rcx
  80042039e5:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042039e8:	48 63 d2             	movslq %edx,%rdx
  80042039eb:	48 09 ca             	or     %rcx,%rdx
  80042039ee:	48 83 ca 01          	or     $0x1,%rdx
  80042039f2:	48 89 10             	mov    %rdx,(%rax)
  80042039f5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042039fc:	00 
  80042039fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a01:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203a05:	0f 82 48 fd ff ff    	jb     8004203753 <boot_map_region+0x29>
  8004203a0b:	c9                   	leaveq 
  8004203a0c:	c3                   	retq   

0000008004203a0d <page_insert>:
  8004203a0d:	55                   	push   %rbp
  8004203a0e:	48 89 e5             	mov    %rsp,%rbp
  8004203a11:	48 83 ec 60          	sub    $0x60,%rsp
  8004203a15:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203a19:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203a1d:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203a21:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203a24:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203a29:	0f 84 47 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a2f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203a34:	0f 84 3c 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a3a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203a3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a42:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203a47:	48 89 ce             	mov    %rcx,%rsi
  8004203a4a:	48 89 c7             	mov    %rax,%rdi
  8004203a4d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203a54:	00 00 00 
  8004203a57:	ff d0                	callq  *%rax
  8004203a59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203a5d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203a62:	0f 84 07 03 00 00    	je     8004203d6f <page_insert+0x362>
  8004203a68:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203a6c:	48 c1 e8 27          	shr    $0x27,%rax
  8004203a70:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a75:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a7c:	00 
  8004203a7d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a81:	48 01 d0             	add    %rdx,%rax
  8004203a84:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203a88:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203a8c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a92:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a99:	00 
  8004203a9a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203a9e:	48 01 ca             	add    %rcx,%rdx
  8004203aa1:	48 8b 0a             	mov    (%rdx),%rcx
  8004203aa4:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203aa7:	80 e6 f1             	and    $0xf1,%dh
  8004203aaa:	48 63 d2             	movslq %edx,%rdx
  8004203aad:	48 09 ca             	or     %rcx,%rdx
  8004203ab0:	48 89 10             	mov    %rdx,(%rax)
  8004203ab3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203ab7:	48 c1 e8 27          	shr    $0x27,%rax
  8004203abb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ac0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ac7:	00 
  8004203ac8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203acc:	48 01 d0             	add    %rdx,%rax
  8004203acf:	48 8b 00             	mov    (%rax),%rax
  8004203ad2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203ad8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203adc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203ae0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203ae4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203ae7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203aea:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004203af1:	00 00 00 
  8004203af4:	48 8b 00             	mov    (%rax),%rax
  8004203af7:	48 39 c2             	cmp    %rax,%rdx
  8004203afa:	72 32                	jb     8004203b2e <page_insert+0x121>
  8004203afc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b00:	48 89 c1             	mov    %rax,%rcx
  8004203b03:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004203b0a:	00 00 00 
  8004203b0d:	be 13 03 00 00       	mov    $0x313,%esi
  8004203b12:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004203b19:	00 00 00 
  8004203b1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203b21:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203b28:	00 00 00 
  8004203b2b:	41 ff d0             	callq  *%r8
  8004203b2e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203b35:	00 00 00 
  8004203b38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b3c:	48 01 d0             	add    %rdx,%rax
  8004203b3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203b43:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b47:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b4b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b50:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203b57:	00 
  8004203b58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203b5c:	48 01 d0             	add    %rdx,%rax
  8004203b5f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203b63:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203b67:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b6d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b74:	00 
  8004203b75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203b79:	48 01 ca             	add    %rcx,%rdx
  8004203b7c:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b7f:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203b82:	80 e6 f1             	and    $0xf1,%dh
  8004203b85:	48 63 d2             	movslq %edx,%rdx
  8004203b88:	48 09 ca             	or     %rcx,%rdx
  8004203b8b:	48 89 10             	mov    %rdx,(%rax)
  8004203b8e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b92:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b96:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b9b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ba2:	00 
  8004203ba3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ba7:	48 01 d0             	add    %rdx,%rax
  8004203baa:	48 8b 00             	mov    (%rax),%rax
  8004203bad:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203bb3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203bb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bbb:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203bbf:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203bc2:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203bc5:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004203bcc:	00 00 00 
  8004203bcf:	48 8b 00             	mov    (%rax),%rax
  8004203bd2:	48 39 c2             	cmp    %rax,%rdx
  8004203bd5:	72 32                	jb     8004203c09 <page_insert+0x1fc>
  8004203bd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bdb:	48 89 c1             	mov    %rax,%rcx
  8004203bde:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004203be5:	00 00 00 
  8004203be8:	be 15 03 00 00       	mov    $0x315,%esi
  8004203bed:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004203bf4:	00 00 00 
  8004203bf7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203bfc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203c03:	00 00 00 
  8004203c06:	41 ff d0             	callq  *%r8
  8004203c09:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c10:	00 00 00 
  8004203c13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203c17:	48 01 d0             	add    %rdx,%rax
  8004203c1a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203c1e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c22:	48 c1 e8 15          	shr    $0x15,%rax
  8004203c26:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c2b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c32:	00 
  8004203c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203c37:	48 01 d0             	add    %rdx,%rax
  8004203c3a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203c3e:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203c42:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203c48:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203c4f:	00 
  8004203c50:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203c54:	48 01 ca             	add    %rcx,%rdx
  8004203c57:	48 8b 0a             	mov    (%rdx),%rcx
  8004203c5a:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203c5d:	80 e6 f1             	and    $0xf1,%dh
  8004203c60:	48 63 d2             	movslq %edx,%rdx
  8004203c63:	48 09 ca             	or     %rcx,%rdx
  8004203c66:	48 89 10             	mov    %rdx,(%rax)
  8004203c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203c6d:	48 8b 00             	mov    (%rax),%rax
  8004203c70:	83 e0 01             	and    $0x1,%eax
  8004203c73:	48 85 c0             	test   %rax,%rax
  8004203c76:	74 70                	je     8004203ce8 <page_insert+0x2db>
  8004203c78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203c7c:	48 89 c7             	mov    %rax,%rdi
  8004203c7f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203c86:	00 00 00 
  8004203c89:	ff d0                	callq  *%rax
  8004203c8b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203c8f:	48 8b 12             	mov    (%rdx),%rdx
  8004203c92:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203c99:	48 39 d0             	cmp    %rdx,%rax
  8004203c9c:	75 4a                	jne    8004203ce8 <page_insert+0x2db>
  8004203c9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ca2:	48 8b 00             	mov    (%rax),%rax
  8004203ca5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cab:	48 89 c2             	mov    %rax,%rdx
  8004203cae:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203cb1:	48 98                	cltq   
  8004203cb3:	48 09 d0             	or     %rdx,%rax
  8004203cb6:	48 83 c8 01          	or     $0x1,%rax
  8004203cba:	48 89 c2             	mov    %rax,%rdx
  8004203cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cc1:	48 89 10             	mov    %rdx,(%rax)
  8004203cc4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203ccc:	48 89 d6             	mov    %rdx,%rsi
  8004203ccf:	48 89 c7             	mov    %rax,%rdi
  8004203cd2:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203cd9:	00 00 00 
  8004203cdc:	ff d0                	callq  *%rax
  8004203cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ce3:	e9 93 00 00 00       	jmpq   8004203d7b <page_insert+0x36e>
  8004203ce8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cec:	48 8b 00             	mov    (%rax),%rax
  8004203cef:	83 e0 01             	and    $0x1,%eax
  8004203cf2:	48 85 c0             	test   %rax,%rax
  8004203cf5:	74 1a                	je     8004203d11 <page_insert+0x304>
  8004203cf7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cfb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203cff:	48 89 d6             	mov    %rdx,%rsi
  8004203d02:	48 89 c7             	mov    %rax,%rdi
  8004203d05:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004203d0c:	00 00 00 
  8004203d0f:	ff d0                	callq  *%rax
  8004203d11:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d15:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203d19:	8d 50 01             	lea    0x1(%rax),%edx
  8004203d1c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d20:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203d24:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d28:	48 89 c7             	mov    %rax,%rdi
  8004203d2b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203d32:	00 00 00 
  8004203d35:	ff d0                	callq  *%rax
  8004203d37:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203d3a:	48 63 d2             	movslq %edx,%rdx
  8004203d3d:	48 09 d0             	or     %rdx,%rax
  8004203d40:	48 83 c8 01          	or     $0x1,%rax
  8004203d44:	48 89 c2             	mov    %rax,%rdx
  8004203d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203d4b:	48 89 10             	mov    %rdx,(%rax)
  8004203d4e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203d56:	48 89 d6             	mov    %rdx,%rsi
  8004203d59:	48 89 c7             	mov    %rax,%rdi
  8004203d5c:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203d63:	00 00 00 
  8004203d66:	ff d0                	callq  *%rax
  8004203d68:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d6d:	eb 0c                	jmp    8004203d7b <page_insert+0x36e>
  8004203d6f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d74:	eb 05                	jmp    8004203d7b <page_insert+0x36e>
  8004203d76:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d7b:	c9                   	leaveq 
  8004203d7c:	c3                   	retq   

0000008004203d7d <page_lookup>:
  8004203d7d:	55                   	push   %rbp
  8004203d7e:	48 89 e5             	mov    %rsp,%rbp
  8004203d81:	48 83 ec 30          	sub    $0x30,%rsp
  8004203d85:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203d89:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203d8d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203d91:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203d96:	74 69                	je     8004203e01 <page_lookup+0x84>
  8004203d98:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203d9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203da0:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203da5:	48 89 ce             	mov    %rcx,%rsi
  8004203da8:	48 89 c7             	mov    %rax,%rdi
  8004203dab:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203db2:	00 00 00 
  8004203db5:	ff d0                	callq  *%rax
  8004203db7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203dbb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203dc0:	74 3f                	je     8004203e01 <page_lookup+0x84>
  8004203dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203dc6:	48 8b 00             	mov    (%rax),%rax
  8004203dc9:	83 e0 01             	and    $0x1,%eax
  8004203dcc:	48 85 c0             	test   %rax,%rax
  8004203dcf:	74 30                	je     8004203e01 <page_lookup+0x84>
  8004203dd1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203dd6:	74 0b                	je     8004203de3 <page_lookup+0x66>
  8004203dd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203ddc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203de0:	48 89 10             	mov    %rdx,(%rax)
  8004203de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203de7:	48 8b 00             	mov    (%rax),%rax
  8004203dea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203df0:	48 89 c7             	mov    %rax,%rdi
  8004203df3:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004203dfa:	00 00 00 
  8004203dfd:	ff d0                	callq  *%rax
  8004203dff:	eb 05                	jmp    8004203e06 <page_lookup+0x89>
  8004203e01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e06:	c9                   	leaveq 
  8004203e07:	c3                   	retq   

0000008004203e08 <page_remove>:
  8004203e08:	55                   	push   %rbp
  8004203e09:	48 89 e5             	mov    %rsp,%rbp
  8004203e0c:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e18:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203e1c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203e20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e24:	48 89 ce             	mov    %rcx,%rsi
  8004203e27:	48 89 c7             	mov    %rax,%rdi
  8004203e2a:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004203e31:	00 00 00 
  8004203e34:	ff d0                	callq  *%rax
  8004203e36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203e3a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203e3f:	74 38                	je     8004203e79 <page_remove+0x71>
  8004203e41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203e45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e49:	48 89 d6             	mov    %rdx,%rsi
  8004203e4c:	48 89 c7             	mov    %rax,%rdi
  8004203e4f:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203e56:	00 00 00 
  8004203e59:	ff d0                	callq  *%rax
  8004203e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e5f:	48 89 c7             	mov    %rax,%rdi
  8004203e62:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203e69:	00 00 00 
  8004203e6c:	ff d0                	callq  *%rax
  8004203e6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203e72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203e79:	c9                   	leaveq 
  8004203e7a:	c3                   	retq   

0000008004203e7b <tlb_invalidate>:
  8004203e7b:	55                   	push   %rbp
  8004203e7c:	48 89 e5             	mov    %rsp,%rbp
  8004203e7f:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e87:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e8b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203e90:	75 35                	jne    8004203ec7 <tlb_invalidate+0x4c>
  8004203e92:	48 b9 d7 ee 21 04 80 	movabs $0x800421eed7,%rcx
  8004203e99:	00 00 00 
  8004203e9c:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004203ea3:	00 00 00 
  8004203ea6:	be 72 03 00 00       	mov    $0x372,%esi
  8004203eab:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004203eb2:	00 00 00 
  8004203eb5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eba:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203ec1:	00 00 00 
  8004203ec4:	41 ff d0             	callq  *%r8
  8004203ec7:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004203ece:	00 00 00 
  8004203ed1:	ff d0                	callq  *%rax
  8004203ed3:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004203eda:	00 00 00 
  8004203edd:	48 98                	cltq   
  8004203edf:	48 c1 e0 03          	shl    $0x3,%rax
  8004203ee3:	48 89 c1             	mov    %rax,%rcx
  8004203ee6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203eea:	48 01 c8             	add    %rcx,%rax
  8004203eed:	48 01 d0             	add    %rdx,%rax
  8004203ef0:	48 83 c0 08          	add    $0x8,%rax
  8004203ef4:	48 8b 00             	mov    (%rax),%rax
  8004203ef7:	48 85 c0             	test   %rax,%rax
  8004203efa:	74 3d                	je     8004203f39 <tlb_invalidate+0xbe>
  8004203efc:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004203f03:	00 00 00 
  8004203f06:	ff d0                	callq  *%rax
  8004203f08:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004203f0f:	00 00 00 
  8004203f12:	48 98                	cltq   
  8004203f14:	48 c1 e0 03          	shl    $0x3,%rax
  8004203f18:	48 89 c1             	mov    %rax,%rcx
  8004203f1b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203f1f:	48 01 c8             	add    %rcx,%rax
  8004203f22:	48 01 d0             	add    %rdx,%rax
  8004203f25:	48 83 c0 08          	add    $0x8,%rax
  8004203f29:	48 8b 00             	mov    (%rax),%rax
  8004203f2c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004203f33:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004203f37:	75 0f                	jne    8004203f48 <tlb_invalidate+0xcd>
  8004203f39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203f3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004203f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f45:	0f 01 38             	invlpg (%rax)
  8004203f48:	c9                   	leaveq 
  8004203f49:	c3                   	retq   

0000008004203f4a <mmio_map_region>:
  8004203f4a:	55                   	push   %rbp
  8004203f4b:	48 89 e5             	mov    %rsp,%rbp
  8004203f4e:	48 83 ec 30          	sub    $0x30,%rsp
  8004203f52:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004203f56:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004203f5a:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203f61:	00 00 00 
  8004203f64:	48 8b 00             	mov    (%rax),%rax
  8004203f67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f6b:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  8004203f72:	00 
  8004203f73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203f77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203f7b:	48 01 d0             	add    %rdx,%rax
  8004203f7e:	48 83 e8 01          	sub    $0x1,%rax
  8004203f82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203f86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f8a:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203f8f:	48 f7 75 f0          	divq   -0x10(%rbp)
  8004203f93:	48 89 d0             	mov    %rdx,%rax
  8004203f96:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004203f9a:	48 29 c2             	sub    %rax,%rdx
  8004203f9d:	48 89 d0             	mov    %rdx,%rax
  8004203fa0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203fa4:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fab:	00 00 00 
  8004203fae:	48 8b 10             	mov    (%rax),%rdx
  8004203fb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203fb5:	48 01 c2             	add    %rax,%rdx
  8004203fb8:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fbf:	00 00 00 
  8004203fc2:	48 89 10             	mov    %rdx,(%rax)
  8004203fc5:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fcc:	00 00 00 
  8004203fcf:	48 8b 10             	mov    (%rax),%rdx
  8004203fd2:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004203fd9:	00 00 00 
  8004203fdc:	48 39 c2             	cmp    %rax,%rdx
  8004203fdf:	76 2a                	jbe    800420400b <mmio_map_region+0xc1>
  8004203fe1:	48 ba e8 ee 21 04 80 	movabs $0x800421eee8,%rdx
  8004203fe8:	00 00 00 
  8004203feb:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004203ff0:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004203ff7:	00 00 00 
  8004203ffa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fff:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004204006:	00 00 00 
  8004204009:	ff d1                	callq  *%rcx
  800420400b:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004204012:	00 00 00 
  8004204015:	48 8b 00             	mov    (%rax),%rax
  8004204018:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420401c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204020:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204024:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  800420402a:	48 89 c7             	mov    %rax,%rdi
  800420402d:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004204034:	00 00 00 
  8004204037:	ff d0                	callq  *%rax
  8004204039:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420403d:	c9                   	leaveq 
  800420403e:	c3                   	retq   

000000800420403f <user_mem_check>:
  800420403f:	55                   	push   %rbp
  8004204040:	48 89 e5             	mov    %rsp,%rbp
  8004204043:	48 83 ec 40          	sub    $0x40,%rsp
  8004204047:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420404b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420404f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004204053:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  8004204056:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420405a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420405e:	48 01 d0             	add    %rdx,%rax
  8004204061:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204065:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204069:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004204070:	00 00 00 
  8004204073:	48 39 c2             	cmp    %rax,%rdx
  8004204076:	77 0a                	ja     8004204082 <user_mem_check+0x43>
  8004204078:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420407c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204080:	76 1b                	jbe    800420409d <user_mem_check+0x5e>
  8004204082:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204086:	48 b8 40 d2 4d 04 80 	movabs $0x80044dd240,%rax
  800420408d:	00 00 00 
  8004204090:	48 89 10             	mov    %rdx,(%rax)
  8004204093:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204098:	e9 c0 00 00 00       	jmpq   800420415d <user_mem_check+0x11e>
  800420409d:	e9 a8 00 00 00       	jmpq   800420414a <user_mem_check+0x10b>
  80042040a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042040a6:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042040ad:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042040b1:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040b6:	48 89 ce             	mov    %rcx,%rsi
  80042040b9:	48 89 c7             	mov    %rax,%rdi
  80042040bc:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042040c3:	00 00 00 
  80042040c6:	ff d0                	callq  *%rax
  80042040c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042040cc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042040d1:	74 1f                	je     80042040f2 <user_mem_check+0xb3>
  80042040d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040d7:	48 8b 10             	mov    (%rax),%rdx
  80042040da:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040dd:	83 c8 01             	or     $0x1,%eax
  80042040e0:	48 98                	cltq   
  80042040e2:	48 21 c2             	and    %rax,%rdx
  80042040e5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040e8:	83 c8 01             	or     $0x1,%eax
  80042040eb:	48 98                	cltq   
  80042040ed:	48 39 c2             	cmp    %rax,%rdx
  80042040f0:	74 18                	je     800420410a <user_mem_check+0xcb>
  80042040f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040f6:	48 b8 40 d2 4d 04 80 	movabs $0x80044dd240,%rax
  80042040fd:	00 00 00 
  8004204100:	48 89 10             	mov    %rdx,(%rax)
  8004204103:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204108:	eb 53                	jmp    800420415d <user_mem_check+0x11e>
  800420410a:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204111:	00 
  8004204112:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204116:	48 83 c0 01          	add    $0x1,%rax
  800420411a:	48 89 c2             	mov    %rax,%rdx
  800420411d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204121:	48 01 d0             	add    %rdx,%rax
  8004204124:	48 83 e8 01          	sub    $0x1,%rax
  8004204128:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420412c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204130:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204135:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004204139:	48 89 d0             	mov    %rdx,%rax
  800420413c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004204140:	48 29 c2             	sub    %rax,%rdx
  8004204143:	48 89 d0             	mov    %rdx,%rax
  8004204146:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420414a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420414e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204152:	0f 82 4a ff ff ff    	jb     80042040a2 <user_mem_check+0x63>
  8004204158:	b8 00 00 00 00       	mov    $0x0,%eax
  800420415d:	c9                   	leaveq 
  800420415e:	c3                   	retq   

000000800420415f <user_mem_assert>:
  800420415f:	55                   	push   %rbp
  8004204160:	48 89 e5             	mov    %rsp,%rbp
  8004204163:	48 83 ec 20          	sub    $0x20,%rsp
  8004204167:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420416b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420416f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004204173:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004204176:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204179:	83 c8 04             	or     $0x4,%eax
  800420417c:	89 c1                	mov    %eax,%ecx
  800420417e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004204182:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004204186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420418a:	48 89 c7             	mov    %rax,%rdi
  800420418d:	48 b8 3f 40 20 04 80 	movabs $0x800420403f,%rax
  8004204194:	00 00 00 
  8004204197:	ff d0                	callq  *%rax
  8004204199:	85 c0                	test   %eax,%eax
  800420419b:	79 47                	jns    80042041e4 <user_mem_assert+0x85>
  800420419d:	48 b8 40 d2 4d 04 80 	movabs $0x80044dd240,%rax
  80042041a4:	00 00 00 
  80042041a7:	48 8b 10             	mov    (%rax),%rdx
  80042041aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041ae:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042041b4:	89 c6                	mov    %eax,%esi
  80042041b6:	48 bf 08 ef 21 04 80 	movabs $0x800421ef08,%rdi
  80042041bd:	00 00 00 
  80042041c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042041c5:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042041cc:	00 00 00 
  80042041cf:	ff d1                	callq  *%rcx
  80042041d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041d5:	48 89 c7             	mov    %rax,%rdi
  80042041d8:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  80042041df:	00 00 00 
  80042041e2:	ff d0                	callq  *%rax
  80042041e4:	c9                   	leaveq 
  80042041e5:	c3                   	retq   

00000080042041e6 <check_page_free_list>:
  80042041e6:	55                   	push   %rbp
  80042041e7:	48 89 e5             	mov    %rsp,%rbp
  80042041ea:	48 83 ec 60          	sub    $0x60,%rsp
  80042041ee:	89 f8                	mov    %edi,%eax
  80042041f0:	88 45 ac             	mov    %al,-0x54(%rbp)
  80042041f3:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  80042041f7:	74 07                	je     8004204200 <check_page_free_list+0x1a>
  80042041f9:	b8 01 00 00 00       	mov    $0x1,%eax
  80042041fe:	eb 05                	jmp    8004204205 <check_page_free_list+0x1f>
  8004204200:	b8 00 02 00 00       	mov    $0x200,%eax
  8004204205:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004204208:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420420f:	00 
  8004204210:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204217:	00 
  8004204218:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  800420421f:	00 00 00 
  8004204222:	48 8b 00             	mov    (%rax),%rax
  8004204225:	48 85 c0             	test   %rax,%rax
  8004204228:	75 2a                	jne    8004204254 <check_page_free_list+0x6e>
  800420422a:	48 ba 40 ef 21 04 80 	movabs $0x800421ef40,%rdx
  8004204231:	00 00 00 
  8004204234:	be fd 03 00 00       	mov    $0x3fd,%esi
  8004204239:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204240:	00 00 00 
  8004204243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204248:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420424f:	00 00 00 
  8004204252:	ff d1                	callq  *%rcx
  8004204254:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004204258:	0f 84 a9 00 00 00    	je     8004204307 <check_page_free_list+0x121>
  800420425e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004204262:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004204266:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  800420426a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420426e:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004204275:	00 00 00 
  8004204278:	48 8b 00             	mov    (%rax),%rax
  800420427b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420427f:	eb 58                	jmp    80042042d9 <check_page_free_list+0xf3>
  8004204281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204285:	48 89 c7             	mov    %rax,%rdi
  8004204288:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420428f:	00 00 00 
  8004204292:	ff d0                	callq  *%rax
  8004204294:	48 c1 e8 15          	shr    $0x15,%rax
  8004204298:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420429d:	48 89 c2             	mov    %rax,%rdx
  80042042a0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042a3:	48 39 c2             	cmp    %rax,%rdx
  80042042a6:	0f 93 c0             	setae  %al
  80042042a9:	0f b6 c0             	movzbl %al,%eax
  80042042ac:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042042af:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042b2:	48 98                	cltq   
  80042042b4:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042042b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042bd:	48 89 10             	mov    %rdx,(%rax)
  80042042c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042c4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042c7:	48 98                	cltq   
  80042042c9:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  80042042ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042d2:	48 8b 00             	mov    (%rax),%rax
  80042042d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042042d9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042042de:	75 a1                	jne    8004204281 <check_page_free_list+0x9b>
  80042042e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042042e4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042042eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042042ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042042f3:	48 89 10             	mov    %rdx,(%rax)
  80042042f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042042fa:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004204301:	00 00 00 
  8004204304:	48 89 10             	mov    %rdx,(%rax)
  8004204307:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  800420430e:	00 00 00 
  8004204311:	48 8b 00             	mov    (%rax),%rax
  8004204314:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204318:	eb 5e                	jmp    8004204378 <check_page_free_list+0x192>
  800420431a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420431e:	48 89 c7             	mov    %rax,%rdi
  8004204321:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204328:	00 00 00 
  800420432b:	ff d0                	callq  *%rax
  800420432d:	48 c1 e8 15          	shr    $0x15,%rax
  8004204331:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204336:	48 89 c2             	mov    %rax,%rdx
  8004204339:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420433c:	48 39 c2             	cmp    %rax,%rdx
  800420433f:	73 2c                	jae    800420436d <check_page_free_list+0x187>
  8004204341:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204345:	48 89 c7             	mov    %rax,%rdi
  8004204348:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  800420434f:	00 00 00 
  8004204352:	ff d0                	callq  *%rax
  8004204354:	ba 80 00 00 00       	mov    $0x80,%edx
  8004204359:	be 97 00 00 00       	mov    $0x97,%esi
  800420435e:	48 89 c7             	mov    %rax,%rdi
  8004204361:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004204368:	00 00 00 
  800420436b:	ff d0                	callq  *%rax
  800420436d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204371:	48 8b 00             	mov    (%rax),%rax
  8004204374:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204378:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420437d:	75 9b                	jne    800420431a <check_page_free_list+0x134>
  800420437f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204384:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  800420438b:	00 00 00 
  800420438e:	ff d0                	callq  *%rax
  8004204390:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204394:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  800420439b:	00 00 00 
  800420439e:	48 8b 00             	mov    (%rax),%rax
  80042043a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043a5:	e9 20 03 00 00       	jmpq   80042046ca <check_page_free_list+0x4e4>
  80042043aa:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  80042043b1:	00 00 00 
  80042043b4:	48 8b 00             	mov    (%rax),%rax
  80042043b7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042043bb:	73 35                	jae    80042043f2 <check_page_free_list+0x20c>
  80042043bd:	48 b9 64 ef 21 04 80 	movabs $0x800421ef64,%rcx
  80042043c4:	00 00 00 
  80042043c7:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042043ce:	00 00 00 
  80042043d1:	be 17 04 00 00       	mov    $0x417,%esi
  80042043d6:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042043dd:	00 00 00 
  80042043e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042043e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042043ec:	00 00 00 
  80042043ef:	41 ff d0             	callq  *%r8
  80042043f2:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  80042043f9:	00 00 00 
  80042043fc:	48 8b 10             	mov    (%rax),%rdx
  80042043ff:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004204406:	00 00 00 
  8004204409:	48 8b 00             	mov    (%rax),%rax
  800420440c:	48 c1 e0 04          	shl    $0x4,%rax
  8004204410:	48 01 d0             	add    %rdx,%rax
  8004204413:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204417:	77 35                	ja     800420444e <check_page_free_list+0x268>
  8004204419:	48 b9 70 ef 21 04 80 	movabs $0x800421ef70,%rcx
  8004204420:	00 00 00 
  8004204423:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420442a:	00 00 00 
  800420442d:	be 18 04 00 00       	mov    $0x418,%esi
  8004204432:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204439:	00 00 00 
  800420443c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204441:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204448:	00 00 00 
  800420444b:	41 ff d0             	callq  *%r8
  800420444e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204452:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004204459:	00 00 00 
  800420445c:	48 8b 00             	mov    (%rax),%rax
  800420445f:	48 29 c2             	sub    %rax,%rdx
  8004204462:	48 89 d0             	mov    %rdx,%rax
  8004204465:	83 e0 0f             	and    $0xf,%eax
  8004204468:	48 85 c0             	test   %rax,%rax
  800420446b:	74 35                	je     80042044a2 <check_page_free_list+0x2bc>
  800420446d:	48 b9 88 ef 21 04 80 	movabs $0x800421ef88,%rcx
  8004204474:	00 00 00 
  8004204477:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420447e:	00 00 00 
  8004204481:	be 19 04 00 00       	mov    $0x419,%esi
  8004204486:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420448d:	00 00 00 
  8004204490:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204495:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420449c:	00 00 00 
  800420449f:	41 ff d0             	callq  *%r8
  80042044a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044a6:	48 89 c7             	mov    %rax,%rdi
  80042044a9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044b0:	00 00 00 
  80042044b3:	ff d0                	callq  *%rax
  80042044b5:	48 85 c0             	test   %rax,%rax
  80042044b8:	75 35                	jne    80042044ef <check_page_free_list+0x309>
  80042044ba:	48 b9 ba ef 21 04 80 	movabs $0x800421efba,%rcx
  80042044c1:	00 00 00 
  80042044c4:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042044cb:	00 00 00 
  80042044ce:	be 1c 04 00 00       	mov    $0x41c,%esi
  80042044d3:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042044da:	00 00 00 
  80042044dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042044e2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042044e9:	00 00 00 
  80042044ec:	41 ff d0             	callq  *%r8
  80042044ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044f3:	48 89 c7             	mov    %rax,%rdi
  80042044f6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044fd:	00 00 00 
  8004204500:	ff d0                	callq  *%rax
  8004204502:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  8004204508:	75 35                	jne    800420453f <check_page_free_list+0x359>
  800420450a:	48 b9 cb ef 21 04 80 	movabs $0x800421efcb,%rcx
  8004204511:	00 00 00 
  8004204514:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420451b:	00 00 00 
  800420451e:	be 1d 04 00 00       	mov    $0x41d,%esi
  8004204523:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420452a:	00 00 00 
  800420452d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204532:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204539:	00 00 00 
  800420453c:	41 ff d0             	callq  *%r8
  800420453f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204543:	48 89 c7             	mov    %rax,%rdi
  8004204546:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420454d:	00 00 00 
  8004204550:	ff d0                	callq  *%rax
  8004204552:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204558:	75 35                	jne    800420458f <check_page_free_list+0x3a9>
  800420455a:	48 b9 e8 ef 21 04 80 	movabs $0x800421efe8,%rcx
  8004204561:	00 00 00 
  8004204564:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420456b:	00 00 00 
  800420456e:	be 1e 04 00 00       	mov    $0x41e,%esi
  8004204573:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420457a:	00 00 00 
  800420457d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204582:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204589:	00 00 00 
  800420458c:	41 ff d0             	callq  *%r8
  800420458f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204593:	48 89 c7             	mov    %rax,%rdi
  8004204596:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420459d:	00 00 00 
  80042045a0:	ff d0                	callq  *%rax
  80042045a2:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042045a8:	75 35                	jne    80042045df <check_page_free_list+0x3f9>
  80042045aa:	48 b9 0b f0 21 04 80 	movabs $0x800421f00b,%rcx
  80042045b1:	00 00 00 
  80042045b4:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042045bb:	00 00 00 
  80042045be:	be 1f 04 00 00       	mov    $0x41f,%esi
  80042045c3:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042045ca:	00 00 00 
  80042045cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045d2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042045d9:	00 00 00 
  80042045dc:	41 ff d0             	callq  *%r8
  80042045df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045e3:	48 89 c7             	mov    %rax,%rdi
  80042045e6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042045ed:	00 00 00 
  80042045f0:	ff d0                	callq  *%rax
  80042045f2:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042045f8:	76 4e                	jbe    8004204648 <check_page_free_list+0x462>
  80042045fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045fe:	48 89 c7             	mov    %rax,%rdi
  8004204601:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204608:	00 00 00 
  800420460b:	ff d0                	callq  *%rax
  800420460d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204611:	73 35                	jae    8004204648 <check_page_free_list+0x462>
  8004204613:	48 b9 28 f0 21 04 80 	movabs $0x800421f028,%rcx
  800420461a:	00 00 00 
  800420461d:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204624:	00 00 00 
  8004204627:	be 20 04 00 00       	mov    $0x420,%esi
  800420462c:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204633:	00 00 00 
  8004204636:	b8 00 00 00 00       	mov    $0x0,%eax
  800420463b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204642:	00 00 00 
  8004204645:	41 ff d0             	callq  *%r8
  8004204648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420464c:	48 89 c7             	mov    %rax,%rdi
  800420464f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204656:	00 00 00 
  8004204659:	ff d0                	callq  *%rax
  800420465b:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  8004204661:	75 35                	jne    8004204698 <check_page_free_list+0x4b2>
  8004204663:	48 b9 6d f0 21 04 80 	movabs $0x800421f06d,%rcx
  800420466a:	00 00 00 
  800420466d:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204674:	00 00 00 
  8004204677:	be 23 04 00 00       	mov    $0x423,%esi
  800420467c:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204683:	00 00 00 
  8004204686:	b8 00 00 00 00       	mov    $0x0,%eax
  800420468b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204692:	00 00 00 
  8004204695:	41 ff d0             	callq  *%r8
  8004204698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420469c:	48 89 c7             	mov    %rax,%rdi
  800420469f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042046a6:	00 00 00 
  80042046a9:	ff d0                	callq  *%rax
  80042046ab:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042046b1:	77 07                	ja     80042046ba <check_page_free_list+0x4d4>
  80042046b3:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042046b8:	eb 05                	jmp    80042046bf <check_page_free_list+0x4d9>
  80042046ba:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042046bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046c3:	48 8b 00             	mov    (%rax),%rax
  80042046c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042046ca:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042046cf:	0f 85 d5 fc ff ff    	jne    80042043aa <check_page_free_list+0x1c4>
  80042046d5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042046da:	75 35                	jne    8004204711 <check_page_free_list+0x52b>
  80042046dc:	48 b9 8a f0 21 04 80 	movabs $0x800421f08a,%rcx
  80042046e3:	00 00 00 
  80042046e6:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042046ed:	00 00 00 
  80042046f0:	be 2c 04 00 00       	mov    $0x42c,%esi
  80042046f5:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042046fc:	00 00 00 
  80042046ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204704:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420470b:	00 00 00 
  800420470e:	41 ff d0             	callq  *%r8
  8004204711:	c9                   	leaveq 
  8004204712:	c3                   	retq   

0000008004204713 <check_page_alloc>:
  8004204713:	55                   	push   %rbp
  8004204714:	48 89 e5             	mov    %rsp,%rbp
  8004204717:	48 83 ec 40          	sub    $0x40,%rsp
  800420471b:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004204722:	00 00 00 
  8004204725:	48 8b 00             	mov    (%rax),%rax
  8004204728:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420472c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204733:	eb 37                	jmp    800420476c <check_page_alloc+0x59>
  8004204735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204739:	48 89 c7             	mov    %rax,%rdi
  800420473c:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204743:	00 00 00 
  8004204746:	ff d0                	callq  *%rax
  8004204748:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420474d:	be 97 00 00 00       	mov    $0x97,%esi
  8004204752:	48 89 c7             	mov    %rax,%rdi
  8004204755:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  800420475c:	00 00 00 
  800420475f:	ff d0                	callq  *%rax
  8004204761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204765:	48 8b 00             	mov    (%rax),%rax
  8004204768:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420476c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204771:	75 c2                	jne    8004204735 <check_page_alloc+0x22>
  8004204773:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  800420477a:	00 00 00 
  800420477d:	48 8b 00             	mov    (%rax),%rax
  8004204780:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204784:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  800420478b:	e9 ec 01 00 00       	jmpq   800420497c <check_page_alloc+0x269>
  8004204790:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004204797:	00 00 00 
  800420479a:	48 8b 00             	mov    (%rax),%rax
  800420479d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042047a1:	73 35                	jae    80042047d8 <check_page_alloc+0xc5>
  80042047a3:	48 b9 9b f0 21 04 80 	movabs $0x800421f09b,%rcx
  80042047aa:	00 00 00 
  80042047ad:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042047b4:	00 00 00 
  80042047b7:	be 46 04 00 00       	mov    $0x446,%esi
  80042047bc:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042047c3:	00 00 00 
  80042047c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047cb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042047d2:	00 00 00 
  80042047d5:	41 ff d0             	callq  *%r8
  80042047d8:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  80042047df:	00 00 00 
  80042047e2:	48 8b 10             	mov    (%rax),%rdx
  80042047e5:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042047ec:	00 00 00 
  80042047ef:	48 8b 00             	mov    (%rax),%rax
  80042047f2:	48 c1 e0 04          	shl    $0x4,%rax
  80042047f6:	48 01 d0             	add    %rdx,%rax
  80042047f9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042047fd:	77 35                	ja     8004204834 <check_page_alloc+0x121>
  80042047ff:	48 b9 a8 f0 21 04 80 	movabs $0x800421f0a8,%rcx
  8004204806:	00 00 00 
  8004204809:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204810:	00 00 00 
  8004204813:	be 47 04 00 00       	mov    $0x447,%esi
  8004204818:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420481f:	00 00 00 
  8004204822:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204827:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420482e:	00 00 00 
  8004204831:	41 ff d0             	callq  *%r8
  8004204834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204838:	48 89 c7             	mov    %rax,%rdi
  800420483b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204842:	00 00 00 
  8004204845:	ff d0                	callq  *%rax
  8004204847:	48 85 c0             	test   %rax,%rax
  800420484a:	75 35                	jne    8004204881 <check_page_alloc+0x16e>
  800420484c:	48 b9 bd f0 21 04 80 	movabs $0x800421f0bd,%rcx
  8004204853:	00 00 00 
  8004204856:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420485d:	00 00 00 
  8004204860:	be 4a 04 00 00       	mov    $0x44a,%esi
  8004204865:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420486c:	00 00 00 
  800420486f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204874:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420487b:	00 00 00 
  800420487e:	41 ff d0             	callq  *%r8
  8004204881:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204885:	48 89 c7             	mov    %rax,%rdi
  8004204888:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420488f:	00 00 00 
  8004204892:	ff d0                	callq  *%rax
  8004204894:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420489a:	75 35                	jne    80042048d1 <check_page_alloc+0x1be>
  800420489c:	48 b9 cf f0 21 04 80 	movabs $0x800421f0cf,%rcx
  80042048a3:	00 00 00 
  80042048a6:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042048ad:	00 00 00 
  80042048b0:	be 4b 04 00 00       	mov    $0x44b,%esi
  80042048b5:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042048bc:	00 00 00 
  80042048bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042048c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042048cb:	00 00 00 
  80042048ce:	41 ff d0             	callq  *%r8
  80042048d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048d5:	48 89 c7             	mov    %rax,%rdi
  80042048d8:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042048df:	00 00 00 
  80042048e2:	ff d0                	callq  *%rax
  80042048e4:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  80042048ea:	75 35                	jne    8004204921 <check_page_alloc+0x20e>
  80042048ec:	48 b9 f0 f0 21 04 80 	movabs $0x800421f0f0,%rcx
  80042048f3:	00 00 00 
  80042048f6:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042048fd:	00 00 00 
  8004204900:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204905:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420490c:	00 00 00 
  800420490f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204914:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420491b:	00 00 00 
  800420491e:	41 ff d0             	callq  *%r8
  8004204921:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204925:	48 89 c7             	mov    %rax,%rdi
  8004204928:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420492f:	00 00 00 
  8004204932:	ff d0                	callq  *%rax
  8004204934:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  800420493a:	75 35                	jne    8004204971 <check_page_alloc+0x25e>
  800420493c:	48 b9 14 f1 21 04 80 	movabs $0x800421f114,%rcx
  8004204943:	00 00 00 
  8004204946:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420494d:	00 00 00 
  8004204950:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204955:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420495c:	00 00 00 
  800420495f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204964:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420496b:	00 00 00 
  800420496e:	41 ff d0             	callq  *%r8
  8004204971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204975:	48 8b 00             	mov    (%rax),%rax
  8004204978:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420497c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204981:	0f 85 09 fe ff ff    	jne    8004204790 <check_page_alloc+0x7d>
  8004204987:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420498e:	00 
  800420498f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204993:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204997:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420499b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420499f:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049a4:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049ab:	00 00 00 
  80042049ae:	ff d0                	callq  *%rax
  80042049b0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042049b4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042049b9:	75 35                	jne    80042049f0 <check_page_alloc+0x2dd>
  80042049bb:	48 b9 2f f1 21 04 80 	movabs $0x800421f12f,%rcx
  80042049c2:	00 00 00 
  80042049c5:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042049cc:	00 00 00 
  80042049cf:	be 51 04 00 00       	mov    $0x451,%esi
  80042049d4:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042049db:	00 00 00 
  80042049de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042049ea:	00 00 00 
  80042049ed:	41 ff d0             	callq  *%r8
  80042049f0:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049fc:	00 00 00 
  80042049ff:	ff d0                	callq  *%rax
  8004204a01:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204a05:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204a0a:	75 35                	jne    8004204a41 <check_page_alloc+0x32e>
  8004204a0c:	48 b9 45 f1 21 04 80 	movabs $0x800421f145,%rcx
  8004204a13:	00 00 00 
  8004204a16:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204a1d:	00 00 00 
  8004204a20:	be 52 04 00 00       	mov    $0x452,%esi
  8004204a25:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204a2c:	00 00 00 
  8004204a2f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a34:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a3b:	00 00 00 
  8004204a3e:	41 ff d0             	callq  *%r8
  8004204a41:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a46:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204a4d:	00 00 00 
  8004204a50:	ff d0                	callq  *%rax
  8004204a52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204a56:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204a5b:	75 35                	jne    8004204a92 <check_page_alloc+0x37f>
  8004204a5d:	48 b9 5b f1 21 04 80 	movabs $0x800421f15b,%rcx
  8004204a64:	00 00 00 
  8004204a67:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204a6e:	00 00 00 
  8004204a71:	be 53 04 00 00       	mov    $0x453,%esi
  8004204a76:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204a7d:	00 00 00 
  8004204a80:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a85:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a8c:	00 00 00 
  8004204a8f:	41 ff d0             	callq  *%r8
  8004204a92:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204a97:	75 35                	jne    8004204ace <check_page_alloc+0x3bb>
  8004204a99:	48 b9 71 f1 21 04 80 	movabs $0x800421f171,%rcx
  8004204aa0:	00 00 00 
  8004204aa3:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204aaa:	00 00 00 
  8004204aad:	be 54 04 00 00       	mov    $0x454,%esi
  8004204ab2:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204ab9:	00 00 00 
  8004204abc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ac1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ac8:	00 00 00 
  8004204acb:	41 ff d0             	callq  *%r8
  8004204ace:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204ad3:	74 0a                	je     8004204adf <check_page_alloc+0x3cc>
  8004204ad5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ad9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204add:	75 35                	jne    8004204b14 <check_page_alloc+0x401>
  8004204adf:	48 b9 75 f1 21 04 80 	movabs $0x800421f175,%rcx
  8004204ae6:	00 00 00 
  8004204ae9:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204af0:	00 00 00 
  8004204af3:	be 55 04 00 00       	mov    $0x455,%esi
  8004204af8:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204aff:	00 00 00 
  8004204b02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b07:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b0e:	00 00 00 
  8004204b11:	41 ff d0             	callq  *%r8
  8004204b14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204b19:	74 14                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b1f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204b23:	74 0a                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b29:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204b2d:	75 35                	jne    8004204b64 <check_page_alloc+0x451>
  8004204b2f:	48 b9 88 f1 21 04 80 	movabs $0x800421f188,%rcx
  8004204b36:	00 00 00 
  8004204b39:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204b40:	00 00 00 
  8004204b43:	be 56 04 00 00       	mov    $0x456,%esi
  8004204b48:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204b4f:	00 00 00 
  8004204b52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b5e:	00 00 00 
  8004204b61:	41 ff d0             	callq  *%r8
  8004204b64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204b68:	48 89 c7             	mov    %rax,%rdi
  8004204b6b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204b72:	00 00 00 
  8004204b75:	ff d0                	callq  *%rax
  8004204b77:	48 ba f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rdx
  8004204b7e:	00 00 00 
  8004204b81:	48 8b 12             	mov    (%rdx),%rdx
  8004204b84:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204b88:	48 39 d0             	cmp    %rdx,%rax
  8004204b8b:	72 35                	jb     8004204bc2 <check_page_alloc+0x4af>
  8004204b8d:	48 b9 a8 f1 21 04 80 	movabs $0x800421f1a8,%rcx
  8004204b94:	00 00 00 
  8004204b97:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204b9e:	00 00 00 
  8004204ba1:	be 57 04 00 00       	mov    $0x457,%esi
  8004204ba6:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204bad:	00 00 00 
  8004204bb0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bb5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204bbc:	00 00 00 
  8004204bbf:	41 ff d0             	callq  *%r8
  8004204bc2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204bc6:	48 89 c7             	mov    %rax,%rdi
  8004204bc9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204bd0:	00 00 00 
  8004204bd3:	ff d0                	callq  *%rax
  8004204bd5:	48 ba f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rdx
  8004204bdc:	00 00 00 
  8004204bdf:	48 8b 12             	mov    (%rdx),%rdx
  8004204be2:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204be6:	48 39 d0             	cmp    %rdx,%rax
  8004204be9:	72 35                	jb     8004204c20 <check_page_alloc+0x50d>
  8004204beb:	48 b9 c5 f1 21 04 80 	movabs $0x800421f1c5,%rcx
  8004204bf2:	00 00 00 
  8004204bf5:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204bfc:	00 00 00 
  8004204bff:	be 58 04 00 00       	mov    $0x458,%esi
  8004204c04:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204c0b:	00 00 00 
  8004204c0e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c13:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c1a:	00 00 00 
  8004204c1d:	41 ff d0             	callq  *%r8
  8004204c20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c24:	48 89 c7             	mov    %rax,%rdi
  8004204c27:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204c2e:	00 00 00 
  8004204c31:	ff d0                	callq  *%rax
  8004204c33:	48 ba f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rdx
  8004204c3a:	00 00 00 
  8004204c3d:	48 8b 12             	mov    (%rdx),%rdx
  8004204c40:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204c44:	48 39 d0             	cmp    %rdx,%rax
  8004204c47:	72 35                	jb     8004204c7e <check_page_alloc+0x56b>
  8004204c49:	48 b9 e2 f1 21 04 80 	movabs $0x800421f1e2,%rcx
  8004204c50:	00 00 00 
  8004204c53:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204c5a:	00 00 00 
  8004204c5d:	be 59 04 00 00       	mov    $0x459,%esi
  8004204c62:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204c69:	00 00 00 
  8004204c6c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c71:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c78:	00 00 00 
  8004204c7b:	41 ff d0             	callq  *%r8
  8004204c7e:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004204c85:	00 00 00 
  8004204c88:	48 8b 00             	mov    (%rax),%rax
  8004204c8b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204c8f:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004204c96:	00 00 00 
  8004204c99:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204ca0:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ca5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204cac:	00 00 00 
  8004204caf:	ff d0                	callq  *%rax
  8004204cb1:	48 85 c0             	test   %rax,%rax
  8004204cb4:	74 35                	je     8004204ceb <check_page_alloc+0x5d8>
  8004204cb6:	48 b9 ff f1 21 04 80 	movabs $0x800421f1ff,%rcx
  8004204cbd:	00 00 00 
  8004204cc0:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204cc7:	00 00 00 
  8004204cca:	be 60 04 00 00       	mov    $0x460,%esi
  8004204ccf:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204cd6:	00 00 00 
  8004204cd9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cde:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ce5:	00 00 00 
  8004204ce8:	41 ff d0             	callq  *%r8
  8004204ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cef:	48 89 c7             	mov    %rax,%rdi
  8004204cf2:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204cf9:	00 00 00 
  8004204cfc:	ff d0                	callq  *%rax
  8004204cfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d02:	48 89 c7             	mov    %rax,%rdi
  8004204d05:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d0c:	00 00 00 
  8004204d0f:	ff d0                	callq  *%rax
  8004204d11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d15:	48 89 c7             	mov    %rax,%rdi
  8004204d18:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d1f:	00 00 00 
  8004204d22:	ff d0                	callq  *%rax
  8004204d24:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204d2b:	00 
  8004204d2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d30:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204d34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d3c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d41:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d48:	00 00 00 
  8004204d4b:	ff d0                	callq  *%rax
  8004204d4d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d51:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204d56:	75 35                	jne    8004204d8d <check_page_alloc+0x67a>
  8004204d58:	48 b9 2f f1 21 04 80 	movabs $0x800421f12f,%rcx
  8004204d5f:	00 00 00 
  8004204d62:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204d69:	00 00 00 
  8004204d6c:	be 67 04 00 00       	mov    $0x467,%esi
  8004204d71:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204d78:	00 00 00 
  8004204d7b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d80:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204d87:	00 00 00 
  8004204d8a:	41 ff d0             	callq  *%r8
  8004204d8d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d92:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d99:	00 00 00 
  8004204d9c:	ff d0                	callq  *%rax
  8004204d9e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204da2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204da7:	75 35                	jne    8004204dde <check_page_alloc+0x6cb>
  8004204da9:	48 b9 45 f1 21 04 80 	movabs $0x800421f145,%rcx
  8004204db0:	00 00 00 
  8004204db3:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204dba:	00 00 00 
  8004204dbd:	be 68 04 00 00       	mov    $0x468,%esi
  8004204dc2:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204dc9:	00 00 00 
  8004204dcc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204dd1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204dd8:	00 00 00 
  8004204ddb:	41 ff d0             	callq  *%r8
  8004204dde:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204de3:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204dea:	00 00 00 
  8004204ded:	ff d0                	callq  *%rax
  8004204def:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204df3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204df8:	75 35                	jne    8004204e2f <check_page_alloc+0x71c>
  8004204dfa:	48 b9 5b f1 21 04 80 	movabs $0x800421f15b,%rcx
  8004204e01:	00 00 00 
  8004204e04:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204e0b:	00 00 00 
  8004204e0e:	be 69 04 00 00       	mov    $0x469,%esi
  8004204e13:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204e1a:	00 00 00 
  8004204e1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e22:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e29:	00 00 00 
  8004204e2c:	41 ff d0             	callq  *%r8
  8004204e2f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e34:	75 35                	jne    8004204e6b <check_page_alloc+0x758>
  8004204e36:	48 b9 71 f1 21 04 80 	movabs $0x800421f171,%rcx
  8004204e3d:	00 00 00 
  8004204e40:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204e47:	00 00 00 
  8004204e4a:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204e4f:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204e56:	00 00 00 
  8004204e59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e65:	00 00 00 
  8004204e68:	41 ff d0             	callq  *%r8
  8004204e6b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204e70:	74 0a                	je     8004204e7c <check_page_alloc+0x769>
  8004204e72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e76:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204e7a:	75 35                	jne    8004204eb1 <check_page_alloc+0x79e>
  8004204e7c:	48 b9 75 f1 21 04 80 	movabs $0x800421f175,%rcx
  8004204e83:	00 00 00 
  8004204e86:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204e8d:	00 00 00 
  8004204e90:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204e95:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204e9c:	00 00 00 
  8004204e9f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ea4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204eab:	00 00 00 
  8004204eae:	41 ff d0             	callq  *%r8
  8004204eb1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204eb6:	74 14                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ebc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204ec0:	74 0a                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204ec2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ec6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204eca:	75 35                	jne    8004204f01 <check_page_alloc+0x7ee>
  8004204ecc:	48 b9 88 f1 21 04 80 	movabs $0x800421f188,%rcx
  8004204ed3:	00 00 00 
  8004204ed6:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204edd:	00 00 00 
  8004204ee0:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004204ee5:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204eec:	00 00 00 
  8004204eef:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ef4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204efb:	00 00 00 
  8004204efe:	41 ff d0             	callq  *%r8
  8004204f01:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f06:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f0d:	00 00 00 
  8004204f10:	ff d0                	callq  *%rax
  8004204f12:	48 85 c0             	test   %rax,%rax
  8004204f15:	74 35                	je     8004204f4c <check_page_alloc+0x839>
  8004204f17:	48 b9 ff f1 21 04 80 	movabs $0x800421f1ff,%rcx
  8004204f1e:	00 00 00 
  8004204f21:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204f28:	00 00 00 
  8004204f2b:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004204f30:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204f37:	00 00 00 
  8004204f3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f3f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204f46:	00 00 00 
  8004204f49:	41 ff d0             	callq  *%r8
  8004204f4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f50:	48 89 c7             	mov    %rax,%rdi
  8004204f53:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204f5a:	00 00 00 
  8004204f5d:	ff d0                	callq  *%rax
  8004204f5f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204f64:	be 01 00 00 00       	mov    $0x1,%esi
  8004204f69:	48 89 c7             	mov    %rax,%rdi
  8004204f6c:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004204f73:	00 00 00 
  8004204f76:	ff d0                	callq  *%rax
  8004204f78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f7c:	48 89 c7             	mov    %rax,%rdi
  8004204f7f:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204f86:	00 00 00 
  8004204f89:	ff d0                	callq  *%rax
  8004204f8b:	bf 01 00 00 00       	mov    $0x1,%edi
  8004204f90:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f97:	00 00 00 
  8004204f9a:	ff d0                	callq  *%rax
  8004204f9c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204fa0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fa5:	75 35                	jne    8004204fdc <check_page_alloc+0x8c9>
  8004204fa7:	48 b9 0e f2 21 04 80 	movabs $0x800421f20e,%rcx
  8004204fae:	00 00 00 
  8004204fb1:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204fb8:	00 00 00 
  8004204fbb:	be 72 04 00 00       	mov    $0x472,%esi
  8004204fc0:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004204fc7:	00 00 00 
  8004204fca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fcf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204fd6:	00 00 00 
  8004204fd9:	41 ff d0             	callq  *%r8
  8004204fdc:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fe1:	74 0a                	je     8004204fed <check_page_alloc+0x8da>
  8004204fe3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204fe7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004204feb:	74 35                	je     8004205022 <check_page_alloc+0x90f>
  8004204fed:	48 b9 2c f2 21 04 80 	movabs $0x800421f22c,%rcx
  8004204ff4:	00 00 00 
  8004204ff7:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004204ffe:	00 00 00 
  8004205001:	be 73 04 00 00       	mov    $0x473,%esi
  8004205006:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420500d:	00 00 00 
  8004205010:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205015:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420501c:	00 00 00 
  800420501f:	41 ff d0             	callq  *%r8
  8004205022:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205026:	48 89 c7             	mov    %rax,%rdi
  8004205029:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004205030:	00 00 00 
  8004205033:	ff d0                	callq  *%rax
  8004205035:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205039:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004205040:	eb 4d                	jmp    800420508f <check_page_alloc+0x97c>
  8004205042:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004205045:	48 63 d0             	movslq %eax,%rdx
  8004205048:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420504c:	48 01 d0             	add    %rdx,%rax
  800420504f:	0f b6 00             	movzbl (%rax),%eax
  8004205052:	84 c0                	test   %al,%al
  8004205054:	74 35                	je     800420508b <check_page_alloc+0x978>
  8004205056:	48 b9 3c f2 21 04 80 	movabs $0x800421f23c,%rcx
  800420505d:	00 00 00 
  8004205060:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205067:	00 00 00 
  800420506a:	be 76 04 00 00       	mov    $0x476,%esi
  800420506f:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205076:	00 00 00 
  8004205079:	b8 00 00 00 00       	mov    $0x0,%eax
  800420507e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205085:	00 00 00 
  8004205088:	41 ff d0             	callq  *%r8
  800420508b:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800420508f:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  8004205096:	7e aa                	jle    8004205042 <check_page_alloc+0x92f>
  8004205098:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  800420509f:	00 00 00 
  80042050a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042050a6:	48 89 10             	mov    %rdx,(%rax)
  80042050a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050ad:	48 89 c7             	mov    %rax,%rdi
  80042050b0:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050b7:	00 00 00 
  80042050ba:	ff d0                	callq  *%rax
  80042050bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042050c0:	48 89 c7             	mov    %rax,%rdi
  80042050c3:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050ca:	00 00 00 
  80042050cd:	ff d0                	callq  *%rax
  80042050cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042050d3:	48 89 c7             	mov    %rax,%rdi
  80042050d6:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050dd:	00 00 00 
  80042050e0:	ff d0                	callq  *%rax
  80042050e2:	48 bf 48 f2 21 04 80 	movabs $0x800421f248,%rdi
  80042050e9:	00 00 00 
  80042050ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042050f1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042050f8:	00 00 00 
  80042050fb:	ff d2                	callq  *%rdx
  80042050fd:	c9                   	leaveq 
  80042050fe:	c3                   	retq   

00000080042050ff <check_boot_pml4e>:
  80042050ff:	55                   	push   %rbp
  8004205100:	48 89 e5             	mov    %rsp,%rbp
  8004205103:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420510a:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004205111:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004205118:	00 00 00 
  800420511b:	48 8b 00             	mov    (%rax),%rax
  800420511e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205122:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004205129:	00 
  800420512a:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004205131:	00 00 00 
  8004205134:	48 8b 00             	mov    (%rax),%rax
  8004205137:	48 c1 e0 04          	shl    $0x4,%rax
  800420513b:	48 89 c2             	mov    %rax,%rdx
  800420513e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205142:	48 01 d0             	add    %rdx,%rax
  8004205145:	48 83 e8 01          	sub    $0x1,%rax
  8004205149:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420514d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205151:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205156:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420515a:	48 89 d0             	mov    %rdx,%rax
  800420515d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004205161:	48 29 c2             	sub    %rax,%rdx
  8004205164:	48 89 d0             	mov    %rdx,%rax
  8004205167:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420516b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205172:	00 
  8004205173:	e9 d4 00 00 00       	jmpq   800420524c <check_boot_pml4e+0x14d>
  8004205178:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  800420517f:	00 00 00 
  8004205182:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205186:	48 01 c2             	add    %rax,%rdx
  8004205189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420518d:	48 89 d6             	mov    %rdx,%rsi
  8004205190:	48 89 c7             	mov    %rax,%rdi
  8004205193:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420519a:	00 00 00 
  800420519d:	ff d0                	callq  *%rax
  800420519f:	48 ba 00 c6 6d 04 80 	movabs $0x80046dc600,%rdx
  80042051a6:	00 00 00 
  80042051a9:	48 8b 12             	mov    (%rdx),%rdx
  80042051ac:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042051b0:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042051b7:	00 00 00 
  80042051ba:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  80042051be:	77 32                	ja     80042051f2 <check_boot_pml4e+0xf3>
  80042051c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042051c4:	48 89 c1             	mov    %rax,%rcx
  80042051c7:	48 ba 88 ee 21 04 80 	movabs $0x800421ee88,%rdx
  80042051ce:	00 00 00 
  80042051d1:	be 96 04 00 00       	mov    $0x496,%esi
  80042051d6:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042051dd:	00 00 00 
  80042051e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042051ec:	00 00 00 
  80042051ef:	41 ff d0             	callq  *%r8
  80042051f2:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042051f9:	ff ff ff 
  80042051fc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004205200:	48 01 d1             	add    %rdx,%rcx
  8004205203:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004205207:	48 01 ca             	add    %rcx,%rdx
  800420520a:	48 39 d0             	cmp    %rdx,%rax
  800420520d:	74 35                	je     8004205244 <check_boot_pml4e+0x145>
  800420520f:	48 b9 68 f2 21 04 80 	movabs $0x800421f268,%rcx
  8004205216:	00 00 00 
  8004205219:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205220:	00 00 00 
  8004205223:	be 96 04 00 00       	mov    $0x496,%esi
  8004205228:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420522f:	00 00 00 
  8004205232:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205237:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420523e:	00 00 00 
  8004205241:	41 ff d0             	callq  *%r8
  8004205244:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420524b:	00 
  800420524c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205250:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205254:	0f 82 1e ff ff ff    	jb     8004205178 <check_boot_pml4e+0x79>
  800420525a:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  8004205261:	00 
  8004205262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205266:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  800420526c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205270:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205274:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205279:	48 f7 75 c8          	divq   -0x38(%rbp)
  800420527d:	48 89 d0             	mov    %rdx,%rax
  8004205280:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004205284:	48 29 c2             	sub    %rax,%rdx
  8004205287:	48 89 d0             	mov    %rdx,%rax
  800420528a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420528e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205295:	00 
  8004205296:	e9 d4 00 00 00       	jmpq   800420536f <check_boot_pml4e+0x270>
  800420529b:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042052a2:	00 00 00 
  80042052a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052a9:	48 01 c2             	add    %rax,%rdx
  80042052ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052b0:	48 89 d6             	mov    %rdx,%rsi
  80042052b3:	48 89 c7             	mov    %rax,%rdi
  80042052b6:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042052bd:	00 00 00 
  80042052c0:	ff d0                	callq  *%rax
  80042052c2:	48 ba 58 d2 4d 04 80 	movabs $0x80044dd258,%rdx
  80042052c9:	00 00 00 
  80042052cc:	48 8b 12             	mov    (%rdx),%rdx
  80042052cf:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042052d3:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052da:	00 00 00 
  80042052dd:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  80042052e1:	77 32                	ja     8004205315 <check_boot_pml4e+0x216>
  80042052e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042052e7:	48 89 c1             	mov    %rax,%rcx
  80042052ea:	48 ba 88 ee 21 04 80 	movabs $0x800421ee88,%rdx
  80042052f1:	00 00 00 
  80042052f4:	be 9d 04 00 00       	mov    $0x49d,%esi
  80042052f9:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205300:	00 00 00 
  8004205303:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205308:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420530f:	00 00 00 
  8004205312:	41 ff d0             	callq  *%r8
  8004205315:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800420531c:	ff ff ff 
  800420531f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004205323:	48 01 d1             	add    %rdx,%rcx
  8004205326:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420532a:	48 01 ca             	add    %rcx,%rdx
  800420532d:	48 39 d0             	cmp    %rdx,%rax
  8004205330:	74 35                	je     8004205367 <check_boot_pml4e+0x268>
  8004205332:	48 b9 a0 f2 21 04 80 	movabs $0x800421f2a0,%rcx
  8004205339:	00 00 00 
  800420533c:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205343:	00 00 00 
  8004205346:	be 9d 04 00 00       	mov    $0x49d,%esi
  800420534b:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205352:	00 00 00 
  8004205355:	b8 00 00 00 00       	mov    $0x0,%eax
  800420535a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205361:	00 00 00 
  8004205364:	41 ff d0             	callq  *%r8
  8004205367:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420536e:	00 
  800420536f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205373:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205377:	0f 82 1e ff ff ff    	jb     800420529b <check_boot_pml4e+0x19c>
  800420537d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205384:	00 
  8004205385:	eb 6a                	jmp    80042053f1 <check_boot_pml4e+0x2f2>
  8004205387:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420538e:	00 00 00 
  8004205391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205395:	48 01 c2             	add    %rax,%rdx
  8004205398:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420539c:	48 89 d6             	mov    %rdx,%rsi
  800420539f:	48 89 c7             	mov    %rax,%rdi
  80042053a2:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042053a9:	00 00 00 
  80042053ac:	ff d0                	callq  *%rax
  80042053ae:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042053b2:	74 35                	je     80042053e9 <check_boot_pml4e+0x2ea>
  80042053b4:	48 b9 d8 f2 21 04 80 	movabs $0x800421f2d8,%rcx
  80042053bb:	00 00 00 
  80042053be:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042053c5:	00 00 00 
  80042053c8:	be a2 04 00 00       	mov    $0x4a2,%esi
  80042053cd:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042053d4:	00 00 00 
  80042053d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042053dc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042053e3:	00 00 00 
  80042053e6:	41 ff d0             	callq  *%r8
  80042053e9:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042053f0:	00 
  80042053f1:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042053f8:	00 00 00 
  80042053fb:	48 8b 00             	mov    (%rax),%rax
  80042053fe:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205402:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004205406:	0f 87 7b ff ff ff    	ja     8004205387 <check_boot_pml4e+0x288>
  800420540c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205413:	00 
  8004205414:	e9 a1 01 00 00       	jmpq   80042055ba <check_boot_pml4e+0x4bb>
  8004205419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420541d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205421:	48 89 d0             	mov    %rdx,%rax
  8004205424:	48 01 c0             	add    %rax,%rax
  8004205427:	48 01 d0             	add    %rdx,%rax
  800420542a:	48 c1 e0 0f          	shl    $0xf,%rax
  800420542e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205435:	00 00 00 
  8004205438:	48 29 c2             	sub    %rax,%rdx
  800420543b:	48 89 d0             	mov    %rdx,%rax
  800420543e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205442:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205449:	00 
  800420544a:	e9 e0 00 00 00       	jmpq   800420552f <check_boot_pml4e+0x430>
  800420544f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205453:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205457:	48 01 d0             	add    %rdx,%rax
  800420545a:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  8004205461:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205465:	48 89 d6             	mov    %rdx,%rsi
  8004205468:	48 89 c7             	mov    %rax,%rdi
  800420546b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205472:	00 00 00 
  8004205475:	ff d0                	callq  *%rax
  8004205477:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420547b:	48 89 d1             	mov    %rdx,%rcx
  800420547e:	48 c1 e1 10          	shl    $0x10,%rcx
  8004205482:	48 ba 00 f0 6d 04 80 	movabs $0x80046df000,%rdx
  8004205489:	00 00 00 
  800420548c:	48 01 ca             	add    %rcx,%rdx
  800420548f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004205493:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800420549a:	00 00 00 
  800420549d:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042054a1:	77 32                	ja     80042054d5 <check_boot_pml4e+0x3d6>
  80042054a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042054a7:	48 89 c1             	mov    %rax,%rcx
  80042054aa:	48 ba 88 ee 21 04 80 	movabs $0x800421ee88,%rdx
  80042054b1:	00 00 00 
  80042054b4:	be ab 04 00 00       	mov    $0x4ab,%esi
  80042054b9:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042054c0:	00 00 00 
  80042054c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042054c8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042054cf:	00 00 00 
  80042054d2:	41 ff d0             	callq  *%r8
  80042054d5:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042054dc:	ff ff ff 
  80042054df:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042054e3:	48 01 d1             	add    %rdx,%rcx
  80042054e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042054ea:	48 01 ca             	add    %rcx,%rdx
  80042054ed:	48 39 d0             	cmp    %rdx,%rax
  80042054f0:	74 35                	je     8004205527 <check_boot_pml4e+0x428>
  80042054f2:	48 b9 00 f3 21 04 80 	movabs $0x800421f300,%rcx
  80042054f9:	00 00 00 
  80042054fc:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205503:	00 00 00 
  8004205506:	be ab 04 00 00       	mov    $0x4ab,%esi
  800420550b:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205512:	00 00 00 
  8004205515:	b8 00 00 00 00       	mov    $0x0,%eax
  800420551a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205521:	00 00 00 
  8004205524:	41 ff d0             	callq  *%r8
  8004205527:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420552e:	00 
  800420552f:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  8004205536:	00 
  8004205537:	0f 86 12 ff ff ff    	jbe    800420544f <check_boot_pml4e+0x350>
  800420553d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205544:	00 
  8004205545:	eb 64                	jmp    80042055ab <check_boot_pml4e+0x4ac>
  8004205547:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420554b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420554f:	48 01 c2             	add    %rax,%rdx
  8004205552:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205556:	48 89 d6             	mov    %rdx,%rsi
  8004205559:	48 89 c7             	mov    %rax,%rdi
  800420555c:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205563:	00 00 00 
  8004205566:	ff d0                	callq  *%rax
  8004205568:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  800420556c:	74 35                	je     80042055a3 <check_boot_pml4e+0x4a4>
  800420556e:	48 b9 48 f3 21 04 80 	movabs $0x800421f348,%rcx
  8004205575:	00 00 00 
  8004205578:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420557f:	00 00 00 
  8004205582:	be ad 04 00 00       	mov    $0x4ad,%esi
  8004205587:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420558e:	00 00 00 
  8004205591:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205596:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420559d:	00 00 00 
  80042055a0:	41 ff d0             	callq  *%r8
  80042055a3:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042055aa:	00 
  80042055ab:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042055b2:	00 
  80042055b3:	76 92                	jbe    8004205547 <check_boot_pml4e+0x448>
  80042055b5:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042055ba:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  80042055bf:	0f 86 54 fe ff ff    	jbe    8004205419 <check_boot_pml4e+0x31a>
  80042055c5:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042055cc:	00 00 00 
  80042055cf:	48 8b 00             	mov    (%rax),%rax
  80042055d2:	48 83 c0 08          	add    $0x8,%rax
  80042055d6:	48 8b 00             	mov    (%rax),%rax
  80042055d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042055df:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042055e3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042055e7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042055eb:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042055ee:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042055f1:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042055f8:	00 00 00 
  80042055fb:	48 8b 00             	mov    (%rax),%rax
  80042055fe:	48 39 c2             	cmp    %rax,%rdx
  8004205601:	72 32                	jb     8004205635 <check_boot_pml4e+0x536>
  8004205603:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205607:	48 89 c1             	mov    %rax,%rcx
  800420560a:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004205611:	00 00 00 
  8004205614:	be b7 04 00 00       	mov    $0x4b7,%esi
  8004205619:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205620:	00 00 00 
  8004205623:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205628:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420562f:	00 00 00 
  8004205632:	41 ff d0             	callq  *%r8
  8004205635:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420563c:	00 00 00 
  800420563f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205643:	48 01 d0             	add    %rdx,%rax
  8004205646:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420564a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420564e:	48 8b 00             	mov    (%rax),%rax
  8004205651:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205657:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800420565b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420565f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205663:	89 45 84             	mov    %eax,-0x7c(%rbp)
  8004205666:	8b 55 84             	mov    -0x7c(%rbp),%edx
  8004205669:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004205670:	00 00 00 
  8004205673:	48 8b 00             	mov    (%rax),%rax
  8004205676:	48 39 c2             	cmp    %rax,%rdx
  8004205679:	72 32                	jb     80042056ad <check_boot_pml4e+0x5ae>
  800420567b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420567f:	48 89 c1             	mov    %rax,%rcx
  8004205682:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004205689:	00 00 00 
  800420568c:	be b8 04 00 00       	mov    $0x4b8,%esi
  8004205691:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205698:	00 00 00 
  800420569b:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056a0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042056a7:	00 00 00 
  80042056aa:	41 ff d0             	callq  *%r8
  80042056ad:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042056b4:	00 00 00 
  80042056b7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042056bb:	48 01 d0             	add    %rdx,%rax
  80042056be:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042056c5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042056cc:	00 
  80042056cd:	e9 50 01 00 00       	jmpq   8004205822 <check_boot_pml4e+0x723>
  80042056d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056d6:	48 83 f8 04          	cmp    $0x4,%rax
  80042056da:	72 67                	jb     8004205743 <check_boot_pml4e+0x644>
  80042056dc:	48 83 f8 05          	cmp    $0x5,%rax
  80042056e0:	76 06                	jbe    80042056e8 <check_boot_pml4e+0x5e9>
  80042056e2:	48 83 f8 1f          	cmp    $0x1f,%rax
  80042056e6:	75 5b                	jne    8004205743 <check_boot_pml4e+0x644>
  80042056e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056ec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042056f3:	00 
  80042056f4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042056fb:	48 01 d0             	add    %rdx,%rax
  80042056fe:	48 8b 00             	mov    (%rax),%rax
  8004205701:	83 e0 01             	and    $0x1,%eax
  8004205704:	48 85 c0             	test   %rax,%rax
  8004205707:	75 35                	jne    800420573e <check_boot_pml4e+0x63f>
  8004205709:	48 b9 6b f3 21 04 80 	movabs $0x800421f36b,%rcx
  8004205710:	00 00 00 
  8004205713:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420571a:	00 00 00 
  800420571d:	be c2 04 00 00       	mov    $0x4c2,%esi
  8004205722:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205729:	00 00 00 
  800420572c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205731:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205738:	00 00 00 
  800420573b:	41 ff d0             	callq  *%r8
  800420573e:	e9 da 00 00 00       	jmpq   800420581d <check_boot_pml4e+0x71e>
  8004205743:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  8004205748:	0f 86 ce 00 00 00    	jbe    800420581c <check_boot_pml4e+0x71d>
  800420574e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205752:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205759:	00 
  800420575a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205761:	48 01 d0             	add    %rdx,%rax
  8004205764:	48 8b 00             	mov    (%rax),%rax
  8004205767:	83 e0 01             	and    $0x1,%eax
  800420576a:	48 85 c0             	test   %rax,%rax
  800420576d:	74 5a                	je     80042057c9 <check_boot_pml4e+0x6ca>
  800420576f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205773:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420577a:	00 
  800420577b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205782:	48 01 d0             	add    %rdx,%rax
  8004205785:	48 8b 00             	mov    (%rax),%rax
  8004205788:	83 e0 02             	and    $0x2,%eax
  800420578b:	48 85 c0             	test   %rax,%rax
  800420578e:	0f 85 88 00 00 00    	jne    800420581c <check_boot_pml4e+0x71d>
  8004205794:	48 b9 7c f3 21 04 80 	movabs $0x800421f37c,%rcx
  800420579b:	00 00 00 
  800420579e:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042057a5:	00 00 00 
  80042057a8:	be c7 04 00 00       	mov    $0x4c7,%esi
  80042057ad:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042057b4:	00 00 00 
  80042057b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057bc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042057c3:	00 00 00 
  80042057c6:	41 ff d0             	callq  *%r8
  80042057c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042057cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042057d4:	00 
  80042057d5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042057dc:	48 01 d0             	add    %rdx,%rax
  80042057df:	48 8b 00             	mov    (%rax),%rax
  80042057e2:	48 85 c0             	test   %rax,%rax
  80042057e5:	74 35                	je     800420581c <check_boot_pml4e+0x71d>
  80042057e7:	48 b9 8d f3 21 04 80 	movabs $0x800421f38d,%rcx
  80042057ee:	00 00 00 
  80042057f1:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042057f8:	00 00 00 
  80042057fb:	be c9 04 00 00       	mov    $0x4c9,%esi
  8004205800:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205807:	00 00 00 
  800420580a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420580f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205816:	00 00 00 
  8004205819:	41 ff d0             	callq  *%r8
  800420581c:	90                   	nop
  800420581d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205822:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  8004205829:	00 
  800420582a:	0f 86 a2 fe ff ff    	jbe    80042056d2 <check_boot_pml4e+0x5d3>
  8004205830:	48 bf a0 f3 21 04 80 	movabs $0x800421f3a0,%rdi
  8004205837:	00 00 00 
  800420583a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420583f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004205846:	00 00 00 
  8004205849:	ff d2                	callq  *%rdx
  800420584b:	c9                   	leaveq 
  800420584c:	c3                   	retq   

000000800420584d <check_va2pa>:
  800420584d:	55                   	push   %rbp
  800420584e:	48 89 e5             	mov    %rsp,%rbp
  8004205851:	48 83 ec 60          	sub    $0x60,%rsp
  8004205855:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004205859:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420585d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205861:	48 c1 e8 27          	shr    $0x27,%rax
  8004205865:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420586a:	48 c1 e0 03          	shl    $0x3,%rax
  800420586e:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  8004205872:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205876:	48 8b 00             	mov    (%rax),%rax
  8004205879:	83 e0 01             	and    $0x1,%eax
  800420587c:	48 85 c0             	test   %rax,%rax
  800420587f:	75 0c                	jne    800420588d <check_va2pa+0x40>
  8004205881:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205888:	e9 38 02 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  800420588d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205891:	48 8b 00             	mov    (%rax),%rax
  8004205894:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420589a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420589e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058a2:	48 c1 e8 0c          	shr    $0xc,%rax
  80042058a6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042058a9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042058ac:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042058b3:	00 00 00 
  80042058b6:	48 8b 00             	mov    (%rax),%rax
  80042058b9:	48 39 c2             	cmp    %rax,%rdx
  80042058bc:	72 32                	jb     80042058f0 <check_va2pa+0xa3>
  80042058be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058c2:	48 89 c1             	mov    %rax,%rcx
  80042058c5:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  80042058cc:	00 00 00 
  80042058cf:	be e1 04 00 00       	mov    $0x4e1,%esi
  80042058d4:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042058db:	00 00 00 
  80042058de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042058e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042058ea:	00 00 00 
  80042058ed:	41 ff d0             	callq  *%r8
  80042058f0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042058f7:	00 00 00 
  80042058fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058fe:	48 01 d0             	add    %rdx,%rax
  8004205901:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205905:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205909:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420590d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205919:	00 
  800420591a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420591e:	48 01 d0             	add    %rdx,%rax
  8004205921:	48 8b 00             	mov    (%rax),%rax
  8004205924:	83 e0 01             	and    $0x1,%eax
  8004205927:	48 85 c0             	test   %rax,%rax
  800420592a:	75 0c                	jne    8004205938 <check_va2pa+0xeb>
  800420592c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205933:	e9 8d 01 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  8004205938:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420593c:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205940:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205945:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420594c:	00 
  800420594d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205951:	48 01 d0             	add    %rdx,%rax
  8004205954:	48 8b 00             	mov    (%rax),%rax
  8004205957:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420595d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205961:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205965:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205969:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420596c:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420596f:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004205976:	00 00 00 
  8004205979:	48 8b 00             	mov    (%rax),%rax
  800420597c:	48 39 c2             	cmp    %rax,%rdx
  800420597f:	72 32                	jb     80042059b3 <check_va2pa+0x166>
  8004205981:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205985:	48 89 c1             	mov    %rax,%rcx
  8004205988:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  800420598f:	00 00 00 
  8004205992:	be e5 04 00 00       	mov    $0x4e5,%esi
  8004205997:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420599e:	00 00 00 
  80042059a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042059a6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042059ad:	00 00 00 
  80042059b0:	41 ff d0             	callq  *%r8
  80042059b3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042059ba:	00 00 00 
  80042059bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042059c1:	48 01 d0             	add    %rdx,%rax
  80042059c4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042059c8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059cc:	48 c1 e8 15          	shr    $0x15,%rax
  80042059d0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059d5:	48 c1 e0 03          	shl    $0x3,%rax
  80042059d9:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  80042059dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059e1:	48 8b 00             	mov    (%rax),%rax
  80042059e4:	83 e0 01             	and    $0x1,%eax
  80042059e7:	48 85 c0             	test   %rax,%rax
  80042059ea:	75 0c                	jne    80042059f8 <check_va2pa+0x1ab>
  80042059ec:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059f3:	e9 cd 00 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  80042059f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059fc:	48 8b 00             	mov    (%rax),%rax
  80042059ff:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205a05:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205a09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a0d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a11:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205a14:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205a17:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004205a1e:	00 00 00 
  8004205a21:	48 8b 00             	mov    (%rax),%rax
  8004205a24:	48 39 c2             	cmp    %rax,%rdx
  8004205a27:	72 32                	jb     8004205a5b <check_va2pa+0x20e>
  8004205a29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a2d:	48 89 c1             	mov    %rax,%rcx
  8004205a30:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004205a37:	00 00 00 
  8004205a3a:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205a3f:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205a46:	00 00 00 
  8004205a49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a4e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205a55:	00 00 00 
  8004205a58:	41 ff d0             	callq  *%r8
  8004205a5b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a62:	00 00 00 
  8004205a65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a69:	48 01 d0             	add    %rdx,%rax
  8004205a6c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205a70:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a74:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a78:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a7d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a84:	00 
  8004205a85:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205a89:	48 01 d0             	add    %rdx,%rax
  8004205a8c:	48 8b 00             	mov    (%rax),%rax
  8004205a8f:	83 e0 01             	and    $0x1,%eax
  8004205a92:	48 85 c0             	test   %rax,%rax
  8004205a95:	75 09                	jne    8004205aa0 <check_va2pa+0x253>
  8004205a97:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205a9e:	eb 25                	jmp    8004205ac5 <check_va2pa+0x278>
  8004205aa0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205aa4:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205aa8:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205aad:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205ab4:	00 
  8004205ab5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205ab9:	48 01 d0             	add    %rdx,%rax
  8004205abc:	48 8b 00             	mov    (%rax),%rax
  8004205abf:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205ac5:	c9                   	leaveq 
  8004205ac6:	c3                   	retq   

0000008004205ac7 <page_check>:
  8004205ac7:	55                   	push   %rbp
  8004205ac8:	48 89 e5             	mov    %rsp,%rbp
  8004205acb:	53                   	push   %rbx
  8004205acc:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205ad3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205ada:	00 
  8004205adb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205adf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205ae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205ae7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205aeb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205aef:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205af7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205afb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205aff:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b03:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b08:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b0f:	00 00 00 
  8004205b12:	ff d0                	callq  *%rax
  8004205b14:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b18:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205b1d:	75 35                	jne    8004205b54 <page_check+0x8d>
  8004205b1f:	48 b9 bf f3 21 04 80 	movabs $0x800421f3bf,%rcx
  8004205b26:	00 00 00 
  8004205b29:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205b30:	00 00 00 
  8004205b33:	be 02 05 00 00       	mov    $0x502,%esi
  8004205b38:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205b3f:	00 00 00 
  8004205b42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b4e:	00 00 00 
  8004205b51:	41 ff d0             	callq  *%r8
  8004205b54:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b59:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b60:	00 00 00 
  8004205b63:	ff d0                	callq  *%rax
  8004205b65:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205b69:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205b6e:	75 35                	jne    8004205ba5 <page_check+0xde>
  8004205b70:	48 b9 d3 f3 21 04 80 	movabs $0x800421f3d3,%rcx
  8004205b77:	00 00 00 
  8004205b7a:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205b81:	00 00 00 
  8004205b84:	be 03 05 00 00       	mov    $0x503,%esi
  8004205b89:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205b90:	00 00 00 
  8004205b93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b9f:	00 00 00 
  8004205ba2:	41 ff d0             	callq  *%r8
  8004205ba5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205baa:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205bb1:	00 00 00 
  8004205bb4:	ff d0                	callq  *%rax
  8004205bb6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205bba:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205bbf:	75 35                	jne    8004205bf6 <page_check+0x12f>
  8004205bc1:	48 b9 e7 f3 21 04 80 	movabs $0x800421f3e7,%rcx
  8004205bc8:	00 00 00 
  8004205bcb:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205bd2:	00 00 00 
  8004205bd5:	be 04 05 00 00       	mov    $0x504,%esi
  8004205bda:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205be1:	00 00 00 
  8004205be4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205be9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205bf0:	00 00 00 
  8004205bf3:	41 ff d0             	callq  *%r8
  8004205bf6:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205bfb:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c02:	00 00 00 
  8004205c05:	ff d0                	callq  *%rax
  8004205c07:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c0b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205c10:	75 35                	jne    8004205c47 <page_check+0x180>
  8004205c12:	48 b9 fb f3 21 04 80 	movabs $0x800421f3fb,%rcx
  8004205c19:	00 00 00 
  8004205c1c:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205c23:	00 00 00 
  8004205c26:	be 05 05 00 00       	mov    $0x505,%esi
  8004205c2b:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205c32:	00 00 00 
  8004205c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c3a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c41:	00 00 00 
  8004205c44:	41 ff d0             	callq  *%r8
  8004205c47:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c4c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c53:	00 00 00 
  8004205c56:	ff d0                	callq  *%rax
  8004205c58:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c5c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205c61:	75 35                	jne    8004205c98 <page_check+0x1d1>
  8004205c63:	48 b9 0f f4 21 04 80 	movabs $0x800421f40f,%rcx
  8004205c6a:	00 00 00 
  8004205c6d:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205c74:	00 00 00 
  8004205c77:	be 06 05 00 00       	mov    $0x506,%esi
  8004205c7c:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205c83:	00 00 00 
  8004205c86:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c8b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c92:	00 00 00 
  8004205c95:	41 ff d0             	callq  *%r8
  8004205c98:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c9d:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205ca4:	00 00 00 
  8004205ca7:	ff d0                	callq  *%rax
  8004205ca9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205cad:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205cb2:	75 35                	jne    8004205ce9 <page_check+0x222>
  8004205cb4:	48 b9 23 f4 21 04 80 	movabs $0x800421f423,%rcx
  8004205cbb:	00 00 00 
  8004205cbe:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205cc5:	00 00 00 
  8004205cc8:	be 07 05 00 00       	mov    $0x507,%esi
  8004205ccd:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205cd4:	00 00 00 
  8004205cd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ce3:	00 00 00 
  8004205ce6:	41 ff d0             	callq  *%r8
  8004205ce9:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205cee:	75 35                	jne    8004205d25 <page_check+0x25e>
  8004205cf0:	48 b9 71 f1 21 04 80 	movabs $0x800421f171,%rcx
  8004205cf7:	00 00 00 
  8004205cfa:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205d01:	00 00 00 
  8004205d04:	be 09 05 00 00       	mov    $0x509,%esi
  8004205d09:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205d10:	00 00 00 
  8004205d13:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d18:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d1f:	00 00 00 
  8004205d22:	41 ff d0             	callq  *%r8
  8004205d25:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205d2a:	74 0a                	je     8004205d36 <page_check+0x26f>
  8004205d2c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205d30:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d34:	75 35                	jne    8004205d6b <page_check+0x2a4>
  8004205d36:	48 b9 75 f1 21 04 80 	movabs $0x800421f175,%rcx
  8004205d3d:	00 00 00 
  8004205d40:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205d47:	00 00 00 
  8004205d4a:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205d4f:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205d56:	00 00 00 
  8004205d59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d65:	00 00 00 
  8004205d68:	41 ff d0             	callq  *%r8
  8004205d6b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d70:	74 14                	je     8004205d86 <page_check+0x2bf>
  8004205d72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d76:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205d7a:	74 0a                	je     8004205d86 <page_check+0x2bf>
  8004205d7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d80:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d84:	75 35                	jne    8004205dbb <page_check+0x2f4>
  8004205d86:	48 b9 88 f1 21 04 80 	movabs $0x800421f188,%rcx
  8004205d8d:	00 00 00 
  8004205d90:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205d97:	00 00 00 
  8004205d9a:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205d9f:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205da6:	00 00 00 
  8004205da9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dae:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205db5:	00 00 00 
  8004205db8:	41 ff d0             	callq  *%r8
  8004205dbb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205dc0:	74 1e                	je     8004205de0 <page_check+0x319>
  8004205dc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dc6:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205dca:	74 14                	je     8004205de0 <page_check+0x319>
  8004205dcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dd0:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205dd4:	74 0a                	je     8004205de0 <page_check+0x319>
  8004205dd6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dda:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205dde:	75 35                	jne    8004205e15 <page_check+0x34e>
  8004205de0:	48 b9 38 f4 21 04 80 	movabs $0x800421f438,%rcx
  8004205de7:	00 00 00 
  8004205dea:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205df1:	00 00 00 
  8004205df4:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205df9:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205e00:	00 00 00 
  8004205e03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e08:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e0f:	00 00 00 
  8004205e12:	41 ff d0             	callq  *%r8
  8004205e15:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205e1a:	74 28                	je     8004205e44 <page_check+0x37d>
  8004205e1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e20:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e24:	74 1e                	je     8004205e44 <page_check+0x37d>
  8004205e26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e2a:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e2e:	74 14                	je     8004205e44 <page_check+0x37d>
  8004205e30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e34:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205e38:	74 0a                	je     8004205e44 <page_check+0x37d>
  8004205e3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e3e:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e42:	75 35                	jne    8004205e79 <page_check+0x3b2>
  8004205e44:	48 b9 68 f4 21 04 80 	movabs $0x800421f468,%rcx
  8004205e4b:	00 00 00 
  8004205e4e:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205e55:	00 00 00 
  8004205e58:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205e5d:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205e64:	00 00 00 
  8004205e67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e6c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e73:	00 00 00 
  8004205e76:	41 ff d0             	callq  *%r8
  8004205e79:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205e7e:	74 32                	je     8004205eb2 <page_check+0x3eb>
  8004205e80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e84:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205e88:	74 28                	je     8004205eb2 <page_check+0x3eb>
  8004205e8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e8e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e92:	74 1e                	je     8004205eb2 <page_check+0x3eb>
  8004205e94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e98:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e9c:	74 14                	je     8004205eb2 <page_check+0x3eb>
  8004205e9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ea2:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205ea6:	74 0a                	je     8004205eb2 <page_check+0x3eb>
  8004205ea8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205eac:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205eb0:	75 35                	jne    8004205ee7 <page_check+0x420>
  8004205eb2:	48 b9 a8 f4 21 04 80 	movabs $0x800421f4a8,%rcx
  8004205eb9:	00 00 00 
  8004205ebc:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205ec3:	00 00 00 
  8004205ec6:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004205ecb:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205ed2:	00 00 00 
  8004205ed5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205eda:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ee1:	00 00 00 
  8004205ee4:	41 ff d0             	callq  *%r8
  8004205ee7:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004205eee:	00 00 00 
  8004205ef1:	48 8b 00             	mov    (%rax),%rax
  8004205ef4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205ef8:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  8004205eff:	00 00 00 
  8004205f02:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004205f09:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205f0e:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205f15:	00 00 00 
  8004205f18:	ff d0                	callq  *%rax
  8004205f1a:	48 85 c0             	test   %rax,%rax
  8004205f1d:	74 35                	je     8004205f54 <page_check+0x48d>
  8004205f1f:	48 b9 ff f1 21 04 80 	movabs $0x800421f1ff,%rcx
  8004205f26:	00 00 00 
  8004205f29:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205f30:	00 00 00 
  8004205f33:	be 15 05 00 00       	mov    $0x515,%esi
  8004205f38:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205f3f:	00 00 00 
  8004205f42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205f4e:	00 00 00 
  8004205f51:	41 ff d0             	callq  *%r8
  8004205f54:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004205f5b:	00 00 00 
  8004205f5e:	48 8b 00             	mov    (%rax),%rax
  8004205f61:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  8004205f68:	be 00 00 00 00       	mov    $0x0,%esi
  8004205f6d:	48 89 c7             	mov    %rax,%rdi
  8004205f70:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004205f77:	00 00 00 
  8004205f7a:	ff d0                	callq  *%rax
  8004205f7c:	48 85 c0             	test   %rax,%rax
  8004205f7f:	74 35                	je     8004205fb6 <page_check+0x4ef>
  8004205f81:	48 b9 f8 f4 21 04 80 	movabs $0x800421f4f8,%rcx
  8004205f88:	00 00 00 
  8004205f8b:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205f92:	00 00 00 
  8004205f95:	be 18 05 00 00       	mov    $0x518,%esi
  8004205f9a:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004205fa1:	00 00 00 
  8004205fa4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fa9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205fb0:	00 00 00 
  8004205fb3:	41 ff d0             	callq  *%r8
  8004205fb6:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004205fbd:	00 00 00 
  8004205fc0:	48 8b 00             	mov    (%rax),%rax
  8004205fc3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004205fc7:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004205fcc:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205fd1:	48 89 c7             	mov    %rax,%rdi
  8004205fd4:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004205fdb:	00 00 00 
  8004205fde:	ff d0                	callq  *%rax
  8004205fe0:	85 c0                	test   %eax,%eax
  8004205fe2:	78 35                	js     8004206019 <page_check+0x552>
  8004205fe4:	48 b9 30 f5 21 04 80 	movabs $0x800421f530,%rcx
  8004205feb:	00 00 00 
  8004205fee:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004205ff5:	00 00 00 
  8004205ff8:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004205ffd:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206004:	00 00 00 
  8004206007:	b8 00 00 00 00       	mov    $0x0,%eax
  800420600c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206013:	00 00 00 
  8004206016:	41 ff d0             	callq  *%r8
  8004206019:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420601d:	48 89 c7             	mov    %rax,%rdi
  8004206020:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004206027:	00 00 00 
  800420602a:	ff d0                	callq  *%rax
  800420602c:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206033:	00 00 00 
  8004206036:	48 8b 00             	mov    (%rax),%rax
  8004206039:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420603d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206042:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206047:	48 89 c7             	mov    %rax,%rdi
  800420604a:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206051:	00 00 00 
  8004206054:	ff d0                	callq  *%rax
  8004206056:	85 c0                	test   %eax,%eax
  8004206058:	78 35                	js     800420608f <page_check+0x5c8>
  800420605a:	48 b9 30 f5 21 04 80 	movabs $0x800421f530,%rcx
  8004206061:	00 00 00 
  8004206064:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420606b:	00 00 00 
  800420606e:	be 1f 05 00 00       	mov    $0x51f,%esi
  8004206073:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420607a:	00 00 00 
  800420607d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206082:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206089:	00 00 00 
  800420608c:	41 ff d0             	callq  *%r8
  800420608f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206093:	48 89 c7             	mov    %rax,%rdi
  8004206096:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420609d:	00 00 00 
  80042060a0:	ff d0                	callq  *%rax
  80042060a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042060a6:	48 89 c7             	mov    %rax,%rdi
  80042060a9:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042060b0:	00 00 00 
  80042060b3:	ff d0                	callq  *%rax
  80042060b5:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042060bc:	00 00 00 
  80042060bf:	48 8b 00             	mov    (%rax),%rax
  80042060c2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042060c6:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042060cb:	ba 00 00 00 00       	mov    $0x0,%edx
  80042060d0:	48 89 c7             	mov    %rax,%rdi
  80042060d3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042060da:	00 00 00 
  80042060dd:	ff d0                	callq  *%rax
  80042060df:	85 c0                	test   %eax,%eax
  80042060e1:	74 35                	je     8004206118 <page_check+0x651>
  80042060e3:	48 b9 60 f5 21 04 80 	movabs $0x800421f560,%rcx
  80042060ea:	00 00 00 
  80042060ed:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042060f4:	00 00 00 
  80042060f7:	be 25 05 00 00       	mov    $0x525,%esi
  80042060fc:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206103:	00 00 00 
  8004206106:	b8 00 00 00 00       	mov    $0x0,%eax
  800420610b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206112:	00 00 00 
  8004206115:	41 ff d0             	callq  *%r8
  8004206118:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  800420611f:	00 00 00 
  8004206122:	48 8b 00             	mov    (%rax),%rax
  8004206125:	48 8b 00             	mov    (%rax),%rax
  8004206128:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420612e:	48 89 c3             	mov    %rax,%rbx
  8004206131:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206135:	48 89 c7             	mov    %rax,%rdi
  8004206138:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420613f:	00 00 00 
  8004206142:	ff d0                	callq  *%rax
  8004206144:	48 39 c3             	cmp    %rax,%rbx
  8004206147:	0f 84 97 00 00 00    	je     80042061e4 <page_check+0x71d>
  800420614d:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206154:	00 00 00 
  8004206157:	48 8b 00             	mov    (%rax),%rax
  800420615a:	48 8b 00             	mov    (%rax),%rax
  800420615d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206163:	48 89 c3             	mov    %rax,%rbx
  8004206166:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420616a:	48 89 c7             	mov    %rax,%rdi
  800420616d:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206174:	00 00 00 
  8004206177:	ff d0                	callq  *%rax
  8004206179:	48 39 c3             	cmp    %rax,%rbx
  800420617c:	74 66                	je     80042061e4 <page_check+0x71d>
  800420617e:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206185:	00 00 00 
  8004206188:	48 8b 00             	mov    (%rax),%rax
  800420618b:	48 8b 00             	mov    (%rax),%rax
  800420618e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206194:	48 89 c3             	mov    %rax,%rbx
  8004206197:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420619b:	48 89 c7             	mov    %rax,%rdi
  800420619e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042061a5:	00 00 00 
  80042061a8:	ff d0                	callq  *%rax
  80042061aa:	48 39 c3             	cmp    %rax,%rbx
  80042061ad:	74 35                	je     80042061e4 <page_check+0x71d>
  80042061af:	48 b9 90 f5 21 04 80 	movabs $0x800421f590,%rcx
  80042061b6:	00 00 00 
  80042061b9:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042061c0:	00 00 00 
  80042061c3:	be 26 05 00 00       	mov    $0x526,%esi
  80042061c8:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042061cf:	00 00 00 
  80042061d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061d7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042061de:	00 00 00 
  80042061e1:	41 ff d0             	callq  *%r8
  80042061e4:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042061eb:	00 00 00 
  80042061ee:	48 8b 00             	mov    (%rax),%rax
  80042061f1:	be 00 00 00 00       	mov    $0x0,%esi
  80042061f6:	48 89 c7             	mov    %rax,%rdi
  80042061f9:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206200:	00 00 00 
  8004206203:	ff d0                	callq  *%rax
  8004206205:	48 89 c3             	mov    %rax,%rbx
  8004206208:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420620c:	48 89 c7             	mov    %rax,%rdi
  800420620f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206216:	00 00 00 
  8004206219:	ff d0                	callq  *%rax
  800420621b:	48 39 c3             	cmp    %rax,%rbx
  800420621e:	74 35                	je     8004206255 <page_check+0x78e>
  8004206220:	48 b9 18 f6 21 04 80 	movabs $0x800421f618,%rcx
  8004206227:	00 00 00 
  800420622a:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206231:	00 00 00 
  8004206234:	be 27 05 00 00       	mov    $0x527,%esi
  8004206239:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206240:	00 00 00 
  8004206243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206248:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420624f:	00 00 00 
  8004206252:	41 ff d0             	callq  *%r8
  8004206255:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206259:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420625d:	66 83 f8 01          	cmp    $0x1,%ax
  8004206261:	74 35                	je     8004206298 <page_check+0x7d1>
  8004206263:	48 b9 45 f6 21 04 80 	movabs $0x800421f645,%rcx
  800420626a:	00 00 00 
  800420626d:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206274:	00 00 00 
  8004206277:	be 28 05 00 00       	mov    $0x528,%esi
  800420627c:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206283:	00 00 00 
  8004206286:	b8 00 00 00 00       	mov    $0x0,%eax
  800420628b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206292:	00 00 00 
  8004206295:	41 ff d0             	callq  *%r8
  8004206298:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420629c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062a0:	66 83 f8 01          	cmp    $0x1,%ax
  80042062a4:	74 35                	je     80042062db <page_check+0x814>
  80042062a6:	48 b9 56 f6 21 04 80 	movabs $0x800421f656,%rcx
  80042062ad:	00 00 00 
  80042062b0:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042062b7:	00 00 00 
  80042062ba:	be 29 05 00 00       	mov    $0x529,%esi
  80042062bf:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042062c6:	00 00 00 
  80042062c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042062ce:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042062d5:	00 00 00 
  80042062d8:	41 ff d0             	callq  *%r8
  80042062db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062df:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062e3:	66 83 f8 01          	cmp    $0x1,%ax
  80042062e7:	74 35                	je     800420631e <page_check+0x857>
  80042062e9:	48 b9 67 f6 21 04 80 	movabs $0x800421f667,%rcx
  80042062f0:	00 00 00 
  80042062f3:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042062fa:	00 00 00 
  80042062fd:	be 2a 05 00 00       	mov    $0x52a,%esi
  8004206302:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206309:	00 00 00 
  800420630c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206311:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206318:	00 00 00 
  800420631b:	41 ff d0             	callq  *%r8
  800420631e:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206325:	00 00 00 
  8004206328:	48 8b 00             	mov    (%rax),%rax
  800420632b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420632f:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206334:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206339:	48 89 c7             	mov    %rax,%rdi
  800420633c:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206343:	00 00 00 
  8004206346:	ff d0                	callq  *%rax
  8004206348:	85 c0                	test   %eax,%eax
  800420634a:	74 35                	je     8004206381 <page_check+0x8ba>
  800420634c:	48 b9 78 f6 21 04 80 	movabs $0x800421f678,%rcx
  8004206353:	00 00 00 
  8004206356:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420635d:	00 00 00 
  8004206360:	be 2c 05 00 00       	mov    $0x52c,%esi
  8004206365:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420636c:	00 00 00 
  800420636f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206374:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420637b:	00 00 00 
  800420637e:	41 ff d0             	callq  *%r8
  8004206381:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206388:	00 00 00 
  800420638b:	48 8b 00             	mov    (%rax),%rax
  800420638e:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206393:	48 89 c7             	mov    %rax,%rdi
  8004206396:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420639d:	00 00 00 
  80042063a0:	ff d0                	callq  *%rax
  80042063a2:	48 89 c3             	mov    %rax,%rbx
  80042063a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063a9:	48 89 c7             	mov    %rax,%rdi
  80042063ac:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042063b3:	00 00 00 
  80042063b6:	ff d0                	callq  *%rax
  80042063b8:	48 39 c3             	cmp    %rax,%rbx
  80042063bb:	74 35                	je     80042063f2 <page_check+0x92b>
  80042063bd:	48 b9 b0 f6 21 04 80 	movabs $0x800421f6b0,%rcx
  80042063c4:	00 00 00 
  80042063c7:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042063ce:	00 00 00 
  80042063d1:	be 2d 05 00 00       	mov    $0x52d,%esi
  80042063d6:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042063dd:	00 00 00 
  80042063e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042063ec:	00 00 00 
  80042063ef:	41 ff d0             	callq  *%r8
  80042063f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063f6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063fa:	66 83 f8 02          	cmp    $0x2,%ax
  80042063fe:	74 35                	je     8004206435 <page_check+0x96e>
  8004206400:	48 b9 e0 f6 21 04 80 	movabs $0x800421f6e0,%rcx
  8004206407:	00 00 00 
  800420640a:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206411:	00 00 00 
  8004206414:	be 2e 05 00 00       	mov    $0x52e,%esi
  8004206419:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206420:	00 00 00 
  8004206423:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206428:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420642f:	00 00 00 
  8004206432:	41 ff d0             	callq  *%r8
  8004206435:	bf 00 00 00 00       	mov    $0x0,%edi
  800420643a:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004206441:	00 00 00 
  8004206444:	ff d0                	callq  *%rax
  8004206446:	48 85 c0             	test   %rax,%rax
  8004206449:	74 35                	je     8004206480 <page_check+0x9b9>
  800420644b:	48 b9 ff f1 21 04 80 	movabs $0x800421f1ff,%rcx
  8004206452:	00 00 00 
  8004206455:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420645c:	00 00 00 
  800420645f:	be 31 05 00 00       	mov    $0x531,%esi
  8004206464:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420646b:	00 00 00 
  800420646e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206473:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420647a:	00 00 00 
  800420647d:	41 ff d0             	callq  *%r8
  8004206480:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206487:	00 00 00 
  800420648a:	48 8b 00             	mov    (%rax),%rax
  800420648d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206491:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206496:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420649b:	48 89 c7             	mov    %rax,%rdi
  800420649e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042064a5:	00 00 00 
  80042064a8:	ff d0                	callq  *%rax
  80042064aa:	85 c0                	test   %eax,%eax
  80042064ac:	74 35                	je     80042064e3 <page_check+0xa1c>
  80042064ae:	48 b9 78 f6 21 04 80 	movabs $0x800421f678,%rcx
  80042064b5:	00 00 00 
  80042064b8:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042064bf:	00 00 00 
  80042064c2:	be 34 05 00 00       	mov    $0x534,%esi
  80042064c7:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042064ce:	00 00 00 
  80042064d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042064dd:	00 00 00 
  80042064e0:	41 ff d0             	callq  *%r8
  80042064e3:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042064ea:	00 00 00 
  80042064ed:	48 8b 00             	mov    (%rax),%rax
  80042064f0:	be 00 10 00 00       	mov    $0x1000,%esi
  80042064f5:	48 89 c7             	mov    %rax,%rdi
  80042064f8:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042064ff:	00 00 00 
  8004206502:	ff d0                	callq  *%rax
  8004206504:	48 89 c3             	mov    %rax,%rbx
  8004206507:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420650b:	48 89 c7             	mov    %rax,%rdi
  800420650e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206515:	00 00 00 
  8004206518:	ff d0                	callq  *%rax
  800420651a:	48 39 c3             	cmp    %rax,%rbx
  800420651d:	74 35                	je     8004206554 <page_check+0xa8d>
  800420651f:	48 b9 b0 f6 21 04 80 	movabs $0x800421f6b0,%rcx
  8004206526:	00 00 00 
  8004206529:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206530:	00 00 00 
  8004206533:	be 35 05 00 00       	mov    $0x535,%esi
  8004206538:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420653f:	00 00 00 
  8004206542:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206547:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420654e:	00 00 00 
  8004206551:	41 ff d0             	callq  *%r8
  8004206554:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206558:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420655c:	66 83 f8 02          	cmp    $0x2,%ax
  8004206560:	74 35                	je     8004206597 <page_check+0xad0>
  8004206562:	48 b9 e0 f6 21 04 80 	movabs $0x800421f6e0,%rcx
  8004206569:	00 00 00 
  800420656c:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206573:	00 00 00 
  8004206576:	be 36 05 00 00       	mov    $0x536,%esi
  800420657b:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206582:	00 00 00 
  8004206585:	b8 00 00 00 00       	mov    $0x0,%eax
  800420658a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206591:	00 00 00 
  8004206594:	41 ff d0             	callq  *%r8
  8004206597:	bf 00 00 00 00       	mov    $0x0,%edi
  800420659c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042065a3:	00 00 00 
  80042065a6:	ff d0                	callq  *%rax
  80042065a8:	48 85 c0             	test   %rax,%rax
  80042065ab:	74 35                	je     80042065e2 <page_check+0xb1b>
  80042065ad:	48 b9 ff f1 21 04 80 	movabs $0x800421f1ff,%rcx
  80042065b4:	00 00 00 
  80042065b7:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042065be:	00 00 00 
  80042065c1:	be 3a 05 00 00       	mov    $0x53a,%esi
  80042065c6:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042065cd:	00 00 00 
  80042065d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065d5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042065dc:	00 00 00 
  80042065df:	41 ff d0             	callq  *%r8
  80042065e2:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042065e9:	00 00 00 
  80042065ec:	48 8b 00             	mov    (%rax),%rax
  80042065ef:	48 8b 00             	mov    (%rax),%rax
  80042065f2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042065f8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042065fc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206600:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206604:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  8004206607:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420660a:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004206611:	00 00 00 
  8004206614:	48 8b 00             	mov    (%rax),%rax
  8004206617:	48 39 c2             	cmp    %rax,%rdx
  800420661a:	72 32                	jb     800420664e <page_check+0xb87>
  800420661c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206620:	48 89 c1             	mov    %rax,%rcx
  8004206623:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  800420662a:	00 00 00 
  800420662d:	be 3c 05 00 00       	mov    $0x53c,%esi
  8004206632:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206639:	00 00 00 
  800420663c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206641:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206648:	00 00 00 
  800420664b:	41 ff d0             	callq  *%r8
  800420664e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206655:	00 00 00 
  8004206658:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420665c:	48 01 d0             	add    %rdx,%rax
  800420665f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004206663:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004206667:	48 8b 00             	mov    (%rax),%rax
  800420666a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206670:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004206674:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206678:	48 c1 e8 0c          	shr    $0xc,%rax
  800420667c:	89 45 8c             	mov    %eax,-0x74(%rbp)
  800420667f:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004206682:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004206689:	00 00 00 
  800420668c:	48 8b 00             	mov    (%rax),%rax
  800420668f:	48 39 c2             	cmp    %rax,%rdx
  8004206692:	72 32                	jb     80042066c6 <page_check+0xbff>
  8004206694:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206698:	48 89 c1             	mov    %rax,%rcx
  800420669b:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  80042066a2:	00 00 00 
  80042066a5:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042066aa:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042066b1:	00 00 00 
  80042066b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066b9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042066c0:	00 00 00 
  80042066c3:	41 ff d0             	callq  *%r8
  80042066c6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042066cd:	00 00 00 
  80042066d0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042066d4:	48 01 d0             	add    %rdx,%rax
  80042066d7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042066db:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042066df:	48 8b 00             	mov    (%rax),%rax
  80042066e2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042066e8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042066ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042066f6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042066fa:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206700:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  8004206706:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800420670d:	00 00 00 
  8004206710:	48 8b 00             	mov    (%rax),%rax
  8004206713:	48 39 c2             	cmp    %rax,%rdx
  8004206716:	72 35                	jb     800420674d <page_check+0xc86>
  8004206718:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420671f:	48 89 c1             	mov    %rax,%rcx
  8004206722:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004206729:	00 00 00 
  800420672c:	be 3e 05 00 00       	mov    $0x53e,%esi
  8004206731:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206738:	00 00 00 
  800420673b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206740:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206747:	00 00 00 
  800420674a:	41 ff d0             	callq  *%r8
  800420674d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206754:	00 00 00 
  8004206757:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420675e:	48 01 d0             	add    %rdx,%rax
  8004206761:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004206768:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  800420676f:	00 00 00 
  8004206772:	48 8b 00             	mov    (%rax),%rax
  8004206775:	ba 00 00 00 00       	mov    $0x0,%edx
  800420677a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420677f:	48 89 c7             	mov    %rax,%rdi
  8004206782:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206789:	00 00 00 
  800420678c:	ff d0                	callq  *%rax
  800420678e:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  8004206795:	48 83 c2 08          	add    $0x8,%rdx
  8004206799:	48 39 d0             	cmp    %rdx,%rax
  800420679c:	74 35                	je     80042067d3 <page_check+0xd0c>
  800420679e:	48 b9 f8 f6 21 04 80 	movabs $0x800421f6f8,%rcx
  80042067a5:	00 00 00 
  80042067a8:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042067af:	00 00 00 
  80042067b2:	be 3f 05 00 00       	mov    $0x53f,%esi
  80042067b7:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042067be:	00 00 00 
  80042067c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042067cd:	00 00 00 
  80042067d0:	41 ff d0             	callq  *%r8
  80042067d3:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042067da:	00 00 00 
  80042067dd:	48 8b 00             	mov    (%rax),%rax
  80042067e0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042067e4:	b9 04 00 00 00       	mov    $0x4,%ecx
  80042067e9:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042067ee:	48 89 c7             	mov    %rax,%rdi
  80042067f1:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042067f8:	00 00 00 
  80042067fb:	ff d0                	callq  *%rax
  80042067fd:	85 c0                	test   %eax,%eax
  80042067ff:	74 35                	je     8004206836 <page_check+0xd6f>
  8004206801:	48 b9 38 f7 21 04 80 	movabs $0x800421f738,%rcx
  8004206808:	00 00 00 
  800420680b:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206812:	00 00 00 
  8004206815:	be 42 05 00 00       	mov    $0x542,%esi
  800420681a:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206821:	00 00 00 
  8004206824:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206829:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206830:	00 00 00 
  8004206833:	41 ff d0             	callq  *%r8
  8004206836:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  800420683d:	00 00 00 
  8004206840:	48 8b 00             	mov    (%rax),%rax
  8004206843:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206848:	48 89 c7             	mov    %rax,%rdi
  800420684b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206852:	00 00 00 
  8004206855:	ff d0                	callq  *%rax
  8004206857:	48 89 c3             	mov    %rax,%rbx
  800420685a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420685e:	48 89 c7             	mov    %rax,%rdi
  8004206861:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206868:	00 00 00 
  800420686b:	ff d0                	callq  *%rax
  800420686d:	48 39 c3             	cmp    %rax,%rbx
  8004206870:	74 35                	je     80042068a7 <page_check+0xde0>
  8004206872:	48 b9 b0 f6 21 04 80 	movabs $0x800421f6b0,%rcx
  8004206879:	00 00 00 
  800420687c:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206883:	00 00 00 
  8004206886:	be 43 05 00 00       	mov    $0x543,%esi
  800420688b:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206892:	00 00 00 
  8004206895:	b8 00 00 00 00       	mov    $0x0,%eax
  800420689a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068a1:	00 00 00 
  80042068a4:	41 ff d0             	callq  *%r8
  80042068a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042068ab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042068af:	66 83 f8 02          	cmp    $0x2,%ax
  80042068b3:	74 35                	je     80042068ea <page_check+0xe23>
  80042068b5:	48 b9 e0 f6 21 04 80 	movabs $0x800421f6e0,%rcx
  80042068bc:	00 00 00 
  80042068bf:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042068c6:	00 00 00 
  80042068c9:	be 44 05 00 00       	mov    $0x544,%esi
  80042068ce:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042068d5:	00 00 00 
  80042068d8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068dd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068e4:	00 00 00 
  80042068e7:	41 ff d0             	callq  *%r8
  80042068ea:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042068f1:	00 00 00 
  80042068f4:	48 8b 00             	mov    (%rax),%rax
  80042068f7:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068fc:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206901:	48 89 c7             	mov    %rax,%rdi
  8004206904:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  800420690b:	00 00 00 
  800420690e:	ff d0                	callq  *%rax
  8004206910:	48 8b 00             	mov    (%rax),%rax
  8004206913:	83 e0 04             	and    $0x4,%eax
  8004206916:	48 85 c0             	test   %rax,%rax
  8004206919:	75 35                	jne    8004206950 <page_check+0xe89>
  800420691b:	48 b9 78 f7 21 04 80 	movabs $0x800421f778,%rcx
  8004206922:	00 00 00 
  8004206925:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420692c:	00 00 00 
  800420692f:	be 45 05 00 00       	mov    $0x545,%esi
  8004206934:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420693b:	00 00 00 
  800420693e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206943:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420694a:	00 00 00 
  800420694d:	41 ff d0             	callq  *%r8
  8004206950:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206957:	00 00 00 
  800420695a:	48 8b 00             	mov    (%rax),%rax
  800420695d:	48 8b 00             	mov    (%rax),%rax
  8004206960:	83 e0 04             	and    $0x4,%eax
  8004206963:	48 85 c0             	test   %rax,%rax
  8004206966:	75 35                	jne    800420699d <page_check+0xed6>
  8004206968:	48 b9 ab f7 21 04 80 	movabs $0x800421f7ab,%rcx
  800420696f:	00 00 00 
  8004206972:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206979:	00 00 00 
  800420697c:	be 46 05 00 00       	mov    $0x546,%esi
  8004206981:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206988:	00 00 00 
  800420698b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206990:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206997:	00 00 00 
  800420699a:	41 ff d0             	callq  *%r8
  800420699d:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042069a4:	00 00 00 
  80042069a7:	48 8b 00             	mov    (%rax),%rax
  80042069aa:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042069ae:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042069b3:	ba 00 00 20 00       	mov    $0x200000,%edx
  80042069b8:	48 89 c7             	mov    %rax,%rdi
  80042069bb:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042069c2:	00 00 00 
  80042069c5:	ff d0                	callq  *%rax
  80042069c7:	85 c0                	test   %eax,%eax
  80042069c9:	78 35                	js     8004206a00 <page_check+0xf39>
  80042069cb:	48 b9 c8 f7 21 04 80 	movabs $0x800421f7c8,%rcx
  80042069d2:	00 00 00 
  80042069d5:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042069dc:	00 00 00 
  80042069df:	be 4a 05 00 00       	mov    $0x54a,%esi
  80042069e4:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042069eb:	00 00 00 
  80042069ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069f3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042069fa:	00 00 00 
  80042069fd:	41 ff d0             	callq  *%r8
  8004206a00:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206a07:	00 00 00 
  8004206a0a:	48 8b 00             	mov    (%rax),%rax
  8004206a0d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206a11:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206a16:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206a1b:	48 89 c7             	mov    %rax,%rdi
  8004206a1e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206a25:	00 00 00 
  8004206a28:	ff d0                	callq  *%rax
  8004206a2a:	85 c0                	test   %eax,%eax
  8004206a2c:	74 35                	je     8004206a63 <page_check+0xf9c>
  8004206a2e:	48 b9 00 f8 21 04 80 	movabs $0x800421f800,%rcx
  8004206a35:	00 00 00 
  8004206a38:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206a3f:	00 00 00 
  8004206a42:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206a47:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206a4e:	00 00 00 
  8004206a51:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a56:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206a5d:	00 00 00 
  8004206a60:	41 ff d0             	callq  *%r8
  8004206a63:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206a6a:	00 00 00 
  8004206a6d:	48 8b 00             	mov    (%rax),%rax
  8004206a70:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a75:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a7a:	48 89 c7             	mov    %rax,%rdi
  8004206a7d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206a84:	00 00 00 
  8004206a87:	ff d0                	callq  *%rax
  8004206a89:	48 8b 00             	mov    (%rax),%rax
  8004206a8c:	83 e0 04             	and    $0x4,%eax
  8004206a8f:	48 85 c0             	test   %rax,%rax
  8004206a92:	74 35                	je     8004206ac9 <page_check+0x1002>
  8004206a94:	48 b9 38 f8 21 04 80 	movabs $0x800421f838,%rcx
  8004206a9b:	00 00 00 
  8004206a9e:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206aa5:	00 00 00 
  8004206aa8:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206aad:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206ab4:	00 00 00 
  8004206ab7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206abc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ac3:	00 00 00 
  8004206ac6:	41 ff d0             	callq  *%r8
  8004206ac9:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206ad0:	00 00 00 
  8004206ad3:	48 8b 00             	mov    (%rax),%rax
  8004206ad6:	be 00 00 00 00       	mov    $0x0,%esi
  8004206adb:	48 89 c7             	mov    %rax,%rdi
  8004206ade:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ae5:	00 00 00 
  8004206ae8:	ff d0                	callq  *%rax
  8004206aea:	48 89 c3             	mov    %rax,%rbx
  8004206aed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206af1:	48 89 c7             	mov    %rax,%rdi
  8004206af4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206afb:	00 00 00 
  8004206afe:	ff d0                	callq  *%rax
  8004206b00:	48 39 c3             	cmp    %rax,%rbx
  8004206b03:	74 35                	je     8004206b3a <page_check+0x1073>
  8004206b05:	48 b9 70 f8 21 04 80 	movabs $0x800421f870,%rcx
  8004206b0c:	00 00 00 
  8004206b0f:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206b16:	00 00 00 
  8004206b19:	be 51 05 00 00       	mov    $0x551,%esi
  8004206b1e:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206b25:	00 00 00 
  8004206b28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206b34:	00 00 00 
  8004206b37:	41 ff d0             	callq  *%r8
  8004206b3a:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206b41:	00 00 00 
  8004206b44:	48 8b 00             	mov    (%rax),%rax
  8004206b47:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206b4c:	48 89 c7             	mov    %rax,%rdi
  8004206b4f:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206b56:	00 00 00 
  8004206b59:	ff d0                	callq  *%rax
  8004206b5b:	48 89 c3             	mov    %rax,%rbx
  8004206b5e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206b62:	48 89 c7             	mov    %rax,%rdi
  8004206b65:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206b6c:	00 00 00 
  8004206b6f:	ff d0                	callq  *%rax
  8004206b71:	48 39 c3             	cmp    %rax,%rbx
  8004206b74:	74 35                	je     8004206bab <page_check+0x10e4>
  8004206b76:	48 b9 a0 f8 21 04 80 	movabs $0x800421f8a0,%rcx
  8004206b7d:	00 00 00 
  8004206b80:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206b87:	00 00 00 
  8004206b8a:	be 52 05 00 00       	mov    $0x552,%esi
  8004206b8f:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206b96:	00 00 00 
  8004206b99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b9e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ba5:	00 00 00 
  8004206ba8:	41 ff d0             	callq  *%r8
  8004206bab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206baf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bb3:	66 83 f8 02          	cmp    $0x2,%ax
  8004206bb7:	74 35                	je     8004206bee <page_check+0x1127>
  8004206bb9:	48 b9 d0 f8 21 04 80 	movabs $0x800421f8d0,%rcx
  8004206bc0:	00 00 00 
  8004206bc3:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206bca:	00 00 00 
  8004206bcd:	be 54 05 00 00       	mov    $0x554,%esi
  8004206bd2:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206bd9:	00 00 00 
  8004206bdc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206be1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206be8:	00 00 00 
  8004206beb:	41 ff d0             	callq  *%r8
  8004206bee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206bf2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bf6:	66 83 f8 01          	cmp    $0x1,%ax
  8004206bfa:	74 35                	je     8004206c31 <page_check+0x116a>
  8004206bfc:	48 b9 e1 f8 21 04 80 	movabs $0x800421f8e1,%rcx
  8004206c03:	00 00 00 
  8004206c06:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206c0d:	00 00 00 
  8004206c10:	be 55 05 00 00       	mov    $0x555,%esi
  8004206c15:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206c1c:	00 00 00 
  8004206c1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206c2b:	00 00 00 
  8004206c2e:	41 ff d0             	callq  *%r8
  8004206c31:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206c38:	00 00 00 
  8004206c3b:	48 8b 00             	mov    (%rax),%rax
  8004206c3e:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c43:	48 89 c7             	mov    %rax,%rdi
  8004206c46:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206c4d:	00 00 00 
  8004206c50:	ff d0                	callq  *%rax
  8004206c52:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206c59:	00 00 00 
  8004206c5c:	48 8b 00             	mov    (%rax),%rax
  8004206c5f:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c64:	48 89 c7             	mov    %rax,%rdi
  8004206c67:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206c6e:	00 00 00 
  8004206c71:	ff d0                	callq  *%rax
  8004206c73:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206c77:	74 35                	je     8004206cae <page_check+0x11e7>
  8004206c79:	48 b9 f8 f8 21 04 80 	movabs $0x800421f8f8,%rcx
  8004206c80:	00 00 00 
  8004206c83:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206c8a:	00 00 00 
  8004206c8d:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206c92:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206c99:	00 00 00 
  8004206c9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ca1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ca8:	00 00 00 
  8004206cab:	41 ff d0             	callq  *%r8
  8004206cae:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206cb5:	00 00 00 
  8004206cb8:	48 8b 00             	mov    (%rax),%rax
  8004206cbb:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206cc0:	48 89 c7             	mov    %rax,%rdi
  8004206cc3:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206cca:	00 00 00 
  8004206ccd:	ff d0                	callq  *%rax
  8004206ccf:	48 89 c3             	mov    %rax,%rbx
  8004206cd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cd6:	48 89 c7             	mov    %rax,%rdi
  8004206cd9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206ce0:	00 00 00 
  8004206ce3:	ff d0                	callq  *%rax
  8004206ce5:	48 39 c3             	cmp    %rax,%rbx
  8004206ce8:	74 35                	je     8004206d1f <page_check+0x1258>
  8004206cea:	48 b9 a0 f8 21 04 80 	movabs $0x800421f8a0,%rcx
  8004206cf1:	00 00 00 
  8004206cf4:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206cfb:	00 00 00 
  8004206cfe:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206d03:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206d0a:	00 00 00 
  8004206d0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d12:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d19:	00 00 00 
  8004206d1c:	41 ff d0             	callq  *%r8
  8004206d1f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d23:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d27:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d2b:	74 35                	je     8004206d62 <page_check+0x129b>
  8004206d2d:	48 b9 45 f6 21 04 80 	movabs $0x800421f645,%rcx
  8004206d34:	00 00 00 
  8004206d37:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206d3e:	00 00 00 
  8004206d41:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206d46:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206d4d:	00 00 00 
  8004206d50:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d55:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d5c:	00 00 00 
  8004206d5f:	41 ff d0             	callq  *%r8
  8004206d62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d66:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d6a:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d6e:	74 35                	je     8004206da5 <page_check+0x12de>
  8004206d70:	48 b9 e1 f8 21 04 80 	movabs $0x800421f8e1,%rcx
  8004206d77:	00 00 00 
  8004206d7a:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206d81:	00 00 00 
  8004206d84:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206d89:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206d90:	00 00 00 
  8004206d93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d9f:	00 00 00 
  8004206da2:	41 ff d0             	callq  *%r8
  8004206da5:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206dac:	00 00 00 
  8004206daf:	48 8b 00             	mov    (%rax),%rax
  8004206db2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206db6:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206dbb:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206dc0:	48 89 c7             	mov    %rax,%rdi
  8004206dc3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206dca:	00 00 00 
  8004206dcd:	ff d0                	callq  *%rax
  8004206dcf:	85 c0                	test   %eax,%eax
  8004206dd1:	74 35                	je     8004206e08 <page_check+0x1341>
  8004206dd3:	48 b9 00 f8 21 04 80 	movabs $0x800421f800,%rcx
  8004206dda:	00 00 00 
  8004206ddd:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206de4:	00 00 00 
  8004206de7:	be 61 05 00 00       	mov    $0x561,%esi
  8004206dec:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206df3:	00 00 00 
  8004206df6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206dfb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e02:	00 00 00 
  8004206e05:	41 ff d0             	callq  *%r8
  8004206e08:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e0c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e10:	66 85 c0             	test   %ax,%ax
  8004206e13:	75 35                	jne    8004206e4a <page_check+0x1383>
  8004206e15:	48 b9 1b f9 21 04 80 	movabs $0x800421f91b,%rcx
  8004206e1c:	00 00 00 
  8004206e1f:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206e26:	00 00 00 
  8004206e29:	be 62 05 00 00       	mov    $0x562,%esi
  8004206e2e:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206e35:	00 00 00 
  8004206e38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e3d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e44:	00 00 00 
  8004206e47:	41 ff d0             	callq  *%r8
  8004206e4a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e4e:	48 8b 00             	mov    (%rax),%rax
  8004206e51:	48 85 c0             	test   %rax,%rax
  8004206e54:	74 35                	je     8004206e8b <page_check+0x13c4>
  8004206e56:	48 b9 27 f9 21 04 80 	movabs $0x800421f927,%rcx
  8004206e5d:	00 00 00 
  8004206e60:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206e67:	00 00 00 
  8004206e6a:	be 63 05 00 00       	mov    $0x563,%esi
  8004206e6f:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206e76:	00 00 00 
  8004206e79:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e7e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e85:	00 00 00 
  8004206e88:	41 ff d0             	callq  *%r8
  8004206e8b:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206e92:	00 00 00 
  8004206e95:	48 8b 00             	mov    (%rax),%rax
  8004206e98:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e9d:	48 89 c7             	mov    %rax,%rdi
  8004206ea0:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206ea7:	00 00 00 
  8004206eaa:	ff d0                	callq  *%rax
  8004206eac:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206eb3:	00 00 00 
  8004206eb6:	48 8b 00             	mov    (%rax),%rax
  8004206eb9:	be 00 00 00 00       	mov    $0x0,%esi
  8004206ebe:	48 89 c7             	mov    %rax,%rdi
  8004206ec1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ec8:	00 00 00 
  8004206ecb:	ff d0                	callq  *%rax
  8004206ecd:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206ed1:	74 35                	je     8004206f08 <page_check+0x1441>
  8004206ed3:	48 b9 f8 f8 21 04 80 	movabs $0x800421f8f8,%rcx
  8004206eda:	00 00 00 
  8004206edd:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206ee4:	00 00 00 
  8004206ee7:	be 67 05 00 00       	mov    $0x567,%esi
  8004206eec:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206ef3:	00 00 00 
  8004206ef6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206efb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f02:	00 00 00 
  8004206f05:	41 ff d0             	callq  *%r8
  8004206f08:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206f0f:	00 00 00 
  8004206f12:	48 8b 00             	mov    (%rax),%rax
  8004206f15:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206f1a:	48 89 c7             	mov    %rax,%rdi
  8004206f1d:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206f24:	00 00 00 
  8004206f27:	ff d0                	callq  *%rax
  8004206f29:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206f2d:	74 35                	je     8004206f64 <page_check+0x149d>
  8004206f2f:	48 b9 40 f9 21 04 80 	movabs $0x800421f940,%rcx
  8004206f36:	00 00 00 
  8004206f39:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206f40:	00 00 00 
  8004206f43:	be 68 05 00 00       	mov    $0x568,%esi
  8004206f48:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206f4f:	00 00 00 
  8004206f52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f5e:	00 00 00 
  8004206f61:	41 ff d0             	callq  *%r8
  8004206f64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f68:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f6c:	66 85 c0             	test   %ax,%ax
  8004206f6f:	74 35                	je     8004206fa6 <page_check+0x14df>
  8004206f71:	48 b9 66 f9 21 04 80 	movabs $0x800421f966,%rcx
  8004206f78:	00 00 00 
  8004206f7b:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206f82:	00 00 00 
  8004206f85:	be 69 05 00 00       	mov    $0x569,%esi
  8004206f8a:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206f91:	00 00 00 
  8004206f94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f99:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fa0:	00 00 00 
  8004206fa3:	41 ff d0             	callq  *%r8
  8004206fa6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206faa:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206fae:	66 83 f8 01          	cmp    $0x1,%ax
  8004206fb2:	74 35                	je     8004206fe9 <page_check+0x1522>
  8004206fb4:	48 b9 e1 f8 21 04 80 	movabs $0x800421f8e1,%rcx
  8004206fbb:	00 00 00 
  8004206fbe:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004206fc5:	00 00 00 
  8004206fc8:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004206fcd:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004206fd4:	00 00 00 
  8004206fd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fe3:	00 00 00 
  8004206fe6:	41 ff d0             	callq  *%r8
  8004206fe9:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004206ff0:	00 00 00 
  8004206ff3:	48 8b 00             	mov    (%rax),%rax
  8004206ff6:	48 8b 00             	mov    (%rax),%rax
  8004206ff9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206fff:	48 89 c7             	mov    %rax,%rdi
  8004207002:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004207009:	00 00 00 
  800420700c:	ff d0                	callq  *%rax
  800420700e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004207015:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  800420701c:	00 00 00 
  800420701f:	48 8b 00             	mov    (%rax),%rax
  8004207022:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207029:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420702d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207031:	66 83 f8 01          	cmp    $0x1,%ax
  8004207035:	74 35                	je     800420706c <page_check+0x15a5>
  8004207037:	48 b9 e1 f8 21 04 80 	movabs $0x800421f8e1,%rcx
  800420703e:	00 00 00 
  8004207041:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207048:	00 00 00 
  800420704b:	be 80 05 00 00       	mov    $0x580,%esi
  8004207050:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207057:	00 00 00 
  800420705a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420705f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207066:	00 00 00 
  8004207069:	41 ff d0             	callq  *%r8
  800420706c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207073:	48 89 c7             	mov    %rax,%rdi
  8004207076:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420707d:	00 00 00 
  8004207080:	ff d0                	callq  *%rax
  8004207082:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207089:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420708d:	74 13                	je     80042070a2 <page_check+0x15db>
  800420708f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207093:	48 89 c7             	mov    %rax,%rdi
  8004207096:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420709d:	00 00 00 
  80042070a0:	ff d0                	callq  *%rax
  80042070a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070a9:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042070ad:	74 13                	je     80042070c2 <page_check+0x15fb>
  80042070af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042070b3:	48 89 c7             	mov    %rax,%rdi
  80042070b6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070bd:	00 00 00 
  80042070c0:	ff d0                	callq  *%rax
  80042070c2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070c9:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  80042070cd:	74 13                	je     80042070e2 <page_check+0x161b>
  80042070cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042070d3:	48 89 c7             	mov    %rax,%rdi
  80042070d6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070dd:	00 00 00 
  80042070e0:	ff d0                	callq  *%rax
  80042070e2:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  80042070e9:	00 40 06 00 
  80042070ed:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042070f4:	00 00 00 
  80042070f7:	48 8b 00             	mov    (%rax),%rax
  80042070fa:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207101:	ba 01 00 00 00       	mov    $0x1,%edx
  8004207106:	48 89 ce             	mov    %rcx,%rsi
  8004207109:	48 89 c7             	mov    %rax,%rdi
  800420710c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207113:	00 00 00 
  8004207116:	ff d0                	callq  *%rax
  8004207118:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  800420711f:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004207126:	00 00 00 
  8004207129:	48 8b 00             	mov    (%rax),%rax
  800420712c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004207133:	48 c1 ea 27          	shr    $0x27,%rdx
  8004207137:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  800420713d:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207141:	48 01 d0             	add    %rdx,%rax
  8004207144:	48 8b 00             	mov    (%rax),%rax
  8004207147:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420714d:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207154:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420715b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420715f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  8004207165:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  800420716b:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004207172:	00 00 00 
  8004207175:	48 8b 00             	mov    (%rax),%rax
  8004207178:	48 39 c2             	cmp    %rax,%rdx
  800420717b:	72 35                	jb     80042071b2 <page_check+0x16eb>
  800420717d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207184:	48 89 c1             	mov    %rax,%rcx
  8004207187:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  800420718e:	00 00 00 
  8004207191:	be 88 05 00 00       	mov    $0x588,%esi
  8004207196:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420719d:	00 00 00 
  80042071a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071a5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042071ac:	00 00 00 
  80042071af:	41 ff d0             	callq  *%r8
  80042071b2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042071b9:	00 00 00 
  80042071bc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042071c3:	48 01 d0             	add    %rdx,%rax
  80042071c6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042071ca:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042071d1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042071d5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042071da:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042071e1:	00 
  80042071e2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042071e6:	48 01 d0             	add    %rdx,%rax
  80042071e9:	48 8b 00             	mov    (%rax),%rax
  80042071ec:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042071f2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042071f9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207200:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207204:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420720a:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207210:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004207217:	00 00 00 
  800420721a:	48 8b 00             	mov    (%rax),%rax
  800420721d:	48 39 c2             	cmp    %rax,%rdx
  8004207220:	72 35                	jb     8004207257 <page_check+0x1790>
  8004207222:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207229:	48 89 c1             	mov    %rax,%rcx
  800420722c:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004207233:	00 00 00 
  8004207236:	be 89 05 00 00       	mov    $0x589,%esi
  800420723b:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207242:	00 00 00 
  8004207245:	b8 00 00 00 00       	mov    $0x0,%eax
  800420724a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207251:	00 00 00 
  8004207254:	41 ff d0             	callq  *%r8
  8004207257:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420725e:	00 00 00 
  8004207261:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207268:	48 01 d0             	add    %rdx,%rax
  800420726b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420726f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207276:	48 c1 e8 15          	shr    $0x15,%rax
  800420727a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420727f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207286:	00 
  8004207287:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420728b:	48 01 d0             	add    %rdx,%rax
  800420728e:	48 8b 00             	mov    (%rax),%rax
  8004207291:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207297:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420729e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072a5:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072a9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042072af:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042072b5:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042072bc:	00 00 00 
  80042072bf:	48 8b 00             	mov    (%rax),%rax
  80042072c2:	48 39 c2             	cmp    %rax,%rdx
  80042072c5:	72 35                	jb     80042072fc <page_check+0x1835>
  80042072c7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072ce:	48 89 c1             	mov    %rax,%rcx
  80042072d1:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  80042072d8:	00 00 00 
  80042072db:	be 8a 05 00 00       	mov    $0x58a,%esi
  80042072e0:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042072e7:	00 00 00 
  80042072ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072ef:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042072f6:	00 00 00 
  80042072f9:	41 ff d0             	callq  *%r8
  80042072fc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207303:	00 00 00 
  8004207306:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800420730d:	48 01 d0             	add    %rdx,%rax
  8004207310:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004207317:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420731e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207322:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004207327:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420732e:	00 
  800420732f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004207336:	48 01 c2             	add    %rax,%rdx
  8004207339:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207340:	48 39 c2             	cmp    %rax,%rdx
  8004207343:	74 35                	je     800420737a <page_check+0x18b3>
  8004207345:	48 b9 77 f9 21 04 80 	movabs $0x800421f977,%rcx
  800420734c:	00 00 00 
  800420734f:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207356:	00 00 00 
  8004207359:	be 8b 05 00 00       	mov    $0x58b,%esi
  800420735e:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207365:	00 00 00 
  8004207368:	b8 00 00 00 00       	mov    $0x0,%eax
  800420736d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207374:	00 00 00 
  8004207377:	41 ff d0             	callq  *%r8
  800420737a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420737e:	48 89 c7             	mov    %rax,%rdi
  8004207381:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004207388:	00 00 00 
  800420738b:	ff d0                	callq  *%rax
  800420738d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004207392:	be ff 00 00 00       	mov    $0xff,%esi
  8004207397:	48 89 c7             	mov    %rax,%rdi
  800420739a:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  80042073a1:	00 00 00 
  80042073a4:	ff d0                	callq  *%rax
  80042073a6:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042073ad:	00 00 00 
  80042073b0:	48 8b 00             	mov    (%rax),%rax
  80042073b3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042073b8:	be 00 00 00 00       	mov    $0x0,%esi
  80042073bd:	48 89 c7             	mov    %rax,%rdi
  80042073c0:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042073c7:	00 00 00 
  80042073ca:	ff d0                	callq  *%rax
  80042073cc:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042073d3:	00 00 00 
  80042073d6:	48 8b 00             	mov    (%rax),%rax
  80042073d9:	48 8b 00             	mov    (%rax),%rax
  80042073dc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073e2:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042073e9:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042073f0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042073f4:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  80042073fa:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207400:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004207407:	00 00 00 
  800420740a:	48 8b 00             	mov    (%rax),%rax
  800420740d:	48 39 c2             	cmp    %rax,%rdx
  8004207410:	72 35                	jb     8004207447 <page_check+0x1980>
  8004207412:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207419:	48 89 c1             	mov    %rax,%rcx
  800420741c:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004207423:	00 00 00 
  8004207426:	be 90 05 00 00       	mov    $0x590,%esi
  800420742b:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207432:	00 00 00 
  8004207435:	b8 00 00 00 00       	mov    $0x0,%eax
  800420743a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207441:	00 00 00 
  8004207444:	41 ff d0             	callq  *%r8
  8004207447:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420744e:	00 00 00 
  8004207451:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207458:	48 01 d0             	add    %rdx,%rax
  800420745b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420745f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004207463:	48 8b 00             	mov    (%rax),%rax
  8004207466:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420746c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004207473:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800420747a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420747e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004207484:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800420748a:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004207491:	00 00 00 
  8004207494:	48 8b 00             	mov    (%rax),%rax
  8004207497:	48 39 c2             	cmp    %rax,%rdx
  800420749a:	72 35                	jb     80042074d1 <page_check+0x1a0a>
  800420749c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074a3:	48 89 c1             	mov    %rax,%rcx
  80042074a6:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  80042074ad:	00 00 00 
  80042074b0:	be 91 05 00 00       	mov    $0x591,%esi
  80042074b5:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042074bc:	00 00 00 
  80042074bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042074cb:	00 00 00 
  80042074ce:	41 ff d0             	callq  *%r8
  80042074d1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042074d8:	00 00 00 
  80042074db:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074e2:	48 01 d0             	add    %rdx,%rax
  80042074e5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042074e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042074ed:	48 8b 00             	mov    (%rax),%rax
  80042074f0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042074f6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  80042074fd:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207504:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207508:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  800420750e:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207514:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800420751b:	00 00 00 
  800420751e:	48 8b 00             	mov    (%rax),%rax
  8004207521:	48 39 c2             	cmp    %rax,%rdx
  8004207524:	72 35                	jb     800420755b <page_check+0x1a94>
  8004207526:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420752d:	48 89 c1             	mov    %rax,%rcx
  8004207530:	48 ba d8 ec 21 04 80 	movabs $0x800421ecd8,%rdx
  8004207537:	00 00 00 
  800420753a:	be 92 05 00 00       	mov    $0x592,%esi
  800420753f:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207546:	00 00 00 
  8004207549:	b8 00 00 00 00       	mov    $0x0,%eax
  800420754e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207555:	00 00 00 
  8004207558:	41 ff d0             	callq  *%r8
  800420755b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207562:	00 00 00 
  8004207565:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420756c:	48 01 d0             	add    %rdx,%rax
  800420756f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207576:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420757d:	eb 58                	jmp    80042075d7 <page_check+0x1b10>
  800420757f:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207586:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004207589:	48 63 d2             	movslq %edx,%rdx
  800420758c:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207590:	48 01 d0             	add    %rdx,%rax
  8004207593:	48 8b 00             	mov    (%rax),%rax
  8004207596:	83 e0 01             	and    $0x1,%eax
  8004207599:	48 85 c0             	test   %rax,%rax
  800420759c:	74 35                	je     80042075d3 <page_check+0x1b0c>
  800420759e:	48 b9 8f f9 21 04 80 	movabs $0x800421f98f,%rcx
  80042075a5:	00 00 00 
  80042075a8:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042075af:	00 00 00 
  80042075b2:	be 94 05 00 00       	mov    $0x594,%esi
  80042075b7:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042075be:	00 00 00 
  80042075c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042075c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042075cd:	00 00 00 
  80042075d0:	41 ff d0             	callq  *%r8
  80042075d3:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042075d7:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  80042075de:	7e 9f                	jle    800420757f <page_check+0x1ab8>
  80042075e0:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042075e7:	00 00 00 
  80042075ea:	48 8b 00             	mov    (%rax),%rax
  80042075ed:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042075f4:	48 b8 38 d2 4d 04 80 	movabs $0x80044dd238,%rax
  80042075fb:	00 00 00 
  80042075fe:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207602:	48 89 10             	mov    %rdx,(%rax)
  8004207605:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207609:	48 89 c7             	mov    %rax,%rdi
  800420760c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207613:	00 00 00 
  8004207616:	ff d0                	callq  *%rax
  8004207618:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420761c:	48 89 c7             	mov    %rax,%rdi
  800420761f:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207626:	00 00 00 
  8004207629:	ff d0                	callq  *%rax
  800420762b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420762f:	48 89 c7             	mov    %rax,%rdi
  8004207632:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207639:	00 00 00 
  800420763c:	ff d0                	callq  *%rax
  800420763e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207642:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207646:	66 85 c0             	test   %ax,%ax
  8004207649:	74 35                	je     8004207680 <page_check+0x1bb9>
  800420764b:	48 b9 a6 f9 21 04 80 	movabs $0x800421f9a6,%rcx
  8004207652:	00 00 00 
  8004207655:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420765c:	00 00 00 
  800420765f:	be a0 05 00 00       	mov    $0x5a0,%esi
  8004207664:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420766b:	00 00 00 
  800420766e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207673:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420767a:	00 00 00 
  800420767d:	41 ff d0             	callq  *%r8
  8004207680:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004207684:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207688:	66 85 c0             	test   %ax,%ax
  800420768b:	74 35                	je     80042076c2 <page_check+0x1bfb>
  800420768d:	48 b9 66 f9 21 04 80 	movabs $0x800421f966,%rcx
  8004207694:	00 00 00 
  8004207697:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420769e:	00 00 00 
  80042076a1:	be a1 05 00 00       	mov    $0x5a1,%esi
  80042076a6:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042076ad:	00 00 00 
  80042076b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076b5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076bc:	00 00 00 
  80042076bf:	41 ff d0             	callq  *%r8
  80042076c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042076c6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042076ca:	66 85 c0             	test   %ax,%ax
  80042076cd:	74 35                	je     8004207704 <page_check+0x1c3d>
  80042076cf:	48 b9 b7 f9 21 04 80 	movabs $0x800421f9b7,%rcx
  80042076d6:	00 00 00 
  80042076d9:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042076e0:	00 00 00 
  80042076e3:	be a2 05 00 00       	mov    $0x5a2,%esi
  80042076e8:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042076ef:	00 00 00 
  80042076f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076f7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076fe:	00 00 00 
  8004207701:	41 ff d0             	callq  *%r8
  8004207704:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207708:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420770c:	66 85 c0             	test   %ax,%ax
  800420770f:	74 35                	je     8004207746 <page_check+0x1c7f>
  8004207711:	48 b9 c8 f9 21 04 80 	movabs $0x800421f9c8,%rcx
  8004207718:	00 00 00 
  800420771b:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207722:	00 00 00 
  8004207725:	be a3 05 00 00       	mov    $0x5a3,%esi
  800420772a:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207731:	00 00 00 
  8004207734:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207739:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207740:	00 00 00 
  8004207743:	41 ff d0             	callq  *%r8
  8004207746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420774a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420774e:	66 85 c0             	test   %ax,%ax
  8004207751:	74 35                	je     8004207788 <page_check+0x1cc1>
  8004207753:	48 b9 d9 f9 21 04 80 	movabs $0x800421f9d9,%rcx
  800420775a:	00 00 00 
  800420775d:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207764:	00 00 00 
  8004207767:	be a4 05 00 00       	mov    $0x5a4,%esi
  800420776c:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207773:	00 00 00 
  8004207776:	b8 00 00 00 00       	mov    $0x0,%eax
  800420777b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207782:	00 00 00 
  8004207785:	41 ff d0             	callq  *%r8
  8004207788:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420778c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207790:	66 85 c0             	test   %ax,%ax
  8004207793:	74 35                	je     80042077ca <page_check+0x1d03>
  8004207795:	48 b9 ea f9 21 04 80 	movabs $0x800421f9ea,%rcx
  800420779c:	00 00 00 
  800420779f:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042077a6:	00 00 00 
  80042077a9:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042077ae:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042077b5:	00 00 00 
  80042077b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042077c4:	00 00 00 
  80042077c7:	41 ff d0             	callq  *%r8
  80042077ca:	be 01 10 00 00       	mov    $0x1001,%esi
  80042077cf:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077d4:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077db:	00 00 00 
  80042077de:	ff d0                	callq  *%rax
  80042077e0:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  80042077e7:	be 00 10 00 00       	mov    $0x1000,%esi
  80042077ec:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077f1:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077f8:	00 00 00 
  80042077fb:	ff d0                	callq  *%rax
  80042077fd:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207804:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420780b:	00 00 00 
  800420780e:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  8004207815:	76 1d                	jbe    8004207834 <page_check+0x1d6d>
  8004207817:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420781e:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207825:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420782c:	00 00 00 
  800420782f:	48 39 c2             	cmp    %rax,%rdx
  8004207832:	76 35                	jbe    8004207869 <page_check+0x1da2>
  8004207834:	48 b9 00 fa 21 04 80 	movabs $0x800421fa00,%rcx
  800420783b:	00 00 00 
  800420783e:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207845:	00 00 00 
  8004207848:	be ac 05 00 00       	mov    $0x5ac,%esi
  800420784d:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207854:	00 00 00 
  8004207857:	b8 00 00 00 00       	mov    $0x0,%eax
  800420785c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207863:	00 00 00 
  8004207866:	41 ff d0             	callq  *%r8
  8004207869:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207870:	00 00 00 
  8004207873:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  800420787a:	76 1d                	jbe    8004207899 <page_check+0x1dd2>
  800420787c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207883:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  800420788a:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207891:	00 00 00 
  8004207894:	48 39 c2             	cmp    %rax,%rdx
  8004207897:	76 35                	jbe    80042078ce <page_check+0x1e07>
  8004207899:	48 b9 28 fa 21 04 80 	movabs $0x800421fa28,%rcx
  80042078a0:	00 00 00 
  80042078a3:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042078aa:	00 00 00 
  80042078ad:	be ad 05 00 00       	mov    $0x5ad,%esi
  80042078b2:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042078b9:	00 00 00 
  80042078bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078c1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042078c8:	00 00 00 
  80042078cb:	41 ff d0             	callq  *%r8
  80042078ce:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042078d5:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078da:	48 85 c0             	test   %rax,%rax
  80042078dd:	75 11                	jne    80042078f0 <page_check+0x1e29>
  80042078df:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042078e6:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078eb:	48 85 c0             	test   %rax,%rax
  80042078ee:	74 35                	je     8004207925 <page_check+0x1e5e>
  80042078f0:	48 b9 50 fa 21 04 80 	movabs $0x800421fa50,%rcx
  80042078f7:	00 00 00 
  80042078fa:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207901:	00 00 00 
  8004207904:	be af 05 00 00       	mov    $0x5af,%esi
  8004207909:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207910:	00 00 00 
  8004207913:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207918:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420791f:	00 00 00 
  8004207922:	41 ff d0             	callq  *%r8
  8004207925:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420792c:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207932:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207939:	76 35                	jbe    8004207970 <page_check+0x1ea9>
  800420793b:	48 b9 77 fa 21 04 80 	movabs $0x800421fa77,%rcx
  8004207942:	00 00 00 
  8004207945:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  800420794c:	00 00 00 
  800420794f:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207954:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  800420795b:	00 00 00 
  800420795e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207963:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420796a:	00 00 00 
  800420796d:	41 ff d0             	callq  *%r8
  8004207970:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004207977:	00 00 00 
  800420797a:	48 8b 00             	mov    (%rax),%rax
  800420797d:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207984:	48 89 d6             	mov    %rdx,%rsi
  8004207987:	48 89 c7             	mov    %rax,%rdi
  800420798a:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207991:	00 00 00 
  8004207994:	ff d0                	callq  *%rax
  8004207996:	48 85 c0             	test   %rax,%rax
  8004207999:	74 35                	je     80042079d0 <page_check+0x1f09>
  800420799b:	48 b9 90 fa 21 04 80 	movabs $0x800421fa90,%rcx
  80042079a2:	00 00 00 
  80042079a5:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  80042079ac:	00 00 00 
  80042079af:	be b4 05 00 00       	mov    $0x5b4,%esi
  80042079b4:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  80042079bb:	00 00 00 
  80042079be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079c3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042079ca:	00 00 00 
  80042079cd:	41 ff d0             	callq  *%r8
  80042079d0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042079d7:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  80042079de:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  80042079e5:	00 00 00 
  80042079e8:	48 8b 00             	mov    (%rax),%rax
  80042079eb:	48 89 d6             	mov    %rdx,%rsi
  80042079ee:	48 89 c7             	mov    %rax,%rdi
  80042079f1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042079f8:	00 00 00 
  80042079fb:	ff d0                	callq  *%rax
  80042079fd:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207a03:	74 35                	je     8004207a3a <page_check+0x1f73>
  8004207a05:	48 b9 b8 fa 21 04 80 	movabs $0x800421fab8,%rcx
  8004207a0c:	00 00 00 
  8004207a0f:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207a16:	00 00 00 
  8004207a19:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207a1e:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207a25:	00 00 00 
  8004207a28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a34:	00 00 00 
  8004207a37:	41 ff d0             	callq  *%r8
  8004207a3a:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004207a41:	00 00 00 
  8004207a44:	48 8b 00             	mov    (%rax),%rax
  8004207a47:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207a4e:	48 89 d6             	mov    %rdx,%rsi
  8004207a51:	48 89 c7             	mov    %rax,%rdi
  8004207a54:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207a5b:	00 00 00 
  8004207a5e:	ff d0                	callq  *%rax
  8004207a60:	48 85 c0             	test   %rax,%rax
  8004207a63:	74 35                	je     8004207a9a <page_check+0x1fd3>
  8004207a65:	48 b9 e8 fa 21 04 80 	movabs $0x800421fae8,%rcx
  8004207a6c:	00 00 00 
  8004207a6f:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207a76:	00 00 00 
  8004207a79:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207a7e:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207a85:	00 00 00 
  8004207a88:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a8d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a94:	00 00 00 
  8004207a97:	41 ff d0             	callq  *%r8
  8004207a9a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207aa1:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207aa8:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004207aaf:	00 00 00 
  8004207ab2:	48 8b 00             	mov    (%rax),%rax
  8004207ab5:	48 89 d6             	mov    %rdx,%rsi
  8004207ab8:	48 89 c7             	mov    %rax,%rdi
  8004207abb:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207ac2:	00 00 00 
  8004207ac5:	ff d0                	callq  *%rax
  8004207ac7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207acb:	74 35                	je     8004207b02 <page_check+0x203b>
  8004207acd:	48 b9 10 fb 21 04 80 	movabs $0x800421fb10,%rcx
  8004207ad4:	00 00 00 
  8004207ad7:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207ade:	00 00 00 
  8004207ae1:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207ae6:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207aed:	00 00 00 
  8004207af0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207af5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207afc:	00 00 00 
  8004207aff:	41 ff d0             	callq  *%r8
  8004207b02:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b09:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004207b10:	00 00 00 
  8004207b13:	48 8b 00             	mov    (%rax),%rax
  8004207b16:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b1b:	48 89 ce             	mov    %rcx,%rsi
  8004207b1e:	48 89 c7             	mov    %rax,%rdi
  8004207b21:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b28:	00 00 00 
  8004207b2b:	ff d0                	callq  *%rax
  8004207b2d:	48 8b 00             	mov    (%rax),%rax
  8004207b30:	83 e0 1a             	and    $0x1a,%eax
  8004207b33:	48 85 c0             	test   %rax,%rax
  8004207b36:	75 35                	jne    8004207b6d <page_check+0x20a6>
  8004207b38:	48 b9 40 fb 21 04 80 	movabs $0x800421fb40,%rcx
  8004207b3f:	00 00 00 
  8004207b42:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207b49:	00 00 00 
  8004207b4c:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207b51:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207b58:	00 00 00 
  8004207b5b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b60:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207b67:	00 00 00 
  8004207b6a:	41 ff d0             	callq  *%r8
  8004207b6d:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b74:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004207b7b:	00 00 00 
  8004207b7e:	48 8b 00             	mov    (%rax),%rax
  8004207b81:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b86:	48 89 ce             	mov    %rcx,%rsi
  8004207b89:	48 89 c7             	mov    %rax,%rdi
  8004207b8c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b93:	00 00 00 
  8004207b96:	ff d0                	callq  *%rax
  8004207b98:	48 8b 00             	mov    (%rax),%rax
  8004207b9b:	83 e0 04             	and    $0x4,%eax
  8004207b9e:	48 85 c0             	test   %rax,%rax
  8004207ba1:	74 35                	je     8004207bd8 <page_check+0x2111>
  8004207ba3:	48 b9 88 fb 21 04 80 	movabs $0x800421fb88,%rcx
  8004207baa:	00 00 00 
  8004207bad:	48 ba 51 ed 21 04 80 	movabs $0x800421ed51,%rdx
  8004207bb4:	00 00 00 
  8004207bb7:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207bbc:	48 bf 66 ed 21 04 80 	movabs $0x800421ed66,%rdi
  8004207bc3:	00 00 00 
  8004207bc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bcb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207bd2:	00 00 00 
  8004207bd5:	41 ff d0             	callq  *%r8
  8004207bd8:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207bdf:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004207be6:	00 00 00 
  8004207be9:	48 8b 00             	mov    (%rax),%rax
  8004207bec:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207bf1:	48 89 ce             	mov    %rcx,%rsi
  8004207bf4:	48 89 c7             	mov    %rax,%rdi
  8004207bf7:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207bfe:	00 00 00 
  8004207c01:	ff d0                	callq  *%rax
  8004207c03:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c0a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207c11:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207c17:	48 89 c1             	mov    %rax,%rcx
  8004207c1a:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004207c21:	00 00 00 
  8004207c24:	48 8b 00             	mov    (%rax),%rax
  8004207c27:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c2c:	48 89 ce             	mov    %rcx,%rsi
  8004207c2f:	48 89 c7             	mov    %rax,%rdi
  8004207c32:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c39:	00 00 00 
  8004207c3c:	ff d0                	callq  *%rax
  8004207c3e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c45:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207c4c:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  8004207c53:	00 00 00 
  8004207c56:	48 8b 00             	mov    (%rax),%rax
  8004207c59:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c5e:	48 89 ce             	mov    %rcx,%rsi
  8004207c61:	48 89 c7             	mov    %rax,%rdi
  8004207c64:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c6b:	00 00 00 
  8004207c6e:	ff d0                	callq  *%rax
  8004207c70:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c77:	48 bf bb fb 21 04 80 	movabs $0x800421fbbb,%rdi
  8004207c7e:	00 00 00 
  8004207c81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c86:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004207c8d:	00 00 00 
  8004207c90:	ff d2                	callq  *%rdx
  8004207c92:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207c99:	5b                   	pop    %rbx
  8004207c9a:	5d                   	pop    %rbp
  8004207c9b:	c3                   	retq   

0000008004207c9c <page2ppn>:
  8004207c9c:	55                   	push   %rbp
  8004207c9d:	48 89 e5             	mov    %rsp,%rbp
  8004207ca0:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ca4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207ca8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207cac:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004207cb3:	00 00 00 
  8004207cb6:	48 8b 00             	mov    (%rax),%rax
  8004207cb9:	48 29 c2             	sub    %rax,%rdx
  8004207cbc:	48 89 d0             	mov    %rdx,%rax
  8004207cbf:	48 c1 f8 04          	sar    $0x4,%rax
  8004207cc3:	c9                   	leaveq 
  8004207cc4:	c3                   	retq   

0000008004207cc5 <page2pa>:
  8004207cc5:	55                   	push   %rbp
  8004207cc6:	48 89 e5             	mov    %rsp,%rbp
  8004207cc9:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ccd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cd5:	48 89 c7             	mov    %rax,%rdi
  8004207cd8:	48 b8 9c 7c 20 04 80 	movabs $0x8004207c9c,%rax
  8004207cdf:	00 00 00 
  8004207ce2:	ff d0                	callq  *%rax
  8004207ce4:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207ce8:	c9                   	leaveq 
  8004207ce9:	c3                   	retq   

0000008004207cea <pa2page>:
  8004207cea:	55                   	push   %rbp
  8004207ceb:	48 89 e5             	mov    %rsp,%rbp
  8004207cee:	48 83 ec 10          	sub    $0x10,%rsp
  8004207cf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cfa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207cfe:	48 89 c2             	mov    %rax,%rdx
  8004207d01:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004207d08:	00 00 00 
  8004207d0b:	48 8b 00             	mov    (%rax),%rax
  8004207d0e:	48 39 c2             	cmp    %rax,%rdx
  8004207d11:	72 2a                	jb     8004207d3d <pa2page+0x53>
  8004207d13:	48 ba d8 fb 21 04 80 	movabs $0x800421fbd8,%rdx
  8004207d1a:	00 00 00 
  8004207d1d:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207d22:	48 bf f7 fb 21 04 80 	movabs $0x800421fbf7,%rdi
  8004207d29:	00 00 00 
  8004207d2c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d31:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004207d38:	00 00 00 
  8004207d3b:	ff d1                	callq  *%rcx
  8004207d3d:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  8004207d44:	00 00 00 
  8004207d47:	48 8b 00             	mov    (%rax),%rax
  8004207d4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207d4e:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207d52:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207d56:	48 01 d0             	add    %rdx,%rax
  8004207d59:	c9                   	leaveq 
  8004207d5a:	c3                   	retq   

0000008004207d5b <page2kva>:
  8004207d5b:	55                   	push   %rbp
  8004207d5c:	48 89 e5             	mov    %rsp,%rbp
  8004207d5f:	48 83 ec 20          	sub    $0x20,%rsp
  8004207d63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207d67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207d6b:	48 89 c7             	mov    %rax,%rdi
  8004207d6e:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004207d75:	00 00 00 
  8004207d78:	ff d0                	callq  *%rax
  8004207d7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207d82:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207d86:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207d89:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207d8c:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004207d93:	00 00 00 
  8004207d96:	48 8b 00             	mov    (%rax),%rax
  8004207d99:	48 39 c2             	cmp    %rax,%rdx
  8004207d9c:	72 32                	jb     8004207dd0 <page2kva+0x75>
  8004207d9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207da2:	48 89 c1             	mov    %rax,%rcx
  8004207da5:	48 ba 08 fc 21 04 80 	movabs $0x800421fc08,%rdx
  8004207dac:	00 00 00 
  8004207daf:	be 62 00 00 00       	mov    $0x62,%esi
  8004207db4:	48 bf f7 fb 21 04 80 	movabs $0x800421fbf7,%rdi
  8004207dbb:	00 00 00 
  8004207dbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dc3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207dca:	00 00 00 
  8004207dcd:	41 ff d0             	callq  *%r8
  8004207dd0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207dd7:	00 00 00 
  8004207dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207dde:	48 01 d0             	add    %rdx,%rax
  8004207de1:	c9                   	leaveq 
  8004207de2:	c3                   	retq   

0000008004207de3 <unlock_kernel>:
  8004207de3:	55                   	push   %rbp
  8004207de4:	48 89 e5             	mov    %rsp,%rbp
  8004207de7:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004207dee:	00 00 00 
  8004207df1:	48 b8 2c 82 21 04 80 	movabs $0x800421822c,%rax
  8004207df8:	00 00 00 
  8004207dfb:	ff d0                	callq  *%rax
  8004207dfd:	f3 90                	pause  
  8004207dff:	5d                   	pop    %rbp
  8004207e00:	c3                   	retq   

0000008004207e01 <envid2env>:
//   On error, sets *env_store to NULL.
//
// CHANGED FOR LAB 0
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207e01:	55                   	push   %rbp
  8004207e02:	48 89 e5             	mov    %rsp,%rbp
  8004207e05:	53                   	push   %rbx
  8004207e06:	48 83 ec 28          	sub    $0x28,%rsp
  8004207e0a:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207e0d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207e11:	89 d0                	mov    %edx,%eax
  8004207e13:	88 45 d8             	mov    %al,-0x28(%rbp)
	struct Env *e;

	// if envid is 0, the function should return the current environment
	// it doesn't actually return the env - it puts the env in *env_store
	if (envid == 0) {
  8004207e16:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207e1a:	75 41                	jne    8004207e5d <envid2env+0x5c>
		*env_store = curenv;
  8004207e1c:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004207e23:	00 00 00 
  8004207e26:	ff d0                	callq  *%rax
  8004207e28:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004207e2f:	00 00 00 
  8004207e32:	48 98                	cltq   
  8004207e34:	48 c1 e0 03          	shl    $0x3,%rax
  8004207e38:	48 89 c1             	mov    %rax,%rcx
  8004207e3b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207e3f:	48 01 c8             	add    %rcx,%rax
  8004207e42:	48 01 d0             	add    %rdx,%rax
  8004207e45:	48 83 c0 08          	add    $0x8,%rax
  8004207e49:	48 8b 10             	mov    (%rax),%rdx
  8004207e4c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207e50:	48 89 10             	mov    %rdx,(%rax)
		return 0;
  8004207e53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e58:	e9 fd 00 00 00       	jmpq   8004207f5a <envid2env+0x159>

	// it should use the ENVX() macro found in inc/env.h, not straight reference
	// e = &envs[envid];
	// use ENVX() macro to get the correct index in the envs variable 
	// and use that to look stuff up
	e = &envs[ENVX(envid)];
  8004207e5d:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  8004207e64:	00 00 00 
  8004207e67:	48 8b 10             	mov    (%rax),%rdx
  8004207e6a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207e6d:	48 98                	cltq   
  8004207e6f:	25 ff 03 00 00       	and    $0x3ff,%eax
  8004207e74:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207e7b:	48 01 d0             	add    %rdx,%rax
  8004207e7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004207e82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e86:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207e8c:	85 c0                	test   %eax,%eax
  8004207e8e:	74 0f                	je     8004207e9f <envid2env+0x9e>
  8004207e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e94:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207e9a:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207e9d:	74 15                	je     8004207eb4 <envid2env+0xb3>
		*env_store = 0;
  8004207e9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207ea3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207eaa:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207eaf:	e9 a6 00 00 00       	jmpq   8004207f5a <envid2env+0x159>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  8004207eb4:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207eb8:	0f 84 8c 00 00 00    	je     8004207f4a <envid2env+0x149>
  8004207ebe:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004207ec5:	00 00 00 
  8004207ec8:	ff d0                	callq  *%rax
  8004207eca:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004207ed1:	00 00 00 
  8004207ed4:	48 98                	cltq   
  8004207ed6:	48 c1 e0 03          	shl    $0x3,%rax
  8004207eda:	48 89 c1             	mov    %rax,%rcx
  8004207edd:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207ee1:	48 01 c8             	add    %rcx,%rax
  8004207ee4:	48 01 d0             	add    %rdx,%rax
  8004207ee7:	48 83 c0 08          	add    $0x8,%rax
  8004207eeb:	48 8b 00             	mov    (%rax),%rax
  8004207eee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004207ef2:	74 56                	je     8004207f4a <envid2env+0x149>
  8004207ef4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ef8:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004207efe:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004207f05:	00 00 00 
  8004207f08:	ff d0                	callq  *%rax
  8004207f0a:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004207f11:	00 00 00 
  8004207f14:	48 98                	cltq   
  8004207f16:	48 c1 e0 03          	shl    $0x3,%rax
  8004207f1a:	48 89 c1             	mov    %rax,%rcx
  8004207f1d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207f21:	48 01 c8             	add    %rcx,%rax
  8004207f24:	48 01 d0             	add    %rdx,%rax
  8004207f27:	48 83 c0 08          	add    $0x8,%rax
  8004207f2b:	48 8b 00             	mov    (%rax),%rax
  8004207f2e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207f34:	39 c3                	cmp    %eax,%ebx
  8004207f36:	74 12                	je     8004207f4a <envid2env+0x149>
		*env_store = 0;
  8004207f38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f3c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207f43:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207f48:	eb 10                	jmp    8004207f5a <envid2env+0x159>
	}

	// should be *env_store = e;, this might literaly work tho
	// env_store = &e;
	*env_store = e;
  8004207f4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f4e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004207f52:	48 89 10             	mov    %rdx,(%rax)
	return 0;
  8004207f55:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004207f5a:	48 83 c4 28          	add    $0x28,%rsp
  8004207f5e:	5b                   	pop    %rbx
  8004207f5f:	5d                   	pop    %rbp
  8004207f60:	c3                   	retq   

0000008004207f61 <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  8004207f61:	55                   	push   %rbp
  8004207f62:	48 89 e5             	mov    %rsp,%rbp
  8004207f65:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207f69:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004207f70:	eb 6d                	jmp    8004207fdf <env_init+0x7e>
		envs[i].env_status = ENV_FREE;
  8004207f72:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  8004207f79:	00 00 00 
  8004207f7c:	48 8b 10             	mov    (%rax),%rdx
  8004207f7f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207f82:	48 98                	cltq   
  8004207f84:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f8b:	48 01 d0             	add    %rdx,%rax
  8004207f8e:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004207f95:	00 00 00 
		envs[i].env_link = &envs[i+1];
  8004207f98:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  8004207f9f:	00 00 00 
  8004207fa2:	48 8b 10             	mov    (%rax),%rdx
  8004207fa5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fa8:	48 98                	cltq   
  8004207faa:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fb1:	48 01 c2             	add    %rax,%rdx
  8004207fb4:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  8004207fbb:	00 00 00 
  8004207fbe:	48 8b 08             	mov    (%rax),%rcx
  8004207fc1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fc4:	48 98                	cltq   
  8004207fc6:	48 83 c0 01          	add    $0x1,%rax
  8004207fca:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fd1:	48 01 c8             	add    %rcx,%rax
  8004207fd4:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207fdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004207fdf:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004207fe6:	7e 8a                	jle    8004207f72 <env_init+0x11>
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i+1];
	}
	envs[NENV-1].env_link = NULL;
  8004207fe8:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  8004207fef:	00 00 00 
  8004207ff2:	48 8b 00             	mov    (%rax),%rax
  8004207ff5:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004207ffb:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004208002:	00 00 00 00 
	env_free_list = &envs[0];
  8004208006:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420800d:	00 00 00 
  8004208010:	48 8b 10             	mov    (%rax),%rdx
  8004208013:	48 b8 60 d2 4d 04 80 	movabs $0x80044dd260,%rax
  800420801a:	00 00 00 
  800420801d:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  8004208020:	48 b8 2e 80 20 04 80 	movabs $0x800420802e,%rax
  8004208027:	00 00 00 
  800420802a:	ff d0                	callq  *%rax
}
  800420802c:	c9                   	leaveq 
  800420802d:	c3                   	retq   

000000800420802e <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  800420802e:	55                   	push   %rbp
  800420802f:	48 89 e5             	mov    %rsp,%rbp
  8004208032:	53                   	push   %rbx
  8004208033:	48 83 ec 10          	sub    $0x10,%rsp
  8004208037:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420803e:	00 00 00 
  8004208041:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  8004208045:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208049:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  800420804c:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208051:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  8004208053:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208058:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  800420805a:	b8 10 00 00 00       	mov    $0x10,%eax
  800420805f:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  8004208061:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208066:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  8004208068:	b8 10 00 00 00       	mov    $0x10,%eax
  800420806d:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  800420806f:	b8 08 00 00 00       	mov    $0x8,%eax
  8004208074:	89 c3                	mov    %eax,%ebx
  8004208076:	53                   	push   %rbx
  8004208077:	48 b8 84 80 20 04 80 	movabs $0x8004208084,%rax
  800420807e:	00 00 00 
  8004208081:	50                   	push   %rax
  8004208082:	48 cb                	lretq  
  8004208084:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  800420808a:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  800420808e:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  8004208091:	48 83 c4 10          	add    $0x10,%rsp
  8004208095:	5b                   	pop    %rbx
  8004208096:	5d                   	pop    %rbp
  8004208097:	c3                   	retq   

0000008004208098 <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  8004208098:	55                   	push   %rbp
  8004208099:	48 89 e5             	mov    %rsp,%rbp
  800420809c:	48 83 ec 20          	sub    $0x20,%rsp
  80042080a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  80042080a4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042080ab:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  80042080ac:	bf 01 00 00 00       	mov    $0x1,%edi
  80042080b1:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042080b8:	00 00 00 
  80042080bb:	ff d0                	callq  *%rax
  80042080bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042080c1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042080c6:	75 0a                	jne    80042080d2 <env_setup_vm+0x3a>
		return -E_NO_MEM;
  80042080c8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042080cd:	e9 bc 00 00 00       	jmpq   800420818e <env_setup_vm+0xf6>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref       += 1;
  80042080d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080d6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042080da:	8d 50 01             	lea    0x1(%rax),%edx
  80042080dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e1:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  80042080e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e9:	48 89 c7             	mov    %rax,%rdi
  80042080ec:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042080f3:	00 00 00 
  80042080f6:	ff d0                	callq  *%rax
  80042080f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042080fc:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  8004208103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208107:	48 89 c7             	mov    %rax,%rdi
  800420810a:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004208111:	00 00 00 
  8004208114:	ff d0                	callq  *%rax
  8004208116:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420811a:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	memset(e->env_pml4e, 0, PGSIZE);
  8004208121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208125:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420812c:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208131:	be 00 00 00 00       	mov    $0x0,%esi
  8004208136:	48 89 c7             	mov    %rax,%rdi
  8004208139:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004208140:	00 00 00 
  8004208143:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  8004208145:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208149:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208150:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004208154:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  800420815b:	00 00 00 
  800420815e:	48 8b 00             	mov    (%rax),%rax
  8004208161:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004208165:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  8004208168:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420816c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208173:	48 8d 50 10          	lea    0x10(%rax),%rdx
  8004208177:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420817b:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208182:	48 83 c8 05          	or     $0x5,%rax
  8004208186:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  8004208189:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420818e:	c9                   	leaveq 
  800420818f:	c3                   	retq   

0000008004208190 <env_guest_alloc>:

#ifndef VMM_GUEST
int
env_guest_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208190:	55                   	push   %rbp
  8004208191:	48 89 e5             	mov    %rsp,%rbp
  8004208194:	48 83 ec 50          	sub    $0x50,%rsp
  8004208198:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420819c:	89 75 b4             	mov    %esi,-0x4c(%rbp)
	int32_t generation;
	struct Env *e;

	if (!(e = env_free_list))
  800420819f:	48 b8 60 d2 4d 04 80 	movabs $0x80044dd260,%rax
  80042081a6:	00 00 00 
  80042081a9:	48 8b 00             	mov    (%rax),%rax
  80042081ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042081b0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042081b5:	75 0a                	jne    80042081c1 <env_guest_alloc+0x31>
		return -E_NO_FREE_ENV;
  80042081b7:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  80042081bc:	e9 47 04 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>

	memset(&e->env_vmxinfo, 0, sizeof(struct VmxGuestInfo));
  80042081c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042081c5:	48 05 20 01 00 00    	add    $0x120,%rax
  80042081cb:	ba 48 00 00 00       	mov    $0x48,%edx
  80042081d0:	be 00 00 00 00       	mov    $0x0,%esi
  80042081d5:	48 89 c7             	mov    %rax,%rdi
  80042081d8:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  80042081df:	00 00 00 
  80042081e2:	ff d0                	callq  *%rax

	// allocate a page for the EPT PML4..
	struct PageInfo *p = NULL;
  80042081e4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042081eb:	00 

	if (!(p = page_alloc(ALLOC_ZERO)))
  80042081ec:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081f1:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042081f8:	00 00 00 
  80042081fb:	ff d0                	callq  *%rax
  80042081fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208201:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004208206:	75 0a                	jne    8004208212 <env_guest_alloc+0x82>
		return -E_NO_MEM;
  8004208208:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420820d:	e9 f6 03 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>

	memset(p, 0, sizeof(struct PageInfo));
  8004208212:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208216:	ba 10 00 00 00       	mov    $0x10,%edx
  800420821b:	be 00 00 00 00       	mov    $0x0,%esi
  8004208220:	48 89 c7             	mov    %rax,%rdi
  8004208223:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  800420822a:	00 00 00 
  800420822d:	ff d0                	callq  *%rax
	p->pp_ref       += 1;
  800420822f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208233:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208237:	8d 50 01             	lea    0x1(%rax),%edx
  800420823a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420823e:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  8004208242:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208246:	48 89 c7             	mov    %rax,%rdi
  8004208249:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  8004208250:	00 00 00 
  8004208253:	ff d0                	callq  *%rax
  8004208255:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208259:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  8004208260:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208264:	48 89 c7             	mov    %rax,%rdi
  8004208267:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  800420826e:	00 00 00 
  8004208271:	ff d0                	callq  *%rax
  8004208273:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208277:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	// Allocate a VMCS.
	struct PageInfo *q = vmx_init_vmcs();
  800420827e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208283:	48 ba 9c b7 21 04 80 	movabs $0x800421b79c,%rdx
  800420828a:	00 00 00 
  800420828d:	ff d2                	callq  *%rdx
  800420828f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (!q) {
  8004208293:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004208298:	75 1d                	jne    80042082b7 <env_guest_alloc+0x127>
		page_decref(p);
  800420829a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420829e:	48 89 c7             	mov    %rax,%rdi
  80042082a1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042082a8:	00 00 00 
  80042082ab:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042082ad:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042082b2:	e9 51 03 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	q->pp_ref += 1;
  80042082b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082bb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042082bf:	8d 50 01             	lea    0x1(%rax),%edx
  80042082c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082c6:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.vmcs = page2kva(q);
  80042082ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082ce:	48 89 c7             	mov    %rax,%rdi
  80042082d1:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042082d8:	00 00 00 
  80042082db:	ff d0                	callq  *%rax
  80042082dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042082e1:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)

	// Allocate a page for msr load/store area.
	struct PageInfo *r = NULL;
  80042082e8:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042082ef:	00 
	if (!(r = page_alloc(ALLOC_ZERO))) {
  80042082f0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042082f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042082fc:	00 00 00 
  80042082ff:	ff d0                	callq  *%rax
  8004208301:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208305:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420830a:	75 30                	jne    800420833c <env_guest_alloc+0x1ac>
		page_decref(p);
  800420830c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208310:	48 89 c7             	mov    %rax,%rdi
  8004208313:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420831a:	00 00 00 
  800420831d:	ff d0                	callq  *%rax
		page_decref(q);
  800420831f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208323:	48 89 c7             	mov    %rax,%rdi
  8004208326:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420832d:	00 00 00 
  8004208330:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  8004208332:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208337:	e9 cc 02 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	r->pp_ref += 1;
  800420833c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208340:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208344:	8d 50 01             	lea    0x1(%rax),%edx
  8004208347:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420834b:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.msr_host_area = page2kva(r);
  800420834f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208353:	48 89 c7             	mov    %rax,%rdi
  8004208356:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420835d:	00 00 00 
  8004208360:	ff d0                	callq  *%rax
  8004208362:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208366:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
	e->env_vmxinfo.msr_guest_area = page2kva(r) + PGSIZE / 2;
  800420836d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208371:	48 89 c7             	mov    %rax,%rdi
  8004208374:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420837b:	00 00 00 
  800420837e:	ff d0                	callq  *%rax
  8004208380:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
  8004208387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420838b:	48 89 90 58 01 00 00 	mov    %rdx,0x158(%rax)

	// Allocate pages for IO bitmaps.
	struct PageInfo *s = NULL;
  8004208392:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004208399:	00 
	if (!(s = page_alloc(ALLOC_ZERO))) {
  800420839a:	bf 01 00 00 00       	mov    $0x1,%edi
  800420839f:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042083a6:	00 00 00 
  80042083a9:	ff d0                	callq  *%rax
  80042083ab:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042083af:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042083b4:	75 43                	jne    80042083f9 <env_guest_alloc+0x269>
		page_decref(p);
  80042083b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042083ba:	48 89 c7             	mov    %rax,%rdi
  80042083bd:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083c4:	00 00 00 
  80042083c7:	ff d0                	callq  *%rax
		page_decref(q);
  80042083c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042083cd:	48 89 c7             	mov    %rax,%rdi
  80042083d0:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083d7:	00 00 00 
  80042083da:	ff d0                	callq  *%rax
		page_decref(r);
  80042083dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042083e0:	48 89 c7             	mov    %rax,%rdi
  80042083e3:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083ea:	00 00 00 
  80042083ed:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042083ef:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042083f4:	e9 0f 02 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	s->pp_ref += 1;
  80042083f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042083fd:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208401:	8d 50 01             	lea    0x1(%rax),%edx
  8004208404:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208408:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_a = page2kva(s);
  800420840c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208410:	48 89 c7             	mov    %rax,%rdi
  8004208413:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420841a:	00 00 00 
  800420841d:	ff d0                	callq  *%rax
  800420841f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208423:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)

	struct PageInfo *t = NULL;
  800420842a:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004208431:	00 
	if (!(t = page_alloc(ALLOC_ZERO))) {
  8004208432:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208437:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420843e:	00 00 00 
  8004208441:	ff d0                	callq  *%rax
  8004208443:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208447:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420844c:	75 56                	jne    80042084a4 <env_guest_alloc+0x314>
		page_decref(p);
  800420844e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208452:	48 89 c7             	mov    %rax,%rdi
  8004208455:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420845c:	00 00 00 
  800420845f:	ff d0                	callq  *%rax
		page_decref(q);
  8004208461:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208465:	48 89 c7             	mov    %rax,%rdi
  8004208468:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420846f:	00 00 00 
  8004208472:	ff d0                	callq  *%rax
		page_decref(r);
  8004208474:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208478:	48 89 c7             	mov    %rax,%rdi
  800420847b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208482:	00 00 00 
  8004208485:	ff d0                	callq  *%rax
		page_decref(s);
  8004208487:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420848b:	48 89 c7             	mov    %rax,%rdi
  800420848e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208495:	00 00 00 
  8004208498:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  800420849a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420849f:	e9 64 01 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	t->pp_ref += 1;
  80042084a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084a8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042084ac:	8d 50 01             	lea    0x1(%rax),%edx
  80042084af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084b3:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_b = page2kva(t);
  80042084b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084bb:	48 89 c7             	mov    %rax,%rdi
  80042084be:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042084c5:	00 00 00 
  80042084c8:	ff d0                	callq  *%rax
  80042084ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084ce:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042084d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042084d9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042084df:	05 00 10 00 00       	add    $0x1000,%eax
  80042084e4:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042084e9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042084ec:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042084f0:	7f 07                	jg     80042084f9 <env_guest_alloc+0x369>
		generation = 1 << ENVGENSHIFT;
  80042084f2:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042084f9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084fd:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  8004208504:	00 00 00 
  8004208507:	48 8b 00             	mov    (%rax),%rax
  800420850a:	48 29 c2             	sub    %rax,%rdx
  800420850d:	48 89 d0             	mov    %rdx,%rax
  8004208510:	48 c1 f8 03          	sar    $0x3,%rax
  8004208514:	48 89 c2             	mov    %rax,%rdx
  8004208517:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420851e:	fa a4 4f 
  8004208521:	48 0f af c2          	imul   %rdx,%rax
  8004208525:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208528:	89 c2                	mov    %eax,%edx
  800420852a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420852e:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208534:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208538:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  800420853b:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_GUEST;
  8004208541:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208545:	c7 80 d0 00 00 00 03 	movl   $0x3,0xd0(%rax)
  800420854c:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  800420854f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208553:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420855a:	00 00 00 

	e->env_vmxinfo.vcpunum = vcpu_count++;
  800420855d:	48 b8 50 d2 4d 04 80 	movabs $0x80044dd250,%rax
  8004208564:	00 00 00 
  8004208567:	8b 00                	mov    (%rax),%eax
  8004208569:	8d 48 01             	lea    0x1(%rax),%ecx
  800420856c:	48 ba 50 d2 4d 04 80 	movabs $0x80044dd250,%rdx
  8004208573:	00 00 00 
  8004208576:	89 0a                	mov    %ecx,(%rdx)
  8004208578:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420857c:	89 82 60 01 00 00    	mov    %eax,0x160(%rdx)
    	cprintf("VCPUNUM allocated: %d\n", e->env_vmxinfo.vcpunum);
  8004208582:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208586:	8b 80 60 01 00 00    	mov    0x160(%rax),%eax
  800420858c:	89 c6                	mov    %eax,%esi
  800420858e:	48 bf 2b fc 21 04 80 	movabs $0x800421fc2b,%rdi
  8004208595:	00 00 00 
  8004208598:	b8 00 00 00 00       	mov    $0x0,%eax
  800420859d:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042085a4:	00 00 00 
  80042085a7:	ff d2                	callq  *%rdx

	memset(&e->env_tf, 0, sizeof(e->env_tf));
  80042085a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085ad:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042085b2:	be 00 00 00 00       	mov    $0x0,%esi
  80042085b7:	48 89 c7             	mov    %rax,%rdi
  80042085ba:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  80042085c1:	00 00 00 
  80042085c4:	ff d0                	callq  *%rax

	e->env_pgfault_upcall = 0;
  80042085c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085ca:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  80042085d1:	00 00 00 00 
	e->env_ipc_recving = 0;
  80042085d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085d9:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  80042085e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085e4:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  80042085eb:	48 b8 60 d2 4d 04 80 	movabs $0x80044dd260,%rax
  80042085f2:	00 00 00 
  80042085f5:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  80042085f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042085fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208600:	48 89 10             	mov    %rdx,(%rax)

	return 0;
  8004208603:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208608:	c9                   	leaveq 
  8004208609:	c3                   	retq   

000000800420860a <env_guest_free>:

void env_guest_free(struct Env *e) {
  800420860a:	55                   	push   %rbp
  800420860b:	48 89 e5             	mov    %rsp,%rbp
  800420860e:	53                   	push   %rbx
  800420860f:	48 83 ec 38          	sub    $0x38,%rsp
  8004208613:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	// Free the VMCS.
	page_decref(pa2page(PADDR(e->env_vmxinfo.vmcs)));
  8004208617:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420861b:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  8004208622:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208626:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420862d:	00 00 00 
  8004208630:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004208634:	77 32                	ja     8004208668 <env_guest_free+0x5e>
  8004208636:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420863a:	48 89 c1             	mov    %rax,%rcx
  800420863d:	48 ba 48 fc 21 04 80 	movabs $0x800421fc48,%rdx
  8004208644:	00 00 00 
  8004208647:	be 40 01 00 00       	mov    $0x140,%esi
  800420864c:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  8004208653:	00 00 00 
  8004208656:	b8 00 00 00 00       	mov    $0x0,%eax
  800420865b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208662:	00 00 00 
  8004208665:	41 ff d0             	callq  *%r8
  8004208668:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420866f:	ff ff ff 
  8004208672:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208676:	48 01 d0             	add    %rdx,%rax
  8004208679:	48 89 c7             	mov    %rax,%rdi
  800420867c:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208683:	00 00 00 
  8004208686:	ff d0                	callq  *%rax
  8004208688:	48 89 c7             	mov    %rax,%rdi
  800420868b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208692:	00 00 00 
  8004208695:	ff d0                	callq  *%rax
	// Free msr load/store area.
	page_decref(pa2page(PADDR(e->env_vmxinfo.msr_host_area)));
  8004208697:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420869b:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  80042086a2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042086a6:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042086ad:	00 00 00 
  80042086b0:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042086b4:	77 32                	ja     80042086e8 <env_guest_free+0xde>
  80042086b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086ba:	48 89 c1             	mov    %rax,%rcx
  80042086bd:	48 ba 48 fc 21 04 80 	movabs $0x800421fc48,%rdx
  80042086c4:	00 00 00 
  80042086c7:	be 42 01 00 00       	mov    $0x142,%esi
  80042086cc:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  80042086d3:	00 00 00 
  80042086d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042086db:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042086e2:	00 00 00 
  80042086e5:	41 ff d0             	callq  *%r8
  80042086e8:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042086ef:	ff ff ff 
  80042086f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086f6:	48 01 d0             	add    %rdx,%rax
  80042086f9:	48 89 c7             	mov    %rax,%rdi
  80042086fc:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208703:	00 00 00 
  8004208706:	ff d0                	callq  *%rax
  8004208708:	48 89 c7             	mov    %rax,%rdi
  800420870b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208712:	00 00 00 
  8004208715:	ff d0                	callq  *%rax
	// Free IO bitmaps page.
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_a)));
  8004208717:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420871b:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  8004208722:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208726:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420872d:	00 00 00 
  8004208730:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004208734:	77 32                	ja     8004208768 <env_guest_free+0x15e>
  8004208736:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420873a:	48 89 c1             	mov    %rax,%rcx
  800420873d:	48 ba 48 fc 21 04 80 	movabs $0x800421fc48,%rdx
  8004208744:	00 00 00 
  8004208747:	be 44 01 00 00       	mov    $0x144,%esi
  800420874c:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  8004208753:	00 00 00 
  8004208756:	b8 00 00 00 00       	mov    $0x0,%eax
  800420875b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208762:	00 00 00 
  8004208765:	41 ff d0             	callq  *%r8
  8004208768:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420876f:	ff ff ff 
  8004208772:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208776:	48 01 d0             	add    %rdx,%rax
  8004208779:	48 89 c7             	mov    %rax,%rdi
  800420877c:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208783:	00 00 00 
  8004208786:	ff d0                	callq  *%rax
  8004208788:	48 89 c7             	mov    %rax,%rdi
  800420878b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208792:	00 00 00 
  8004208795:	ff d0                	callq  *%rax
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_b)));
  8004208797:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420879b:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  80042087a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042087a6:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042087ad:	00 00 00 
  80042087b0:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042087b4:	77 32                	ja     80042087e8 <env_guest_free+0x1de>
  80042087b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087ba:	48 89 c1             	mov    %rax,%rcx
  80042087bd:	48 ba 48 fc 21 04 80 	movabs $0x800421fc48,%rdx
  80042087c4:	00 00 00 
  80042087c7:	be 45 01 00 00       	mov    $0x145,%esi
  80042087cc:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  80042087d3:	00 00 00 
  80042087d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042087db:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042087e2:	00 00 00 
  80042087e5:	41 ff d0             	callq  *%r8
  80042087e8:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042087ef:	ff ff ff 
  80042087f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087f6:	48 01 d0             	add    %rdx,%rax
  80042087f9:	48 89 c7             	mov    %rax,%rdi
  80042087fc:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208803:	00 00 00 
  8004208806:	ff d0                	callq  *%rax
  8004208808:	48 89 c7             	mov    %rax,%rdi
  800420880b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208812:	00 00 00 
  8004208815:	ff d0                	callq  *%rax

	// Free the host pages that were allocated for the guest and
	// the EPT tables itself.
	free_guest_mem(e->env_pml4e);
  8004208817:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420881b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208822:	48 89 c7             	mov    %rax,%rdi
  8004208825:	48 b8 4c a3 21 04 80 	movabs $0x800421a34c,%rax
  800420882c:	00 00 00 
  800420882f:	ff d0                	callq  *%rax

	// Free the EPT PML4 page.
	page_decref(pa2page(e->env_cr3));
  8004208831:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208835:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420883c:	48 89 c7             	mov    %rax,%rdi
  800420883f:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208846:	00 00 00 
  8004208849:	ff d0                	callq  *%rax
  800420884b:	48 89 c7             	mov    %rax,%rdi
  800420884e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208855:	00 00 00 
  8004208858:	ff d0                	callq  *%rax
	e->env_pml4e = 0;
  800420885a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420885e:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208865:	00 00 00 00 
	e->env_cr3 = 0;
  8004208869:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420886d:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208874:	00 00 00 00 

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004208878:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420887c:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208883:	00 00 00 
	e->env_link = env_free_list;
  8004208886:	48 b8 60 d2 4d 04 80 	movabs $0x80044dd260,%rax
  800420888d:	00 00 00 
  8004208890:	48 8b 10             	mov    (%rax),%rdx
  8004208893:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208897:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  800420889e:	48 b8 60 d2 4d 04 80 	movabs $0x80044dd260,%rax
  80042088a5:	00 00 00 
  80042088a8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042088ac:	48 89 10             	mov    %rdx,(%rax)

	cprintf("[%08x] free vmx guest env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  80042088af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042088b3:	8b 98 c8 00 00 00    	mov    0xc8(%rax),%ebx
  80042088b9:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042088c0:	00 00 00 
  80042088c3:	ff d0                	callq  *%rax
  80042088c5:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  80042088cc:	00 00 00 
  80042088cf:	48 98                	cltq   
  80042088d1:	48 c1 e0 03          	shl    $0x3,%rax
  80042088d5:	48 89 c1             	mov    %rax,%rcx
  80042088d8:	48 c1 e1 04          	shl    $0x4,%rcx
  80042088dc:	48 01 c8             	add    %rcx,%rax
  80042088df:	48 01 d0             	add    %rdx,%rax
  80042088e2:	48 83 c0 08          	add    $0x8,%rax
  80042088e6:	48 8b 00             	mov    (%rax),%rax
  80042088e9:	48 85 c0             	test   %rax,%rax
  80042088ec:	74 38                	je     8004208926 <env_guest_free+0x31c>
  80042088ee:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042088f5:	00 00 00 
  80042088f8:	ff d0                	callq  *%rax
  80042088fa:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004208901:	00 00 00 
  8004208904:	48 98                	cltq   
  8004208906:	48 c1 e0 03          	shl    $0x3,%rax
  800420890a:	48 89 c1             	mov    %rax,%rcx
  800420890d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208911:	48 01 c8             	add    %rcx,%rax
  8004208914:	48 01 d0             	add    %rdx,%rax
  8004208917:	48 83 c0 08          	add    $0x8,%rax
  800420891b:	48 8b 00             	mov    (%rax),%rax
  800420891e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208924:	eb 05                	jmp    800420892b <env_guest_free+0x321>
  8004208926:	b8 00 00 00 00       	mov    $0x0,%eax
  800420892b:	89 da                	mov    %ebx,%edx
  800420892d:	89 c6                	mov    %eax,%esi
  800420892f:	48 bf 78 fc 21 04 80 	movabs $0x800421fc78,%rdi
  8004208936:	00 00 00 
  8004208939:	b8 00 00 00 00       	mov    $0x0,%eax
  800420893e:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004208945:	00 00 00 
  8004208948:	ff d1                	callq  *%rcx
}
  800420894a:	48 83 c4 38          	add    $0x38,%rsp
  800420894e:	5b                   	pop    %rbx
  800420894f:	5d                   	pop    %rbp
  8004208950:	c3                   	retq   

0000008004208951 <env_alloc>:
//	-E_NO_MEM on memory exhaustion
//
// CHANGED FOR LAB 0
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208951:	55                   	push   %rbp
  8004208952:	48 89 e5             	mov    %rsp,%rbp
  8004208955:	48 83 ec 30          	sub    $0x30,%rsp
  8004208959:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420895d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  8004208960:	48 b8 60 d2 4d 04 80 	movabs $0x80044dd260,%rax
  8004208967:	00 00 00 
  800420896a:	48 8b 00             	mov    (%rax),%rax
  800420896d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208971:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208976:	75 0a                	jne    8004208982 <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  8004208978:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  800420897d:	e9 5b 01 00 00       	jmpq   8004208add <env_alloc+0x18c>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  8004208982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208986:	48 89 c7             	mov    %rax,%rdi
  8004208989:	48 b8 98 80 20 04 80 	movabs $0x8004208098,%rax
  8004208990:	00 00 00 
  8004208993:	ff d0                	callq  *%rax
  8004208995:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208998:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420899c:	79 08                	jns    80042089a6 <env_alloc+0x55>
		return r;
  800420899e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042089a1:	e9 37 01 00 00       	jmpq   8004208add <env_alloc+0x18c>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042089a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089aa:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042089b0:	05 00 10 00 00       	add    $0x1000,%eax
  80042089b5:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042089ba:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042089bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042089c1:	7f 07                	jg     80042089ca <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  80042089c3:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042089ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042089ce:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  80042089d5:	00 00 00 
  80042089d8:	48 8b 00             	mov    (%rax),%rax
  80042089db:	48 29 c2             	sub    %rax,%rdx
  80042089de:	48 89 d0             	mov    %rdx,%rax
  80042089e1:	48 c1 f8 03          	sar    $0x3,%rax
  80042089e5:	48 89 c2             	mov    %rax,%rdx
  80042089e8:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042089ef:	fa a4 4f 
  80042089f2:	48 0f af c2          	imul   %rdx,%rax
  80042089f6:	0b 45 fc             	or     -0x4(%rbp),%eax
  80042089f9:	89 c2                	mov    %eax,%edx
  80042089fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089ff:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208a05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a09:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004208a0c:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  8004208a12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a16:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  8004208a1d:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  8004208a20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a24:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004208a2b:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  8004208a2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a32:	ba c0 00 00 00       	mov    $0xc0,%edx
  8004208a37:	be 00 00 00 00       	mov    $0x0,%esi
  8004208a3c:	48 89 c7             	mov    %rax,%rdi
  8004208a3f:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004208a46:	00 00 00 
  8004208a49:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  8004208a4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a4f:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  8004208a56:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  8004208a58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a5c:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  8004208a62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a66:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004208a6d:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  8004208a6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a73:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  8004208a78:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  8004208a7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a83:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  8004208a8a:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  8004208a8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a90:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  8004208a97:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  8004208a9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a9f:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208aa6:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  8004208aaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208aae:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  8004208ab5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208ab9:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208ac0:	48 b8 60 d2 4d 04 80 	movabs $0x80044dd260,%rax
  8004208ac7:	00 00 00 
  8004208aca:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208acd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208ad1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208ad5:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  8004208ad8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208add:	c9                   	leaveq 
  8004208ade:	c3                   	retq   

0000008004208adf <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  8004208adf:	55                   	push   %rbp
  8004208ae0:	48 89 e5             	mov    %rsp,%rbp
  8004208ae3:	48 83 ec 40          	sub    $0x40,%rsp
  8004208ae7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208aeb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208aef:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;
  8004208af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208af7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208afb:	48 01 d0             	add    %rdx,%rax
  8004208afe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva) {
  8004208b02:	e9 c8 00 00 00       	jmpq   8004208bcf <region_alloc+0xf0>
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  8004208b07:	bf 00 00 00 00       	mov    $0x0,%edi
  8004208b0c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004208b13:	00 00 00 
  8004208b16:	ff d0                	callq  *%rax
  8004208b18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208b1c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208b21:	75 30                	jne    8004208b53 <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  8004208b23:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  8004208b28:	48 ba 98 fc 21 04 80 	movabs $0x800421fc98,%rdx
  8004208b2f:	00 00 00 
  8004208b32:	be b2 01 00 00       	mov    $0x1b2,%esi
  8004208b37:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  8004208b3e:	00 00 00 
  8004208b41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b46:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208b4d:	00 00 00 
  8004208b50:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
  8004208b53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208b57:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208b5e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b62:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004208b66:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004208b6b:	48 89 c7             	mov    %rax,%rdi
  8004208b6e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004208b75:	00 00 00 
  8004208b78:	ff d0                	callq  *%rax
  8004208b7a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208b7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208b81:	79 30                	jns    8004208bb3 <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  8004208b83:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208b86:	89 c1                	mov    %eax,%ecx
  8004208b88:	48 ba c0 fc 21 04 80 	movabs $0x800421fcc0,%rdx
  8004208b8f:	00 00 00 
  8004208b92:	be b6 01 00 00       	mov    $0x1b6,%esi
  8004208b97:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  8004208b9e:	00 00 00 
  8004208ba1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208ba6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208bad:	00 00 00 
  8004208bb0:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
  8004208bb3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bb7:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208bbd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208bc1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208bc5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208bcb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;

	while (va < endva) {
  8004208bcf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bd3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208bd7:	0f 82 2a ff ff ff    	jb     8004208b07 <region_alloc+0x28>
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
			panic("map_segment: could not insert page: %e\n", r);

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
	}
}
  8004208bdd:	c9                   	leaveq 
  8004208bde:	c3                   	retq   

0000008004208bdf <load_icode>:
//
// load_icode panics if it encounters problems.
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  8004208bdf:	55                   	push   %rbp
  8004208be0:	48 89 e5             	mov    %rsp,%rbp
  8004208be3:	53                   	push   %rbx
  8004208be4:	48 83 ec 78          	sub    $0x78,%rsp
  8004208be8:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004208bec:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  8004208bf0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004208bf4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208bf8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208bfd:	0f 84 6f 03 00 00    	je     8004208f72 <load_icode+0x393>
  8004208c03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c07:	8b 00                	mov    (%rax),%eax
  8004208c09:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  8004208c0e:	0f 85 5e 03 00 00    	jne    8004208f72 <load_icode+0x393>
		lcr3(PADDR((uint64_t)e->env_pml4e));
  8004208c14:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208c18:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208c1f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208c23:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208c2a:	00 00 00 
  8004208c2d:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004208c31:	77 32                	ja     8004208c65 <load_icode+0x86>
  8004208c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c37:	48 89 c1             	mov    %rax,%rcx
  8004208c3a:	48 ba 48 fc 21 04 80 	movabs $0x800421fc48,%rdx
  8004208c41:	00 00 00 
  8004208c44:	be d8 01 00 00       	mov    $0x1d8,%esi
  8004208c49:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  8004208c50:	00 00 00 
  8004208c53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c58:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208c5f:	00 00 00 
  8004208c62:	41 ff d0             	callq  *%r8
  8004208c65:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208c6c:	ff ff ff 
  8004208c6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c73:	48 01 d0             	add    %rdx,%rax
  8004208c76:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004208c7a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c7e:	0f 22 d8             	mov    %rax,%cr3
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  8004208c81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c85:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208c89:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c8d:	48 01 d0             	add    %rdx,%rax
  8004208c90:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		eph = ph + elf->e_phnum;
  8004208c94:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c98:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208c9c:	0f b7 c0             	movzwl %ax,%eax
  8004208c9f:	48 c1 e0 03          	shl    $0x3,%rax
  8004208ca3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208caa:	00 
  8004208cab:	48 29 c2             	sub    %rax,%rdx
  8004208cae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cb2:	48 01 d0             	add    %rdx,%rax
  8004208cb5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		for(;ph < eph; ph++) {
  8004208cb9:	e9 bd 00 00 00       	jmpq   8004208d7b <load_icode+0x19c>
			if (ph->p_type == ELF_PROG_LOAD) {
  8004208cbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cc2:	8b 00                	mov    (%rax),%eax
  8004208cc4:	83 f8 01             	cmp    $0x1,%eax
  8004208cc7:	0f 85 a9 00 00 00    	jne    8004208d76 <load_icode+0x197>
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208ccd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cd1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208cd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cd9:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208cdd:	48 89 c1             	mov    %rax,%rcx
  8004208ce0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208ce4:	48 89 ce             	mov    %rcx,%rsi
  8004208ce7:	48 89 c7             	mov    %rax,%rdi
  8004208cea:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208cf1:	00 00 00 
  8004208cf4:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  8004208cf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cfa:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208cfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d02:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004208d06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d0a:	48 01 c1             	add    %rax,%rcx
  8004208d0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d11:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208d15:	48 89 ce             	mov    %rcx,%rsi
  8004208d18:	48 89 c7             	mov    %rax,%rdi
  8004208d1b:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  8004208d22:	00 00 00 
  8004208d25:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz) {
  8004208d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d2b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208d2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d33:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004208d37:	48 39 c2             	cmp    %rax,%rdx
  8004208d3a:	73 3a                	jae    8004208d76 <load_icode+0x197>
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
  8004208d3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d40:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208d44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d48:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d4c:	48 29 c2             	sub    %rax,%rdx
  8004208d4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d53:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004208d57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d5b:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d5f:	48 01 c8             	add    %rcx,%rax
  8004208d62:	be 00 00 00 00       	mov    $0x0,%esi
  8004208d67:	48 89 c7             	mov    %rax,%rdi
  8004208d6a:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004208d71:	00 00 00 
  8004208d74:	ff d0                	callq  *%rax

	if (elf && elf->e_magic == ELF_MAGIC) {
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for(;ph < eph; ph++) {
  8004208d76:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  8004208d7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d7f:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208d83:	0f 82 35 ff ff ff    	jb     8004208cbe <load_icode+0xdf>
				if (ph->p_filesz < ph->p_memsz) {
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void*) (USTACKTOP - PGSIZE), PGSIZE);
  8004208d89:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208d8d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208d92:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004208d97:	48 89 c7             	mov    %rax,%rdi
  8004208d9a:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208da1:	00 00 00 
  8004208da4:	ff d0                	callq  *%rax
		e->env_tf.tf_rip    = elf->e_entry;
  8004208da6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208daa:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208dae:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208db2:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp    = USTACKTOP; //keeping stack 8 byte aligned
  8004208db9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208dbd:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208dc2:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  8004208dc9:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208dd0:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  8004208dd1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208dd5:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208dd9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ddd:	48 01 d0             	add    %rdx,%rax
  8004208de0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  8004208de4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208de8:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004208dec:	0f b7 c0             	movzwl %ax,%eax
  8004208def:	48 c1 e0 06          	shl    $0x6,%rax
  8004208df3:	48 89 c2             	mov    %rax,%rdx
  8004208df6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208dfa:	48 01 d0             	add    %rdx,%rax
  8004208dfd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		struct Secthdr* esh = sh + elf->e_shnum;
  8004208e01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e05:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004208e09:	0f b7 c0             	movzwl %ax,%eax
  8004208e0c:	48 c1 e0 06          	shl    $0x6,%rax
  8004208e10:	48 89 c2             	mov    %rax,%rdx
  8004208e13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e17:	48 01 d0             	add    %rdx,%rax
  8004208e1a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		for(;sh < esh; sh++) {
  8004208e1e:	e9 27 01 00 00       	jmpq   8004208f4a <load_icode+0x36b>
			char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  8004208e23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208e27:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208e2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e2f:	8b 00                	mov    (%rax),%eax
  8004208e31:	89 c0                	mov    %eax,%eax
  8004208e33:	48 01 c2             	add    %rax,%rdx
  8004208e36:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e3a:	48 01 d0             	add    %rdx,%rax
  8004208e3d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if(!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev")
  8004208e41:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e45:	48 be e8 fc 21 04 80 	movabs $0x800421fce8,%rsi
  8004208e4c:	00 00 00 
  8004208e4f:	48 89 c7             	mov    %rax,%rdi
  8004208e52:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004208e59:	00 00 00 
  8004208e5c:	ff d0                	callq  *%rax
  8004208e5e:	85 c0                	test   %eax,%eax
  8004208e60:	0f 84 84 00 00 00    	je     8004208eea <load_icode+0x30b>
  8004208e66:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e6a:	48 be f4 fc 21 04 80 	movabs $0x800421fcf4,%rsi
  8004208e71:	00 00 00 
  8004208e74:	48 89 c7             	mov    %rax,%rdi
  8004208e77:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004208e7e:	00 00 00 
  8004208e81:	ff d0                	callq  *%rax
  8004208e83:	85 c0                	test   %eax,%eax
  8004208e85:	74 63                	je     8004208eea <load_icode+0x30b>
			   || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame")
  8004208e87:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e8b:	48 be 02 fd 21 04 80 	movabs $0x800421fd02,%rsi
  8004208e92:	00 00 00 
  8004208e95:	48 89 c7             	mov    %rax,%rdi
  8004208e98:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004208e9f:	00 00 00 
  8004208ea2:	ff d0                	callq  *%rax
  8004208ea4:	85 c0                	test   %eax,%eax
  8004208ea6:	74 42                	je     8004208eea <load_icode+0x30b>
  8004208ea8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208eac:	48 be 0e fd 21 04 80 	movabs $0x800421fd0e,%rsi
  8004208eb3:	00 00 00 
  8004208eb6:	48 89 c7             	mov    %rax,%rdi
  8004208eb9:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004208ec0:	00 00 00 
  8004208ec3:	ff d0                	callq  *%rax
  8004208ec5:	85 c0                	test   %eax,%eax
  8004208ec7:	74 21                	je     8004208eea <load_icode+0x30b>
			   || !strcmp(name, ".debug_str")) {
  8004208ec9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208ecd:	48 be 18 fd 21 04 80 	movabs $0x800421fd18,%rsi
  8004208ed4:	00 00 00 
  8004208ed7:	48 89 c7             	mov    %rax,%rdi
  8004208eda:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004208ee1:	00 00 00 
  8004208ee4:	ff d0                	callq  *%rax
  8004208ee6:	85 c0                	test   %eax,%eax
  8004208ee8:	75 5b                	jne    8004208f45 <load_icode+0x366>
				region_alloc(e ,(void*)debug_address, sh->sh_size);
  8004208eea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208eee:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208ef2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004208ef6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208efa:	48 89 ce             	mov    %rcx,%rsi
  8004208efd:	48 89 c7             	mov    %rax,%rdi
  8004208f00:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208f07:	00 00 00 
  8004208f0a:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
  8004208f0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f10:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208f14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f18:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004208f1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208f20:	48 01 c1             	add    %rax,%rcx
  8004208f23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208f27:	48 89 ce             	mov    %rcx,%rsi
  8004208f2a:	48 89 c7             	mov    %rax,%rdi
  8004208f2d:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  8004208f34:	00 00 00 
  8004208f37:	ff d0                	callq  *%rax
				       sh->sh_size);
				debug_address += sh->sh_size;
  8004208f39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f3d:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208f41:	48 01 45 e0          	add    %rax,-0x20(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr* esh = sh + elf->e_shnum;
		for(;sh < esh; sh++) {
  8004208f45:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  8004208f4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f4e:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  8004208f52:	0f 82 cb fe ff ff    	jb     8004208e23 <load_icode+0x244>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
				       sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  8004208f58:	48 b8 e8 c5 6d 04 80 	movabs $0x80046dc5e8,%rax
  8004208f5f:	00 00 00 
  8004208f62:	48 8b 00             	mov    (%rax),%rax
  8004208f65:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004208f69:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004208f6d:	0f 22 d8             	mov    %rax,%cr3
load_icode(struct Env *e, uint8_t *binary)
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208f70:	eb 2a                	jmp    8004208f9c <load_icode+0x3bd>
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
	} else {
		panic("Invalid Binary");
  8004208f72:	48 ba 23 fd 21 04 80 	movabs $0x800421fd23,%rdx
  8004208f79:	00 00 00 
  8004208f7c:	be f9 01 00 00       	mov    $0x1f9,%esi
  8004208f81:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  8004208f88:	00 00 00 
  8004208f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208f90:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004208f97:	00 00 00 
  8004208f9a:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  8004208f9c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208fa0:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208fa4:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  8004208fab:	48 83 c4 78          	add    $0x78,%rsp
  8004208faf:	5b                   	pop    %rbx
  8004208fb0:	5d                   	pop    %rbp
  8004208fb1:	c3                   	retq   

0000008004208fb2 <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  8004208fb2:	55                   	push   %rbp
  8004208fb3:	48 89 e5             	mov    %rsp,%rbp
  8004208fb6:	48 83 ec 20          	sub    $0x20,%rsp
  8004208fba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208fbe:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  8004208fc1:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004208fc5:	be 00 00 00 00       	mov    $0x0,%esi
  8004208fca:	48 89 c7             	mov    %rax,%rdi
  8004208fcd:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  8004208fd4:	00 00 00 
  8004208fd7:	ff d0                	callq  *%rax
  8004208fd9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208fdc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208fe0:	79 30                	jns    8004209012 <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  8004208fe2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208fe5:	89 c1                	mov    %eax,%ecx
  8004208fe7:	48 ba 38 fd 21 04 80 	movabs $0x800421fd38,%rdx
  8004208fee:	00 00 00 
  8004208ff1:	be 0d 02 00 00       	mov    $0x20d,%esi
  8004208ff6:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  8004208ffd:	00 00 00 
  8004209000:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209005:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420900c:	00 00 00 
  800420900f:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  8004209012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209016:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420901a:	48 89 d6             	mov    %rdx,%rsi
  800420901d:	48 89 c7             	mov    %rax,%rdi
  8004209020:	48 b8 df 8b 20 04 80 	movabs $0x8004208bdf,%rax
  8004209027:	00 00 00 
  800420902a:	ff d0                	callq  *%rax
	e->env_type = type;
  800420902c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209030:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004209033:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  8004209039:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420903d:	75 19                	jne    8004209058 <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  800420903f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209043:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004209047:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  800420904e:	80 ce 30             	or     $0x30,%dh
  8004209051:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  8004209058:	c9                   	leaveq 
  8004209059:	c3                   	retq   

000000800420905a <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  800420905a:	55                   	push   %rbp
  800420905b:	48 89 e5             	mov    %rsp,%rbp
  800420905e:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004209065:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
	pte_t *pt;
	uint64_t pdeno, pteno;
	physaddr_t pa;

#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  800420906c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209073:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209079:	83 f8 03             	cmp    $0x3,%eax
  800420907c:	75 1b                	jne    8004209099 <env_free+0x3f>
		env_guest_free(e);
  800420907e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209085:	48 89 c7             	mov    %rax,%rdi
  8004209088:	48 b8 0a 86 20 04 80 	movabs $0x800420860a,%rax
  800420908f:	00 00 00 
  8004209092:	ff d0                	callq  *%rax
		return;
  8004209094:	e9 78 04 00 00       	jmpq   8004209511 <env_free+0x4b7>
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  8004209099:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042090a0:	00 00 00 
  80042090a3:	ff d0                	callq  *%rax
  80042090a5:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  80042090ac:	00 00 00 
  80042090af:	48 98                	cltq   
  80042090b1:	48 c1 e0 03          	shl    $0x3,%rax
  80042090b5:	48 89 c1             	mov    %rax,%rcx
  80042090b8:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090bc:	48 01 c8             	add    %rcx,%rax
  80042090bf:	48 01 d0             	add    %rdx,%rax
  80042090c2:	48 83 c0 08          	add    $0x8,%rax
  80042090c6:	48 8b 00             	mov    (%rax),%rax
  80042090c9:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  80042090d0:	75 18                	jne    80042090ea <env_free+0x90>
		lcr3(boot_cr3);
  80042090d2:	48 b8 e8 c5 6d 04 80 	movabs $0x80046dc5e8,%rax
  80042090d9:	00 00 00 
  80042090dc:	48 8b 00             	mov    (%rax),%rax
  80042090df:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042090e3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042090e7:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  80042090ea:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042090f1:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042090f8:	48 8b 00             	mov    (%rax),%rax
  80042090fb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209101:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004209105:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209109:	48 c1 e8 0c          	shr    $0xc,%rax
  800420910d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004209110:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004209113:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800420911a:	00 00 00 
  800420911d:	48 8b 00             	mov    (%rax),%rax
  8004209120:	48 39 c2             	cmp    %rax,%rdx
  8004209123:	72 32                	jb     8004209157 <env_free+0xfd>
  8004209125:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209129:	48 89 c1             	mov    %rax,%rcx
  800420912c:	48 ba 08 fc 21 04 80 	movabs $0x800421fc08,%rdx
  8004209133:	00 00 00 
  8004209136:	be 32 02 00 00       	mov    $0x232,%esi
  800420913b:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  8004209142:	00 00 00 
  8004209145:	b8 00 00 00 00       	mov    $0x0,%eax
  800420914a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209151:	00 00 00 
  8004209154:	41 ff d0             	callq  *%r8
  8004209157:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420915e:	00 00 00 
  8004209161:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209165:	48 01 d0             	add    %rdx,%rax
  8004209168:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  800420916c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004209173:	00 
  8004209174:	e9 ab 02 00 00       	jmpq   8004209424 <env_free+0x3ca>
		if(!(env_pdpe[pdpe_index] & PTE_P))
  8004209179:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420917d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209184:	00 
  8004209185:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004209189:	48 01 d0             	add    %rdx,%rax
  800420918c:	48 8b 00             	mov    (%rax),%rax
  800420918f:	83 e0 01             	and    $0x1,%eax
  8004209192:	48 85 c0             	test   %rax,%rax
  8004209195:	75 05                	jne    800420919c <env_free+0x142>
			continue;
  8004209197:	e9 83 02 00 00       	jmpq   800420941f <env_free+0x3c5>
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  800420919c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042091a7:	00 
  80042091a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042091ac:	48 01 d0             	add    %rdx,%rax
  80042091af:	48 8b 00             	mov    (%rax),%rax
  80042091b2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042091b8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042091bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091c0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042091c4:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042091c7:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042091ca:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042091d1:	00 00 00 
  80042091d4:	48 8b 00             	mov    (%rax),%rax
  80042091d7:	48 39 c2             	cmp    %rax,%rdx
  80042091da:	72 32                	jb     800420920e <env_free+0x1b4>
  80042091dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091e0:	48 89 c1             	mov    %rax,%rcx
  80042091e3:	48 ba 08 fc 21 04 80 	movabs $0x800421fc08,%rdx
  80042091ea:	00 00 00 
  80042091ed:	be 3a 02 00 00       	mov    $0x23a,%esi
  80042091f2:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  80042091f9:	00 00 00 
  80042091fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209201:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209208:	00 00 00 
  800420920b:	41 ff d0             	callq  *%r8
  800420920e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004209215:	00 00 00 
  8004209218:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420921c:	48 01 d0             	add    %rdx,%rax
  800420921f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  8004209223:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209228:	75 07                	jne    8004209231 <env_free+0x1d7>
  800420922a:	b8 04 00 00 00       	mov    $0x4,%eax
  800420922f:	eb 05                	jmp    8004209236 <env_free+0x1dc>
  8004209231:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004209236:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004209239:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004209240:	00 
  8004209241:	e9 6e 01 00 00       	jmpq   80042093b4 <env_free+0x35a>

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  8004209246:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420924a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209251:	00 
  8004209252:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209256:	48 01 d0             	add    %rdx,%rax
  8004209259:	48 8b 00             	mov    (%rax),%rax
  800420925c:	83 e0 01             	and    $0x1,%eax
  800420925f:	48 85 c0             	test   %rax,%rax
  8004209262:	75 05                	jne    8004209269 <env_free+0x20f>
				continue;
  8004209264:	e9 46 01 00 00       	jmpq   80042093af <env_free+0x355>
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  8004209269:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420926d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209274:	00 
  8004209275:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209279:	48 01 d0             	add    %rdx,%rax
  800420927c:	48 8b 00             	mov    (%rax),%rax
  800420927f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209285:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t*) KADDR(pa);
  8004209289:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420928d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004209291:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004209295:	48 c1 e8 0c          	shr    $0xc,%rax
  8004209299:	89 45 9c             	mov    %eax,-0x64(%rbp)
  800420929c:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420929f:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042092a6:	00 00 00 
  80042092a9:	48 8b 00             	mov    (%rax),%rax
  80042092ac:	48 39 c2             	cmp    %rax,%rdx
  80042092af:	72 32                	jb     80042092e3 <env_free+0x289>
  80042092b1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092b5:	48 89 c1             	mov    %rax,%rcx
  80042092b8:	48 ba 08 fc 21 04 80 	movabs $0x800421fc08,%rdx
  80042092bf:	00 00 00 
  80042092c2:	be 44 02 00 00       	mov    $0x244,%esi
  80042092c7:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  80042092ce:	00 00 00 
  80042092d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042092d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042092dd:	00 00 00 
  80042092e0:	41 ff d0             	callq  *%r8
  80042092e3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042092ea:	00 00 00 
  80042092ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092f1:	48 01 d0             	add    %rdx,%rax
  80042092f4:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  80042092f8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  80042092ff:	00 
  8004209300:	eb 67                	jmp    8004209369 <env_free+0x30f>
				if (pt[pteno] & PTE_P){
  8004209302:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209306:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420930d:	00 
  800420930e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004209312:	48 01 d0             	add    %rdx,%rax
  8004209315:	48 8b 00             	mov    (%rax),%rax
  8004209318:	83 e0 01             	and    $0x1,%eax
  800420931b:	48 85 c0             	test   %rax,%rax
  800420931e:	74 44                	je     8004209364 <env_free+0x30a>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  8004209320:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209324:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004209328:	48 89 c2             	mov    %rax,%rdx
  800420932b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420932f:	48 c1 e0 15          	shl    $0x15,%rax
  8004209333:	48 09 c2             	or     %rax,%rdx
  8004209336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420933a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420933e:	48 09 d0             	or     %rdx,%rax
  8004209341:	48 89 c2             	mov    %rax,%rdx
  8004209344:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420934b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209352:	48 89 d6             	mov    %rdx,%rsi
  8004209355:	48 89 c7             	mov    %rax,%rdi
  8004209358:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420935f:	00 00 00 
  8004209362:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t*) KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004209364:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004209369:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004209370:	00 
  8004209371:	76 8f                	jbe    8004209302 <env_free+0x2a8>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  8004209373:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209377:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420937e:	00 
  800420937f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209383:	48 01 d0             	add    %rdx,%rax
  8004209386:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  800420938d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209391:	48 89 c7             	mov    %rax,%rdi
  8004209394:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  800420939b:	00 00 00 
  800420939e:	ff d0                	callq  *%rax
  80042093a0:	48 89 c7             	mov    %rax,%rdi
  80042093a3:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042093aa:	00 00 00 
  80042093ad:	ff d0                	callq  *%rax
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  80042093af:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042093b4:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042093b7:	48 98                	cltq   
  80042093b9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042093bd:	0f 87 83 fe ff ff    	ja     8004209246 <env_free+0x1ec>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  80042093c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093c7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093ce:	00 
  80042093cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093d3:	48 01 d0             	add    %rdx,%rax
  80042093d6:	48 8b 00             	mov    (%rax),%rax
  80042093d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042093df:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  80042093e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093e7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093ee:	00 
  80042093ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093f3:	48 01 d0             	add    %rdx,%rax
  80042093f6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  80042093fd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209401:	48 89 c7             	mov    %rax,%rdi
  8004209404:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  800420940b:	00 00 00 
  800420940e:	ff d0                	callq  *%rax
  8004209410:	48 89 c7             	mov    %rax,%rdi
  8004209413:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420941a:	00 00 00 
  800420941d:	ff d0                	callq  *%rax
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  800420941f:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004209424:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209429:	0f 86 4a fd ff ff    	jbe    8004209179 <env_free+0x11f>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  800420942f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209436:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420943d:	48 8b 00             	mov    (%rax),%rax
  8004209440:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209446:	48 89 c7             	mov    %rax,%rdi
  8004209449:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004209450:	00 00 00 
  8004209453:	ff d0                	callq  *%rax
  8004209455:	48 89 c7             	mov    %rax,%rdi
  8004209458:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420945f:	00 00 00 
  8004209462:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004209464:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420946b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209472:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004209479:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209480:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209487:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  800420948b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209492:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004209499:	00 00 00 00 
	e->env_cr3 = 0;
  800420949d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094a4:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  80042094ab:	00 00 00 00 
	page_decref(pa2page(pa));
  80042094af:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042094b3:	48 89 c7             	mov    %rax,%rdi
  80042094b6:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  80042094bd:	00 00 00 
  80042094c0:	ff d0                	callq  *%rax
  80042094c2:	48 89 c7             	mov    %rax,%rdi
  80042094c5:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042094cc:	00 00 00 
  80042094cf:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  80042094d1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094d8:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  80042094df:	00 00 00 
	e->env_link = env_free_list;
  80042094e2:	48 b8 60 d2 4d 04 80 	movabs $0x80044dd260,%rax
  80042094e9:	00 00 00 
  80042094ec:	48 8b 10             	mov    (%rax),%rdx
  80042094ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094f6:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  80042094fd:	48 b8 60 d2 4d 04 80 	movabs $0x80044dd260,%rax
  8004209504:	00 00 00 
  8004209507:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420950e:	48 89 10             	mov    %rdx,(%rax)
}
  8004209511:	c9                   	leaveq 
  8004209512:	c3                   	retq   

0000008004209513 <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void
env_destroy(struct Env *e)
{
  8004209513:	55                   	push   %rbp
  8004209514:	48 89 e5             	mov    %rsp,%rbp
  8004209517:	48 83 ec 10          	sub    $0x10,%rsp
  800420951b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e) {
  800420951f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209523:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209529:	83 f8 03             	cmp    $0x3,%eax
  800420952c:	75 49                	jne    8004209577 <env_destroy+0x64>
  800420952e:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004209535:	00 00 00 
  8004209538:	ff d0                	callq  *%rax
  800420953a:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004209541:	00 00 00 
  8004209544:	48 98                	cltq   
  8004209546:	48 c1 e0 03          	shl    $0x3,%rax
  800420954a:	48 89 c1             	mov    %rax,%rcx
  800420954d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209551:	48 01 c8             	add    %rcx,%rax
  8004209554:	48 01 d0             	add    %rdx,%rax
  8004209557:	48 83 c0 08          	add    $0x8,%rax
  800420955b:	48 8b 00             	mov    (%rax),%rax
  800420955e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004209562:	74 13                	je     8004209577 <env_destroy+0x64>
		e->env_status = ENV_DYING;
  8004209564:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209568:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  800420956f:	00 00 00 
		return;
  8004209572:	e9 89 00 00 00       	jmpq   8004209600 <env_destroy+0xed>
	}

	env_free(e);
  8004209577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420957b:	48 89 c7             	mov    %rax,%rdi
  800420957e:	48 b8 5a 90 20 04 80 	movabs $0x800420905a,%rax
  8004209585:	00 00 00 
  8004209588:	ff d0                	callq  *%rax
	if (curenv == e) {
  800420958a:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004209591:	00 00 00 
  8004209594:	ff d0                	callq  *%rax
  8004209596:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420959d:	00 00 00 
  80042095a0:	48 98                	cltq   
  80042095a2:	48 c1 e0 03          	shl    $0x3,%rax
  80042095a6:	48 89 c1             	mov    %rax,%rcx
  80042095a9:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095ad:	48 01 c8             	add    %rcx,%rax
  80042095b0:	48 01 d0             	add    %rdx,%rax
  80042095b3:	48 83 c0 08          	add    $0x8,%rax
  80042095b7:	48 8b 00             	mov    (%rax),%rax
  80042095ba:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042095be:	75 40                	jne    8004209600 <env_destroy+0xed>
		curenv = NULL;
  80042095c0:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042095c7:	00 00 00 
  80042095ca:	ff d0                	callq  *%rax
  80042095cc:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  80042095d3:	00 00 00 
  80042095d6:	48 98                	cltq   
  80042095d8:	48 c1 e0 03          	shl    $0x3,%rax
  80042095dc:	48 89 c1             	mov    %rax,%rcx
  80042095df:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095e3:	48 01 c8             	add    %rcx,%rax
  80042095e6:	48 01 d0             	add    %rdx,%rax
  80042095e9:	48 83 c0 08          	add    $0x8,%rax
  80042095ed:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  80042095f4:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  80042095fb:	00 00 00 
  80042095fe:	ff d0                	callq  *%rax
	}
}
  8004209600:	c9                   	leaveq 
  8004209601:	c3                   	retq   

0000008004209602 <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  8004209602:	55                   	push   %rbp
  8004209603:	48 89 e5             	mov    %rsp,%rbp
  8004209606:	53                   	push   %rbx
  8004209607:	48 83 ec 18          	sub    $0x18,%rsp
  800420960b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  800420960f:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004209616:	00 00 00 
  8004209619:	ff d0                	callq  *%rax
  800420961b:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004209622:	00 00 00 
  8004209625:	48 98                	cltq   
  8004209627:	48 c1 e0 03          	shl    $0x3,%rax
  800420962b:	48 89 c1             	mov    %rax,%rcx
  800420962e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209632:	48 01 c8             	add    %rcx,%rax
  8004209635:	48 01 d0             	add    %rdx,%rax
  8004209638:	48 83 c0 08          	add    $0x8,%rax
  800420963c:	48 8b 18             	mov    (%rax),%rbx
  800420963f:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004209646:	00 00 00 
  8004209649:	ff d0                	callq  *%rax
  800420964b:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n"
  8004209651:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004209655:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004209659:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  800420965e:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004209663:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004209668:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  800420966d:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  8004209672:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  8004209677:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  800420967c:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  8004209681:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  8004209686:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  800420968b:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  8004209690:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  8004209695:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  800420969a:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  800420969f:	48 83 c4 78          	add    $0x78,%rsp
  80042096a3:	8e 04 24             	mov    (%rsp),%es
  80042096a6:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  80042096aa:	48 83 c4 10          	add    $0x10,%rsp
  80042096ae:	48 83 c4 10          	add    $0x10,%rsp
  80042096b2:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  80042096b4:	48 ba 60 fd 21 04 80 	movabs $0x800421fd60,%rdx
  80042096bb:	00 00 00 
  80042096be:	be 90 02 00 00       	mov    $0x290,%esi
  80042096c3:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  80042096ca:	00 00 00 
  80042096cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042096d2:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042096d9:	00 00 00 
  80042096dc:	ff d1                	callq  *%rcx

00000080042096de <env_run>:
// This function does not return.
//
// CHANGED FOR LAB 0
void
env_run(struct Env *e)
{
  80042096de:	55                   	push   %rbp
  80042096df:	48 89 e5             	mov    %rsp,%rbp
  80042096e2:	48 83 ec 20          	sub    $0x20,%rsp
  80042096e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e) {
  80042096ea:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042096f1:	00 00 00 
  80042096f4:	ff d0                	callq  *%rax
  80042096f6:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  80042096fd:	00 00 00 
  8004209700:	48 98                	cltq   
  8004209702:	48 c1 e0 03          	shl    $0x3,%rax
  8004209706:	48 89 c1             	mov    %rax,%rcx
  8004209709:	48 c1 e1 04          	shl    $0x4,%rcx
  800420970d:	48 01 c8             	add    %rcx,%rax
  8004209710:	48 01 d0             	add    %rdx,%rax
  8004209713:	48 83 c0 08          	add    $0x8,%rax
  8004209717:	48 8b 00             	mov    (%rax),%rax
  800420971a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420971e:	0f 84 28 01 00 00    	je     800420984c <env_run+0x16e>
		if (curenv && curenv->env_status == ENV_RUNNING)
  8004209724:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420972b:	00 00 00 
  800420972e:	ff d0                	callq  *%rax
  8004209730:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004209737:	00 00 00 
  800420973a:	48 98                	cltq   
  800420973c:	48 c1 e0 03          	shl    $0x3,%rax
  8004209740:	48 89 c1             	mov    %rax,%rcx
  8004209743:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209747:	48 01 c8             	add    %rcx,%rax
  800420974a:	48 01 d0             	add    %rdx,%rax
  800420974d:	48 83 c0 08          	add    $0x8,%rax
  8004209751:	48 8b 00             	mov    (%rax),%rax
  8004209754:	48 85 c0             	test   %rax,%rax
  8004209757:	74 75                	je     80042097ce <env_run+0xf0>
  8004209759:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004209760:	00 00 00 
  8004209763:	ff d0                	callq  *%rax
  8004209765:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420976c:	00 00 00 
  800420976f:	48 98                	cltq   
  8004209771:	48 c1 e0 03          	shl    $0x3,%rax
  8004209775:	48 89 c1             	mov    %rax,%rcx
  8004209778:	48 c1 e1 04          	shl    $0x4,%rcx
  800420977c:	48 01 c8             	add    %rcx,%rax
  800420977f:	48 01 d0             	add    %rdx,%rax
  8004209782:	48 83 c0 08          	add    $0x8,%rax
  8004209786:	48 8b 00             	mov    (%rax),%rax
  8004209789:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420978f:	83 f8 03             	cmp    $0x3,%eax
  8004209792:	75 3a                	jne    80042097ce <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  8004209794:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420979b:	00 00 00 
  800420979e:	ff d0                	callq  *%rax
  80042097a0:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  80042097a7:	00 00 00 
  80042097aa:	48 98                	cltq   
  80042097ac:	48 c1 e0 03          	shl    $0x3,%rax
  80042097b0:	48 89 c1             	mov    %rax,%rcx
  80042097b3:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097b7:	48 01 c8             	add    %rcx,%rax
  80042097ba:	48 01 d0             	add    %rdx,%rax
  80042097bd:	48 83 c0 08          	add    $0x8,%rax
  80042097c1:	48 8b 00             	mov    (%rax),%rax
  80042097c4:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042097cb:	00 00 00 
		// cprintf("cpu %d switch from env %d to env %d\n",
		// 	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  80042097ce:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042097d5:	00 00 00 
  80042097d8:	ff d0                	callq  *%rax
  80042097da:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  80042097e1:	00 00 00 
  80042097e4:	48 98                	cltq   
  80042097e6:	48 c1 e0 03          	shl    $0x3,%rax
  80042097ea:	48 89 c1             	mov    %rax,%rcx
  80042097ed:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097f1:	48 01 c8             	add    %rcx,%rax
  80042097f4:	48 01 d0             	add    %rdx,%rax
  80042097f7:	48 8d 50 08          	lea    0x8(%rax),%rdx
  80042097fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042097ff:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  8004209802:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209806:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  800420980d:	00 00 00 

		// Hint, Lab 0: An environment has started running. We should keep track of that somewhere, right?
		e->env_runs++; // increment the number of times the env has been run
  8004209810:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209814:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800420981a:	8d 50 01             	lea    0x1(%rax),%edx
  800420981d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209821:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)

		// restore e's address space
		if(e->env_type != ENV_TYPE_GUEST)
  8004209827:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420982b:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209831:	83 f8 03             	cmp    $0x3,%eax
  8004209834:	74 16                	je     800420984c <env_run+0x16e>
			lcr3(e->env_cr3);
  8004209836:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420983a:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209841:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004209845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209849:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  800420984c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209850:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209856:	83 f8 03             	cmp    $0x3,%eax
  8004209859:	74 35                	je     8004209890 <env_run+0x1b2>
  800420985b:	48 b9 6c fd 21 04 80 	movabs $0x800421fd6c,%rcx
  8004209862:	00 00 00 
  8004209865:	48 ba 89 fd 21 04 80 	movabs $0x800421fd89,%rdx
  800420986c:	00 00 00 
  800420986f:	be b2 02 00 00       	mov    $0x2b2,%esi
  8004209874:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  800420987b:	00 00 00 
  800420987e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209883:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420988a:	00 00 00 
  800420988d:	41 ff d0             	callq  *%r8


#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  8004209890:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209894:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420989a:	83 f8 03             	cmp    $0x3,%eax
  800420989d:	75 3d                	jne    80042098dc <env_run+0x1fe>
		vmx_vmrun(e);
  800420989f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098a3:	48 89 c7             	mov    %rax,%rdi
  80042098a6:	48 b8 9c db 21 04 80 	movabs $0x800421db9c,%rax
  80042098ad:	00 00 00 
  80042098b0:	ff d0                	callq  *%rax
		panic ("vmx_run never returns\n");
  80042098b2:	48 ba 9e fd 21 04 80 	movabs $0x800421fd9e,%rdx
  80042098b9:	00 00 00 
  80042098bc:	be b8 02 00 00       	mov    $0x2b8,%esi
  80042098c1:	48 bf 6c fc 21 04 80 	movabs $0x800421fc6c,%rdi
  80042098c8:	00 00 00 
  80042098cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042098d0:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042098d7:	00 00 00 
  80042098da:	ff d1                	callq  *%rcx
	}
	else {
		unlock_kernel();
  80042098dc:	48 b8 e3 7d 20 04 80 	movabs $0x8004207de3,%rax
  80042098e3:	00 00 00 
  80042098e6:	ff d0                	callq  *%rax
		env_pop_tf(&e->env_tf);
  80042098e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098ec:	48 89 c7             	mov    %rax,%rdi
  80042098ef:	48 b8 02 96 20 04 80 	movabs $0x8004209602,%rax
  80042098f6:	00 00 00 
  80042098f9:	ff d0                	callq  *%rax

00000080042098fb <mc146818_read>:
  80042098fb:	55                   	push   %rbp
  80042098fc:	48 89 e5             	mov    %rsp,%rbp
  80042098ff:	48 83 ec 14          	sub    $0x14,%rsp
  8004209903:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209906:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209909:	0f b6 c0             	movzbl %al,%eax
  800420990c:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  8004209913:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209916:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420991a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420991d:	ee                   	out    %al,(%dx)
  800420991e:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004209925:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004209928:	89 c2                	mov    %eax,%edx
  800420992a:	ec                   	in     (%dx),%al
  800420992b:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420992e:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209932:	0f b6 c0             	movzbl %al,%eax
  8004209935:	c9                   	leaveq 
  8004209936:	c3                   	retq   

0000008004209937 <mc146818_write>:
  8004209937:	55                   	push   %rbp
  8004209938:	48 89 e5             	mov    %rsp,%rbp
  800420993b:	48 83 ec 18          	sub    $0x18,%rsp
  800420993f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209942:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004209945:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209948:	0f b6 c0             	movzbl %al,%eax
  800420994b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  8004209952:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209955:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209959:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420995c:	ee                   	out    %al,(%dx)
  800420995d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004209960:	0f b6 c0             	movzbl %al,%eax
  8004209963:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  800420996a:	88 45 f3             	mov    %al,-0xd(%rbp)
  800420996d:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209971:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209974:	ee                   	out    %al,(%dx)
  8004209975:	c9                   	leaveq 
  8004209976:	c3                   	retq   

0000008004209977 <pic_init>:
  8004209977:	55                   	push   %rbp
  8004209978:	48 89 e5             	mov    %rsp,%rbp
  800420997b:	48 83 ec 70          	sub    $0x70,%rsp
  800420997f:	48 b8 68 d2 4d 04 80 	movabs $0x80044dd268,%rax
  8004209986:	00 00 00 
  8004209989:	c6 00 01             	movb   $0x1,(%rax)
  800420998c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  8004209993:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  8004209997:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420999b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420999e:	ee                   	out    %al,(%dx)
  800420999f:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  80042099a6:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  80042099aa:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042099ae:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042099b1:	ee                   	out    %al,(%dx)
  80042099b2:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  80042099b9:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  80042099bd:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042099c1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042099c4:	ee                   	out    %al,(%dx)
  80042099c5:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  80042099cc:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  80042099d0:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042099d4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042099d7:	ee                   	out    %al,(%dx)
  80042099d8:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  80042099df:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  80042099e3:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042099e7:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042099ea:	ee                   	out    %al,(%dx)
  80042099eb:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  80042099f2:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  80042099f6:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042099fa:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042099fd:	ee                   	out    %al,(%dx)
  80042099fe:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  8004209a05:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  8004209a09:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004209a0d:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004209a10:	ee                   	out    %al,(%dx)
  8004209a11:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  8004209a18:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  8004209a1c:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004209a20:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004209a23:	ee                   	out    %al,(%dx)
  8004209a24:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  8004209a2b:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  8004209a2f:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004209a33:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004209a36:	ee                   	out    %al,(%dx)
  8004209a37:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  8004209a3e:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  8004209a42:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  8004209a46:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004209a49:	ee                   	out    %al,(%dx)
  8004209a4a:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  8004209a51:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  8004209a55:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  8004209a59:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004209a5c:	ee                   	out    %al,(%dx)
  8004209a5d:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  8004209a64:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209a68:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209a6c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004209a6f:	ee                   	out    %al,(%dx)
  8004209a70:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  8004209a77:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209a7b:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  8004209a7f:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004209a82:	ee                   	out    %al,(%dx)
  8004209a83:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  8004209a8a:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  8004209a8e:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  8004209a92:	8b 55 94             	mov    -0x6c(%rbp),%edx
  8004209a95:	ee                   	out    %al,(%dx)
  8004209a96:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209a9d:	00 00 00 
  8004209aa0:	0f b7 00             	movzwl (%rax),%eax
  8004209aa3:	66 83 f8 ff          	cmp    $0xffff,%ax
  8004209aa7:	74 1e                	je     8004209ac7 <pic_init+0x150>
  8004209aa9:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209ab0:	00 00 00 
  8004209ab3:	0f b7 00             	movzwl (%rax),%eax
  8004209ab6:	0f b7 c0             	movzwl %ax,%eax
  8004209ab9:	89 c7                	mov    %eax,%edi
  8004209abb:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004209ac2:	00 00 00 
  8004209ac5:	ff d0                	callq  *%rax
  8004209ac7:	c9                   	leaveq 
  8004209ac8:	c3                   	retq   

0000008004209ac9 <irq_setmask_8259A>:
  8004209ac9:	55                   	push   %rbp
  8004209aca:	48 89 e5             	mov    %rsp,%rbp
  8004209acd:	48 83 ec 30          	sub    $0x30,%rsp
  8004209ad1:	89 f8                	mov    %edi,%eax
  8004209ad3:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  8004209ad7:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209ade:	00 00 00 
  8004209ae1:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  8004209ae5:	66 89 10             	mov    %dx,(%rax)
  8004209ae8:	48 b8 68 d2 4d 04 80 	movabs $0x80044dd268,%rax
  8004209aef:	00 00 00 
  8004209af2:	0f b6 00             	movzbl (%rax),%eax
  8004209af5:	83 f0 01             	xor    $0x1,%eax
  8004209af8:	84 c0                	test   %al,%al
  8004209afa:	74 05                	je     8004209b01 <irq_setmask_8259A+0x38>
  8004209afc:	e9 b7 00 00 00       	jmpq   8004209bb8 <irq_setmask_8259A+0xef>
  8004209b01:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b05:	0f b6 c0             	movzbl %al,%eax
  8004209b08:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  8004209b0f:	88 45 f7             	mov    %al,-0x9(%rbp)
  8004209b12:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209b16:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209b19:	ee                   	out    %al,(%dx)
  8004209b1a:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b1e:	66 c1 e8 08          	shr    $0x8,%ax
  8004209b22:	0f b6 c0             	movzbl %al,%eax
  8004209b25:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209b2c:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004209b2f:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004209b33:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004209b36:	ee                   	out    %al,(%dx)
  8004209b37:	48 bf b5 fd 21 04 80 	movabs $0x800421fdb5,%rdi
  8004209b3e:	00 00 00 
  8004209b41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209b4d:	00 00 00 
  8004209b50:	ff d2                	callq  *%rdx
  8004209b52:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209b59:	eb 3c                	jmp    8004209b97 <irq_setmask_8259A+0xce>
  8004209b5b:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b5f:	f7 d0                	not    %eax
  8004209b61:	89 c2                	mov    %eax,%edx
  8004209b63:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b66:	89 c1                	mov    %eax,%ecx
  8004209b68:	d3 fa                	sar    %cl,%edx
  8004209b6a:	89 d0                	mov    %edx,%eax
  8004209b6c:	83 e0 01             	and    $0x1,%eax
  8004209b6f:	85 c0                	test   %eax,%eax
  8004209b71:	74 20                	je     8004209b93 <irq_setmask_8259A+0xca>
  8004209b73:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b76:	89 c6                	mov    %eax,%esi
  8004209b78:	48 bf c9 fd 21 04 80 	movabs $0x800421fdc9,%rdi
  8004209b7f:	00 00 00 
  8004209b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b87:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209b8e:	00 00 00 
  8004209b91:	ff d2                	callq  *%rdx
  8004209b93:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209b97:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004209b9b:	7e be                	jle    8004209b5b <irq_setmask_8259A+0x92>
  8004209b9d:	48 bf cd fd 21 04 80 	movabs $0x800421fdcd,%rdi
  8004209ba4:	00 00 00 
  8004209ba7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209bac:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209bb3:	00 00 00 
  8004209bb6:	ff d2                	callq  *%rdx
  8004209bb8:	c9                   	leaveq 
  8004209bb9:	c3                   	retq   

0000008004209bba <irq_eoi>:
  8004209bba:	55                   	push   %rbp
  8004209bbb:	48 89 e5             	mov    %rsp,%rbp
  8004209bbe:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bc2:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209bc9:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  8004209bcd:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209bd1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209bd4:	ee                   	out    %al,(%dx)
  8004209bd5:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  8004209bdc:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  8004209be0:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209be4:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209be7:	ee                   	out    %al,(%dx)
  8004209be8:	c9                   	leaveq 
  8004209be9:	c3                   	retq   

0000008004209bea <putch>:
  8004209bea:	55                   	push   %rbp
  8004209beb:	48 89 e5             	mov    %rsp,%rbp
  8004209bee:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bf2:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209bf5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209bf9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209bfc:	89 c7                	mov    %eax,%edi
  8004209bfe:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004209c05:	00 00 00 
  8004209c08:	ff d0                	callq  *%rax
  8004209c0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209c0e:	48 83 c0 04          	add    $0x4,%rax
  8004209c12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209c16:	c9                   	leaveq 
  8004209c17:	c3                   	retq   

0000008004209c18 <vcprintf>:
  8004209c18:	55                   	push   %rbp
  8004209c19:	48 89 e5             	mov    %rsp,%rbp
  8004209c1c:	48 83 ec 30          	sub    $0x30,%rsp
  8004209c20:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004209c24:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209c28:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209c2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004209c33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209c37:	48 8b 0a             	mov    (%rdx),%rcx
  8004209c3a:	48 89 08             	mov    %rcx,(%rax)
  8004209c3d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209c41:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209c45:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209c49:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209c4d:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  8004209c51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004209c55:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209c59:	48 89 c6             	mov    %rax,%rsi
  8004209c5c:	48 bf ea 9b 20 04 80 	movabs $0x8004209bea,%rdi
  8004209c63:	00 00 00 
  8004209c66:	48 b8 d8 01 21 04 80 	movabs $0x80042101d8,%rax
  8004209c6d:	00 00 00 
  8004209c70:	ff d0                	callq  *%rax
  8004209c72:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c75:	c9                   	leaveq 
  8004209c76:	c3                   	retq   

0000008004209c77 <cprintf>:
  8004209c77:	55                   	push   %rbp
  8004209c78:	48 89 e5             	mov    %rsp,%rbp
  8004209c7b:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  8004209c82:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  8004209c89:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  8004209c90:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004209c97:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004209c9e:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004209ca5:	84 c0                	test   %al,%al
  8004209ca7:	74 20                	je     8004209cc9 <cprintf+0x52>
  8004209ca9:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004209cad:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004209cb1:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004209cb5:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004209cb9:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209cbd:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004209cc1:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004209cc5:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004209cc9:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004209cd0:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004209cd7:	00 00 00 
  8004209cda:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004209ce1:	00 00 00 
  8004209ce4:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209ce8:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004209cef:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209cf6:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209cfd:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004209d04:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209d0b:	48 8b 0a             	mov    (%rdx),%rcx
  8004209d0e:	48 89 08             	mov    %rcx,(%rax)
  8004209d11:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209d15:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209d19:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209d1d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209d21:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209d28:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004209d2f:	48 89 d6             	mov    %rdx,%rsi
  8004209d32:	48 89 c7             	mov    %rax,%rdi
  8004209d35:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  8004209d3c:	00 00 00 
  8004209d3f:	ff d0                	callq  *%rax
  8004209d41:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209d47:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209d4d:	c9                   	leaveq 
  8004209d4e:	c3                   	retq   

0000008004209d4f <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004209d4f:	55                   	push   %rbp
  8004209d50:	48 89 e5             	mov    %rsp,%rbp
  8004209d53:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004209d57:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209d5b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004209d5e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209d62:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004209d65:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209d69:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209d6c:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004209d6f:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004209d72:	c9                   	leaveq 
  8004209d73:	c3                   	retq   

0000008004209d74 <lock_kernel>:
  8004209d74:	55                   	push   %rbp
  8004209d75:	48 89 e5             	mov    %rsp,%rbp
  8004209d78:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004209d7f:	00 00 00 
  8004209d82:	48 b8 55 81 21 04 80 	movabs $0x8004218155,%rax
  8004209d89:	00 00 00 
  8004209d8c:	ff d0                	callq  *%rax
  8004209d8e:	5d                   	pop    %rbp
  8004209d8f:	c3                   	retq   

0000008004209d90 <trapname>:
  8004209d90:	55                   	push   %rbp
  8004209d91:	48 89 e5             	mov    %rsp,%rbp
  8004209d94:	48 83 ec 04          	sub    $0x4,%rsp
  8004209d98:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209d9b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209d9e:	83 f8 13             	cmp    $0x13,%eax
  8004209da1:	77 16                	ja     8004209db9 <trapname+0x29>
  8004209da3:	48 b8 e0 01 22 04 80 	movabs $0x80042201e0,%rax
  8004209daa:	00 00 00 
  8004209dad:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209db0:	48 63 d2             	movslq %edx,%rdx
  8004209db3:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004209db7:	eb 34                	jmp    8004209ded <trapname+0x5d>
  8004209db9:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  8004209dbd:	75 0c                	jne    8004209dcb <trapname+0x3b>
  8004209dbf:	48 b8 e0 fd 21 04 80 	movabs $0x800421fde0,%rax
  8004209dc6:	00 00 00 
  8004209dc9:	eb 22                	jmp    8004209ded <trapname+0x5d>
  8004209dcb:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  8004209dcf:	7e 12                	jle    8004209de3 <trapname+0x53>
  8004209dd1:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  8004209dd5:	7f 0c                	jg     8004209de3 <trapname+0x53>
  8004209dd7:	48 b8 ec fd 21 04 80 	movabs $0x800421fdec,%rax
  8004209dde:	00 00 00 
  8004209de1:	eb 0a                	jmp    8004209ded <trapname+0x5d>
  8004209de3:	48 b8 ff fd 21 04 80 	movabs $0x800421fdff,%rax
  8004209dea:	00 00 00 
  8004209ded:	c9                   	leaveq 
  8004209dee:	c3                   	retq   

0000008004209def <trap_init>:
  8004209def:	55                   	push   %rbp
  8004209df0:	48 89 e5             	mov    %rsp,%rbp
  8004209df3:	48 83 ec 10          	sub    $0x10,%rsp
  8004209df7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209dfe:	e9 7d 01 00 00       	jmpq   8004209f80 <trap_init+0x191>
  8004209e03:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  8004209e0a:	00 00 00 
  8004209e0d:	48 ba 80 d2 4d 04 80 	movabs $0x80044dd280,%rdx
  8004209e14:	00 00 00 
  8004209e17:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209e1a:	48 63 c9             	movslq %ecx,%rcx
  8004209e1d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209e21:	48 01 ca             	add    %rcx,%rdx
  8004209e24:	66 89 02             	mov    %ax,(%rdx)
  8004209e27:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209e2e:	00 00 00 
  8004209e31:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e34:	48 63 d2             	movslq %edx,%rdx
  8004209e37:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e3b:	48 01 d0             	add    %rdx,%rax
  8004209e3e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209e44:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209e4b:	00 00 00 
  8004209e4e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e51:	48 63 d2             	movslq %edx,%rdx
  8004209e54:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e58:	48 01 d0             	add    %rdx,%rax
  8004209e5b:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e5f:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209e62:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e65:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209e6c:	00 00 00 
  8004209e6f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e72:	48 63 d2             	movslq %edx,%rdx
  8004209e75:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e79:	48 01 d0             	add    %rdx,%rax
  8004209e7c:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e80:	83 e2 07             	and    $0x7,%edx
  8004209e83:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e86:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209e8d:	00 00 00 
  8004209e90:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e93:	48 63 d2             	movslq %edx,%rdx
  8004209e96:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e9a:	48 01 d0             	add    %rdx,%rax
  8004209e9d:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ea1:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ea4:	83 ca 0e             	or     $0xe,%edx
  8004209ea7:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eaa:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209eb1:	00 00 00 
  8004209eb4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209eb7:	48 63 d2             	movslq %edx,%rdx
  8004209eba:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209ebe:	48 01 d0             	add    %rdx,%rax
  8004209ec1:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ec5:	83 e2 ef             	and    $0xffffffef,%edx
  8004209ec8:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ecb:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209ed2:	00 00 00 
  8004209ed5:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ed8:	48 63 d2             	movslq %edx,%rdx
  8004209edb:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209edf:	48 01 d0             	add    %rdx,%rax
  8004209ee2:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ee6:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209ee9:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eec:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209ef3:	00 00 00 
  8004209ef6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ef9:	48 63 d2             	movslq %edx,%rdx
  8004209efc:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f00:	48 01 d0             	add    %rdx,%rax
  8004209f03:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209f07:	83 ca 80             	or     $0xffffff80,%edx
  8004209f0a:	88 50 05             	mov    %dl,0x5(%rax)
  8004209f0d:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  8004209f14:	00 00 00 
  8004209f17:	48 c1 e8 10          	shr    $0x10,%rax
  8004209f1b:	48 ba 80 d2 4d 04 80 	movabs $0x80044dd280,%rdx
  8004209f22:	00 00 00 
  8004209f25:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f28:	48 63 c9             	movslq %ecx,%rcx
  8004209f2b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f2f:	48 01 ca             	add    %rcx,%rdx
  8004209f32:	66 89 42 06          	mov    %ax,0x6(%rdx)
  8004209f36:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  8004209f3d:	00 00 00 
  8004209f40:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f44:	48 ba 80 d2 4d 04 80 	movabs $0x80044dd280,%rdx
  8004209f4b:	00 00 00 
  8004209f4e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f51:	48 63 c9             	movslq %ecx,%rcx
  8004209f54:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f58:	48 01 ca             	add    %rcx,%rdx
  8004209f5b:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209f5e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209f65:	00 00 00 
  8004209f68:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f6b:	48 63 d2             	movslq %edx,%rdx
  8004209f6e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f72:	48 01 d0             	add    %rdx,%rax
  8004209f75:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209f7c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209f80:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209f83:	3d ff 00 00 00       	cmp    $0xff,%eax
  8004209f88:	0f 86 75 fe ff ff    	jbe    8004209e03 <trap_init+0x14>
  8004209f8e:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  8004209f95:	00 00 00 
  8004209f98:	89 c2                	mov    %eax,%edx
  8004209f9a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209fa1:	00 00 00 
  8004209fa4:	66 89 10             	mov    %dx,(%rax)
  8004209fa7:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209fae:	00 00 00 
  8004209fb1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209fb7:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209fbe:	00 00 00 
  8004209fc1:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fc5:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209fc8:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fcb:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209fd2:	00 00 00 
  8004209fd5:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fd9:	83 e2 07             	and    $0x7,%edx
  8004209fdc:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fdf:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209fe6:	00 00 00 
  8004209fe9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209fed:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ff0:	83 ca 0e             	or     $0xe,%edx
  8004209ff3:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ff6:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  8004209ffd:	00 00 00 
  800420a000:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a004:	83 e2 ef             	and    $0xffffffef,%edx
  800420a007:	88 50 05             	mov    %dl,0x5(%rax)
  800420a00a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a011:	00 00 00 
  800420a014:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a018:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a01b:	88 50 05             	mov    %dl,0x5(%rax)
  800420a01e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a025:	00 00 00 
  800420a028:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a02c:	83 ca 80             	or     $0xffffff80,%edx
  800420a02f:	88 50 05             	mov    %dl,0x5(%rax)
  800420a032:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a039:	00 00 00 
  800420a03c:	48 c1 e8 10          	shr    $0x10,%rax
  800420a040:	89 c2                	mov    %eax,%edx
  800420a042:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a049:	00 00 00 
  800420a04c:	66 89 50 06          	mov    %dx,0x6(%rax)
  800420a050:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a057:	00 00 00 
  800420a05a:	48 c1 e8 20          	shr    $0x20,%rax
  800420a05e:	89 c2                	mov    %eax,%edx
  800420a060:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a067:	00 00 00 
  800420a06a:	89 50 08             	mov    %edx,0x8(%rax)
  800420a06d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a074:	00 00 00 
  800420a077:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  800420a07e:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a085:	00 00 00 
  800420a088:	89 c2                	mov    %eax,%edx
  800420a08a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a091:	00 00 00 
  800420a094:	66 89 50 10          	mov    %dx,0x10(%rax)
  800420a098:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a09f:	00 00 00 
  800420a0a2:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  800420a0a8:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a0af:	00 00 00 
  800420a0b2:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0b6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a0b9:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0bc:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a0c3:	00 00 00 
  800420a0c6:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0ca:	83 e2 07             	and    $0x7,%edx
  800420a0cd:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0d0:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a0d7:	00 00 00 
  800420a0da:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0de:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a0e1:	83 ca 0e             	or     $0xe,%edx
  800420a0e4:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0e7:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a0ee:	00 00 00 
  800420a0f1:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0f5:	83 e2 ef             	and    $0xffffffef,%edx
  800420a0f8:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0fb:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a102:	00 00 00 
  800420a105:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a109:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a10c:	88 50 15             	mov    %dl,0x15(%rax)
  800420a10f:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a116:	00 00 00 
  800420a119:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a11d:	83 ca 80             	or     $0xffffff80,%edx
  800420a120:	88 50 15             	mov    %dl,0x15(%rax)
  800420a123:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a12a:	00 00 00 
  800420a12d:	48 c1 e8 10          	shr    $0x10,%rax
  800420a131:	89 c2                	mov    %eax,%edx
  800420a133:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a13a:	00 00 00 
  800420a13d:	66 89 50 16          	mov    %dx,0x16(%rax)
  800420a141:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a148:	00 00 00 
  800420a14b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a14f:	89 c2                	mov    %eax,%edx
  800420a151:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a158:	00 00 00 
  800420a15b:	89 50 18             	mov    %edx,0x18(%rax)
  800420a15e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a165:	00 00 00 
  800420a168:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  800420a16f:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a176:	00 00 00 
  800420a179:	89 c2                	mov    %eax,%edx
  800420a17b:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a182:	00 00 00 
  800420a185:	66 89 50 20          	mov    %dx,0x20(%rax)
  800420a189:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a190:	00 00 00 
  800420a193:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  800420a199:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a1a0:	00 00 00 
  800420a1a3:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1a7:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a1aa:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1ad:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a1b4:	00 00 00 
  800420a1b7:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1bb:	83 e2 07             	and    $0x7,%edx
  800420a1be:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1c1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a1c8:	00 00 00 
  800420a1cb:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1cf:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a1d2:	83 ca 0e             	or     $0xe,%edx
  800420a1d5:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1d8:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a1df:	00 00 00 
  800420a1e2:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1e6:	83 e2 ef             	and    $0xffffffef,%edx
  800420a1e9:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1ec:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a1f3:	00 00 00 
  800420a1f6:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1fa:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a1fd:	88 50 25             	mov    %dl,0x25(%rax)
  800420a200:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a207:	00 00 00 
  800420a20a:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a20e:	83 ca 80             	or     $0xffffff80,%edx
  800420a211:	88 50 25             	mov    %dl,0x25(%rax)
  800420a214:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a21b:	00 00 00 
  800420a21e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a222:	89 c2                	mov    %eax,%edx
  800420a224:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a22b:	00 00 00 
  800420a22e:	66 89 50 26          	mov    %dx,0x26(%rax)
  800420a232:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a239:	00 00 00 
  800420a23c:	48 c1 e8 20          	shr    $0x20,%rax
  800420a240:	89 c2                	mov    %eax,%edx
  800420a242:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a249:	00 00 00 
  800420a24c:	89 50 28             	mov    %edx,0x28(%rax)
  800420a24f:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a256:	00 00 00 
  800420a259:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  800420a260:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a267:	00 00 00 
  800420a26a:	89 c2                	mov    %eax,%edx
  800420a26c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a273:	00 00 00 
  800420a276:	66 89 50 30          	mov    %dx,0x30(%rax)
  800420a27a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a281:	00 00 00 
  800420a284:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  800420a28a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a291:	00 00 00 
  800420a294:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a298:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a29b:	88 50 34             	mov    %dl,0x34(%rax)
  800420a29e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a2a5:	00 00 00 
  800420a2a8:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a2ac:	83 e2 07             	and    $0x7,%edx
  800420a2af:	88 50 34             	mov    %dl,0x34(%rax)
  800420a2b2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a2b9:	00 00 00 
  800420a2bc:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2c0:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a2c3:	83 ca 0e             	or     $0xe,%edx
  800420a2c6:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2c9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a2d0:	00 00 00 
  800420a2d3:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2d7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a2da:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2dd:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a2e4:	00 00 00 
  800420a2e7:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2eb:	83 ca 60             	or     $0x60,%edx
  800420a2ee:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2f1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a2f8:	00 00 00 
  800420a2fb:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2ff:	83 ca 80             	or     $0xffffff80,%edx
  800420a302:	88 50 35             	mov    %dl,0x35(%rax)
  800420a305:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a30c:	00 00 00 
  800420a30f:	48 c1 e8 10          	shr    $0x10,%rax
  800420a313:	89 c2                	mov    %eax,%edx
  800420a315:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a31c:	00 00 00 
  800420a31f:	66 89 50 36          	mov    %dx,0x36(%rax)
  800420a323:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a32a:	00 00 00 
  800420a32d:	48 c1 e8 20          	shr    $0x20,%rax
  800420a331:	89 c2                	mov    %eax,%edx
  800420a333:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a33a:	00 00 00 
  800420a33d:	89 50 38             	mov    %edx,0x38(%rax)
  800420a340:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a347:	00 00 00 
  800420a34a:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  800420a351:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a358:	00 00 00 
  800420a35b:	89 c2                	mov    %eax,%edx
  800420a35d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a364:	00 00 00 
  800420a367:	66 89 50 40          	mov    %dx,0x40(%rax)
  800420a36b:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a372:	00 00 00 
  800420a375:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  800420a37b:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a382:	00 00 00 
  800420a385:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a389:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a38c:	88 50 44             	mov    %dl,0x44(%rax)
  800420a38f:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a396:	00 00 00 
  800420a399:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a39d:	83 e2 07             	and    $0x7,%edx
  800420a3a0:	88 50 44             	mov    %dl,0x44(%rax)
  800420a3a3:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a3aa:	00 00 00 
  800420a3ad:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3b1:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a3b4:	83 ca 0e             	or     $0xe,%edx
  800420a3b7:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ba:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a3c1:	00 00 00 
  800420a3c4:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3c8:	83 e2 ef             	and    $0xffffffef,%edx
  800420a3cb:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ce:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a3d5:	00 00 00 
  800420a3d8:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3dc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a3df:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3e2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a3e9:	00 00 00 
  800420a3ec:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3f0:	83 ca 80             	or     $0xffffff80,%edx
  800420a3f3:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3f6:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a3fd:	00 00 00 
  800420a400:	48 c1 e8 10          	shr    $0x10,%rax
  800420a404:	89 c2                	mov    %eax,%edx
  800420a406:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a40d:	00 00 00 
  800420a410:	66 89 50 46          	mov    %dx,0x46(%rax)
  800420a414:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a41b:	00 00 00 
  800420a41e:	48 c1 e8 20          	shr    $0x20,%rax
  800420a422:	89 c2                	mov    %eax,%edx
  800420a424:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a42b:	00 00 00 
  800420a42e:	89 50 48             	mov    %edx,0x48(%rax)
  800420a431:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a438:	00 00 00 
  800420a43b:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  800420a442:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a449:	00 00 00 
  800420a44c:	89 c2                	mov    %eax,%edx
  800420a44e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a455:	00 00 00 
  800420a458:	66 89 50 50          	mov    %dx,0x50(%rax)
  800420a45c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a463:	00 00 00 
  800420a466:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  800420a46c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a473:	00 00 00 
  800420a476:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a47a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a47d:	88 50 54             	mov    %dl,0x54(%rax)
  800420a480:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a487:	00 00 00 
  800420a48a:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a48e:	83 e2 07             	and    $0x7,%edx
  800420a491:	88 50 54             	mov    %dl,0x54(%rax)
  800420a494:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a49b:	00 00 00 
  800420a49e:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4a2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a4a5:	83 ca 0e             	or     $0xe,%edx
  800420a4a8:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4ab:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a4b2:	00 00 00 
  800420a4b5:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4b9:	83 e2 ef             	and    $0xffffffef,%edx
  800420a4bc:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4bf:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a4c6:	00 00 00 
  800420a4c9:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4cd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a4d0:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4d3:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a4da:	00 00 00 
  800420a4dd:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4e1:	83 ca 80             	or     $0xffffff80,%edx
  800420a4e4:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4e7:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a4ee:	00 00 00 
  800420a4f1:	48 c1 e8 10          	shr    $0x10,%rax
  800420a4f5:	89 c2                	mov    %eax,%edx
  800420a4f7:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a4fe:	00 00 00 
  800420a501:	66 89 50 56          	mov    %dx,0x56(%rax)
  800420a505:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a50c:	00 00 00 
  800420a50f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a513:	89 c2                	mov    %eax,%edx
  800420a515:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a51c:	00 00 00 
  800420a51f:	89 50 58             	mov    %edx,0x58(%rax)
  800420a522:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a529:	00 00 00 
  800420a52c:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  800420a533:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a53a:	00 00 00 
  800420a53d:	89 c2                	mov    %eax,%edx
  800420a53f:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a546:	00 00 00 
  800420a549:	66 89 50 60          	mov    %dx,0x60(%rax)
  800420a54d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a554:	00 00 00 
  800420a557:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  800420a55d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a564:	00 00 00 
  800420a567:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a56b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a56e:	88 50 64             	mov    %dl,0x64(%rax)
  800420a571:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a578:	00 00 00 
  800420a57b:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a57f:	83 e2 07             	and    $0x7,%edx
  800420a582:	88 50 64             	mov    %dl,0x64(%rax)
  800420a585:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a58c:	00 00 00 
  800420a58f:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a593:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a596:	83 ca 0e             	or     $0xe,%edx
  800420a599:	88 50 65             	mov    %dl,0x65(%rax)
  800420a59c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a5a3:	00 00 00 
  800420a5a6:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5aa:	83 e2 ef             	and    $0xffffffef,%edx
  800420a5ad:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5b0:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a5b7:	00 00 00 
  800420a5ba:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5be:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a5c1:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5c4:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a5cb:	00 00 00 
  800420a5ce:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5d2:	83 ca 80             	or     $0xffffff80,%edx
  800420a5d5:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5d8:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a5df:	00 00 00 
  800420a5e2:	48 c1 e8 10          	shr    $0x10,%rax
  800420a5e6:	89 c2                	mov    %eax,%edx
  800420a5e8:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a5ef:	00 00 00 
  800420a5f2:	66 89 50 66          	mov    %dx,0x66(%rax)
  800420a5f6:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a5fd:	00 00 00 
  800420a600:	48 c1 e8 20          	shr    $0x20,%rax
  800420a604:	89 c2                	mov    %eax,%edx
  800420a606:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a60d:	00 00 00 
  800420a610:	89 50 68             	mov    %edx,0x68(%rax)
  800420a613:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a61a:	00 00 00 
  800420a61d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  800420a624:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a62b:	00 00 00 
  800420a62e:	89 c2                	mov    %eax,%edx
  800420a630:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a637:	00 00 00 
  800420a63a:	66 89 50 70          	mov    %dx,0x70(%rax)
  800420a63e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a645:	00 00 00 
  800420a648:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  800420a64e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a655:	00 00 00 
  800420a658:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a65c:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a65f:	88 50 74             	mov    %dl,0x74(%rax)
  800420a662:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a669:	00 00 00 
  800420a66c:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a670:	83 e2 07             	and    $0x7,%edx
  800420a673:	88 50 74             	mov    %dl,0x74(%rax)
  800420a676:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a67d:	00 00 00 
  800420a680:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a684:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a687:	83 ca 0e             	or     $0xe,%edx
  800420a68a:	88 50 75             	mov    %dl,0x75(%rax)
  800420a68d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a694:	00 00 00 
  800420a697:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a69b:	83 e2 ef             	and    $0xffffffef,%edx
  800420a69e:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6a1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a6a8:	00 00 00 
  800420a6ab:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6af:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a6b2:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6b5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a6bc:	00 00 00 
  800420a6bf:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6c3:	83 ca 80             	or     $0xffffff80,%edx
  800420a6c6:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6c9:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a6d0:	00 00 00 
  800420a6d3:	48 c1 e8 10          	shr    $0x10,%rax
  800420a6d7:	89 c2                	mov    %eax,%edx
  800420a6d9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a6e0:	00 00 00 
  800420a6e3:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a6e7:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a6ee:	00 00 00 
  800420a6f1:	48 c1 e8 20          	shr    $0x20,%rax
  800420a6f5:	89 c2                	mov    %eax,%edx
  800420a6f7:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a6fe:	00 00 00 
  800420a701:	89 50 78             	mov    %edx,0x78(%rax)
  800420a704:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a70b:	00 00 00 
  800420a70e:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a715:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a71c:	00 00 00 
  800420a71f:	89 c2                	mov    %eax,%edx
  800420a721:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a728:	00 00 00 
  800420a72b:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a732:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a739:	00 00 00 
  800420a73c:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a743:	08 00 
  800420a745:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a74c:	00 00 00 
  800420a74f:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a756:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a759:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a75f:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a766:	00 00 00 
  800420a769:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a770:	83 e2 07             	and    $0x7,%edx
  800420a773:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a779:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a780:	00 00 00 
  800420a783:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a78a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a78d:	83 ca 0e             	or     $0xe,%edx
  800420a790:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a796:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a79d:	00 00 00 
  800420a7a0:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7a7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a7aa:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7b0:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a7b7:	00 00 00 
  800420a7ba:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7c1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a7c4:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7ca:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a7d1:	00 00 00 
  800420a7d4:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7db:	83 ca 80             	or     $0xffffff80,%edx
  800420a7de:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7e4:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a7eb:	00 00 00 
  800420a7ee:	48 c1 e8 10          	shr    $0x10,%rax
  800420a7f2:	89 c2                	mov    %eax,%edx
  800420a7f4:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a7fb:	00 00 00 
  800420a7fe:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a805:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a80c:	00 00 00 
  800420a80f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a813:	89 c2                	mov    %eax,%edx
  800420a815:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a81c:	00 00 00 
  800420a81f:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a825:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a82c:	00 00 00 
  800420a82f:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a836:	00 00 00 
  800420a839:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a840:	00 00 00 
  800420a843:	89 c2                	mov    %eax,%edx
  800420a845:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a84c:	00 00 00 
  800420a84f:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a856:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a85d:	00 00 00 
  800420a860:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a867:	08 00 
  800420a869:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a870:	00 00 00 
  800420a873:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a87a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a87d:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a883:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a88a:	00 00 00 
  800420a88d:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a894:	83 e2 07             	and    $0x7,%edx
  800420a897:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a89d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a8a4:	00 00 00 
  800420a8a7:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ae:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a8b1:	83 ca 0e             	or     $0xe,%edx
  800420a8b4:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8ba:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a8c1:	00 00 00 
  800420a8c4:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8cb:	83 e2 ef             	and    $0xffffffef,%edx
  800420a8ce:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8d4:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a8db:	00 00 00 
  800420a8de:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8e5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a8e8:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8ee:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a8f5:	00 00 00 
  800420a8f8:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ff:	83 ca 80             	or     $0xffffff80,%edx
  800420a902:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a908:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a90f:	00 00 00 
  800420a912:	48 c1 e8 10          	shr    $0x10,%rax
  800420a916:	89 c2                	mov    %eax,%edx
  800420a918:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a91f:	00 00 00 
  800420a922:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a929:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a930:	00 00 00 
  800420a933:	48 c1 e8 20          	shr    $0x20,%rax
  800420a937:	89 c2                	mov    %eax,%edx
  800420a939:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a940:	00 00 00 
  800420a943:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a949:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a950:	00 00 00 
  800420a953:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a95a:	00 00 00 
  800420a95d:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420a964:	00 00 00 
  800420a967:	89 c2                	mov    %eax,%edx
  800420a969:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a970:	00 00 00 
  800420a973:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a97a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a981:	00 00 00 
  800420a984:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a98b:	08 00 
  800420a98d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a994:	00 00 00 
  800420a997:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a99e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a9a1:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9a7:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a9ae:	00 00 00 
  800420a9b1:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a9b8:	83 e2 07             	and    $0x7,%edx
  800420a9bb:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9c1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a9c8:	00 00 00 
  800420a9cb:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9d2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a9d5:	83 ca 0e             	or     $0xe,%edx
  800420a9d8:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9de:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a9e5:	00 00 00 
  800420a9e8:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9ef:	83 e2 ef             	and    $0xffffffef,%edx
  800420a9f2:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9f8:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420a9ff:	00 00 00 
  800420aa02:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa09:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aa0c:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa12:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aa19:	00 00 00 
  800420aa1c:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa23:	83 ca 80             	or     $0xffffff80,%edx
  800420aa26:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa2c:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420aa33:	00 00 00 
  800420aa36:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa3a:	89 c2                	mov    %eax,%edx
  800420aa3c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aa43:	00 00 00 
  800420aa46:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420aa4d:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420aa54:	00 00 00 
  800420aa57:	48 c1 e8 20          	shr    $0x20,%rax
  800420aa5b:	89 c2                	mov    %eax,%edx
  800420aa5d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aa64:	00 00 00 
  800420aa67:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420aa6d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aa74:	00 00 00 
  800420aa77:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420aa7e:	00 00 00 
  800420aa81:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420aa88:	00 00 00 
  800420aa8b:	89 c2                	mov    %eax,%edx
  800420aa8d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aa94:	00 00 00 
  800420aa97:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420aa9e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aaa5:	00 00 00 
  800420aaa8:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420aaaf:	08 00 
  800420aab1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aab8:	00 00 00 
  800420aabb:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aac2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aac5:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aacb:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aad2:	00 00 00 
  800420aad5:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aadc:	83 e2 07             	and    $0x7,%edx
  800420aadf:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aae5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aaec:	00 00 00 
  800420aaef:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420aaf6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420aaf9:	83 ca 0e             	or     $0xe,%edx
  800420aafc:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab02:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ab09:	00 00 00 
  800420ab0c:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab13:	83 e2 ef             	and    $0xffffffef,%edx
  800420ab16:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab1c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ab23:	00 00 00 
  800420ab26:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab2d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab30:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab36:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ab3d:	00 00 00 
  800420ab40:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab47:	83 ca 80             	or     $0xffffff80,%edx
  800420ab4a:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab50:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420ab57:	00 00 00 
  800420ab5a:	48 c1 e8 10          	shr    $0x10,%rax
  800420ab5e:	89 c2                	mov    %eax,%edx
  800420ab60:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ab67:	00 00 00 
  800420ab6a:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420ab71:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420ab78:	00 00 00 
  800420ab7b:	48 c1 e8 20          	shr    $0x20,%rax
  800420ab7f:	89 c2                	mov    %eax,%edx
  800420ab81:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ab88:	00 00 00 
  800420ab8b:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420ab91:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ab98:	00 00 00 
  800420ab9b:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420aba2:	00 00 00 
  800420aba5:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420abac:	00 00 00 
  800420abaf:	89 c2                	mov    %eax,%edx
  800420abb1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420abb8:	00 00 00 
  800420abbb:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420abc2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420abc9:	00 00 00 
  800420abcc:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420abd3:	08 00 
  800420abd5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420abdc:	00 00 00 
  800420abdf:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420abe6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420abe9:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420abef:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420abf6:	00 00 00 
  800420abf9:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420ac00:	83 e2 07             	and    $0x7,%edx
  800420ac03:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420ac09:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ac10:	00 00 00 
  800420ac13:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac1a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac1d:	83 ca 0e             	or     $0xe,%edx
  800420ac20:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac26:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ac2d:	00 00 00 
  800420ac30:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac37:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac3a:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac40:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ac47:	00 00 00 
  800420ac4a:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac51:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac54:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac5a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ac61:	00 00 00 
  800420ac64:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac6b:	83 ca 80             	or     $0xffffff80,%edx
  800420ac6e:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac74:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420ac7b:	00 00 00 
  800420ac7e:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac82:	89 c2                	mov    %eax,%edx
  800420ac84:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ac8b:	00 00 00 
  800420ac8e:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420ac95:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420ac9c:	00 00 00 
  800420ac9f:	48 c1 e8 20          	shr    $0x20,%rax
  800420aca3:	89 c2                	mov    %eax,%edx
  800420aca5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420acac:	00 00 00 
  800420acaf:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420acb5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420acbc:	00 00 00 
  800420acbf:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420acc6:	00 00 00 
  800420acc9:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420acd0:	00 00 00 
  800420acd3:	89 c2                	mov    %eax,%edx
  800420acd5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420acdc:	00 00 00 
  800420acdf:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420ace6:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aced:	00 00 00 
  800420acf0:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420acf7:	08 00 
  800420acf9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ad00:	00 00 00 
  800420ad03:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad0a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ad0d:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad13:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ad1a:	00 00 00 
  800420ad1d:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad24:	83 e2 07             	and    $0x7,%edx
  800420ad27:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad2d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ad34:	00 00 00 
  800420ad37:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad3e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad41:	83 ca 0e             	or     $0xe,%edx
  800420ad44:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad4a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ad51:	00 00 00 
  800420ad54:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad5b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ad5e:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad64:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ad6b:	00 00 00 
  800420ad6e:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad75:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad78:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad7e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ad85:	00 00 00 
  800420ad88:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad8f:	83 ca 80             	or     $0xffffff80,%edx
  800420ad92:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad98:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420ad9f:	00 00 00 
  800420ada2:	48 c1 e8 10          	shr    $0x10,%rax
  800420ada6:	89 c2                	mov    %eax,%edx
  800420ada8:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420adaf:	00 00 00 
  800420adb2:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420adb9:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420adc0:	00 00 00 
  800420adc3:	48 c1 e8 20          	shr    $0x20,%rax
  800420adc7:	89 c2                	mov    %eax,%edx
  800420adc9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420add0:	00 00 00 
  800420add3:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420add9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ade0:	00 00 00 
  800420ade3:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420adea:	00 00 00 
  800420aded:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420adf4:	00 00 00 
  800420adf7:	89 c2                	mov    %eax,%edx
  800420adf9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ae00:	00 00 00 
  800420ae03:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420ae0a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ae11:	00 00 00 
  800420ae14:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420ae1b:	08 00 
  800420ae1d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ae24:	00 00 00 
  800420ae27:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae2e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae31:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae37:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ae3e:	00 00 00 
  800420ae41:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae48:	83 e2 07             	and    $0x7,%edx
  800420ae4b:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae51:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ae58:	00 00 00 
  800420ae5b:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae62:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae65:	83 ca 0e             	or     $0xe,%edx
  800420ae68:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae6e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ae75:	00 00 00 
  800420ae78:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae7f:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae82:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae88:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ae8f:	00 00 00 
  800420ae92:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae99:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ae9c:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aea2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aea9:	00 00 00 
  800420aeac:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420aeb3:	83 ca 80             	or     $0xffffff80,%edx
  800420aeb6:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aebc:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aec3:	00 00 00 
  800420aec6:	48 c1 e8 10          	shr    $0x10,%rax
  800420aeca:	89 c2                	mov    %eax,%edx
  800420aecc:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aed3:	00 00 00 
  800420aed6:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420aedd:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aee4:	00 00 00 
  800420aee7:	48 c1 e8 20          	shr    $0x20,%rax
  800420aeeb:	89 c2                	mov    %eax,%edx
  800420aeed:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aef4:	00 00 00 
  800420aef7:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420aefd:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420af04:	00 00 00 
  800420af07:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420af0e:	00 00 00 
  800420af11:	48 b8 46 d8 20 04 80 	movabs $0x800420d846,%rax
  800420af18:	00 00 00 
  800420af1b:	89 c2                	mov    %eax,%edx
  800420af1d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420af24:	00 00 00 
  800420af27:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420af2e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420af35:	00 00 00 
  800420af38:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420af3f:	08 00 
  800420af41:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420af48:	00 00 00 
  800420af4b:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af52:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af55:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af5b:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420af62:	00 00 00 
  800420af65:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af6c:	83 e2 07             	and    $0x7,%edx
  800420af6f:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af75:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420af7c:	00 00 00 
  800420af7f:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420af86:	83 e2 f0             	and    $0xfffffff0,%edx
  800420af89:	83 ca 0e             	or     $0xe,%edx
  800420af8c:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420af92:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420af99:	00 00 00 
  800420af9c:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afa3:	83 e2 ef             	and    $0xffffffef,%edx
  800420afa6:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afac:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420afb3:	00 00 00 
  800420afb6:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afbd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420afc0:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afc6:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420afcd:	00 00 00 
  800420afd0:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afd7:	83 ca 80             	or     $0xffffff80,%edx
  800420afda:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afe0:	48 b8 46 d8 20 04 80 	movabs $0x800420d846,%rax
  800420afe7:	00 00 00 
  800420afea:	48 c1 e8 10          	shr    $0x10,%rax
  800420afee:	89 c2                	mov    %eax,%edx
  800420aff0:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420aff7:	00 00 00 
  800420affa:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420b001:	48 b8 46 d8 20 04 80 	movabs $0x800420d846,%rax
  800420b008:	00 00 00 
  800420b00b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b00f:	89 c2                	mov    %eax,%edx
  800420b011:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b018:	00 00 00 
  800420b01b:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420b021:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b028:	00 00 00 
  800420b02b:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420b032:	00 00 00 
  800420b035:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420b03c:	00 00 00 
  800420b03f:	89 c2                	mov    %eax,%edx
  800420b041:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b048:	00 00 00 
  800420b04b:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420b052:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b059:	00 00 00 
  800420b05c:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420b063:	08 00 
  800420b065:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b06c:	00 00 00 
  800420b06f:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b076:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b079:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b07f:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b086:	00 00 00 
  800420b089:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b090:	83 e2 07             	and    $0x7,%edx
  800420b093:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b099:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b0a0:	00 00 00 
  800420b0a3:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0aa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b0ad:	83 ca 0e             	or     $0xe,%edx
  800420b0b0:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0b6:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b0bd:	00 00 00 
  800420b0c0:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0c7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b0ca:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0d0:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b0d7:	00 00 00 
  800420b0da:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0e1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b0e4:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0ea:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b0f1:	00 00 00 
  800420b0f4:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0fb:	83 ca 80             	or     $0xffffff80,%edx
  800420b0fe:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b104:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420b10b:	00 00 00 
  800420b10e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b112:	89 c2                	mov    %eax,%edx
  800420b114:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b11b:	00 00 00 
  800420b11e:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420b125:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420b12c:	00 00 00 
  800420b12f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b133:	89 c2                	mov    %eax,%edx
  800420b135:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b13c:	00 00 00 
  800420b13f:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420b145:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b14c:	00 00 00 
  800420b14f:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420b156:	00 00 00 
  800420b159:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420b160:	00 00 00 
  800420b163:	89 c2                	mov    %eax,%edx
  800420b165:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b16c:	00 00 00 
  800420b16f:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420b176:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b17d:	00 00 00 
  800420b180:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420b187:	08 00 
  800420b189:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b190:	00 00 00 
  800420b193:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b19a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b19d:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1a3:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b1aa:	00 00 00 
  800420b1ad:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b1b4:	83 e2 07             	and    $0x7,%edx
  800420b1b7:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1bd:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b1c4:	00 00 00 
  800420b1c7:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1ce:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b1d1:	83 ca 0e             	or     $0xe,%edx
  800420b1d4:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1da:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b1e1:	00 00 00 
  800420b1e4:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1eb:	83 e2 ef             	and    $0xffffffef,%edx
  800420b1ee:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1f4:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b1fb:	00 00 00 
  800420b1fe:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b205:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b208:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b20e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b215:	00 00 00 
  800420b218:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b21f:	83 ca 80             	or     $0xffffff80,%edx
  800420b222:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b228:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420b22f:	00 00 00 
  800420b232:	48 c1 e8 10          	shr    $0x10,%rax
  800420b236:	89 c2                	mov    %eax,%edx
  800420b238:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b23f:	00 00 00 
  800420b242:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420b249:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420b250:	00 00 00 
  800420b253:	48 c1 e8 20          	shr    $0x20,%rax
  800420b257:	89 c2                	mov    %eax,%edx
  800420b259:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b260:	00 00 00 
  800420b263:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420b269:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b270:	00 00 00 
  800420b273:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420b27a:	00 00 00 
  800420b27d:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420b284:	00 00 00 
  800420b287:	89 c2                	mov    %eax,%edx
  800420b289:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b290:	00 00 00 
  800420b293:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420b29a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b2a1:	00 00 00 
  800420b2a4:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420b2ab:	08 00 
  800420b2ad:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b2b4:	00 00 00 
  800420b2b7:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2be:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b2c1:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2c7:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b2ce:	00 00 00 
  800420b2d1:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2d8:	83 e2 07             	and    $0x7,%edx
  800420b2db:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2e1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b2e8:	00 00 00 
  800420b2eb:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b2f2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b2f5:	83 ca 0e             	or     $0xe,%edx
  800420b2f8:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b2fe:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b305:	00 00 00 
  800420b308:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b30f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b312:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b318:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b31f:	00 00 00 
  800420b322:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b329:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b32c:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b332:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b339:	00 00 00 
  800420b33c:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b343:	83 ca 80             	or     $0xffffff80,%edx
  800420b346:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b34c:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420b353:	00 00 00 
  800420b356:	48 c1 e8 10          	shr    $0x10,%rax
  800420b35a:	89 c2                	mov    %eax,%edx
  800420b35c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b363:	00 00 00 
  800420b366:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420b36d:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420b374:	00 00 00 
  800420b377:	48 c1 e8 20          	shr    $0x20,%rax
  800420b37b:	89 c2                	mov    %eax,%edx
  800420b37d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b384:	00 00 00 
  800420b387:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420b38d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b394:	00 00 00 
  800420b397:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420b39e:	00 00 00 
  800420b3a1:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b3a8:	00 00 00 
  800420b3ab:	89 c2                	mov    %eax,%edx
  800420b3ad:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b3b4:	00 00 00 
  800420b3b7:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420b3be:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b3c5:	00 00 00 
  800420b3c8:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420b3cf:	08 00 
  800420b3d1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b3d8:	00 00 00 
  800420b3db:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3e2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b3e5:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b3eb:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b3f2:	00 00 00 
  800420b3f5:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3fc:	83 e2 07             	and    $0x7,%edx
  800420b3ff:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b405:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b40c:	00 00 00 
  800420b40f:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b416:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b419:	83 ca 0e             	or     $0xe,%edx
  800420b41c:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b422:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b429:	00 00 00 
  800420b42c:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b433:	83 e2 ef             	and    $0xffffffef,%edx
  800420b436:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b43c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b443:	00 00 00 
  800420b446:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b44d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b450:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b456:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b45d:	00 00 00 
  800420b460:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b467:	83 ca 80             	or     $0xffffff80,%edx
  800420b46a:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b470:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b477:	00 00 00 
  800420b47a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b47e:	89 c2                	mov    %eax,%edx
  800420b480:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b487:	00 00 00 
  800420b48a:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420b491:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b498:	00 00 00 
  800420b49b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b49f:	89 c2                	mov    %eax,%edx
  800420b4a1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b4a8:	00 00 00 
  800420b4ab:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420b4b1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b4b8:	00 00 00 
  800420b4bb:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420b4c2:	00 00 00 
  800420b4c5:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b4cc:	00 00 00 
  800420b4cf:	89 c2                	mov    %eax,%edx
  800420b4d1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b4d8:	00 00 00 
  800420b4db:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420b4e2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b4e9:	00 00 00 
  800420b4ec:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420b4f3:	08 00 
  800420b4f5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b4fc:	00 00 00 
  800420b4ff:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b506:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b509:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b50f:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b516:	00 00 00 
  800420b519:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b520:	83 e2 07             	and    $0x7,%edx
  800420b523:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b529:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b530:	00 00 00 
  800420b533:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b53a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b53d:	83 ca 0e             	or     $0xe,%edx
  800420b540:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b546:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b54d:	00 00 00 
  800420b550:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b557:	83 e2 ef             	and    $0xffffffef,%edx
  800420b55a:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b560:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b567:	00 00 00 
  800420b56a:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b571:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b574:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b57a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b581:	00 00 00 
  800420b584:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b58b:	83 ca 80             	or     $0xffffff80,%edx
  800420b58e:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b594:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b59b:	00 00 00 
  800420b59e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b5a2:	89 c2                	mov    %eax,%edx
  800420b5a4:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b5ab:	00 00 00 
  800420b5ae:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420b5b5:	48 b8 62 d8 20 04 80 	movabs $0x800420d862,%rax
  800420b5bc:	00 00 00 
  800420b5bf:	48 c1 e8 20          	shr    $0x20,%rax
  800420b5c3:	89 c2                	mov    %eax,%edx
  800420b5c5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b5cc:	00 00 00 
  800420b5cf:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420b5d5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b5dc:	00 00 00 
  800420b5df:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420b5e6:	00 00 00 
  800420b5e9:	48 b8 68 d8 20 04 80 	movabs $0x800420d868,%rax
  800420b5f0:	00 00 00 
  800420b5f3:	89 c2                	mov    %eax,%edx
  800420b5f5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b5fc:	00 00 00 
  800420b5ff:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420b606:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b60d:	00 00 00 
  800420b610:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420b617:	08 00 
  800420b619:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b620:	00 00 00 
  800420b623:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b62a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b62d:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b633:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b63a:	00 00 00 
  800420b63d:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b644:	83 e2 07             	and    $0x7,%edx
  800420b647:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b64d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b654:	00 00 00 
  800420b657:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b65e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b661:	83 ca 0e             	or     $0xe,%edx
  800420b664:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b66a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b671:	00 00 00 
  800420b674:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b67b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b67e:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b684:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b68b:	00 00 00 
  800420b68e:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b695:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b698:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b69e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b6a5:	00 00 00 
  800420b6a8:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b6af:	83 ca 80             	or     $0xffffff80,%edx
  800420b6b2:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6b8:	48 b8 68 d8 20 04 80 	movabs $0x800420d868,%rax
  800420b6bf:	00 00 00 
  800420b6c2:	48 c1 e8 10          	shr    $0x10,%rax
  800420b6c6:	89 c2                	mov    %eax,%edx
  800420b6c8:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b6cf:	00 00 00 
  800420b6d2:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420b6d9:	48 b8 68 d8 20 04 80 	movabs $0x800420d868,%rax
  800420b6e0:	00 00 00 
  800420b6e3:	48 c1 e8 20          	shr    $0x20,%rax
  800420b6e7:	89 c2                	mov    %eax,%edx
  800420b6e9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b6f0:	00 00 00 
  800420b6f3:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b6f9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b700:	00 00 00 
  800420b703:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b70a:	00 00 00 
  800420b70d:	48 b8 6e d8 20 04 80 	movabs $0x800420d86e,%rax
  800420b714:	00 00 00 
  800420b717:	89 c2                	mov    %eax,%edx
  800420b719:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b720:	00 00 00 
  800420b723:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b72a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b731:	00 00 00 
  800420b734:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b73b:	08 00 
  800420b73d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b744:	00 00 00 
  800420b747:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b74e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b751:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b757:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b75e:	00 00 00 
  800420b761:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b768:	83 e2 07             	and    $0x7,%edx
  800420b76b:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b771:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b778:	00 00 00 
  800420b77b:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b782:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b785:	83 ca 0e             	or     $0xe,%edx
  800420b788:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b78e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b795:	00 00 00 
  800420b798:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b79f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b7a2:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7a8:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b7af:	00 00 00 
  800420b7b2:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7b9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b7bc:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7c2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b7c9:	00 00 00 
  800420b7cc:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7d3:	83 ca 80             	or     $0xffffff80,%edx
  800420b7d6:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7dc:	48 b8 6e d8 20 04 80 	movabs $0x800420d86e,%rax
  800420b7e3:	00 00 00 
  800420b7e6:	48 c1 e8 10          	shr    $0x10,%rax
  800420b7ea:	89 c2                	mov    %eax,%edx
  800420b7ec:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b7f3:	00 00 00 
  800420b7f6:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b7fd:	48 b8 6e d8 20 04 80 	movabs $0x800420d86e,%rax
  800420b804:	00 00 00 
  800420b807:	48 c1 e8 20          	shr    $0x20,%rax
  800420b80b:	89 c2                	mov    %eax,%edx
  800420b80d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b814:	00 00 00 
  800420b817:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b81d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b824:	00 00 00 
  800420b827:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b82e:	00 00 00 
  800420b831:	48 b8 74 d8 20 04 80 	movabs $0x800420d874,%rax
  800420b838:	00 00 00 
  800420b83b:	89 c2                	mov    %eax,%edx
  800420b83d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b844:	00 00 00 
  800420b847:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b84e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b855:	00 00 00 
  800420b858:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b85f:	08 00 
  800420b861:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b868:	00 00 00 
  800420b86b:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b872:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b875:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b87b:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b882:	00 00 00 
  800420b885:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b88c:	83 e2 07             	and    $0x7,%edx
  800420b88f:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b895:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b89c:	00 00 00 
  800420b89f:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8a6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b8a9:	83 ca 0e             	or     $0xe,%edx
  800420b8ac:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8b2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b8b9:	00 00 00 
  800420b8bc:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8c3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b8c6:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8cc:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b8d3:	00 00 00 
  800420b8d6:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8dd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b8e0:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8e6:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b8ed:	00 00 00 
  800420b8f0:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8f7:	83 ca 80             	or     $0xffffff80,%edx
  800420b8fa:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b900:	48 b8 74 d8 20 04 80 	movabs $0x800420d874,%rax
  800420b907:	00 00 00 
  800420b90a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b90e:	89 c2                	mov    %eax,%edx
  800420b910:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b917:	00 00 00 
  800420b91a:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b921:	48 b8 74 d8 20 04 80 	movabs $0x800420d874,%rax
  800420b928:	00 00 00 
  800420b92b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b92f:	89 c2                	mov    %eax,%edx
  800420b931:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b938:	00 00 00 
  800420b93b:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b941:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b948:	00 00 00 
  800420b94b:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b952:	00 00 00 
  800420b955:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420b95c:	00 00 00 
  800420b95f:	89 c2                	mov    %eax,%edx
  800420b961:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b968:	00 00 00 
  800420b96b:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b972:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b979:	00 00 00 
  800420b97c:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b983:	08 00 
  800420b985:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b98c:	00 00 00 
  800420b98f:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b996:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b999:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b99f:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b9a6:	00 00 00 
  800420b9a9:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b9b0:	83 e2 07             	and    $0x7,%edx
  800420b9b3:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b9b9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b9c0:	00 00 00 
  800420b9c3:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9ca:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b9cd:	83 ca 0e             	or     $0xe,%edx
  800420b9d0:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9d6:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b9dd:	00 00 00 
  800420b9e0:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9e7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b9ea:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9f0:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420b9f7:	00 00 00 
  800420b9fa:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba01:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ba04:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba0a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ba11:	00 00 00 
  800420ba14:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba1b:	83 ca 80             	or     $0xffffff80,%edx
  800420ba1e:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba24:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420ba2b:	00 00 00 
  800420ba2e:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba32:	89 c2                	mov    %eax,%edx
  800420ba34:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ba3b:	00 00 00 
  800420ba3e:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420ba45:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420ba4c:	00 00 00 
  800420ba4f:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba53:	89 c2                	mov    %eax,%edx
  800420ba55:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ba5c:	00 00 00 
  800420ba5f:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420ba65:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ba6c:	00 00 00 
  800420ba6f:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420ba76:	00 00 00 
  800420ba79:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420ba80:	00 00 00 
  800420ba83:	89 c2                	mov    %eax,%edx
  800420ba85:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ba8c:	00 00 00 
  800420ba8f:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420ba96:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420ba9d:	00 00 00 
  800420baa0:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420baa7:	08 00 
  800420baa9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bab0:	00 00 00 
  800420bab3:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420baba:	83 e2 f8             	and    $0xfffffff8,%edx
  800420babd:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420bac3:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420baca:	00 00 00 
  800420bacd:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420bad4:	83 e2 07             	and    $0x7,%edx
  800420bad7:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420badd:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bae4:	00 00 00 
  800420bae7:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420baee:	83 e2 f0             	and    $0xfffffff0,%edx
  800420baf1:	83 ca 0e             	or     $0xe,%edx
  800420baf4:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bafa:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bb01:	00 00 00 
  800420bb04:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb0b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bb0e:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb14:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bb1b:	00 00 00 
  800420bb1e:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb25:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb28:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb2e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bb35:	00 00 00 
  800420bb38:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb3f:	83 ca 80             	or     $0xffffff80,%edx
  800420bb42:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb48:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420bb4f:	00 00 00 
  800420bb52:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb56:	89 c2                	mov    %eax,%edx
  800420bb58:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bb5f:	00 00 00 
  800420bb62:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420bb69:	48 b8 80 d8 20 04 80 	movabs $0x800420d880,%rax
  800420bb70:	00 00 00 
  800420bb73:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb77:	89 c2                	mov    %eax,%edx
  800420bb79:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bb80:	00 00 00 
  800420bb83:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420bb89:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bb90:	00 00 00 
  800420bb93:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420bb9a:	00 00 00 
  800420bb9d:	48 b8 86 d8 20 04 80 	movabs $0x800420d886,%rax
  800420bba4:	00 00 00 
  800420bba7:	89 c2                	mov    %eax,%edx
  800420bba9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bbb0:	00 00 00 
  800420bbb3:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420bbba:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bbc1:	00 00 00 
  800420bbc4:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420bbcb:	08 00 
  800420bbcd:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bbd4:	00 00 00 
  800420bbd7:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbde:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bbe1:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bbe7:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bbee:	00 00 00 
  800420bbf1:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbf8:	83 e2 07             	and    $0x7,%edx
  800420bbfb:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bc01:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bc08:	00 00 00 
  800420bc0b:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc12:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bc15:	83 ca 0e             	or     $0xe,%edx
  800420bc18:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc1e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bc25:	00 00 00 
  800420bc28:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc2f:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc32:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc38:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bc3f:	00 00 00 
  800420bc42:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc49:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc4c:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc52:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bc59:	00 00 00 
  800420bc5c:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc63:	83 ca 80             	or     $0xffffff80,%edx
  800420bc66:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc6c:	48 b8 86 d8 20 04 80 	movabs $0x800420d886,%rax
  800420bc73:	00 00 00 
  800420bc76:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc7a:	89 c2                	mov    %eax,%edx
  800420bc7c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bc83:	00 00 00 
  800420bc86:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420bc8d:	48 b8 86 d8 20 04 80 	movabs $0x800420d886,%rax
  800420bc94:	00 00 00 
  800420bc97:	48 c1 e8 20          	shr    $0x20,%rax
  800420bc9b:	89 c2                	mov    %eax,%edx
  800420bc9d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bca4:	00 00 00 
  800420bca7:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420bcad:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bcb4:	00 00 00 
  800420bcb7:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420bcbe:	00 00 00 
  800420bcc1:	48 b8 8c d8 20 04 80 	movabs $0x800420d88c,%rax
  800420bcc8:	00 00 00 
  800420bccb:	89 c2                	mov    %eax,%edx
  800420bccd:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bcd4:	00 00 00 
  800420bcd7:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420bcde:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bce5:	00 00 00 
  800420bce8:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420bcef:	08 00 
  800420bcf1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bcf8:	00 00 00 
  800420bcfb:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd02:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bd05:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd0b:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bd12:	00 00 00 
  800420bd15:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd1c:	83 e2 07             	and    $0x7,%edx
  800420bd1f:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd25:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bd2c:	00 00 00 
  800420bd2f:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd36:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd39:	83 ca 0e             	or     $0xe,%edx
  800420bd3c:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd42:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bd49:	00 00 00 
  800420bd4c:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd53:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd56:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd5c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bd63:	00 00 00 
  800420bd66:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd6d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bd70:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd76:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bd7d:	00 00 00 
  800420bd80:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd87:	83 ca 80             	or     $0xffffff80,%edx
  800420bd8a:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd90:	48 b8 8c d8 20 04 80 	movabs $0x800420d88c,%rax
  800420bd97:	00 00 00 
  800420bd9a:	48 c1 e8 10          	shr    $0x10,%rax
  800420bd9e:	89 c2                	mov    %eax,%edx
  800420bda0:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bda7:	00 00 00 
  800420bdaa:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420bdb1:	48 b8 8c d8 20 04 80 	movabs $0x800420d88c,%rax
  800420bdb8:	00 00 00 
  800420bdbb:	48 c1 e8 20          	shr    $0x20,%rax
  800420bdbf:	89 c2                	mov    %eax,%edx
  800420bdc1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bdc8:	00 00 00 
  800420bdcb:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420bdd1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bdd8:	00 00 00 
  800420bddb:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420bde2:	00 00 00 
  800420bde5:	48 b8 92 d8 20 04 80 	movabs $0x800420d892,%rax
  800420bdec:	00 00 00 
  800420bdef:	89 c2                	mov    %eax,%edx
  800420bdf1:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bdf8:	00 00 00 
  800420bdfb:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420be02:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420be09:	00 00 00 
  800420be0c:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420be13:	08 00 
  800420be15:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420be1c:	00 00 00 
  800420be1f:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be26:	83 e2 f8             	and    $0xfffffff8,%edx
  800420be29:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be2f:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420be36:	00 00 00 
  800420be39:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be40:	83 e2 07             	and    $0x7,%edx
  800420be43:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be49:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420be50:	00 00 00 
  800420be53:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be5a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420be5d:	83 ca 0e             	or     $0xe,%edx
  800420be60:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be66:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420be6d:	00 00 00 
  800420be70:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be77:	83 e2 ef             	and    $0xffffffef,%edx
  800420be7a:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be80:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420be87:	00 00 00 
  800420be8a:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be91:	83 e2 9f             	and    $0xffffff9f,%edx
  800420be94:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be9a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bea1:	00 00 00 
  800420bea4:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420beab:	83 ca 80             	or     $0xffffff80,%edx
  800420beae:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420beb4:	48 b8 92 d8 20 04 80 	movabs $0x800420d892,%rax
  800420bebb:	00 00 00 
  800420bebe:	48 c1 e8 10          	shr    $0x10,%rax
  800420bec2:	89 c2                	mov    %eax,%edx
  800420bec4:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420becb:	00 00 00 
  800420bece:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420bed5:	48 b8 92 d8 20 04 80 	movabs $0x800420d892,%rax
  800420bedc:	00 00 00 
  800420bedf:	48 c1 e8 20          	shr    $0x20,%rax
  800420bee3:	89 c2                	mov    %eax,%edx
  800420bee5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420beec:	00 00 00 
  800420beef:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420bef5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420befc:	00 00 00 
  800420beff:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420bf06:	00 00 00 
  800420bf09:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420bf10:	00 00 00 
  800420bf13:	89 c2                	mov    %eax,%edx
  800420bf15:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bf1c:	00 00 00 
  800420bf1f:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420bf26:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bf2d:	00 00 00 
  800420bf30:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420bf37:	08 00 
  800420bf39:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bf40:	00 00 00 
  800420bf43:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf4a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bf4d:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf53:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bf5a:	00 00 00 
  800420bf5d:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf64:	83 e2 07             	and    $0x7,%edx
  800420bf67:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf6d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bf74:	00 00 00 
  800420bf77:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf7e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bf81:	83 ca 0e             	or     $0xe,%edx
  800420bf84:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bf8a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bf91:	00 00 00 
  800420bf94:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf9b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bf9e:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfa4:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bfab:	00 00 00 
  800420bfae:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfb5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bfb8:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfbe:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bfc5:	00 00 00 
  800420bfc8:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfcf:	83 ca 80             	or     $0xffffff80,%edx
  800420bfd2:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfd8:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420bfdf:	00 00 00 
  800420bfe2:	48 c1 e8 10          	shr    $0x10,%rax
  800420bfe6:	89 c2                	mov    %eax,%edx
  800420bfe8:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420bfef:	00 00 00 
  800420bff2:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420bff9:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420c000:	00 00 00 
  800420c003:	48 c1 e8 20          	shr    $0x20,%rax
  800420c007:	89 c2                	mov    %eax,%edx
  800420c009:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c010:	00 00 00 
  800420c013:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420c019:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c020:	00 00 00 
  800420c023:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420c02a:	00 00 00 
  800420c02d:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420c034:	00 00 00 
  800420c037:	89 c2                	mov    %eax,%edx
  800420c039:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c040:	00 00 00 
  800420c043:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420c04a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c051:	00 00 00 
  800420c054:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420c05b:	08 00 
  800420c05d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c064:	00 00 00 
  800420c067:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c06e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c071:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c077:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c07e:	00 00 00 
  800420c081:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c088:	83 e2 07             	and    $0x7,%edx
  800420c08b:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c091:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c098:	00 00 00 
  800420c09b:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0a2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c0a5:	83 ca 0e             	or     $0xe,%edx
  800420c0a8:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0ae:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c0b5:	00 00 00 
  800420c0b8:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0bf:	83 e2 ef             	and    $0xffffffef,%edx
  800420c0c2:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0c8:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c0cf:	00 00 00 
  800420c0d2:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0d9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c0dc:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0e2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c0e9:	00 00 00 
  800420c0ec:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0f3:	83 ca 80             	or     $0xffffff80,%edx
  800420c0f6:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0fc:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420c103:	00 00 00 
  800420c106:	48 c1 e8 10          	shr    $0x10,%rax
  800420c10a:	89 c2                	mov    %eax,%edx
  800420c10c:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c113:	00 00 00 
  800420c116:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420c11d:	48 b8 9e d8 20 04 80 	movabs $0x800420d89e,%rax
  800420c124:	00 00 00 
  800420c127:	48 c1 e8 20          	shr    $0x20,%rax
  800420c12b:	89 c2                	mov    %eax,%edx
  800420c12d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c134:	00 00 00 
  800420c137:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420c13d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c144:	00 00 00 
  800420c147:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420c14e:	00 00 00 
  800420c151:	48 b8 a4 d8 20 04 80 	movabs $0x800420d8a4,%rax
  800420c158:	00 00 00 
  800420c15b:	89 c2                	mov    %eax,%edx
  800420c15d:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c164:	00 00 00 
  800420c167:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420c16e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c175:	00 00 00 
  800420c178:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420c17f:	08 00 
  800420c181:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c188:	00 00 00 
  800420c18b:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c192:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c195:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c19b:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c1a2:	00 00 00 
  800420c1a5:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c1ac:	83 e2 07             	and    $0x7,%edx
  800420c1af:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c1b5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c1bc:	00 00 00 
  800420c1bf:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1c6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c1c9:	83 ca 0e             	or     $0xe,%edx
  800420c1cc:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1d2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c1d9:	00 00 00 
  800420c1dc:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1e3:	83 e2 ef             	and    $0xffffffef,%edx
  800420c1e6:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1ec:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c1f3:	00 00 00 
  800420c1f6:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1fd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c200:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c206:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c20d:	00 00 00 
  800420c210:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c217:	83 ca 80             	or     $0xffffff80,%edx
  800420c21a:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c220:	48 b8 a4 d8 20 04 80 	movabs $0x800420d8a4,%rax
  800420c227:	00 00 00 
  800420c22a:	48 c1 e8 10          	shr    $0x10,%rax
  800420c22e:	89 c2                	mov    %eax,%edx
  800420c230:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c237:	00 00 00 
  800420c23a:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420c241:	48 b8 a4 d8 20 04 80 	movabs $0x800420d8a4,%rax
  800420c248:	00 00 00 
  800420c24b:	48 c1 e8 20          	shr    $0x20,%rax
  800420c24f:	89 c2                	mov    %eax,%edx
  800420c251:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c258:	00 00 00 
  800420c25b:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420c261:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c268:	00 00 00 
  800420c26b:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420c272:	00 00 00 
  800420c275:	48 b8 aa d8 20 04 80 	movabs $0x800420d8aa,%rax
  800420c27c:	00 00 00 
  800420c27f:	89 c2                	mov    %eax,%edx
  800420c281:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c288:	00 00 00 
  800420c28b:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420c292:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c299:	00 00 00 
  800420c29c:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420c2a3:	08 00 
  800420c2a5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c2ac:	00 00 00 
  800420c2af:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2b6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c2b9:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2bf:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c2c6:	00 00 00 
  800420c2c9:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2d0:	83 e2 07             	and    $0x7,%edx
  800420c2d3:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2d9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c2e0:	00 00 00 
  800420c2e3:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c2ea:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c2ed:	83 ca 0e             	or     $0xe,%edx
  800420c2f0:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c2f6:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c2fd:	00 00 00 
  800420c300:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c307:	83 e2 ef             	and    $0xffffffef,%edx
  800420c30a:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c310:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c317:	00 00 00 
  800420c31a:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c321:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c324:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c32a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c331:	00 00 00 
  800420c334:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c33b:	83 ca 80             	or     $0xffffff80,%edx
  800420c33e:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c344:	48 b8 aa d8 20 04 80 	movabs $0x800420d8aa,%rax
  800420c34b:	00 00 00 
  800420c34e:	48 c1 e8 10          	shr    $0x10,%rax
  800420c352:	89 c2                	mov    %eax,%edx
  800420c354:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c35b:	00 00 00 
  800420c35e:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420c365:	48 b8 aa d8 20 04 80 	movabs $0x800420d8aa,%rax
  800420c36c:	00 00 00 
  800420c36f:	48 c1 e8 20          	shr    $0x20,%rax
  800420c373:	89 c2                	mov    %eax,%edx
  800420c375:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c37c:	00 00 00 
  800420c37f:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420c385:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c38c:	00 00 00 
  800420c38f:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420c396:	00 00 00 
  800420c399:	48 b8 b0 d8 20 04 80 	movabs $0x800420d8b0,%rax
  800420c3a0:	00 00 00 
  800420c3a3:	89 c2                	mov    %eax,%edx
  800420c3a5:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c3ac:	00 00 00 
  800420c3af:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420c3b6:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c3bd:	00 00 00 
  800420c3c0:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420c3c7:	08 00 
  800420c3c9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c3d0:	00 00 00 
  800420c3d3:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3da:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c3dd:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3e3:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c3ea:	00 00 00 
  800420c3ed:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3f4:	83 e2 07             	and    $0x7,%edx
  800420c3f7:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3fd:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c404:	00 00 00 
  800420c407:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c40e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c411:	83 ca 0e             	or     $0xe,%edx
  800420c414:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c41a:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c421:	00 00 00 
  800420c424:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c42b:	83 e2 ef             	and    $0xffffffef,%edx
  800420c42e:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c434:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c43b:	00 00 00 
  800420c43e:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c445:	83 ca 60             	or     $0x60,%edx
  800420c448:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c44e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c455:	00 00 00 
  800420c458:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c45f:	83 ca 80             	or     $0xffffff80,%edx
  800420c462:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c468:	48 b8 b0 d8 20 04 80 	movabs $0x800420d8b0,%rax
  800420c46f:	00 00 00 
  800420c472:	48 c1 e8 10          	shr    $0x10,%rax
  800420c476:	89 c2                	mov    %eax,%edx
  800420c478:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c47f:	00 00 00 
  800420c482:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420c489:	48 b8 b0 d8 20 04 80 	movabs $0x800420d8b0,%rax
  800420c490:	00 00 00 
  800420c493:	48 c1 e8 20          	shr    $0x20,%rax
  800420c497:	89 c2                	mov    %eax,%edx
  800420c499:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c4a0:	00 00 00 
  800420c4a3:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420c4a9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c4b0:	00 00 00 
  800420c4b3:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420c4ba:	00 00 00 
  800420c4bd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c4c4:	00 00 00 
  800420c4c7:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420c4cc:	48 ba 80 d2 4d 04 80 	movabs $0x80044dd280,%rdx
  800420c4d3:	00 00 00 
  800420c4d6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c4dd:	00 00 00 
  800420c4e0:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420c4e4:	48 b8 f2 c4 20 04 80 	movabs $0x800420c4f2,%rax
  800420c4eb:	00 00 00 
  800420c4ee:	ff d0                	callq  *%rax
  800420c4f0:	c9                   	leaveq 
  800420c4f1:	c3                   	retq   

000000800420c4f2 <trap_init_percpu>:
  800420c4f2:	55                   	push   %rbp
  800420c4f3:	48 89 e5             	mov    %rsp,%rbp
  800420c4f6:	53                   	push   %rbx
  800420c4f7:	48 83 ec 18          	sub    $0x18,%rsp
  800420c4fb:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c502:	00 00 00 
  800420c505:	ff d0                	callq  *%rax
  800420c507:	01 c0                	add    %eax,%eax
  800420c509:	83 c0 05             	add    $0x5,%eax
  800420c50c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420c50f:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c516:	00 00 00 
  800420c519:	ff d0                	callq  *%rax
  800420c51b:	89 c3                	mov    %eax,%ebx
  800420c51d:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c524:	00 00 00 
  800420c527:	ff d0                	callq  *%rax
  800420c529:	89 c2                	mov    %eax,%edx
  800420c52b:	89 d0                	mov    %edx,%eax
  800420c52d:	01 c0                	add    %eax,%eax
  800420c52f:	01 d0                	add    %edx,%eax
  800420c531:	c1 e0 0f             	shl    $0xf,%eax
  800420c534:	48 98                	cltq   
  800420c536:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420c53d:	00 00 00 
  800420c540:	48 29 c2             	sub    %rax,%rdx
  800420c543:	48 89 d0             	mov    %rdx,%rax
  800420c546:	48 89 c2             	mov    %rax,%rdx
  800420c549:	48 b9 20 e0 6d 04 80 	movabs $0x80046de020,%rcx
  800420c550:	00 00 00 
  800420c553:	48 63 c3             	movslq %ebx,%rax
  800420c556:	48 c1 e0 03          	shl    $0x3,%rax
  800420c55a:	48 89 c6             	mov    %rax,%rsi
  800420c55d:	48 c1 e6 04          	shl    $0x4,%rsi
  800420c561:	48 01 f0             	add    %rsi,%rax
  800420c564:	48 01 c8             	add    %rcx,%rax
  800420c567:	48 83 c0 10          	add    $0x10,%rax
  800420c56b:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420c56f:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c576:	00 00 00 
  800420c579:	48 8b 00             	mov    (%rax),%rax
  800420c57c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c580:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c584:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c58b:	00 00 00 
  800420c58e:	ff d0                	callq  *%rax
  800420c590:	c1 e0 04             	shl    $0x4,%eax
  800420c593:	48 98                	cltq   
  800420c595:	48 01 d8             	add    %rbx,%rax
  800420c598:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420c59d:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c5a4:	00 00 00 
  800420c5a7:	48 8b 00             	mov    (%rax),%rax
  800420c5aa:	48 c1 f8 10          	sar    $0x10,%rax
  800420c5ae:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c5b2:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c5b9:	00 00 00 
  800420c5bc:	ff d0                	callq  *%rax
  800420c5be:	c1 e0 04             	shl    $0x4,%eax
  800420c5c1:	48 98                	cltq   
  800420c5c3:	48 01 d8             	add    %rbx,%rax
  800420c5c6:	48 89 c3             	mov    %rax,%rbx
  800420c5c9:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c5d0:	00 00 00 
  800420c5d3:	ff d0                	callq  *%rax
  800420c5d5:	48 98                	cltq   
  800420c5d7:	48 c1 e0 03          	shl    $0x3,%rax
  800420c5db:	48 89 c2             	mov    %rax,%rdx
  800420c5de:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c5e2:	48 01 d0             	add    %rdx,%rax
  800420c5e5:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c5e9:	48 b8 20 e0 6d 04 80 	movabs $0x80046de020,%rax
  800420c5f0:	00 00 00 
  800420c5f3:	48 01 d0             	add    %rdx,%rax
  800420c5f6:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420c5fa:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c601:	00 00 00 
  800420c604:	48 8b 00             	mov    (%rax),%rax
  800420c607:	48 c1 f8 10          	sar    $0x10,%rax
  800420c60b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c60f:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c616:	00 00 00 
  800420c619:	ff d0                	callq  *%rax
  800420c61b:	c1 e0 04             	shl    $0x4,%eax
  800420c61e:	48 98                	cltq   
  800420c620:	48 01 d8             	add    %rbx,%rax
  800420c623:	48 89 c3             	mov    %rax,%rbx
  800420c626:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c62d:	00 00 00 
  800420c630:	ff d0                	callq  *%rax
  800420c632:	48 98                	cltq   
  800420c634:	48 c1 e0 03          	shl    $0x3,%rax
  800420c638:	48 89 c2             	mov    %rax,%rdx
  800420c63b:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c63f:	48 01 d0             	add    %rdx,%rax
  800420c642:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c646:	48 b8 20 e0 6d 04 80 	movabs $0x80046de020,%rax
  800420c64d:	00 00 00 
  800420c650:	48 01 d0             	add    %rdx,%rax
  800420c653:	48 c1 e8 10          	shr    $0x10,%rax
  800420c657:	88 43 04             	mov    %al,0x4(%rbx)
  800420c65a:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c661:	00 00 00 
  800420c664:	48 8b 00             	mov    (%rax),%rax
  800420c667:	48 c1 f8 10          	sar    $0x10,%rax
  800420c66b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c66f:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c676:	00 00 00 
  800420c679:	ff d0                	callq  *%rax
  800420c67b:	c1 e0 04             	shl    $0x4,%eax
  800420c67e:	48 98                	cltq   
  800420c680:	48 01 d8             	add    %rbx,%rax
  800420c683:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c687:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c68a:	83 ca 09             	or     $0x9,%edx
  800420c68d:	88 50 05             	mov    %dl,0x5(%rax)
  800420c690:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c697:	00 00 00 
  800420c69a:	48 8b 00             	mov    (%rax),%rax
  800420c69d:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6a1:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6a5:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c6ac:	00 00 00 
  800420c6af:	ff d0                	callq  *%rax
  800420c6b1:	c1 e0 04             	shl    $0x4,%eax
  800420c6b4:	48 98                	cltq   
  800420c6b6:	48 01 d8             	add    %rbx,%rax
  800420c6b9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6bd:	83 e2 ef             	and    $0xffffffef,%edx
  800420c6c0:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6c3:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c6ca:	00 00 00 
  800420c6cd:	48 8b 00             	mov    (%rax),%rax
  800420c6d0:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6d4:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6d8:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c6df:	00 00 00 
  800420c6e2:	ff d0                	callq  *%rax
  800420c6e4:	c1 e0 04             	shl    $0x4,%eax
  800420c6e7:	48 98                	cltq   
  800420c6e9:	48 01 d8             	add    %rbx,%rax
  800420c6ec:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6f0:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c6f3:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6f6:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c6fd:	00 00 00 
  800420c700:	48 8b 00             	mov    (%rax),%rax
  800420c703:	48 c1 f8 10          	sar    $0x10,%rax
  800420c707:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c70b:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c712:	00 00 00 
  800420c715:	ff d0                	callq  *%rax
  800420c717:	c1 e0 04             	shl    $0x4,%eax
  800420c71a:	48 98                	cltq   
  800420c71c:	48 01 d8             	add    %rbx,%rax
  800420c71f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c723:	83 ca 80             	or     $0xffffff80,%edx
  800420c726:	88 50 05             	mov    %dl,0x5(%rax)
  800420c729:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c730:	00 00 00 
  800420c733:	48 8b 00             	mov    (%rax),%rax
  800420c736:	48 c1 f8 10          	sar    $0x10,%rax
  800420c73a:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c73e:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c745:	00 00 00 
  800420c748:	ff d0                	callq  *%rax
  800420c74a:	c1 e0 04             	shl    $0x4,%eax
  800420c74d:	48 98                	cltq   
  800420c74f:	48 01 d8             	add    %rbx,%rax
  800420c752:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c756:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c759:	88 50 06             	mov    %dl,0x6(%rax)
  800420c75c:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c763:	00 00 00 
  800420c766:	48 8b 00             	mov    (%rax),%rax
  800420c769:	48 c1 f8 10          	sar    $0x10,%rax
  800420c76d:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c771:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c778:	00 00 00 
  800420c77b:	ff d0                	callq  *%rax
  800420c77d:	c1 e0 04             	shl    $0x4,%eax
  800420c780:	48 98                	cltq   
  800420c782:	48 01 d8             	add    %rbx,%rax
  800420c785:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c789:	83 e2 ef             	and    $0xffffffef,%edx
  800420c78c:	88 50 06             	mov    %dl,0x6(%rax)
  800420c78f:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c796:	00 00 00 
  800420c799:	48 8b 00             	mov    (%rax),%rax
  800420c79c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7a0:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7a4:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c7ab:	00 00 00 
  800420c7ae:	ff d0                	callq  *%rax
  800420c7b0:	c1 e0 04             	shl    $0x4,%eax
  800420c7b3:	48 98                	cltq   
  800420c7b5:	48 01 d8             	add    %rbx,%rax
  800420c7b8:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7bc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c7bf:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7c2:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c7c9:	00 00 00 
  800420c7cc:	48 8b 00             	mov    (%rax),%rax
  800420c7cf:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7d3:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7d7:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c7de:	00 00 00 
  800420c7e1:	ff d0                	callq  *%rax
  800420c7e3:	c1 e0 04             	shl    $0x4,%eax
  800420c7e6:	48 98                	cltq   
  800420c7e8:	48 01 d8             	add    %rbx,%rax
  800420c7eb:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7ef:	83 e2 7f             	and    $0x7f,%edx
  800420c7f2:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7f5:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c7fc:	00 00 00 
  800420c7ff:	48 8b 00             	mov    (%rax),%rax
  800420c802:	48 c1 f8 10          	sar    $0x10,%rax
  800420c806:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c80a:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c811:	00 00 00 
  800420c814:	ff d0                	callq  *%rax
  800420c816:	c1 e0 04             	shl    $0x4,%eax
  800420c819:	48 98                	cltq   
  800420c81b:	48 01 d8             	add    %rbx,%rax
  800420c81e:	48 89 c3             	mov    %rax,%rbx
  800420c821:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c828:	00 00 00 
  800420c82b:	ff d0                	callq  *%rax
  800420c82d:	48 98                	cltq   
  800420c82f:	48 c1 e0 03          	shl    $0x3,%rax
  800420c833:	48 89 c2             	mov    %rax,%rdx
  800420c836:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c83a:	48 01 d0             	add    %rdx,%rax
  800420c83d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c841:	48 b8 20 e0 6d 04 80 	movabs $0x80046de020,%rax
  800420c848:	00 00 00 
  800420c84b:	48 01 d0             	add    %rdx,%rax
  800420c84e:	48 c1 e8 18          	shr    $0x18,%rax
  800420c852:	88 43 07             	mov    %al,0x7(%rbx)
  800420c855:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c85c:	00 00 00 
  800420c85f:	48 8b 00             	mov    (%rax),%rax
  800420c862:	48 c1 f8 10          	sar    $0x10,%rax
  800420c866:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c86a:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c871:	00 00 00 
  800420c874:	ff d0                	callq  *%rax
  800420c876:	c1 e0 04             	shl    $0x4,%eax
  800420c879:	48 98                	cltq   
  800420c87b:	48 01 d8             	add    %rbx,%rax
  800420c87e:	48 89 c3             	mov    %rax,%rbx
  800420c881:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c888:	00 00 00 
  800420c88b:	ff d0                	callq  *%rax
  800420c88d:	48 98                	cltq   
  800420c88f:	48 c1 e0 03          	shl    $0x3,%rax
  800420c893:	48 89 c2             	mov    %rax,%rdx
  800420c896:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c89a:	48 01 d0             	add    %rdx,%rax
  800420c89d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c8a1:	48 b8 20 e0 6d 04 80 	movabs $0x80046de020,%rax
  800420c8a8:	00 00 00 
  800420c8ab:	48 01 d0             	add    %rdx,%rax
  800420c8ae:	48 c1 e8 20          	shr    $0x20,%rax
  800420c8b2:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c8b5:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c8bc:	00 00 00 
  800420c8bf:	48 8b 00             	mov    (%rax),%rax
  800420c8c2:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8c6:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8ca:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c8d1:	00 00 00 
  800420c8d4:	ff d0                	callq  *%rax
  800420c8d6:	c1 e0 04             	shl    $0x4,%eax
  800420c8d9:	48 98                	cltq   
  800420c8db:	48 01 d8             	add    %rbx,%rax
  800420c8de:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c8e2:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c8e9:	00 00 00 
  800420c8ec:	48 8b 00             	mov    (%rax),%rax
  800420c8ef:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8f3:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8f7:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c8fe:	00 00 00 
  800420c901:	ff d0                	callq  *%rax
  800420c903:	c1 e0 04             	shl    $0x4,%eax
  800420c906:	48 98                	cltq   
  800420c908:	48 01 d8             	add    %rbx,%rax
  800420c90b:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c90f:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c916:	00 00 00 
  800420c919:	48 8b 00             	mov    (%rax),%rax
  800420c91c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c920:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c924:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c92b:	00 00 00 
  800420c92e:	ff d0                	callq  *%rax
  800420c930:	c1 e0 04             	shl    $0x4,%eax
  800420c933:	48 98                	cltq   
  800420c935:	48 01 d8             	add    %rbx,%rax
  800420c938:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c93e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c941:	c1 e0 03             	shl    $0x3,%eax
  800420c944:	0f b7 c0             	movzwl %ax,%eax
  800420c947:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c94b:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c94f:	0f 00 d8             	ltr    %ax
  800420c952:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c959:	00 00 00 
  800420c95c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c960:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c964:	0f 01 18             	lidt   (%rax)
  800420c967:	48 83 c4 18          	add    $0x18,%rsp
  800420c96b:	5b                   	pop    %rbx
  800420c96c:	5d                   	pop    %rbp
  800420c96d:	c3                   	retq   

000000800420c96e <print_trapframe>:
  800420c96e:	55                   	push   %rbp
  800420c96f:	48 89 e5             	mov    %rsp,%rbp
  800420c972:	48 83 ec 20          	sub    $0x20,%rsp
  800420c976:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c97a:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420c981:	00 00 00 
  800420c984:	ff d0                	callq  *%rax
  800420c986:	89 c2                	mov    %eax,%edx
  800420c988:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c98c:	48 89 c6             	mov    %rax,%rsi
  800420c98f:	48 bf 0e fe 21 04 80 	movabs $0x800421fe0e,%rdi
  800420c996:	00 00 00 
  800420c999:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c99e:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420c9a5:	00 00 00 
  800420c9a8:	ff d1                	callq  *%rcx
  800420c9aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9ae:	48 89 c7             	mov    %rax,%rdi
  800420c9b1:	48 b8 7f cc 20 04 80 	movabs $0x800420cc7f,%rax
  800420c9b8:	00 00 00 
  800420c9bb:	ff d0                	callq  *%rax
  800420c9bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9c1:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c9c5:	0f b7 c0             	movzwl %ax,%eax
  800420c9c8:	89 c6                	mov    %eax,%esi
  800420c9ca:	48 bf 2c fe 21 04 80 	movabs $0x800421fe2c,%rdi
  800420c9d1:	00 00 00 
  800420c9d4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9d9:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420c9e0:	00 00 00 
  800420c9e3:	ff d2                	callq  *%rdx
  800420c9e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9e9:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c9f0:	0f b7 c0             	movzwl %ax,%eax
  800420c9f3:	89 c6                	mov    %eax,%esi
  800420c9f5:	48 bf 3f fe 21 04 80 	movabs $0x800421fe3f,%rdi
  800420c9fc:	00 00 00 
  800420c9ff:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca04:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ca0b:	00 00 00 
  800420ca0e:	ff d2                	callq  *%rdx
  800420ca10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca14:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca1b:	89 c7                	mov    %eax,%edi
  800420ca1d:	48 b8 90 9d 20 04 80 	movabs $0x8004209d90,%rax
  800420ca24:	00 00 00 
  800420ca27:	ff d0                	callq  *%rax
  800420ca29:	48 89 c2             	mov    %rax,%rdx
  800420ca2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca30:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca37:	48 89 c6             	mov    %rax,%rsi
  800420ca3a:	48 bf 52 fe 21 04 80 	movabs $0x800421fe52,%rdi
  800420ca41:	00 00 00 
  800420ca44:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca49:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420ca50:	00 00 00 
  800420ca53:	ff d1                	callq  *%rcx
  800420ca55:	48 b8 90 e2 4d 04 80 	movabs $0x80044de290,%rax
  800420ca5c:	00 00 00 
  800420ca5f:	48 8b 00             	mov    (%rax),%rax
  800420ca62:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420ca66:	75 3a                	jne    800420caa2 <print_trapframe+0x134>
  800420ca68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca6c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca73:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ca77:	75 29                	jne    800420caa2 <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420ca79:	0f 20 d0             	mov    %cr2,%rax
  800420ca7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420ca80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ca84:	48 89 c6             	mov    %rax,%rsi
  800420ca87:	48 bf 64 fe 21 04 80 	movabs $0x800421fe64,%rdi
  800420ca8e:	00 00 00 
  800420ca91:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca96:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ca9d:	00 00 00 
  800420caa0:	ff d2                	callq  *%rdx
  800420caa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420caa6:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420caad:	48 89 c6             	mov    %rax,%rsi
  800420cab0:	48 bf 73 fe 21 04 80 	movabs $0x800421fe73,%rdi
  800420cab7:	00 00 00 
  800420caba:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cabf:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cac6:	00 00 00 
  800420cac9:	ff d2                	callq  *%rdx
  800420cacb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cacf:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cad6:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cada:	0f 85 9c 00 00 00    	jne    800420cb7c <print_trapframe+0x20e>
  800420cae0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cae4:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420caeb:	83 e0 01             	and    $0x1,%eax
  800420caee:	48 85 c0             	test   %rax,%rax
  800420caf1:	74 0c                	je     800420caff <print_trapframe+0x191>
  800420caf3:	48 b9 81 fe 21 04 80 	movabs $0x800421fe81,%rcx
  800420cafa:	00 00 00 
  800420cafd:	eb 0a                	jmp    800420cb09 <print_trapframe+0x19b>
  800420caff:	48 b9 8c fe 21 04 80 	movabs $0x800421fe8c,%rcx
  800420cb06:	00 00 00 
  800420cb09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb0d:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb14:	83 e0 02             	and    $0x2,%eax
  800420cb17:	48 85 c0             	test   %rax,%rax
  800420cb1a:	74 0c                	je     800420cb28 <print_trapframe+0x1ba>
  800420cb1c:	48 ba 98 fe 21 04 80 	movabs $0x800421fe98,%rdx
  800420cb23:	00 00 00 
  800420cb26:	eb 0a                	jmp    800420cb32 <print_trapframe+0x1c4>
  800420cb28:	48 ba 9e fe 21 04 80 	movabs $0x800421fe9e,%rdx
  800420cb2f:	00 00 00 
  800420cb32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb36:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb3d:	83 e0 04             	and    $0x4,%eax
  800420cb40:	48 85 c0             	test   %rax,%rax
  800420cb43:	74 0c                	je     800420cb51 <print_trapframe+0x1e3>
  800420cb45:	48 b8 a3 fe 21 04 80 	movabs $0x800421fea3,%rax
  800420cb4c:	00 00 00 
  800420cb4f:	eb 0a                	jmp    800420cb5b <print_trapframe+0x1ed>
  800420cb51:	48 b8 a8 fe 21 04 80 	movabs $0x800421fea8,%rax
  800420cb58:	00 00 00 
  800420cb5b:	48 89 c6             	mov    %rax,%rsi
  800420cb5e:	48 bf af fe 21 04 80 	movabs $0x800421feaf,%rdi
  800420cb65:	00 00 00 
  800420cb68:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb6d:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420cb74:	00 00 00 
  800420cb77:	41 ff d0             	callq  *%r8
  800420cb7a:	eb 1b                	jmp    800420cb97 <print_trapframe+0x229>
  800420cb7c:	48 bf be fe 21 04 80 	movabs $0x800421febe,%rdi
  800420cb83:	00 00 00 
  800420cb86:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb8b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cb92:	00 00 00 
  800420cb95:	ff d2                	callq  *%rdx
  800420cb97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb9b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420cba2:	48 89 c6             	mov    %rax,%rsi
  800420cba5:	48 bf c0 fe 21 04 80 	movabs $0x800421fec0,%rdi
  800420cbac:	00 00 00 
  800420cbaf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbb4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cbbb:	00 00 00 
  800420cbbe:	ff d2                	callq  *%rdx
  800420cbc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbc4:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cbcb:	0f b7 c0             	movzwl %ax,%eax
  800420cbce:	89 c6                	mov    %eax,%esi
  800420cbd0:	48 bf cf fe 21 04 80 	movabs $0x800421fecf,%rdi
  800420cbd7:	00 00 00 
  800420cbda:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbdf:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cbe6:	00 00 00 
  800420cbe9:	ff d2                	callq  *%rdx
  800420cbeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbef:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420cbf6:	48 89 c6             	mov    %rax,%rsi
  800420cbf9:	48 bf e2 fe 21 04 80 	movabs $0x800421fee2,%rdi
  800420cc00:	00 00 00 
  800420cc03:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc08:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc0f:	00 00 00 
  800420cc12:	ff d2                	callq  *%rdx
  800420cc14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc18:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cc1f:	0f b7 c0             	movzwl %ax,%eax
  800420cc22:	83 e0 03             	and    $0x3,%eax
  800420cc25:	85 c0                	test   %eax,%eax
  800420cc27:	74 54                	je     800420cc7d <print_trapframe+0x30f>
  800420cc29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc2d:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cc34:	48 89 c6             	mov    %rax,%rsi
  800420cc37:	48 bf f1 fe 21 04 80 	movabs $0x800421fef1,%rdi
  800420cc3e:	00 00 00 
  800420cc41:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc4d:	00 00 00 
  800420cc50:	ff d2                	callq  *%rdx
  800420cc52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc56:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420cc5d:	0f b7 c0             	movzwl %ax,%eax
  800420cc60:	89 c6                	mov    %eax,%esi
  800420cc62:	48 bf 00 ff 21 04 80 	movabs $0x800421ff00,%rdi
  800420cc69:	00 00 00 
  800420cc6c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc71:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc78:	00 00 00 
  800420cc7b:	ff d2                	callq  *%rdx
  800420cc7d:	c9                   	leaveq 
  800420cc7e:	c3                   	retq   

000000800420cc7f <print_regs>:
  800420cc7f:	55                   	push   %rbp
  800420cc80:	48 89 e5             	mov    %rsp,%rbp
  800420cc83:	48 83 ec 10          	sub    $0x10,%rsp
  800420cc87:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420cc8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cc8f:	48 8b 00             	mov    (%rax),%rax
  800420cc92:	48 89 c6             	mov    %rax,%rsi
  800420cc95:	48 bf 13 ff 21 04 80 	movabs $0x800421ff13,%rdi
  800420cc9c:	00 00 00 
  800420cc9f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cca4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccab:	00 00 00 
  800420ccae:	ff d2                	callq  *%rdx
  800420ccb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccb4:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420ccb8:	48 89 c6             	mov    %rax,%rsi
  800420ccbb:	48 bf 22 ff 21 04 80 	movabs $0x800421ff22,%rdi
  800420ccc2:	00 00 00 
  800420ccc5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccca:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccd1:	00 00 00 
  800420ccd4:	ff d2                	callq  *%rdx
  800420ccd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccda:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420ccde:	48 89 c6             	mov    %rax,%rsi
  800420cce1:	48 bf 31 ff 21 04 80 	movabs $0x800421ff31,%rdi
  800420cce8:	00 00 00 
  800420cceb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccf0:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccf7:	00 00 00 
  800420ccfa:	ff d2                	callq  *%rdx
  800420ccfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd00:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cd04:	48 89 c6             	mov    %rax,%rsi
  800420cd07:	48 bf 40 ff 21 04 80 	movabs $0x800421ff40,%rdi
  800420cd0e:	00 00 00 
  800420cd11:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd16:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd1d:	00 00 00 
  800420cd20:	ff d2                	callq  *%rdx
  800420cd22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd26:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420cd2a:	48 89 c6             	mov    %rax,%rsi
  800420cd2d:	48 bf 4f ff 21 04 80 	movabs $0x800421ff4f,%rdi
  800420cd34:	00 00 00 
  800420cd37:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd3c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd43:	00 00 00 
  800420cd46:	ff d2                	callq  *%rdx
  800420cd48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd4c:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420cd50:	48 89 c6             	mov    %rax,%rsi
  800420cd53:	48 bf 5e ff 21 04 80 	movabs $0x800421ff5e,%rdi
  800420cd5a:	00 00 00 
  800420cd5d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd62:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd69:	00 00 00 
  800420cd6c:	ff d2                	callq  *%rdx
  800420cd6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd72:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420cd76:	48 89 c6             	mov    %rax,%rsi
  800420cd79:	48 bf 6d ff 21 04 80 	movabs $0x800421ff6d,%rdi
  800420cd80:	00 00 00 
  800420cd83:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd88:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd8f:	00 00 00 
  800420cd92:	ff d2                	callq  *%rdx
  800420cd94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd98:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420cd9c:	48 89 c6             	mov    %rax,%rsi
  800420cd9f:	48 bf 7b ff 21 04 80 	movabs $0x800421ff7b,%rdi
  800420cda6:	00 00 00 
  800420cda9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdae:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cdb5:	00 00 00 
  800420cdb8:	ff d2                	callq  *%rdx
  800420cdba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdbe:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420cdc2:	48 89 c6             	mov    %rax,%rsi
  800420cdc5:	48 bf 89 ff 21 04 80 	movabs $0x800421ff89,%rdi
  800420cdcc:	00 00 00 
  800420cdcf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdd4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cddb:	00 00 00 
  800420cdde:	ff d2                	callq  *%rdx
  800420cde0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cde4:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420cde8:	48 89 c6             	mov    %rax,%rsi
  800420cdeb:	48 bf 98 ff 21 04 80 	movabs $0x800421ff98,%rdi
  800420cdf2:	00 00 00 
  800420cdf5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdfa:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce01:	00 00 00 
  800420ce04:	ff d2                	callq  *%rdx
  800420ce06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce0a:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420ce0e:	48 89 c6             	mov    %rax,%rsi
  800420ce11:	48 bf a7 ff 21 04 80 	movabs $0x800421ffa7,%rdi
  800420ce18:	00 00 00 
  800420ce1b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce20:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce27:	00 00 00 
  800420ce2a:	ff d2                	callq  *%rdx
  800420ce2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce30:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420ce34:	48 89 c6             	mov    %rax,%rsi
  800420ce37:	48 bf b6 ff 21 04 80 	movabs $0x800421ffb6,%rdi
  800420ce3e:	00 00 00 
  800420ce41:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce4d:	00 00 00 
  800420ce50:	ff d2                	callq  *%rdx
  800420ce52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce56:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420ce5a:	48 89 c6             	mov    %rax,%rsi
  800420ce5d:	48 bf c5 ff 21 04 80 	movabs $0x800421ffc5,%rdi
  800420ce64:	00 00 00 
  800420ce67:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce6c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce73:	00 00 00 
  800420ce76:	ff d2                	callq  *%rdx
  800420ce78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce7c:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420ce80:	48 89 c6             	mov    %rax,%rsi
  800420ce83:	48 bf d4 ff 21 04 80 	movabs $0x800421ffd4,%rdi
  800420ce8a:	00 00 00 
  800420ce8d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce92:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce99:	00 00 00 
  800420ce9c:	ff d2                	callq  *%rdx
  800420ce9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cea2:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cea6:	48 89 c6             	mov    %rax,%rsi
  800420cea9:	48 bf e3 ff 21 04 80 	movabs $0x800421ffe3,%rdi
  800420ceb0:	00 00 00 
  800420ceb3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ceb8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cebf:	00 00 00 
  800420cec2:	ff d2                	callq  *%rdx
  800420cec4:	c9                   	leaveq 
  800420cec5:	c3                   	retq   

000000800420cec6 <trap_dispatch>:
  800420cec6:	55                   	push   %rbp
  800420cec7:	48 89 e5             	mov    %rsp,%rbp
  800420ceca:	48 83 ec 10          	sub    $0x10,%rsp
  800420cece:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ced2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ced6:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cedd:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cee1:	75 18                	jne    800420cefb <trap_dispatch+0x35>
  800420cee3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cee7:	48 89 c7             	mov    %rax,%rdi
  800420ceea:	48 b8 44 d4 20 04 80 	movabs $0x800420d444,%rax
  800420cef1:	00 00 00 
  800420cef4:	ff d0                	callq  *%rax
  800420cef6:	e9 ea 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cefb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ceff:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf06:	48 83 f8 30          	cmp    $0x30,%rax
  800420cf0a:	75 55                	jne    800420cf61 <trap_dispatch+0x9b>
  800420cf0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf10:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420cf14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf18:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420cf1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf20:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420cf24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf28:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420cf2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf30:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420cf34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf38:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cf3c:	4d 89 c1             	mov    %r8,%r9
  800420cf3f:	49 89 f8             	mov    %rdi,%r8
  800420cf42:	48 89 c7             	mov    %rax,%rdi
  800420cf45:	48 b8 96 ef 20 04 80 	movabs $0x800420ef96,%rax
  800420cf4c:	00 00 00 
  800420cf4f:	ff d0                	callq  *%rax
  800420cf51:	48 89 c2             	mov    %rax,%rdx
  800420cf54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf58:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420cf5c:	e9 84 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cf61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf65:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf6c:	48 83 f8 03          	cmp    $0x3,%rax
  800420cf70:	75 18                	jne    800420cf8a <trap_dispatch+0xc4>
  800420cf72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf76:	48 89 c7             	mov    %rax,%rdi
  800420cf79:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420cf80:	00 00 00 
  800420cf83:	ff d0                	callq  *%rax
  800420cf85:	e9 5b 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cf8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf8e:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf95:	48 83 f8 27          	cmp    $0x27,%rax
  800420cf99:	75 33                	jne    800420cfce <trap_dispatch+0x108>
  800420cf9b:	48 bf f2 ff 21 04 80 	movabs $0x800421fff2,%rdi
  800420cfa2:	00 00 00 
  800420cfa5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cfaa:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cfb1:	00 00 00 
  800420cfb4:	ff d2                	callq  *%rdx
  800420cfb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfba:	48 89 c7             	mov    %rax,%rdi
  800420cfbd:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420cfc4:	00 00 00 
  800420cfc7:	ff d0                	callq  *%rax
  800420cfc9:	e9 17 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cfce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfd2:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfd9:	48 83 f8 20          	cmp    $0x20,%rax
  800420cfdd:	75 34                	jne    800420d013 <trap_dispatch+0x14d>
  800420cfdf:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420cfe6:	00 00 00 
  800420cfe9:	ff d0                	callq  *%rax
  800420cfeb:	85 c0                	test   %eax,%eax
  800420cfed:	75 0c                	jne    800420cffb <trap_dispatch+0x135>
  800420cfef:	48 b8 06 96 21 04 80 	movabs $0x8004219606,%rax
  800420cff6:	00 00 00 
  800420cff9:	ff d0                	callq  *%rax
  800420cffb:	48 b8 ff 7d 21 04 80 	movabs $0x8004217dff,%rax
  800420d002:	00 00 00 
  800420d005:	ff d0                	callq  *%rax
  800420d007:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420d00e:	00 00 00 
  800420d011:	ff d0                	callq  *%rax
  800420d013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d017:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d01e:	48 83 f8 21          	cmp    $0x21,%rax
  800420d022:	75 11                	jne    800420d035 <trap_dispatch+0x16f>
  800420d024:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  800420d02b:	00 00 00 
  800420d02e:	ff d0                	callq  *%rax
  800420d030:	e9 b0 00 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420d035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d039:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d040:	48 83 f8 24          	cmp    $0x24,%rax
  800420d044:	75 11                	jne    800420d057 <trap_dispatch+0x191>
  800420d046:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  800420d04d:	00 00 00 
  800420d050:	ff d0                	callq  *%rax
  800420d052:	e9 8e 00 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420d057:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d05b:	48 89 c7             	mov    %rax,%rdi
  800420d05e:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d065:	00 00 00 
  800420d068:	ff d0                	callq  *%rax
  800420d06a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d06e:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d075:	66 83 f8 08          	cmp    $0x8,%ax
  800420d079:	75 2a                	jne    800420d0a5 <trap_dispatch+0x1df>
  800420d07b:	48 ba 0f 00 22 04 80 	movabs $0x800422000f,%rdx
  800420d082:	00 00 00 
  800420d085:	be 77 01 00 00       	mov    $0x177,%esi
  800420d08a:	48 bf 28 00 22 04 80 	movabs $0x8004220028,%rdi
  800420d091:	00 00 00 
  800420d094:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d099:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d0a0:	00 00 00 
  800420d0a3:	ff d1                	callq  *%rcx
  800420d0a5:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d0ac:	00 00 00 
  800420d0af:	ff d0                	callq  *%rax
  800420d0b1:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d0b8:	00 00 00 
  800420d0bb:	48 98                	cltq   
  800420d0bd:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0c1:	48 89 c1             	mov    %rax,%rcx
  800420d0c4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0c8:	48 01 c8             	add    %rcx,%rax
  800420d0cb:	48 01 d0             	add    %rdx,%rax
  800420d0ce:	48 83 c0 08          	add    $0x8,%rax
  800420d0d2:	48 8b 00             	mov    (%rax),%rax
  800420d0d5:	48 89 c7             	mov    %rax,%rdi
  800420d0d8:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420d0df:	00 00 00 
  800420d0e2:	ff d0                	callq  *%rax
  800420d0e4:	90                   	nop
  800420d0e5:	c9                   	leaveq 
  800420d0e6:	c3                   	retq   

000000800420d0e7 <trap>:
  800420d0e7:	55                   	push   %rbp
  800420d0e8:	48 89 e5             	mov    %rsp,%rbp
  800420d0eb:	48 83 ec 20          	sub    $0x20,%rsp
  800420d0ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d0f3:	fc                   	cld    
  800420d0f4:	48 b8 d8 c5 6d 04 80 	movabs $0x80046dc5d8,%rax
  800420d0fb:	00 00 00 
  800420d0fe:	48 8b 00             	mov    (%rax),%rax
  800420d101:	48 85 c0             	test   %rax,%rax
  800420d104:	74 01                	je     800420d107 <trap+0x20>
  800420d106:	f4                   	hlt    
  800420d107:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d10e:	00 00 00 
  800420d111:	ff d0                	callq  *%rax
  800420d113:	48 98                	cltq   
  800420d115:	48 c1 e0 03          	shl    $0x3,%rax
  800420d119:	48 89 c2             	mov    %rax,%rdx
  800420d11c:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d120:	48 01 d0             	add    %rdx,%rax
  800420d123:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d12a:	00 00 00 
  800420d12d:	48 01 d0             	add    %rdx,%rax
  800420d130:	48 83 c0 04          	add    $0x4,%rax
  800420d134:	be 01 00 00 00       	mov    $0x1,%esi
  800420d139:	48 89 c7             	mov    %rax,%rdi
  800420d13c:	48 b8 4f 9d 20 04 80 	movabs $0x8004209d4f,%rax
  800420d143:	00 00 00 
  800420d146:	ff d0                	callq  *%rax
  800420d148:	83 f8 02             	cmp    $0x2,%eax
  800420d14b:	75 0c                	jne    800420d159 <trap+0x72>
  800420d14d:	48 b8 74 9d 20 04 80 	movabs $0x8004209d74,%rax
  800420d154:	00 00 00 
  800420d157:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420d159:	9c                   	pushfq 
  800420d15a:	58                   	pop    %rax
  800420d15b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420d15f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d163:	25 00 02 00 00       	and    $0x200,%eax
  800420d168:	48 85 c0             	test   %rax,%rax
  800420d16b:	74 35                	je     800420d1a2 <trap+0xbb>
  800420d16d:	48 b9 37 00 22 04 80 	movabs $0x8004220037,%rcx
  800420d174:	00 00 00 
  800420d177:	48 ba 50 00 22 04 80 	movabs $0x8004220050,%rdx
  800420d17e:	00 00 00 
  800420d181:	be 94 01 00 00       	mov    $0x194,%esi
  800420d186:	48 bf 28 00 22 04 80 	movabs $0x8004220028,%rdi
  800420d18d:	00 00 00 
  800420d190:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d195:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d19c:	00 00 00 
  800420d19f:	41 ff d0             	callq  *%r8
  800420d1a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d1a6:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d1ad:	0f b7 c0             	movzwl %ax,%eax
  800420d1b0:	83 e0 03             	and    $0x3,%eax
  800420d1b3:	83 f8 03             	cmp    $0x3,%eax
  800420d1b6:	0f 85 a9 01 00 00    	jne    800420d365 <trap+0x27e>
  800420d1bc:	48 b8 74 9d 20 04 80 	movabs $0x8004209d74,%rax
  800420d1c3:	00 00 00 
  800420d1c6:	ff d0                	callq  *%rax
  800420d1c8:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d1cf:	00 00 00 
  800420d1d2:	ff d0                	callq  *%rax
  800420d1d4:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d1db:	00 00 00 
  800420d1de:	48 98                	cltq   
  800420d1e0:	48 c1 e0 03          	shl    $0x3,%rax
  800420d1e4:	48 89 c1             	mov    %rax,%rcx
  800420d1e7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d1eb:	48 01 c8             	add    %rcx,%rax
  800420d1ee:	48 01 d0             	add    %rdx,%rax
  800420d1f1:	48 83 c0 08          	add    $0x8,%rax
  800420d1f5:	48 8b 00             	mov    (%rax),%rax
  800420d1f8:	48 85 c0             	test   %rax,%rax
  800420d1fb:	75 35                	jne    800420d232 <trap+0x14b>
  800420d1fd:	48 b9 65 00 22 04 80 	movabs $0x8004220065,%rcx
  800420d204:	00 00 00 
  800420d207:	48 ba 50 00 22 04 80 	movabs $0x8004220050,%rdx
  800420d20e:	00 00 00 
  800420d211:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420d216:	48 bf 28 00 22 04 80 	movabs $0x8004220028,%rdi
  800420d21d:	00 00 00 
  800420d220:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d225:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d22c:	00 00 00 
  800420d22f:	41 ff d0             	callq  *%r8
  800420d232:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d239:	00 00 00 
  800420d23c:	ff d0                	callq  *%rax
  800420d23e:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d245:	00 00 00 
  800420d248:	48 98                	cltq   
  800420d24a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d24e:	48 89 c1             	mov    %rax,%rcx
  800420d251:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d255:	48 01 c8             	add    %rcx,%rax
  800420d258:	48 01 d0             	add    %rdx,%rax
  800420d25b:	48 83 c0 08          	add    $0x8,%rax
  800420d25f:	48 8b 00             	mov    (%rax),%rax
  800420d262:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d268:	83 f8 01             	cmp    $0x1,%eax
  800420d26b:	75 7f                	jne    800420d2ec <trap+0x205>
  800420d26d:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d274:	00 00 00 
  800420d277:	ff d0                	callq  *%rax
  800420d279:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d280:	00 00 00 
  800420d283:	48 98                	cltq   
  800420d285:	48 c1 e0 03          	shl    $0x3,%rax
  800420d289:	48 89 c1             	mov    %rax,%rcx
  800420d28c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d290:	48 01 c8             	add    %rcx,%rax
  800420d293:	48 01 d0             	add    %rdx,%rax
  800420d296:	48 83 c0 08          	add    $0x8,%rax
  800420d29a:	48 8b 00             	mov    (%rax),%rax
  800420d29d:	48 89 c7             	mov    %rax,%rdi
  800420d2a0:	48 b8 5a 90 20 04 80 	movabs $0x800420905a,%rax
  800420d2a7:	00 00 00 
  800420d2aa:	ff d0                	callq  *%rax
  800420d2ac:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d2b3:	00 00 00 
  800420d2b6:	ff d0                	callq  *%rax
  800420d2b8:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d2bf:	00 00 00 
  800420d2c2:	48 98                	cltq   
  800420d2c4:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2c8:	48 89 c1             	mov    %rax,%rcx
  800420d2cb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2cf:	48 01 c8             	add    %rcx,%rax
  800420d2d2:	48 01 d0             	add    %rdx,%rax
  800420d2d5:	48 83 c0 08          	add    $0x8,%rax
  800420d2d9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d2e0:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420d2e7:	00 00 00 
  800420d2ea:	ff d0                	callq  *%rax
  800420d2ec:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d2f3:	00 00 00 
  800420d2f6:	ff d0                	callq  *%rax
  800420d2f8:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d2ff:	00 00 00 
  800420d302:	48 98                	cltq   
  800420d304:	48 c1 e0 03          	shl    $0x3,%rax
  800420d308:	48 89 c1             	mov    %rax,%rcx
  800420d30b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d30f:	48 01 c8             	add    %rcx,%rax
  800420d312:	48 01 d0             	add    %rdx,%rax
  800420d315:	48 83 c0 08          	add    $0x8,%rax
  800420d319:	48 8b 10             	mov    (%rax),%rdx
  800420d31c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d320:	48 89 c6             	mov    %rax,%rsi
  800420d323:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d328:	48 89 d7             	mov    %rdx,%rdi
  800420d32b:	48 89 c1             	mov    %rax,%rcx
  800420d32e:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d331:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d338:	00 00 00 
  800420d33b:	ff d0                	callq  *%rax
  800420d33d:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d344:	00 00 00 
  800420d347:	48 98                	cltq   
  800420d349:	48 c1 e0 03          	shl    $0x3,%rax
  800420d34d:	48 89 c1             	mov    %rax,%rcx
  800420d350:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d354:	48 01 c8             	add    %rcx,%rax
  800420d357:	48 01 d0             	add    %rdx,%rax
  800420d35a:	48 83 c0 08          	add    $0x8,%rax
  800420d35e:	48 8b 00             	mov    (%rax),%rax
  800420d361:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d365:	48 b8 90 e2 4d 04 80 	movabs $0x80044de290,%rax
  800420d36c:	00 00 00 
  800420d36f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d373:	48 89 10             	mov    %rdx,(%rax)
  800420d376:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d37a:	48 89 c7             	mov    %rax,%rdi
  800420d37d:	48 b8 c6 ce 20 04 80 	movabs $0x800420cec6,%rax
  800420d384:	00 00 00 
  800420d387:	ff d0                	callq  *%rax
  800420d389:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d390:	00 00 00 
  800420d393:	ff d0                	callq  *%rax
  800420d395:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d39c:	00 00 00 
  800420d39f:	48 98                	cltq   
  800420d3a1:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3a5:	48 89 c1             	mov    %rax,%rcx
  800420d3a8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3ac:	48 01 c8             	add    %rcx,%rax
  800420d3af:	48 01 d0             	add    %rdx,%rax
  800420d3b2:	48 83 c0 08          	add    $0x8,%rax
  800420d3b6:	48 8b 00             	mov    (%rax),%rax
  800420d3b9:	48 85 c0             	test   %rax,%rax
  800420d3bc:	74 7a                	je     800420d438 <trap+0x351>
  800420d3be:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d3c5:	00 00 00 
  800420d3c8:	ff d0                	callq  *%rax
  800420d3ca:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d3d1:	00 00 00 
  800420d3d4:	48 98                	cltq   
  800420d3d6:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3da:	48 89 c1             	mov    %rax,%rcx
  800420d3dd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3e1:	48 01 c8             	add    %rcx,%rax
  800420d3e4:	48 01 d0             	add    %rdx,%rax
  800420d3e7:	48 83 c0 08          	add    $0x8,%rax
  800420d3eb:	48 8b 00             	mov    (%rax),%rax
  800420d3ee:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d3f4:	83 f8 03             	cmp    $0x3,%eax
  800420d3f7:	75 3f                	jne    800420d438 <trap+0x351>
  800420d3f9:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d400:	00 00 00 
  800420d403:	ff d0                	callq  *%rax
  800420d405:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d40c:	00 00 00 
  800420d40f:	48 98                	cltq   
  800420d411:	48 c1 e0 03          	shl    $0x3,%rax
  800420d415:	48 89 c1             	mov    %rax,%rcx
  800420d418:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d41c:	48 01 c8             	add    %rcx,%rax
  800420d41f:	48 01 d0             	add    %rdx,%rax
  800420d422:	48 83 c0 08          	add    $0x8,%rax
  800420d426:	48 8b 00             	mov    (%rax),%rax
  800420d429:	48 89 c7             	mov    %rax,%rdi
  800420d42c:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420d433:	00 00 00 
  800420d436:	ff d0                	callq  *%rax
  800420d438:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420d43f:	00 00 00 
  800420d442:	ff d0                	callq  *%rax

000000800420d444 <page_fault_handler>:
  800420d444:	55                   	push   %rbp
  800420d445:	48 89 e5             	mov    %rsp,%rbp
  800420d448:	53                   	push   %rbx
  800420d449:	48 83 ec 38          	sub    $0x38,%rsp
  800420d44d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420d451:	0f 20 d0             	mov    %cr2,%rax
  800420d454:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420d458:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d45c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420d460:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d464:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d46b:	0f b7 c0             	movzwl %ax,%eax
  800420d46e:	83 e0 03             	and    $0x3,%eax
  800420d471:	85 c0                	test   %eax,%eax
  800420d473:	75 3d                	jne    800420d4b2 <page_fault_handler+0x6e>
  800420d475:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d479:	48 89 c7             	mov    %rax,%rdi
  800420d47c:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d483:	00 00 00 
  800420d486:	ff d0                	callq  *%rax
  800420d488:	48 ba 6c 00 22 04 80 	movabs $0x800422006c,%rdx
  800420d48f:	00 00 00 
  800420d492:	be de 01 00 00       	mov    $0x1de,%esi
  800420d497:	48 bf 28 00 22 04 80 	movabs $0x8004220028,%rdi
  800420d49e:	00 00 00 
  800420d4a1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4a6:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d4ad:	00 00 00 
  800420d4b0:	ff d1                	callq  *%rcx
  800420d4b2:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d4b9:	00 00 00 
  800420d4bc:	ff d0                	callq  *%rax
  800420d4be:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d4c5:	00 00 00 
  800420d4c8:	48 98                	cltq   
  800420d4ca:	48 c1 e0 03          	shl    $0x3,%rax
  800420d4ce:	48 89 c1             	mov    %rax,%rcx
  800420d4d1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d4d5:	48 01 c8             	add    %rcx,%rax
  800420d4d8:	48 01 d0             	add    %rdx,%rax
  800420d4db:	48 83 c0 08          	add    $0x8,%rax
  800420d4df:	48 8b 00             	mov    (%rax),%rax
  800420d4e2:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d4e9:	48 85 c0             	test   %rax,%rax
  800420d4ec:	0f 85 b8 00 00 00    	jne    800420d5aa <page_fault_handler+0x166>
  800420d4f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d4f6:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420d4fd:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d504:	00 00 00 
  800420d507:	ff d0                	callq  *%rax
  800420d509:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d510:	00 00 00 
  800420d513:	48 98                	cltq   
  800420d515:	48 c1 e0 03          	shl    $0x3,%rax
  800420d519:	48 89 c1             	mov    %rax,%rcx
  800420d51c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d520:	48 01 c8             	add    %rcx,%rax
  800420d523:	48 01 d0             	add    %rdx,%rax
  800420d526:	48 83 c0 08          	add    $0x8,%rax
  800420d52a:	48 8b 00             	mov    (%rax),%rax
  800420d52d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d533:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d537:	48 89 d9             	mov    %rbx,%rcx
  800420d53a:	89 c6                	mov    %eax,%esi
  800420d53c:	48 bf 78 00 22 04 80 	movabs $0x8004220078,%rdi
  800420d543:	00 00 00 
  800420d546:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d54b:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420d552:	00 00 00 
  800420d555:	41 ff d0             	callq  *%r8
  800420d558:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d55c:	48 89 c7             	mov    %rax,%rdi
  800420d55f:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d566:	00 00 00 
  800420d569:	ff d0                	callq  *%rax
  800420d56b:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d572:	00 00 00 
  800420d575:	ff d0                	callq  *%rax
  800420d577:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d57e:	00 00 00 
  800420d581:	48 98                	cltq   
  800420d583:	48 c1 e0 03          	shl    $0x3,%rax
  800420d587:	48 89 c1             	mov    %rax,%rcx
  800420d58a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d58e:	48 01 c8             	add    %rcx,%rax
  800420d591:	48 01 d0             	add    %rdx,%rax
  800420d594:	48 83 c0 08          	add    $0x8,%rax
  800420d598:	48 8b 00             	mov    (%rax),%rax
  800420d59b:	48 89 c7             	mov    %rax,%rdi
  800420d59e:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420d5a5:	00 00 00 
  800420d5a8:	ff d0                	callq  *%rax
  800420d5aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5ae:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5b5:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420d5ba:	48 39 c2             	cmp    %rax,%rdx
  800420d5bd:	76 2c                	jbe    800420d5eb <page_fault_handler+0x1a7>
  800420d5bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5c3:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5ca:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420d5cf:	48 39 c2             	cmp    %rax,%rdx
  800420d5d2:	77 17                	ja     800420d5eb <page_fault_handler+0x1a7>
  800420d5d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5d8:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420d5df:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420d5e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5e9:	eb 09                	jmp    800420d5f4 <page_fault_handler+0x1b0>
  800420d5eb:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420d5f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5f4:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d5fb:	00 00 00 
  800420d5fe:	ff d0                	callq  *%rax
  800420d600:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d607:	00 00 00 
  800420d60a:	48 98                	cltq   
  800420d60c:	48 c1 e0 03          	shl    $0x3,%rax
  800420d610:	48 89 c1             	mov    %rax,%rcx
  800420d613:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d617:	48 01 c8             	add    %rcx,%rax
  800420d61a:	48 01 d0             	add    %rdx,%rax
  800420d61d:	48 83 c0 08          	add    $0x8,%rax
  800420d621:	48 8b 00             	mov    (%rax),%rax
  800420d624:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420d628:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420d62d:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420d632:	48 89 c7             	mov    %rax,%rdi
  800420d635:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420d63c:	00 00 00 
  800420d63f:	ff d0                	callq  *%rax
  800420d641:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d645:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d649:	48 89 10             	mov    %rdx,(%rax)
  800420d64c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d650:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420d657:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d65b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420d65f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d663:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d667:	48 8b 0a             	mov    (%rdx),%rcx
  800420d66a:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420d66e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420d672:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420d676:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420d67a:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420d67e:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420d682:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420d686:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420d68a:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420d68e:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420d692:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420d696:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420d69a:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420d69e:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420d6a2:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420d6a6:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420d6aa:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420d6ae:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420d6b2:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420d6b6:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420d6ba:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420d6be:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420d6c2:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420d6c6:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420d6ca:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420d6ce:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420d6d2:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420d6d6:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420d6da:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420d6e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6e5:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d6ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d6f0:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d6f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6fb:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d702:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d706:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d70d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d711:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d718:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d71c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d723:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d727:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d72b:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d732:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d739:	00 00 00 
  800420d73c:	ff d0                	callq  *%rax
  800420d73e:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d745:	00 00 00 
  800420d748:	48 98                	cltq   
  800420d74a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d74e:	48 89 c1             	mov    %rax,%rcx
  800420d751:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d755:	48 01 c8             	add    %rcx,%rax
  800420d758:	48 01 d0             	add    %rdx,%rax
  800420d75b:	48 83 c0 08          	add    $0x8,%rax
  800420d75f:	48 8b 00             	mov    (%rax),%rax
  800420d762:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d769:	48 89 c2             	mov    %rax,%rdx
  800420d76c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d770:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d777:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d77e:	00 00 00 
  800420d781:	ff d0                	callq  *%rax
  800420d783:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d78a:	00 00 00 
  800420d78d:	48 98                	cltq   
  800420d78f:	48 c1 e0 03          	shl    $0x3,%rax
  800420d793:	48 89 c1             	mov    %rax,%rcx
  800420d796:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d79a:	48 01 c8             	add    %rcx,%rax
  800420d79d:	48 01 d0             	add    %rdx,%rax
  800420d7a0:	48 83 c0 08          	add    $0x8,%rax
  800420d7a4:	48 8b 00             	mov    (%rax),%rax
  800420d7a7:	48 89 c7             	mov    %rax,%rdi
  800420d7aa:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420d7b1:	00 00 00 
  800420d7b4:	ff d0                	callq  *%rax
  800420d7b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  800420d7bd:	00 00 00 

000000800420d7c0 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d7c0:	6a 00                	pushq  $0x0
  800420d7c2:	6a 00                	pushq  $0x0
  800420d7c4:	e9 f7 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7c9:	90                   	nop

000000800420d7ca <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d7ca:	6a 00                	pushq  $0x0
  800420d7cc:	6a 01                	pushq  $0x1
  800420d7ce:	e9 ed 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7d3:	90                   	nop

000000800420d7d4 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d7d4:	6a 00                	pushq  $0x0
  800420d7d6:	6a 02                	pushq  $0x2
  800420d7d8:	e9 e3 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7dd:	90                   	nop

000000800420d7de <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d7de:	6a 00                	pushq  $0x0
  800420d7e0:	6a 03                	pushq  $0x3
  800420d7e2:	e9 d9 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7e7:	90                   	nop

000000800420d7e8 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d7e8:	6a 00                	pushq  $0x0
  800420d7ea:	6a 04                	pushq  $0x4
  800420d7ec:	e9 cf 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7f1:	90                   	nop

000000800420d7f2 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d7f2:	6a 00                	pushq  $0x0
  800420d7f4:	6a 05                	pushq  $0x5
  800420d7f6:	e9 c5 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d7fb:	90                   	nop

000000800420d7fc <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d7fc:	6a 00                	pushq  $0x0
  800420d7fe:	6a 06                	pushq  $0x6
  800420d800:	e9 bb 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d805:	90                   	nop

000000800420d806 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d806:	6a 00                	pushq  $0x0
  800420d808:	6a 07                	pushq  $0x7
  800420d80a:	e9 b1 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d80f:	90                   	nop

000000800420d810 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d810:	6a 08                	pushq  $0x8
  800420d812:	e9 a9 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d817:	90                   	nop

000000800420d818 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d818:	6a 0a                	pushq  $0xa
  800420d81a:	e9 a1 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d81f:	90                   	nop

000000800420d820 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d820:	6a 0b                	pushq  $0xb
  800420d822:	e9 99 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d827:	90                   	nop

000000800420d828 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d828:	6a 0c                	pushq  $0xc
  800420d82a:	e9 91 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d82f:	90                   	nop

000000800420d830 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d830:	6a 0d                	pushq  $0xd
  800420d832:	e9 89 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d837:	90                   	nop

000000800420d838 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d838:	6a 0e                	pushq  $0xe
  800420d83a:	e9 81 00 00 00       	jmpq   800420d8c0 <_alltraps>
  800420d83f:	90                   	nop

000000800420d840 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d840:	6a 00                	pushq  $0x0
  800420d842:	6a 10                	pushq  $0x10
  800420d844:	eb 7a                	jmp    800420d8c0 <_alltraps>

000000800420d846 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d846:	6a 11                	pushq  $0x11
  800420d848:	eb 76                	jmp    800420d8c0 <_alltraps>

000000800420d84a <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d84a:	6a 00                	pushq  $0x0
  800420d84c:	6a 12                	pushq  $0x12
  800420d84e:	eb 70                	jmp    800420d8c0 <_alltraps>

000000800420d850 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d850:	6a 00                	pushq  $0x0
  800420d852:	6a 20                	pushq  $0x20
  800420d854:	eb 6a                	jmp    800420d8c0 <_alltraps>

000000800420d856 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d856:	6a 00                	pushq  $0x0
  800420d858:	6a 21                	pushq  $0x21
  800420d85a:	eb 64                	jmp    800420d8c0 <_alltraps>

000000800420d85c <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d85c:	6a 00                	pushq  $0x0
  800420d85e:	6a 22                	pushq  $0x22
  800420d860:	eb 5e                	jmp    800420d8c0 <_alltraps>

000000800420d862 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d862:	6a 00                	pushq  $0x0
  800420d864:	6a 23                	pushq  $0x23
  800420d866:	eb 58                	jmp    800420d8c0 <_alltraps>

000000800420d868 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d868:	6a 00                	pushq  $0x0
  800420d86a:	6a 24                	pushq  $0x24
  800420d86c:	eb 52                	jmp    800420d8c0 <_alltraps>

000000800420d86e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d86e:	6a 00                	pushq  $0x0
  800420d870:	6a 25                	pushq  $0x25
  800420d872:	eb 4c                	jmp    800420d8c0 <_alltraps>

000000800420d874 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d874:	6a 00                	pushq  $0x0
  800420d876:	6a 26                	pushq  $0x26
  800420d878:	eb 46                	jmp    800420d8c0 <_alltraps>

000000800420d87a <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d87a:	6a 00                	pushq  $0x0
  800420d87c:	6a 27                	pushq  $0x27
  800420d87e:	eb 40                	jmp    800420d8c0 <_alltraps>

000000800420d880 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d880:	6a 00                	pushq  $0x0
  800420d882:	6a 28                	pushq  $0x28
  800420d884:	eb 3a                	jmp    800420d8c0 <_alltraps>

000000800420d886 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d886:	6a 00                	pushq  $0x0
  800420d888:	6a 29                	pushq  $0x29
  800420d88a:	eb 34                	jmp    800420d8c0 <_alltraps>

000000800420d88c <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d88c:	6a 00                	pushq  $0x0
  800420d88e:	6a 2a                	pushq  $0x2a
  800420d890:	eb 2e                	jmp    800420d8c0 <_alltraps>

000000800420d892 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d892:	6a 00                	pushq  $0x0
  800420d894:	6a 2b                	pushq  $0x2b
  800420d896:	eb 28                	jmp    800420d8c0 <_alltraps>

000000800420d898 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d898:	6a 00                	pushq  $0x0
  800420d89a:	6a 2c                	pushq  $0x2c
  800420d89c:	eb 22                	jmp    800420d8c0 <_alltraps>

000000800420d89e <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d89e:	6a 00                	pushq  $0x0
  800420d8a0:	6a 2d                	pushq  $0x2d
  800420d8a2:	eb 1c                	jmp    800420d8c0 <_alltraps>

000000800420d8a4 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d8a4:	6a 00                	pushq  $0x0
  800420d8a6:	6a 2e                	pushq  $0x2e
  800420d8a8:	eb 16                	jmp    800420d8c0 <_alltraps>

000000800420d8aa <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d8aa:	6a 00                	pushq  $0x0
  800420d8ac:	6a 2f                	pushq  $0x2f
  800420d8ae:	eb 10                	jmp    800420d8c0 <_alltraps>

000000800420d8b0 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d8b0:	6a 00                	pushq  $0x0
  800420d8b2:	6a 30                	pushq  $0x30
  800420d8b4:	eb 0a                	jmp    800420d8c0 <_alltraps>

000000800420d8b6 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d8b6:	68 f4 01 00 00       	pushq  $0x1f4
  800420d8bb:	eb 03                	jmp    800420d8c0 <_alltraps>
  800420d8bd:	0f 1f 00             	nopl   (%rax)

000000800420d8c0 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d8c0:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d8c4:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d8c8:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d8cb:	48 83 ec 78          	sub    $0x78,%rsp
  800420d8cf:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d8d4:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d8d9:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d8de:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d8e3:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d8e8:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d8ed:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d8f2:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d8f7:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d8fc:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d901:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d906:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d90b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d910:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d915:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d919:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d91e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d920:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d922:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d924:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d926:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d928:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d92b:	e8 b7 f7 ff ff       	callq  800420d0e7 <trap>

000000800420d930 <spin>:
spin:	jmp spin
  800420d930:	eb fe                	jmp    800420d930 <spin>

000000800420d932 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d932:	55                   	push   %rbp
  800420d933:	48 89 e5             	mov    %rsp,%rbp
  800420d936:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d93a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d93e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d941:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d945:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d948:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d94c:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d94f:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d952:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d955:	c9                   	leaveq 
  800420d956:	c3                   	retq   

000000800420d957 <unlock_kernel>:
  800420d957:	55                   	push   %rbp
  800420d958:	48 89 e5             	mov    %rsp,%rbp
  800420d95b:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800420d962:	00 00 00 
  800420d965:	48 b8 2c 82 21 04 80 	movabs $0x800421822c,%rax
  800420d96c:	00 00 00 
  800420d96f:	ff d0                	callq  *%rax
  800420d971:	f3 90                	pause  
  800420d973:	5d                   	pop    %rbp
  800420d974:	c3                   	retq   

000000800420d975 <vmxon>:
  800420d975:	55                   	push   %rbp
  800420d976:	48 89 e5             	mov    %rsp,%rbp
  800420d979:	48 83 ec 10          	sub    $0x10,%rsp
  800420d97d:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420d984:	00 00 00 
  800420d987:	ff d0                	callq  *%rax
  800420d989:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420d990:	00 00 00 
  800420d993:	48 98                	cltq   
  800420d995:	48 c1 e0 03          	shl    $0x3,%rax
  800420d999:	48 89 c1             	mov    %rax,%rcx
  800420d99c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d9a0:	48 01 c8             	add    %rcx,%rax
  800420d9a3:	48 01 d0             	add    %rdx,%rax
  800420d9a6:	48 83 c0 70          	add    $0x70,%rax
  800420d9aa:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  800420d9ae:	83 f0 01             	xor    $0x1,%eax
  800420d9b1:	84 c0                	test   %al,%al
  800420d9b3:	74 5a                	je     800420da0f <vmxon+0x9a>
  800420d9b5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9ba:	48 ba a2 b8 21 04 80 	movabs $0x800421b8a2,%rdx
  800420d9c1:	00 00 00 
  800420d9c4:	ff d2                	callq  *%rdx
  800420d9c6:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d9c9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d9cd:	79 25                	jns    800420d9f4 <vmxon+0x7f>
  800420d9cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9d2:	89 c6                	mov    %eax,%esi
  800420d9d4:	48 bf 80 02 22 04 80 	movabs $0x8004220280,%rdi
  800420d9db:	00 00 00 
  800420d9de:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9e3:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420d9ea:	00 00 00 
  800420d9ed:	ff d2                	callq  *%rdx
  800420d9ef:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9f2:	eb 20                	jmp    800420da14 <vmxon+0x9f>
  800420d9f4:	48 bf 9b 02 22 04 80 	movabs $0x800422029b,%rdi
  800420d9fb:	00 00 00 
  800420d9fe:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da03:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420da0a:	00 00 00 
  800420da0d:	ff d2                	callq  *%rdx
  800420da0f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da14:	c9                   	leaveq 
  800420da15:	c3                   	retq   

000000800420da16 <sched_yield>:
  800420da16:	55                   	push   %rbp
  800420da17:	48 89 e5             	mov    %rsp,%rbp
  800420da1a:	53                   	push   %rbx
  800420da1b:	48 83 ec 18          	sub    $0x18,%rsp
  800420da1f:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420da26:	00 00 00 
  800420da29:	ff d0                	callq  *%rax
  800420da2b:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420da32:	00 00 00 
  800420da35:	48 98                	cltq   
  800420da37:	48 c1 e0 03          	shl    $0x3,%rax
  800420da3b:	48 89 c1             	mov    %rax,%rcx
  800420da3e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da42:	48 01 c8             	add    %rcx,%rax
  800420da45:	48 01 d0             	add    %rdx,%rax
  800420da48:	48 83 c0 08          	add    $0x8,%rax
  800420da4c:	48 8b 00             	mov    (%rax),%rax
  800420da4f:	48 85 c0             	test   %rax,%rax
  800420da52:	74 60                	je     800420dab4 <sched_yield+0x9e>
  800420da54:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420da5b:	00 00 00 
  800420da5e:	ff d0                	callq  *%rax
  800420da60:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420da67:	00 00 00 
  800420da6a:	48 98                	cltq   
  800420da6c:	48 c1 e0 03          	shl    $0x3,%rax
  800420da70:	48 89 c1             	mov    %rax,%rcx
  800420da73:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da77:	48 01 c8             	add    %rcx,%rax
  800420da7a:	48 01 d0             	add    %rdx,%rax
  800420da7d:	48 83 c0 08          	add    $0x8,%rax
  800420da81:	48 8b 00             	mov    (%rax),%rax
  800420da84:	48 89 c2             	mov    %rax,%rdx
  800420da87:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420da8e:	00 00 00 
  800420da91:	48 8b 00             	mov    (%rax),%rax
  800420da94:	48 29 c2             	sub    %rax,%rdx
  800420da97:	48 89 d0             	mov    %rdx,%rax
  800420da9a:	48 c1 f8 03          	sar    $0x3,%rax
  800420da9e:	48 89 c2             	mov    %rax,%rdx
  800420daa1:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420daa8:	fa a4 4f 
  800420daab:	48 0f af c2          	imul   %rdx,%rax
  800420daaf:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420dab2:	eb 07                	jmp    800420dabb <sched_yield+0xa5>
  800420dab4:	c7 45 ec ff 03 00 00 	movl   $0x3ff,-0x14(%rbp)
  800420dabb:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  800420dac2:	e9 1b 01 00 00       	jmpq   800420dbe2 <sched_yield+0x1cc>
  800420dac7:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420daca:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420dacd:	01 c2                	add    %eax,%edx
  800420dacf:	89 d0                	mov    %edx,%eax
  800420dad1:	c1 f8 1f             	sar    $0x1f,%eax
  800420dad4:	c1 e8 16             	shr    $0x16,%eax
  800420dad7:	01 c2                	add    %eax,%edx
  800420dad9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420dadf:	29 c2                	sub    %eax,%edx
  800420dae1:	89 d0                	mov    %edx,%eax
  800420dae3:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420dae6:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420daed:	00 00 00 
  800420daf0:	48 8b 10             	mov    (%rax),%rdx
  800420daf3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420daf6:	48 98                	cltq   
  800420daf8:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420daff:	48 01 d0             	add    %rdx,%rax
  800420db02:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420db08:	83 f8 02             	cmp    $0x2,%eax
  800420db0b:	0f 85 cd 00 00 00    	jne    800420dbde <sched_yield+0x1c8>
  800420db11:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420db18:	00 00 00 
  800420db1b:	48 8b 10             	mov    (%rax),%rdx
  800420db1e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db21:	48 98                	cltq   
  800420db23:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db2a:	48 01 d0             	add    %rdx,%rax
  800420db2d:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420db33:	83 f8 03             	cmp    $0x3,%eax
  800420db36:	75 7b                	jne    800420dbb3 <sched_yield+0x19d>
  800420db38:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420db3f:	00 00 00 
  800420db42:	48 8b 10             	mov    (%rax),%rdx
  800420db45:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db48:	48 98                	cltq   
  800420db4a:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db51:	48 01 d0             	add    %rdx,%rax
  800420db54:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420db5a:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420db61:	00 00 00 
  800420db64:	ff d0                	callq  *%rax
  800420db66:	39 c3                	cmp    %eax,%ebx
  800420db68:	74 02                	je     800420db6c <sched_yield+0x156>
  800420db6a:	eb 72                	jmp    800420dbde <sched_yield+0x1c8>
  800420db6c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420db71:	48 ba 75 d9 20 04 80 	movabs $0x800420d975,%rdx
  800420db78:	00 00 00 
  800420db7b:	ff d2                	callq  *%rdx
  800420db7d:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420db80:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420db84:	79 2d                	jns    800420dbb3 <sched_yield+0x19d>
  800420db86:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420db8d:	00 00 00 
  800420db90:	48 8b 10             	mov    (%rax),%rdx
  800420db93:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db96:	48 98                	cltq   
  800420db98:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db9f:	48 01 d0             	add    %rdx,%rax
  800420dba2:	48 89 c7             	mov    %rax,%rdi
  800420dba5:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420dbac:	00 00 00 
  800420dbaf:	ff d0                	callq  *%rax
  800420dbb1:	eb 2b                	jmp    800420dbde <sched_yield+0x1c8>
  800420dbb3:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420dbba:	00 00 00 
  800420dbbd:	48 8b 10             	mov    (%rax),%rdx
  800420dbc0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dbc3:	48 98                	cltq   
  800420dbc5:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbcc:	48 01 d0             	add    %rdx,%rax
  800420dbcf:	48 89 c7             	mov    %rax,%rdi
  800420dbd2:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420dbd9:	00 00 00 
  800420dbdc:	ff d0                	callq  *%rax
  800420dbde:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420dbe2:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%rbp)
  800420dbe9:	0f 8e d8 fe ff ff    	jle    800420dac7 <sched_yield+0xb1>
  800420dbef:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420dbf6:	00 00 00 
  800420dbf9:	ff d0                	callq  *%rax
  800420dbfb:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420dc02:	00 00 00 
  800420dc05:	48 98                	cltq   
  800420dc07:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc0b:	48 89 c1             	mov    %rax,%rcx
  800420dc0e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc12:	48 01 c8             	add    %rcx,%rax
  800420dc15:	48 01 d0             	add    %rdx,%rax
  800420dc18:	48 83 c0 08          	add    $0x8,%rax
  800420dc1c:	48 8b 00             	mov    (%rax),%rax
  800420dc1f:	48 85 c0             	test   %rax,%rax
  800420dc22:	0f 84 4d 01 00 00    	je     800420dd75 <sched_yield+0x35f>
  800420dc28:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420dc2f:	00 00 00 
  800420dc32:	ff d0                	callq  *%rax
  800420dc34:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420dc3b:	00 00 00 
  800420dc3e:	48 98                	cltq   
  800420dc40:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc44:	48 89 c1             	mov    %rax,%rcx
  800420dc47:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc4b:	48 01 c8             	add    %rcx,%rax
  800420dc4e:	48 01 d0             	add    %rdx,%rax
  800420dc51:	48 83 c0 08          	add    $0x8,%rax
  800420dc55:	48 8b 00             	mov    (%rax),%rax
  800420dc58:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dc5e:	83 f8 03             	cmp    $0x3,%eax
  800420dc61:	0f 85 0e 01 00 00    	jne    800420dd75 <sched_yield+0x35f>
  800420dc67:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420dc6e:	00 00 00 
  800420dc71:	48 8b 10             	mov    (%rax),%rdx
  800420dc74:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dc77:	48 98                	cltq   
  800420dc79:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dc80:	48 01 d0             	add    %rdx,%rax
  800420dc83:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420dc89:	83 f8 03             	cmp    $0x3,%eax
  800420dc8c:	0f 85 a4 00 00 00    	jne    800420dd36 <sched_yield+0x320>
  800420dc92:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420dc99:	00 00 00 
  800420dc9c:	ff d0                	callq  *%rax
  800420dc9e:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420dca5:	00 00 00 
  800420dca8:	48 98                	cltq   
  800420dcaa:	48 c1 e0 03          	shl    $0x3,%rax
  800420dcae:	48 89 c1             	mov    %rax,%rcx
  800420dcb1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dcb5:	48 01 c8             	add    %rcx,%rax
  800420dcb8:	48 01 d0             	add    %rdx,%rax
  800420dcbb:	48 83 c0 08          	add    $0x8,%rax
  800420dcbf:	48 8b 00             	mov    (%rax),%rax
  800420dcc2:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420dcc8:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420dccf:	00 00 00 
  800420dcd2:	ff d0                	callq  *%rax
  800420dcd4:	39 c3                	cmp    %eax,%ebx
  800420dcd6:	74 05                	je     800420dcdd <sched_yield+0x2c7>
  800420dcd8:	e9 a4 00 00 00       	jmpq   800420dd81 <sched_yield+0x36b>
  800420dcdd:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dce2:	48 ba 75 d9 20 04 80 	movabs $0x800420d975,%rdx
  800420dce9:	00 00 00 
  800420dcec:	ff d2                	callq  *%rdx
  800420dcee:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420dcf1:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420dcf5:	79 3f                	jns    800420dd36 <sched_yield+0x320>
  800420dcf7:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420dcfe:	00 00 00 
  800420dd01:	ff d0                	callq  *%rax
  800420dd03:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420dd0a:	00 00 00 
  800420dd0d:	48 98                	cltq   
  800420dd0f:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd13:	48 89 c1             	mov    %rax,%rcx
  800420dd16:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd1a:	48 01 c8             	add    %rcx,%rax
  800420dd1d:	48 01 d0             	add    %rdx,%rax
  800420dd20:	48 83 c0 08          	add    $0x8,%rax
  800420dd24:	48 8b 00             	mov    (%rax),%rax
  800420dd27:	48 89 c7             	mov    %rax,%rdi
  800420dd2a:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420dd31:	00 00 00 
  800420dd34:	ff d0                	callq  *%rax
  800420dd36:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420dd3d:	00 00 00 
  800420dd40:	ff d0                	callq  *%rax
  800420dd42:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420dd49:	00 00 00 
  800420dd4c:	48 98                	cltq   
  800420dd4e:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd52:	48 89 c1             	mov    %rax,%rcx
  800420dd55:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd59:	48 01 c8             	add    %rcx,%rax
  800420dd5c:	48 01 d0             	add    %rdx,%rax
  800420dd5f:	48 83 c0 08          	add    $0x8,%rax
  800420dd63:	48 8b 00             	mov    (%rax),%rax
  800420dd66:	48 89 c7             	mov    %rax,%rdi
  800420dd69:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420dd70:	00 00 00 
  800420dd73:	ff d0                	callq  *%rax
  800420dd75:	48 b8 88 dd 20 04 80 	movabs $0x800420dd88,%rax
  800420dd7c:	00 00 00 
  800420dd7f:	ff d0                	callq  *%rax
  800420dd81:	48 83 c4 18          	add    $0x18,%rsp
  800420dd85:	5b                   	pop    %rbx
  800420dd86:	5d                   	pop    %rbp
  800420dd87:	c3                   	retq   

000000800420dd88 <sched_halt>:
  800420dd88:	55                   	push   %rbp
  800420dd89:	48 89 e5             	mov    %rsp,%rbp
  800420dd8c:	48 83 ec 20          	sub    $0x20,%rsp
  800420dd90:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420dd97:	eb 79                	jmp    800420de12 <sched_halt+0x8a>
  800420dd99:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420dda0:	00 00 00 
  800420dda3:	48 8b 10             	mov    (%rax),%rdx
  800420dda6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dda9:	48 98                	cltq   
  800420ddab:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420ddb2:	48 01 d0             	add    %rdx,%rax
  800420ddb5:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420ddbb:	83 f8 02             	cmp    $0x2,%eax
  800420ddbe:	74 5f                	je     800420de1f <sched_halt+0x97>
  800420ddc0:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420ddc7:	00 00 00 
  800420ddca:	48 8b 10             	mov    (%rax),%rdx
  800420ddcd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ddd0:	48 98                	cltq   
  800420ddd2:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420ddd9:	48 01 d0             	add    %rdx,%rax
  800420dddc:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dde2:	83 f8 03             	cmp    $0x3,%eax
  800420dde5:	74 38                	je     800420de1f <sched_halt+0x97>
  800420dde7:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800420ddee:	00 00 00 
  800420ddf1:	48 8b 10             	mov    (%rax),%rdx
  800420ddf4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ddf7:	48 98                	cltq   
  800420ddf9:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420de00:	48 01 d0             	add    %rdx,%rax
  800420de03:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420de09:	83 f8 01             	cmp    $0x1,%eax
  800420de0c:	74 11                	je     800420de1f <sched_halt+0x97>
  800420de0e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420de12:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420de19:	0f 8e 7a ff ff ff    	jle    800420dd99 <sched_halt+0x11>
  800420de1f:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420de26:	75 2e                	jne    800420de56 <sched_halt+0xce>
  800420de28:	48 bf a8 02 22 04 80 	movabs $0x80042202a8,%rdi
  800420de2f:	00 00 00 
  800420de32:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de37:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420de3e:	00 00 00 
  800420de41:	ff d2                	callq  *%rdx
  800420de43:	bf 00 00 00 00       	mov    $0x0,%edi
  800420de48:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420de4f:	00 00 00 
  800420de52:	ff d0                	callq  *%rax
  800420de54:	eb ed                	jmp    800420de43 <sched_halt+0xbb>
  800420de56:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420de5d:	00 00 00 
  800420de60:	ff d0                	callq  *%rax
  800420de62:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420de69:	00 00 00 
  800420de6c:	48 98                	cltq   
  800420de6e:	48 c1 e0 03          	shl    $0x3,%rax
  800420de72:	48 89 c1             	mov    %rax,%rcx
  800420de75:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de79:	48 01 c8             	add    %rcx,%rax
  800420de7c:	48 01 d0             	add    %rdx,%rax
  800420de7f:	48 83 c0 08          	add    $0x8,%rax
  800420de83:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420de8a:	48 b8 f0 c5 6d 04 80 	movabs $0x80046dc5f0,%rax
  800420de91:	00 00 00 
  800420de94:	48 8b 00             	mov    (%rax),%rax
  800420de97:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420de9b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420dea2:	00 00 00 
  800420dea5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420dea9:	77 32                	ja     800420dedd <sched_halt+0x155>
  800420deab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420deaf:	48 89 c1             	mov    %rax,%rcx
  800420deb2:	48 ba d8 02 22 04 80 	movabs $0x80042202d8,%rdx
  800420deb9:	00 00 00 
  800420debc:	be 76 00 00 00       	mov    $0x76,%esi
  800420dec1:	48 bf fc 02 22 04 80 	movabs $0x80042202fc,%rdi
  800420dec8:	00 00 00 
  800420decb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ded0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420ded7:	00 00 00 
  800420deda:	41 ff d0             	callq  *%r8
  800420dedd:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420dee4:	ff ff ff 
  800420dee7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420deeb:	48 01 d0             	add    %rdx,%rax
  800420deee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420def2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420def6:	0f 22 d8             	mov    %rax,%cr3
  800420def9:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420df00:	00 00 00 
  800420df03:	ff d0                	callq  *%rax
  800420df05:	48 98                	cltq   
  800420df07:	48 c1 e0 03          	shl    $0x3,%rax
  800420df0b:	48 89 c2             	mov    %rax,%rdx
  800420df0e:	48 c1 e2 04          	shl    $0x4,%rdx
  800420df12:	48 01 d0             	add    %rdx,%rax
  800420df15:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420df1c:	00 00 00 
  800420df1f:	48 01 d0             	add    %rdx,%rax
  800420df22:	48 83 c0 04          	add    $0x4,%rax
  800420df26:	be 02 00 00 00       	mov    $0x2,%esi
  800420df2b:	48 89 c7             	mov    %rax,%rdi
  800420df2e:	48 b8 32 d9 20 04 80 	movabs $0x800420d932,%rax
  800420df35:	00 00 00 
  800420df38:	ff d0                	callq  *%rax
  800420df3a:	48 b8 57 d9 20 04 80 	movabs $0x800420d957,%rax
  800420df41:	00 00 00 
  800420df44:	ff d0                	callq  *%rax
  800420df46:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420df4d:	00 00 00 
  800420df50:	ff d0                	callq  *%rax
  800420df52:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420df59:	00 00 00 
  800420df5c:	48 98                	cltq   
  800420df5e:	48 c1 e0 03          	shl    $0x3,%rax
  800420df62:	48 89 c1             	mov    %rax,%rcx
  800420df65:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df69:	48 01 c8             	add    %rcx,%rax
  800420df6c:	48 01 d0             	add    %rdx,%rax
  800420df6f:	48 83 c0 10          	add    $0x10,%rax
  800420df73:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420df77:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420df7e:	48 89 c4             	mov    %rax,%rsp
  800420df81:	6a 00                	pushq  $0x0
  800420df83:	6a 00                	pushq  $0x0
  800420df85:	fb                   	sti    
  800420df86:	f4                   	hlt    
  800420df87:	c9                   	leaveq 
  800420df88:	c3                   	retq   

000000800420df89 <page2ppn>:
  800420df89:	55                   	push   %rbp
  800420df8a:	48 89 e5             	mov    %rsp,%rbp
  800420df8d:	48 83 ec 08          	sub    $0x8,%rsp
  800420df91:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420df95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420df99:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  800420dfa0:	00 00 00 
  800420dfa3:	48 8b 00             	mov    (%rax),%rax
  800420dfa6:	48 29 c2             	sub    %rax,%rdx
  800420dfa9:	48 89 d0             	mov    %rdx,%rax
  800420dfac:	48 c1 f8 04          	sar    $0x4,%rax
  800420dfb0:	c9                   	leaveq 
  800420dfb1:	c3                   	retq   

000000800420dfb2 <page2pa>:
  800420dfb2:	55                   	push   %rbp
  800420dfb3:	48 89 e5             	mov    %rsp,%rbp
  800420dfb6:	48 83 ec 08          	sub    $0x8,%rsp
  800420dfba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420dfbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420dfc2:	48 89 c7             	mov    %rax,%rdi
  800420dfc5:	48 b8 89 df 20 04 80 	movabs $0x800420df89,%rax
  800420dfcc:	00 00 00 
  800420dfcf:	ff d0                	callq  *%rax
  800420dfd1:	48 c1 e0 0c          	shl    $0xc,%rax
  800420dfd5:	c9                   	leaveq 
  800420dfd6:	c3                   	retq   

000000800420dfd7 <page2kva>:
  800420dfd7:	55                   	push   %rbp
  800420dfd8:	48 89 e5             	mov    %rsp,%rbp
  800420dfdb:	48 83 ec 20          	sub    $0x20,%rsp
  800420dfdf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420dfe3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420dfe7:	48 89 c7             	mov    %rax,%rdi
  800420dfea:	48 b8 b2 df 20 04 80 	movabs $0x800420dfb2,%rax
  800420dff1:	00 00 00 
  800420dff4:	ff d0                	callq  *%rax
  800420dff6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420dffa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420dffe:	48 c1 e8 0c          	shr    $0xc,%rax
  800420e002:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420e005:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420e008:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800420e00f:	00 00 00 
  800420e012:	48 8b 00             	mov    (%rax),%rax
  800420e015:	48 39 c2             	cmp    %rax,%rdx
  800420e018:	72 32                	jb     800420e04c <page2kva+0x75>
  800420e01a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e01e:	48 89 c1             	mov    %rax,%rcx
  800420e021:	48 ba 10 03 22 04 80 	movabs $0x8004220310,%rdx
  800420e028:	00 00 00 
  800420e02b:	be 62 00 00 00       	mov    $0x62,%esi
  800420e030:	48 bf 33 03 22 04 80 	movabs $0x8004220333,%rdi
  800420e037:	00 00 00 
  800420e03a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e03f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420e046:	00 00 00 
  800420e049:	41 ff d0             	callq  *%r8
  800420e04c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420e053:	00 00 00 
  800420e056:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e05a:	48 01 d0             	add    %rdx,%rax
  800420e05d:	c9                   	leaveq 
  800420e05e:	c3                   	retq   

000000800420e05f <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  800420e05f:	55                   	push   %rbp
  800420e060:	48 89 e5             	mov    %rsp,%rbp
  800420e063:	48 83 ec 10          	sub    $0x10,%rsp
  800420e067:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e06b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	user_mem_assert(curenv, s, len, PTE_U);
  800420e06f:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420e076:	00 00 00 
  800420e079:	ff d0                	callq  *%rax
  800420e07b:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420e082:	00 00 00 
  800420e085:	48 98                	cltq   
  800420e087:	48 c1 e0 03          	shl    $0x3,%rax
  800420e08b:	48 89 c1             	mov    %rax,%rcx
  800420e08e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e092:	48 01 c8             	add    %rcx,%rax
  800420e095:	48 01 d0             	add    %rdx,%rax
  800420e098:	48 83 c0 08          	add    $0x8,%rax
  800420e09c:	48 8b 00             	mov    (%rax),%rax
  800420e09f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e0a3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e0a7:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e0ac:	48 89 c7             	mov    %rax,%rdi
  800420e0af:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e0b6:	00 00 00 
  800420e0b9:	ff d0                	callq  *%rax

	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
  800420e0bb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e0bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e0c3:	48 89 c6             	mov    %rax,%rsi
  800420e0c6:	48 bf 42 03 22 04 80 	movabs $0x8004220342,%rdi
  800420e0cd:	00 00 00 
  800420e0d0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e0d5:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e0dc:	00 00 00 
  800420e0df:	ff d1                	callq  *%rcx
}
  800420e0e1:	c9                   	leaveq 
  800420e0e2:	c3                   	retq   

000000800420e0e3 <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  800420e0e3:	55                   	push   %rbp
  800420e0e4:	48 89 e5             	mov    %rsp,%rbp
	return cons_getc();
  800420e0e7:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  800420e0ee:	00 00 00 
  800420e0f1:	ff d0                	callq  *%rax
}
  800420e0f3:	5d                   	pop    %rbp
  800420e0f4:	c3                   	retq   

000000800420e0f5 <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  800420e0f5:	55                   	push   %rbp
  800420e0f6:	48 89 e5             	mov    %rsp,%rbp
	return curenv->env_id;
  800420e0f9:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420e100:	00 00 00 
  800420e103:	ff d0                	callq  *%rax
  800420e105:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420e10c:	00 00 00 
  800420e10f:	48 98                	cltq   
  800420e111:	48 c1 e0 03          	shl    $0x3,%rax
  800420e115:	48 89 c1             	mov    %rax,%rcx
  800420e118:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e11c:	48 01 c8             	add    %rcx,%rax
  800420e11f:	48 01 d0             	add    %rdx,%rax
  800420e122:	48 83 c0 08          	add    $0x8,%rax
  800420e126:	48 8b 00             	mov    (%rax),%rax
  800420e129:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420e12f:	5d                   	pop    %rbp
  800420e130:	c3                   	retq   

000000800420e131 <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  800420e131:	55                   	push   %rbp
  800420e132:	48 89 e5             	mov    %rsp,%rbp
  800420e135:	48 83 ec 20          	sub    $0x20,%rsp
  800420e139:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e13c:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e140:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e143:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e148:	48 89 ce             	mov    %rcx,%rsi
  800420e14b:	89 c7                	mov    %eax,%edi
  800420e14d:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e154:	00 00 00 
  800420e157:	ff d0                	callq  *%rax
  800420e159:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e15c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e160:	79 05                	jns    800420e167 <sys_env_destroy+0x36>
		return r;
  800420e162:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e165:	eb 18                	jmp    800420e17f <sys_env_destroy+0x4e>
	env_destroy(e);
  800420e167:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e16b:	48 89 c7             	mov    %rax,%rdi
  800420e16e:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420e175:	00 00 00 
  800420e178:	ff d0                	callq  *%rax
	return 0;
  800420e17a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e17f:	c9                   	leaveq 
  800420e180:	c3                   	retq   

000000800420e181 <sys_yield>:

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
  800420e181:	55                   	push   %rbp
  800420e182:	48 89 e5             	mov    %rsp,%rbp
	sched_yield();
  800420e185:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420e18c:	00 00 00 
  800420e18f:	ff d0                	callq  *%rax

000000800420e191 <sys_exofork>:
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
  800420e191:	55                   	push   %rbp
  800420e192:	48 89 e5             	mov    %rsp,%rbp
  800420e195:	53                   	push   %rbx
  800420e196:	48 83 ec 18          	sub    $0x18,%rsp
	int r;
	struct Env *e;

	if ((r = env_alloc(&e, curenv->env_id)) < 0)
  800420e19a:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420e1a1:	00 00 00 
  800420e1a4:	ff d0                	callq  *%rax
  800420e1a6:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420e1ad:	00 00 00 
  800420e1b0:	48 98                	cltq   
  800420e1b2:	48 c1 e0 03          	shl    $0x3,%rax
  800420e1b6:	48 89 c1             	mov    %rax,%rcx
  800420e1b9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e1bd:	48 01 c8             	add    %rcx,%rax
  800420e1c0:	48 01 d0             	add    %rdx,%rax
  800420e1c3:	48 83 c0 08          	add    $0x8,%rax
  800420e1c7:	48 8b 00             	mov    (%rax),%rax
  800420e1ca:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420e1d0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420e1d4:	89 d6                	mov    %edx,%esi
  800420e1d6:	48 89 c7             	mov    %rax,%rdi
  800420e1d9:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  800420e1e0:	00 00 00 
  800420e1e3:	ff d0                	callq  *%rax
  800420e1e5:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e1e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e1ec:	79 05                	jns    800420e1f3 <sys_exofork+0x62>
		return r;
  800420e1ee:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e1f1:	eb 6c                	jmp    800420e25f <sys_exofork+0xce>
	e->env_status = ENV_NOT_RUNNABLE;
  800420e1f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e1f7:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e1fe:	00 00 00 
	e->env_tf = curenv->env_tf;
  800420e201:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420e205:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420e20c:	00 00 00 
  800420e20f:	ff d0                	callq  *%rax
  800420e211:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420e218:	00 00 00 
  800420e21b:	48 98                	cltq   
  800420e21d:	48 c1 e0 03          	shl    $0x3,%rax
  800420e221:	48 89 c1             	mov    %rax,%rcx
  800420e224:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e228:	48 01 c8             	add    %rcx,%rax
  800420e22b:	48 01 d0             	add    %rdx,%rax
  800420e22e:	48 83 c0 08          	add    $0x8,%rax
  800420e232:	48 8b 00             	mov    (%rax),%rax
  800420e235:	48 89 da             	mov    %rbx,%rdx
  800420e238:	48 89 c6             	mov    %rax,%rsi
  800420e23b:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e240:	48 89 d7             	mov    %rdx,%rdi
  800420e243:	48 89 c1             	mov    %rax,%rcx
  800420e246:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	e->env_tf.tf_regs.reg_rax = 0;
  800420e249:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e24d:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e254:	00 
	return e->env_id;
  800420e255:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e259:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420e25f:	48 83 c4 18          	add    $0x18,%rsp
  800420e263:	5b                   	pop    %rbx
  800420e264:	5d                   	pop    %rbp
  800420e265:	c3                   	retq   

000000800420e266 <sys_env_set_status>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
  800420e266:	55                   	push   %rbp
  800420e267:	48 89 e5             	mov    %rsp,%rbp
  800420e26a:	48 83 ec 20          	sub    $0x20,%rsp
  800420e26e:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e271:	89 75 e8             	mov    %esi,-0x18(%rbp)
	struct Env *e;
	int r;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e274:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e278:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e27b:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e280:	48 89 ce             	mov    %rcx,%rsi
  800420e283:	89 c7                	mov    %eax,%edi
  800420e285:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e28c:	00 00 00 
  800420e28f:	ff d0                	callq  *%rax
  800420e291:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e294:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e298:	79 05                	jns    800420e29f <sys_env_set_status+0x39>
		return r;
  800420e29a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e29d:	eb 25                	jmp    800420e2c4 <sys_env_set_status+0x5e>
	if (status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE)
  800420e29f:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420e2a3:	74 0d                	je     800420e2b2 <sys_env_set_status+0x4c>
  800420e2a5:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420e2a9:	74 07                	je     800420e2b2 <sys_env_set_status+0x4c>
		return -E_INVAL;
  800420e2ab:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e2b0:	eb 12                	jmp    800420e2c4 <sys_env_set_status+0x5e>
	e->env_status = status;
  800420e2b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e2b6:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420e2b9:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
	return 0;
  800420e2bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e2c4:	c9                   	leaveq 
  800420e2c5:	c3                   	retq   

000000800420e2c6 <sys_env_set_trapframe>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  800420e2c6:	55                   	push   %rbp
  800420e2c7:	48 89 e5             	mov    %rsp,%rbp
  800420e2ca:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420e2d1:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420e2d7:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
	int r;
	struct Env *e;
	struct Trapframe ltf;

	user_mem_assert(curenv, tf, sizeof(struct Trapframe), PTE_U);
  800420e2de:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420e2e5:	00 00 00 
  800420e2e8:	ff d0                	callq  *%rax
  800420e2ea:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420e2f1:	00 00 00 
  800420e2f4:	48 98                	cltq   
  800420e2f6:	48 c1 e0 03          	shl    $0x3,%rax
  800420e2fa:	48 89 c1             	mov    %rax,%rcx
  800420e2fd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e301:	48 01 c8             	add    %rcx,%rax
  800420e304:	48 01 d0             	add    %rdx,%rax
  800420e307:	48 83 c0 08          	add    $0x8,%rax
  800420e30b:	48 8b 00             	mov    (%rax),%rax
  800420e30e:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420e315:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e31a:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420e31f:	48 89 c7             	mov    %rax,%rdi
  800420e322:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e329:	00 00 00 
  800420e32c:	ff d0                	callq  *%rax
	ltf = *tf;
  800420e32e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420e335:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420e33c:	48 89 c6             	mov    %rax,%rsi
  800420e33f:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e344:	48 89 d7             	mov    %rdx,%rdi
  800420e347:	48 89 c1             	mov    %rax,%rcx
  800420e34a:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	ltf.tf_eflags |= FL_IF;
  800420e34d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e351:	80 cc 02             	or     $0x2,%ah
  800420e354:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ltf.tf_cs |= 3;
  800420e358:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420e35c:	83 c8 03             	or     $0x3,%eax
  800420e35f:	66 89 45 d0          	mov    %ax,-0x30(%rbp)

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e363:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e367:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420e36d:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e372:	48 89 ce             	mov    %rcx,%rsi
  800420e375:	89 c7                	mov    %eax,%edi
  800420e377:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e37e:	00 00 00 
  800420e381:	ff d0                	callq  *%rax
  800420e383:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e386:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e38a:	79 05                	jns    800420e391 <sys_env_set_trapframe+0xcb>
		return r;
  800420e38c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e38f:	eb 21                	jmp    800420e3b2 <sys_env_set_trapframe+0xec>
	e->env_tf = ltf;
  800420e391:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e395:	48 89 c2             	mov    %rax,%rdx
  800420e398:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420e39f:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e3a4:	48 89 d7             	mov    %rdx,%rdi
  800420e3a7:	48 89 c1             	mov    %rax,%rcx
  800420e3aa:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	return 0;
  800420e3ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e3b2:	c9                   	leaveq 
  800420e3b3:	c3                   	retq   

000000800420e3b4 <sys_env_set_pgfault_upcall>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
  800420e3b4:	55                   	push   %rbp
  800420e3b5:	48 89 e5             	mov    %rsp,%rbp
  800420e3b8:	48 83 ec 20          	sub    $0x20,%rsp
  800420e3bc:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e3bf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e3c3:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e3c7:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e3ca:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e3cf:	48 89 ce             	mov    %rcx,%rsi
  800420e3d2:	89 c7                	mov    %eax,%edi
  800420e3d4:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e3db:	00 00 00 
  800420e3de:	ff d0                	callq  *%rax
  800420e3e0:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e3e3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e3e7:	79 05                	jns    800420e3ee <sys_env_set_pgfault_upcall+0x3a>
		return r;
  800420e3e9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e3ec:	eb 14                	jmp    800420e402 <sys_env_set_pgfault_upcall+0x4e>
	e->env_pgfault_upcall = func;
  800420e3ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e3f2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e3f6:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
	return 0;
  800420e3fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e402:	c9                   	leaveq 
  800420e403:	c3                   	retq   

000000800420e404 <sys_page_alloc>:
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  800420e404:	55                   	push   %rbp
  800420e405:	48 89 e5             	mov    %rsp,%rbp
  800420e408:	48 83 ec 30          	sub    $0x30,%rsp
  800420e40c:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420e40f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420e413:	89 55 d8             	mov    %edx,-0x28(%rbp)
	int r;
	struct Env *e;
	struct PageInfo *pp;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e416:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420e41a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420e41d:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e422:	48 89 ce             	mov    %rcx,%rsi
  800420e425:	89 c7                	mov    %eax,%edi
  800420e427:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e42e:	00 00 00 
  800420e431:	ff d0                	callq  *%rax
  800420e433:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e436:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e43a:	79 08                	jns    800420e444 <sys_page_alloc+0x40>
		return r;
  800420e43c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e43f:	e9 a7 00 00 00       	jmpq   800420e4eb <sys_page_alloc+0xe7>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e444:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e447:	f7 d0                	not    %eax
  800420e449:	83 e0 05             	and    $0x5,%eax
  800420e44c:	85 c0                	test   %eax,%eax
  800420e44e:	75 0c                	jne    800420e45c <sys_page_alloc+0x58>
  800420e450:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e453:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e458:	85 c0                	test   %eax,%eax
  800420e45a:	74 0a                	je     800420e466 <sys_page_alloc+0x62>
		return -E_INVAL;
  800420e45c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e461:	e9 85 00 00 00       	jmpq   800420e4eb <sys_page_alloc+0xe7>
	if (va >= (void*) UTOP)
  800420e466:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e46d:	00 00 00 
  800420e470:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420e474:	76 07                	jbe    800420e47d <sys_page_alloc+0x79>
		return -E_INVAL;
  800420e476:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e47b:	eb 6e                	jmp    800420e4eb <sys_page_alloc+0xe7>
	if (!(pp = page_alloc(ALLOC_ZERO)))
  800420e47d:	bf 01 00 00 00       	mov    $0x1,%edi
  800420e482:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420e489:	00 00 00 
  800420e48c:	ff d0                	callq  *%rax
  800420e48e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e492:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420e497:	75 07                	jne    800420e4a0 <sys_page_alloc+0x9c>
		return -E_NO_MEM;
  800420e499:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420e49e:	eb 4b                	jmp    800420e4eb <sys_page_alloc+0xe7>
	if ((r = page_insert(e->env_pml4e, pp, va, perm)) < 0) {
  800420e4a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e4a4:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e4ab:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420e4ae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e4b2:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420e4b6:	48 89 c7             	mov    %rax,%rdi
  800420e4b9:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e4c0:	00 00 00 
  800420e4c3:	ff d0                	callq  *%rax
  800420e4c5:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e4c8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e4cc:	79 18                	jns    800420e4e6 <sys_page_alloc+0xe2>
		page_free(pp);
  800420e4ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e4d2:	48 89 c7             	mov    %rax,%rdi
  800420e4d5:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420e4dc:	00 00 00 
  800420e4df:	ff d0                	callq  *%rax
		return r;
  800420e4e1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e4e4:	eb 05                	jmp    800420e4eb <sys_page_alloc+0xe7>
	}
	return 0;
  800420e4e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e4eb:	c9                   	leaveq 
  800420e4ec:	c3                   	retq   

000000800420e4ed <sys_page_map>:
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
	     envid_t dstenvid, void *dstva, int perm)
{
  800420e4ed:	55                   	push   %rbp
  800420e4ee:	48 89 e5             	mov    %rsp,%rbp
  800420e4f1:	48 83 ec 60          	sub    $0x60,%rsp
  800420e4f5:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420e4f8:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420e4fc:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420e4ff:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420e503:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
	int r;
	struct Env *es, *ed;
	struct PageInfo *pp;
	pte_t *ppte;

	if (srcva >= (void*) UTOP || dstva >= (void*) UTOP)
  800420e507:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e50e:	00 00 00 
  800420e511:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e515:	77 10                	ja     800420e527 <sys_page_map+0x3a>
  800420e517:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e51e:	00 00 00 
  800420e521:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420e525:	76 0a                	jbe    800420e531 <sys_page_map+0x44>
		return -E_INVAL;
  800420e527:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e52c:	e9 3f 01 00 00       	jmpq   800420e670 <sys_page_map+0x183>
	if (srcva != ROUNDDOWN(srcva, PGSIZE) || dstva != ROUNDDOWN(dstva, PGSIZE))
  800420e531:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e535:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e539:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e53d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e543:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420e547:	75 18                	jne    800420e561 <sys_page_map+0x74>
  800420e549:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420e54d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e551:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e555:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e55b:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420e55f:	74 0a                	je     800420e56b <sys_page_map+0x7e>
		return -E_INVAL;
  800420e561:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e566:	e9 05 01 00 00       	jmpq   800420e670 <sys_page_map+0x183>

	if ((r = envid2env(srcenvid, &es, 1)) < 0
  800420e56b:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e56f:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e572:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e577:	48 89 ce             	mov    %rcx,%rsi
  800420e57a:	89 c7                	mov    %eax,%edi
  800420e57c:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e583:	00 00 00 
  800420e586:	ff d0                	callq  *%rax
  800420e588:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e58b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e58f:	78 26                	js     800420e5b7 <sys_page_map+0xca>
            || (r = envid2env(dstenvid, &ed, 1)) < 0)
  800420e591:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420e595:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420e598:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e59d:	48 89 ce             	mov    %rcx,%rsi
  800420e5a0:	89 c7                	mov    %eax,%edi
  800420e5a2:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e5a9:	00 00 00 
  800420e5ac:	ff d0                	callq  *%rax
  800420e5ae:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e5b1:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e5b5:	79 08                	jns    800420e5bf <sys_page_map+0xd2>
		return r;
  800420e5b7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e5ba:	e9 b1 00 00 00       	jmpq   800420e670 <sys_page_map+0x183>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e5bf:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e5c2:	f7 d0                	not    %eax
  800420e5c4:	83 e0 05             	and    $0x5,%eax
  800420e5c7:	85 c0                	test   %eax,%eax
  800420e5c9:	75 0c                	jne    800420e5d7 <sys_page_map+0xea>
  800420e5cb:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e5ce:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e5d3:	85 c0                	test   %eax,%eax
  800420e5d5:	74 0a                	je     800420e5e1 <sys_page_map+0xf4>
		return -E_INVAL;
  800420e5d7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e5dc:	e9 8f 00 00 00       	jmpq   800420e670 <sys_page_map+0x183>
	if ((pp = page_lookup(es->env_pml4e, srcva, &ppte)) == 0)
  800420e5e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e5e5:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e5ec:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420e5f0:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420e5f4:	48 89 ce             	mov    %rcx,%rsi
  800420e5f7:	48 89 c7             	mov    %rax,%rdi
  800420e5fa:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e601:	00 00 00 
  800420e604:	ff d0                	callq  *%rax
  800420e606:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e60a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e60f:	75 07                	jne    800420e618 <sys_page_map+0x12b>
		return -E_INVAL;
  800420e611:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e616:	eb 58                	jmp    800420e670 <sys_page_map+0x183>
	if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420e618:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e61b:	83 e0 02             	and    $0x2,%eax
  800420e61e:	85 c0                	test   %eax,%eax
  800420e620:	74 16                	je     800420e638 <sys_page_map+0x14b>
  800420e622:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e626:	48 8b 00             	mov    (%rax),%rax
  800420e629:	83 e0 02             	and    $0x2,%eax
  800420e62c:	48 85 c0             	test   %rax,%rax
  800420e62f:	75 07                	jne    800420e638 <sys_page_map+0x14b>
		return -E_INVAL;
  800420e631:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e636:	eb 38                	jmp    800420e670 <sys_page_map+0x183>
	if ((r = page_insert(ed->env_pml4e, pp, dstva, perm)) < 0)
  800420e638:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e63c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e643:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420e646:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420e64a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e64e:	48 89 c7             	mov    %rax,%rdi
  800420e651:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e658:	00 00 00 
  800420e65b:	ff d0                	callq  *%rax
  800420e65d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e660:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e664:	79 05                	jns    800420e66b <sys_page_map+0x17e>
		return r;
  800420e666:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e669:	eb 05                	jmp    800420e670 <sys_page_map+0x183>
	return 0;
  800420e66b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e670:	c9                   	leaveq 
  800420e671:	c3                   	retq   

000000800420e672 <sys_page_unmap>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
  800420e672:	55                   	push   %rbp
  800420e673:	48 89 e5             	mov    %rsp,%rbp
  800420e676:	48 83 ec 20          	sub    $0x20,%rsp
  800420e67a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e67d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e681:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e685:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e688:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e68d:	48 89 ce             	mov    %rcx,%rsi
  800420e690:	89 c7                	mov    %eax,%edi
  800420e692:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e699:	00 00 00 
  800420e69c:	ff d0                	callq  *%rax
  800420e69e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e6a1:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e6a5:	79 05                	jns    800420e6ac <sys_page_unmap+0x3a>
		return r;
  800420e6a7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e6aa:	eb 4b                	jmp    800420e6f7 <sys_page_unmap+0x85>
	if (va >= (void*) UTOP || PGOFF(va))
  800420e6ac:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e6b3:	00 00 00 
  800420e6b6:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420e6ba:	77 0e                	ja     800420e6ca <sys_page_unmap+0x58>
  800420e6bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e6c0:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420e6c5:	48 85 c0             	test   %rax,%rax
  800420e6c8:	74 07                	je     800420e6d1 <sys_page_unmap+0x5f>
		return -E_INVAL;
  800420e6ca:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e6cf:	eb 26                	jmp    800420e6f7 <sys_page_unmap+0x85>
	page_remove(e->env_pml4e, va);
  800420e6d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e6d5:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e6dc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e6e0:	48 89 d6             	mov    %rdx,%rsi
  800420e6e3:	48 89 c7             	mov    %rax,%rdi
  800420e6e6:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420e6ed:	00 00 00 
  800420e6f0:	ff d0                	callq  *%rax
	return 0;
  800420e6f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e6f7:	c9                   	leaveq 
  800420e6f8:	c3                   	retq   

000000800420e6f9 <sys_ipc_try_send>:
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
  800420e6f9:	55                   	push   %rbp
  800420e6fa:	48 89 e5             	mov    %rsp,%rbp
  800420e6fd:	53                   	push   %rbx
  800420e6fe:	48 83 ec 48          	sub    $0x48,%rsp
  800420e702:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420e705:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420e708:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420e70c:	89 4d bc             	mov    %ecx,-0x44(%rbp)
    int r;
    struct Env *e;
    struct PageInfo *pp;
    pte_t *ppte;
    if ((r = envid2env(envid, &e, 0)) < 0)
  800420e70f:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e713:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420e716:	ba 00 00 00 00       	mov    $0x0,%edx
  800420e71b:	48 89 ce             	mov    %rcx,%rsi
  800420e71e:	89 c7                	mov    %eax,%edi
  800420e720:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e727:	00 00 00 
  800420e72a:	ff d0                	callq  *%rax
  800420e72c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e72f:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e733:	79 08                	jns    800420e73d <sys_ipc_try_send+0x44>
        return r;
  800420e735:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e738:	e9 25 03 00 00       	jmpq   800420ea62 <sys_ipc_try_send+0x369>
    if (!e->env_ipc_recving) {
  800420e73d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e741:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e748:	83 f0 01             	xor    $0x1,%eax
  800420e74b:	84 c0                	test   %al,%al
  800420e74d:	74 0a                	je     800420e759 <sys_ipc_try_send+0x60>
        /* cprintf("[%08x] not recieving!\n", e->env_id); */
        return -E_IPC_NOT_RECV;
  800420e74f:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420e754:	e9 09 03 00 00       	jmpq   800420ea62 <sys_ipc_try_send+0x369>

    /*  Hint: check if environment is ENV_TYPE_GUEST or not, and if the source or destination 
     *  is using normal page, use page_insert. Use ept_page_insert() wherever possible. */
    /* Your code here */

    if (srcva < (void*) UTOP && e->env_ipc_dstva < (void*) UTOP) {
  800420e759:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e760:	00 00 00 
  800420e763:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420e767:	0f 87 70 02 00 00    	ja     800420e9dd <sys_ipc_try_send+0x2e4>
  800420e76d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e771:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e778:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e77f:	00 00 00 
  800420e782:	48 39 c2             	cmp    %rax,%rdx
  800420e785:	0f 87 52 02 00 00    	ja     800420e9dd <sys_ipc_try_send+0x2e4>
        if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL)) {
  800420e78b:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e78e:	f7 d0                	not    %eax
  800420e790:	83 e0 05             	and    $0x5,%eax
  800420e793:	85 c0                	test   %eax,%eax
  800420e795:	75 0c                	jne    800420e7a3 <sys_ipc_try_send+0xaa>
  800420e797:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e79a:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e79f:	85 c0                	test   %eax,%eax
  800420e7a1:	74 60                	je     800420e803 <sys_ipc_try_send+0x10a>
            cprintf("[%08x] bad perm %x in sys_ipc_try_send\n", curenv->env_id, perm);
  800420e7a3:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420e7aa:	00 00 00 
  800420e7ad:	ff d0                	callq  *%rax
  800420e7af:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420e7b6:	00 00 00 
  800420e7b9:	48 98                	cltq   
  800420e7bb:	48 c1 e0 03          	shl    $0x3,%rax
  800420e7bf:	48 89 c1             	mov    %rax,%rcx
  800420e7c2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e7c6:	48 01 c8             	add    %rcx,%rax
  800420e7c9:	48 01 d0             	add    %rdx,%rax
  800420e7cc:	48 83 c0 08          	add    $0x8,%rax
  800420e7d0:	48 8b 00             	mov    (%rax),%rax
  800420e7d3:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e7d9:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e7dc:	89 c6                	mov    %eax,%esi
  800420e7de:	48 bf 48 03 22 04 80 	movabs $0x8004220348,%rdi
  800420e7e5:	00 00 00 
  800420e7e8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e7ed:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e7f4:	00 00 00 
  800420e7f7:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e7f9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e7fe:	e9 5f 02 00 00       	jmpq   800420ea62 <sys_ipc_try_send+0x369>
        }

        pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420e803:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420e80a:	00 00 00 
  800420e80d:	ff d0                	callq  *%rax
  800420e80f:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420e816:	00 00 00 
  800420e819:	48 98                	cltq   
  800420e81b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e81f:	48 89 c1             	mov    %rax,%rcx
  800420e822:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e826:	48 01 c8             	add    %rcx,%rax
  800420e829:	48 01 d0             	add    %rdx,%rax
  800420e82c:	48 83 c0 08          	add    $0x8,%rax
  800420e830:	48 8b 00             	mov    (%rax),%rax
  800420e833:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e83a:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420e83e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420e842:	48 89 ce             	mov    %rcx,%rsi
  800420e845:	48 89 c7             	mov    %rax,%rdi
  800420e848:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e84f:	00 00 00 
  800420e852:	ff d0                	callq  *%rax
  800420e854:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (pp == 0) {
  800420e858:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e85d:	75 61                	jne    800420e8c0 <sys_ipc_try_send+0x1c7>
            cprintf("[%08x] page_lookup %08x failed in sys_ipc_try_send\n", curenv->env_id, srcva);
  800420e85f:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420e866:	00 00 00 
  800420e869:	ff d0                	callq  *%rax
  800420e86b:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420e872:	00 00 00 
  800420e875:	48 98                	cltq   
  800420e877:	48 c1 e0 03          	shl    $0x3,%rax
  800420e87b:	48 89 c1             	mov    %rax,%rcx
  800420e87e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e882:	48 01 c8             	add    %rcx,%rax
  800420e885:	48 01 d0             	add    %rdx,%rax
  800420e888:	48 83 c0 08          	add    $0x8,%rax
  800420e88c:	48 8b 00             	mov    (%rax),%rax
  800420e88f:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e895:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e899:	89 c6                	mov    %eax,%esi
  800420e89b:	48 bf 70 03 22 04 80 	movabs $0x8004220370,%rdi
  800420e8a2:	00 00 00 
  800420e8a5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e8aa:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e8b1:	00 00 00 
  800420e8b4:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e8b6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e8bb:	e9 a2 01 00 00       	jmpq   800420ea62 <sys_ipc_try_send+0x369>
        }

        if ((perm & PTE_W) && !(*ppte & PTE_W)) {
  800420e8c0:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e8c3:	83 e0 02             	and    $0x2,%eax
  800420e8c6:	85 c0                	test   %eax,%eax
  800420e8c8:	74 6c                	je     800420e936 <sys_ipc_try_send+0x23d>
  800420e8ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e8ce:	48 8b 00             	mov    (%rax),%rax
  800420e8d1:	83 e0 02             	and    $0x2,%eax
  800420e8d4:	48 85 c0             	test   %rax,%rax
  800420e8d7:	75 5d                	jne    800420e936 <sys_ipc_try_send+0x23d>
            cprintf("[%08x] attempt to send read-only page read-write in sys_ipc_try_send\n", curenv->env_id);
  800420e8d9:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420e8e0:	00 00 00 
  800420e8e3:	ff d0                	callq  *%rax
  800420e8e5:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420e8ec:	00 00 00 
  800420e8ef:	48 98                	cltq   
  800420e8f1:	48 c1 e0 03          	shl    $0x3,%rax
  800420e8f5:	48 89 c1             	mov    %rax,%rcx
  800420e8f8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e8fc:	48 01 c8             	add    %rcx,%rax
  800420e8ff:	48 01 d0             	add    %rdx,%rax
  800420e902:	48 83 c0 08          	add    $0x8,%rax
  800420e906:	48 8b 00             	mov    (%rax),%rax
  800420e909:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e90f:	89 c6                	mov    %eax,%esi
  800420e911:	48 bf a8 03 22 04 80 	movabs $0x80042203a8,%rdi
  800420e918:	00 00 00 
  800420e91b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e920:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420e927:	00 00 00 
  800420e92a:	ff d2                	callq  *%rdx
            return -E_INVAL;
  800420e92c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e931:	e9 2c 01 00 00       	jmpq   800420ea62 <sys_ipc_try_send+0x369>
        }

        r = page_insert(e->env_pml4e, pp, e->env_ipc_dstva, perm);
  800420e936:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420e939:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e93d:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e944:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e948:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e94f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e953:	48 89 c7             	mov    %rax,%rdi
  800420e956:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e95d:	00 00 00 
  800420e960:	ff d0                	callq  *%rax
  800420e962:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (r < 0) {
  800420e965:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e969:	79 63                	jns    800420e9ce <sys_ipc_try_send+0x2d5>
            cprintf("[%08x] page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420e96b:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420e972:	00 00 00 
  800420e975:	ff d0                	callq  *%rax
  800420e977:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420e97e:	00 00 00 
  800420e981:	48 98                	cltq   
  800420e983:	48 c1 e0 03          	shl    $0x3,%rax
  800420e987:	48 89 c1             	mov    %rax,%rcx
  800420e98a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e98e:	48 01 c8             	add    %rcx,%rax
  800420e991:	48 01 d0             	add    %rdx,%rax
  800420e994:	48 83 c0 08          	add    $0x8,%rax
  800420e998:	48 8b 00             	mov    (%rax),%rax
  800420e99b:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e9a1:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420e9a4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e9a8:	89 c6                	mov    %eax,%esi
  800420e9aa:	48 bf f0 03 22 04 80 	movabs $0x80042203f0,%rdi
  800420e9b1:	00 00 00 
  800420e9b4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e9b9:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420e9c0:	00 00 00 
  800420e9c3:	41 ff d0             	callq  *%r8
            return r;
  800420e9c6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e9c9:	e9 94 00 00 00       	jmpq   800420ea62 <sys_ipc_try_send+0x369>
        }

        e->env_ipc_perm = perm;
  800420e9ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e9d2:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e9d5:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420e9db:	eb 0e                	jmp    800420e9eb <sys_ipc_try_send+0x2f2>
    } else {
        e->env_ipc_perm = 0;
  800420e9dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e9e1:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420e9e8:	00 00 00 
    }

    e->env_ipc_recving = 0;
  800420e9eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e9ef:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
    e->env_ipc_from = curenv->env_id;
  800420e9f6:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420e9fa:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420ea01:	00 00 00 
  800420ea04:	ff d0                	callq  *%rax
  800420ea06:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420ea0d:	00 00 00 
  800420ea10:	48 98                	cltq   
  800420ea12:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea16:	48 89 c1             	mov    %rax,%rcx
  800420ea19:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ea1d:	48 01 c8             	add    %rcx,%rax
  800420ea20:	48 01 d0             	add    %rdx,%rax
  800420ea23:	48 83 c0 08          	add    $0x8,%rax
  800420ea27:	48 8b 00             	mov    (%rax),%rax
  800420ea2a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420ea30:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
    e->env_ipc_value = value;
  800420ea36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ea3a:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420ea3d:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
    e->env_tf.tf_regs.reg_rax = 0;
  800420ea43:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ea47:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420ea4e:	00 
    e->env_status = ENV_RUNNABLE;
  800420ea4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ea53:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420ea5a:	00 00 00 
    return 0;
  800420ea5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420ea62:	48 83 c4 48          	add    $0x48,%rsp
  800420ea66:	5b                   	pop    %rbx
  800420ea67:	5d                   	pop    %rbp
  800420ea68:	c3                   	retq   

000000800420ea69 <sys_ipc_recv>:
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
  800420ea69:	55                   	push   %rbp
  800420ea6a:	48 89 e5             	mov    %rsp,%rbp
  800420ea6d:	48 83 ec 10          	sub    $0x10,%rsp
  800420ea71:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (curenv->env_ipc_recving)
  800420ea75:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420ea7c:	00 00 00 
  800420ea7f:	ff d0                	callq  *%rax
  800420ea81:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420ea88:	00 00 00 
  800420ea8b:	48 98                	cltq   
  800420ea8d:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea91:	48 89 c1             	mov    %rax,%rcx
  800420ea94:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ea98:	48 01 c8             	add    %rcx,%rax
  800420ea9b:	48 01 d0             	add    %rdx,%rax
  800420ea9e:	48 83 c0 08          	add    $0x8,%rax
  800420eaa2:	48 8b 00             	mov    (%rax),%rax
  800420eaa5:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420eaac:	84 c0                	test   %al,%al
  800420eaae:	74 2a                	je     800420eada <sys_ipc_recv+0x71>
		panic("already recving!");
  800420eab0:	48 ba 29 04 22 04 80 	movabs $0x8004220429,%rdx
  800420eab7:	00 00 00 
  800420eaba:	be 7b 01 00 00       	mov    $0x17b,%esi
  800420eabf:	48 bf 3a 04 22 04 80 	movabs $0x800422043a,%rdi
  800420eac6:	00 00 00 
  800420eac9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eace:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420ead5:	00 00 00 
  800420ead8:	ff d1                	callq  *%rcx

	curenv->env_ipc_recving = 1;
  800420eada:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420eae1:	00 00 00 
  800420eae4:	ff d0                	callq  *%rax
  800420eae6:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420eaed:	00 00 00 
  800420eaf0:	48 98                	cltq   
  800420eaf2:	48 c1 e0 03          	shl    $0x3,%rax
  800420eaf6:	48 89 c1             	mov    %rax,%rcx
  800420eaf9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eafd:	48 01 c8             	add    %rcx,%rax
  800420eb00:	48 01 d0             	add    %rdx,%rax
  800420eb03:	48 83 c0 08          	add    $0x8,%rax
  800420eb07:	48 8b 00             	mov    (%rax),%rax
  800420eb0a:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
	curenv->env_ipc_dstva = dstva;
  800420eb11:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420eb18:	00 00 00 
  800420eb1b:	ff d0                	callq  *%rax
  800420eb1d:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420eb24:	00 00 00 
  800420eb27:	48 98                	cltq   
  800420eb29:	48 c1 e0 03          	shl    $0x3,%rax
  800420eb2d:	48 89 c1             	mov    %rax,%rcx
  800420eb30:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eb34:	48 01 c8             	add    %rcx,%rax
  800420eb37:	48 01 d0             	add    %rdx,%rax
  800420eb3a:	48 83 c0 08          	add    $0x8,%rax
  800420eb3e:	48 8b 00             	mov    (%rax),%rax
  800420eb41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420eb45:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
	curenv->env_status = ENV_NOT_RUNNABLE;
  800420eb4c:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420eb53:	00 00 00 
  800420eb56:	ff d0                	callq  *%rax
  800420eb58:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420eb5f:	00 00 00 
  800420eb62:	48 98                	cltq   
  800420eb64:	48 c1 e0 03          	shl    $0x3,%rax
  800420eb68:	48 89 c1             	mov    %rax,%rcx
  800420eb6b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eb6f:	48 01 c8             	add    %rcx,%rax
  800420eb72:	48 01 d0             	add    %rdx,%rax
  800420eb75:	48 83 c0 08          	add    $0x8,%rax
  800420eb79:	48 8b 00             	mov    (%rax),%rax
  800420eb7c:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420eb83:	00 00 00 
	sched_yield();
  800420eb86:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800420eb8d:	00 00 00 
  800420eb90:	ff d0                	callq  *%rax

000000800420eb92 <sys_time_msec>:


// Return the current time.
static int
sys_time_msec(void)
{
  800420eb92:	55                   	push   %rbp
  800420eb93:	48 89 e5             	mov    %rsp,%rbp
	return (int) time_msec();
  800420eb96:	48 b8 78 96 21 04 80 	movabs $0x8004219678,%rax
  800420eb9d:	00 00 00 
  800420eba0:	ff d0                	callq  *%rax
}
  800420eba2:	5d                   	pop    %rbp
  800420eba3:	c3                   	retq   

000000800420eba4 <sys_net_transmit>:

static int
sys_net_transmit(const void *data, size_t len)
{
  800420eba4:	55                   	push   %rbp
  800420eba5:	48 89 e5             	mov    %rsp,%rbp
  800420eba8:	48 83 ec 10          	sub    $0x10,%rsp
  800420ebac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ebb0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, data, len, 0);
  800420ebb4:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420ebbb:	00 00 00 
  800420ebbe:	ff d0                	callq  *%rax
  800420ebc0:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420ebc7:	00 00 00 
  800420ebca:	48 98                	cltq   
  800420ebcc:	48 c1 e0 03          	shl    $0x3,%rax
  800420ebd0:	48 89 c1             	mov    %rax,%rcx
  800420ebd3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ebd7:	48 01 c8             	add    %rcx,%rax
  800420ebda:	48 01 d0             	add    %rdx,%rax
  800420ebdd:	48 83 c0 08          	add    $0x8,%rax
  800420ebe1:	48 8b 00             	mov    (%rax),%rax
  800420ebe4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ebe8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420ebec:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420ebf1:	48 89 c7             	mov    %rax,%rdi
  800420ebf4:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420ebfb:	00 00 00 
  800420ebfe:	ff d0                	callq  *%rax
	return e1000_transmit(data, len);
  800420ec00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ec04:	89 c2                	mov    %eax,%edx
  800420ec06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ec0a:	89 d6                	mov    %edx,%esi
  800420ec0c:	48 89 c7             	mov    %rax,%rdi
  800420ec0f:	48 b8 01 88 21 04 80 	movabs $0x8004218801,%rax
  800420ec16:	00 00 00 
  800420ec19:	ff d0                	callq  *%rax
}
  800420ec1b:	c9                   	leaveq 
  800420ec1c:	c3                   	retq   

000000800420ec1d <sys_net_receive>:

static int
sys_net_receive(void *buf, size_t len)
{
  800420ec1d:	55                   	push   %rbp
  800420ec1e:	48 89 e5             	mov    %rsp,%rbp
  800420ec21:	48 83 ec 10          	sub    $0x10,%rsp
  800420ec25:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ec29:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, buf, len, PTE_W);
  800420ec2d:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420ec34:	00 00 00 
  800420ec37:	ff d0                	callq  *%rax
  800420ec39:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420ec40:	00 00 00 
  800420ec43:	48 98                	cltq   
  800420ec45:	48 c1 e0 03          	shl    $0x3,%rax
  800420ec49:	48 89 c1             	mov    %rax,%rcx
  800420ec4c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ec50:	48 01 c8             	add    %rcx,%rax
  800420ec53:	48 01 d0             	add    %rdx,%rax
  800420ec56:	48 83 c0 08          	add    $0x8,%rax
  800420ec5a:	48 8b 00             	mov    (%rax),%rax
  800420ec5d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ec61:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420ec65:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420ec6a:	48 89 c7             	mov    %rax,%rdi
  800420ec6d:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420ec74:	00 00 00 
  800420ec77:	ff d0                	callq  *%rax
	return e1000_receive(buf, len);
  800420ec79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ec7d:	89 c2                	mov    %eax,%edx
  800420ec7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ec83:	89 d6                	mov    %edx,%esi
  800420ec85:	48 89 c7             	mov    %rax,%rdi
  800420ec88:	48 b8 70 89 21 04 80 	movabs $0x8004218970,%rax
  800420ec8f:	00 00 00 
  800420ec92:	ff d0                	callq  *%rax
}
  800420ec94:	c9                   	leaveq 
  800420ec95:	c3                   	retq   

000000800420ec96 <sys_vmx_list_vms>:

#ifndef VMM_GUEST
static void
sys_vmx_list_vms() {
  800420ec96:	55                   	push   %rbp
  800420ec97:	48 89 e5             	mov    %rsp,%rbp
	vmx_list_vms();
  800420ec9a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec9f:	48 ba ef b3 21 04 80 	movabs $0x800421b3ef,%rdx
  800420eca6:	00 00 00 
  800420eca9:	ff d2                	callq  *%rdx
}
  800420ecab:	5d                   	pop    %rbp
  800420ecac:	c3                   	retq   

000000800420ecad <sys_vmx_sel_resume>:

static bool
sys_vmx_sel_resume(int i) {
  800420ecad:	55                   	push   %rbp
  800420ecae:	48 89 e5             	mov    %rsp,%rbp
  800420ecb1:	48 83 ec 10          	sub    $0x10,%rsp
  800420ecb5:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return vmx_sel_resume(i);
  800420ecb8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ecbb:	89 c7                	mov    %eax,%edi
  800420ecbd:	48 b8 af b4 21 04 80 	movabs $0x800421b4af,%rax
  800420ecc4:	00 00 00 
  800420ecc7:	ff d0                	callq  *%rax
}
  800420ecc9:	c9                   	leaveq 
  800420ecca:	c3                   	retq   

000000800420eccb <sys_vmx_get_vmdisk_number>:

static int
sys_vmx_get_vmdisk_number() {
  800420eccb:	55                   	push   %rbp
  800420eccc:	48 89 e5             	mov    %rsp,%rbp
	return vmx_get_vmdisk_number();
  800420eccf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ecd4:	48 ba 76 df 21 04 80 	movabs $0x800421df76,%rdx
  800420ecdb:	00 00 00 
  800420ecde:	ff d2                	callq  *%rdx
}
  800420ece0:	5d                   	pop    %rbp
  800420ece1:	c3                   	retq   

000000800420ece2 <sys_vmx_incr_vmdisk_number>:

static void
sys_vmx_incr_vmdisk_number() {
  800420ece2:	55                   	push   %rbp
  800420ece3:	48 89 e5             	mov    %rsp,%rbp
	vmx_incr_vmdisk_number();
  800420ece6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eceb:	48 ba 88 df 21 04 80 	movabs $0x800421df88,%rdx
  800420ecf2:	00 00 00 
  800420ecf5:	ff d2                	callq  *%rdx
}
  800420ecf7:	5d                   	pop    %rbp
  800420ecf8:	c3                   	retq   

000000800420ecf9 <sys_ept_map>:
//       instead of the normal page table. 
// 
static int
sys_ept_map(envid_t srcenvid, void *srcva,
	    envid_t guest, void* guest_pa, int perm)
{
  800420ecf9:	55                   	push   %rbp
  800420ecfa:	48 89 e5             	mov    %rsp,%rbp
  800420ecfd:	48 83 ec 70          	sub    $0x70,%rsp
  800420ed01:	89 7d ac             	mov    %edi,-0x54(%rbp)
  800420ed04:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420ed08:	89 55 a8             	mov    %edx,-0x58(%rbp)
  800420ed0b:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
  800420ed0f:	44 89 45 94          	mov    %r8d,-0x6c(%rbp)
	// ept_map_hva2gpa();
	// sys_page_map()
	struct Env* srcenv;
	struct Env* guestenv;

	int err = envid2env(srcenvid, &srcenv, true);
  800420ed13:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  800420ed17:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800420ed1a:	ba 01 00 00 00       	mov    $0x1,%edx
  800420ed1f:	48 89 ce             	mov    %rcx,%rsi
  800420ed22:	89 c7                	mov    %eax,%edi
  800420ed24:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420ed2b:	00 00 00 
  800420ed2e:	ff d0                	callq  *%rax
  800420ed30:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (err < 0 ) return err;
  800420ed33:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420ed37:	79 08                	jns    800420ed41 <sys_ept_map+0x48>
  800420ed39:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ed3c:	e9 6e 01 00 00       	jmpq   800420eeaf <sys_ept_map+0x1b6>
	err = envid2env(guest, &guestenv, true);
  800420ed41:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  800420ed45:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800420ed48:	ba 01 00 00 00       	mov    $0x1,%edx
  800420ed4d:	48 89 ce             	mov    %rcx,%rsi
  800420ed50:	89 c7                	mov    %eax,%edi
  800420ed52:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420ed59:	00 00 00 
  800420ed5c:	ff d0                	callq  *%rax
  800420ed5e:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (err < 0 ) return err;
  800420ed61:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420ed65:	79 08                	jns    800420ed6f <sys_ept_map+0x76>
  800420ed67:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ed6a:	e9 40 01 00 00       	jmpq   800420eeaf <sys_ept_map+0x1b6>

	// page alighment checks
	if ((unsigned long) srcva >= UTOP || srcva != ROUNDDOWN(srcva, PGSIZE)) return -E_INVAL; 
  800420ed6f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420ed73:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420ed7a:	00 00 00 
  800420ed7d:	48 39 c2             	cmp    %rax,%rdx
  800420ed80:	77 18                	ja     800420ed9a <sys_ept_map+0xa1>
  800420ed82:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420ed86:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420ed8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed8e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420ed94:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  800420ed98:	74 0a                	je     800420eda4 <sys_ept_map+0xab>
  800420ed9a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ed9f:	e9 0b 01 00 00       	jmpq   800420eeaf <sys_ept_map+0x1b6>
	if ((unsigned long) guest_pa >= guestenv->env_vmxinfo.phys_sz || guest_pa != ROUNDDOWN(guest_pa, PGSIZE)) return -E_INVAL;
  800420eda4:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800420eda8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420edac:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
  800420edb3:	48 39 c2             	cmp    %rax,%rdx
  800420edb6:	73 18                	jae    800420edd0 <sys_ept_map+0xd7>
  800420edb8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420edbc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420edc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420edc4:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420edca:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  800420edce:	74 0a                	je     800420edda <sys_ept_map+0xe1>
  800420edd0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420edd5:	e9 d5 00 00 00       	jmpq   800420eeaf <sys_ept_map+0x1b6>

	// check if srcva is mapped in srcenvid's address space
	pte_t* pte;
	struct PageInfo* pp = page_lookup(srcenv->env_pml4e, srcva, &pte);
  800420edda:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420edde:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420ede5:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  800420ede9:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420eded:	48 89 ce             	mov    %rcx,%rsi
  800420edf0:	48 89 c7             	mov    %rax,%rdi
  800420edf3:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420edfa:	00 00 00 
  800420edfd:	ff d0                	callq  *%rax
  800420edff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (!pp) return -E_INVAL;
  800420ee03:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420ee08:	75 0a                	jne    800420ee14 <sys_ept_map+0x11b>
  800420ee0a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ee0f:	e9 9b 00 00 00       	jmpq   800420eeaf <sys_ept_map+0x1b6>

	// check if perm is inappropriate
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL)) return -E_INVAL; 
  800420ee14:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800420ee17:	f7 d0                	not    %eax
  800420ee19:	83 e0 05             	and    $0x5,%eax
  800420ee1c:	85 c0                	test   %eax,%eax
  800420ee1e:	75 0c                	jne    800420ee2c <sys_ept_map+0x133>
  800420ee20:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800420ee23:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420ee28:	85 c0                	test   %eax,%eax
  800420ee2a:	74 07                	je     800420ee33 <sys_ept_map+0x13a>
  800420ee2c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ee31:	eb 7c                	jmp    800420eeaf <sys_ept_map+0x1b6>
	if ((perm & PTE_W) && !(*pte & PTE_W)) return -E_INVAL;
  800420ee33:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800420ee36:	83 e0 02             	and    $0x2,%eax
  800420ee39:	85 c0                	test   %eax,%eax
  800420ee3b:	74 16                	je     800420ee53 <sys_ept_map+0x15a>
  800420ee3d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420ee41:	48 8b 00             	mov    (%rax),%rax
  800420ee44:	83 e0 02             	and    $0x2,%eax
  800420ee47:	48 85 c0             	test   %rax,%rax
  800420ee4a:	75 07                	jne    800420ee53 <sys_ept_map+0x15a>
  800420ee4c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420ee51:	eb 5c                	jmp    800420eeaf <sys_ept_map+0x1b6>


	// map the page (do we overwrite the existing mapping?)
	int overwrite = 0;
  800420ee53:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
	// call page2kva
	void* hva = page2kva(pp);
  800420ee5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ee5e:	48 89 c7             	mov    %rax,%rdi
  800420ee61:	48 b8 d7 df 20 04 80 	movabs $0x800420dfd7,%rax
  800420ee68:	00 00 00 
  800420ee6b:	ff d0                	callq  *%rax
  800420ee6d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	err = ept_map_hva2gpa(guestenv->env_pml4e, hva, guest_pa, perm, overwrite);
  800420ee71:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420ee75:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420ee7c:	8b 7d dc             	mov    -0x24(%rbp),%edi
  800420ee7f:	8b 4d 94             	mov    -0x6c(%rbp),%ecx
  800420ee82:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800420ee86:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420ee8a:	41 89 f8             	mov    %edi,%r8d
  800420ee8d:	48 89 c7             	mov    %rax,%rdi
  800420ee90:	48 b8 9e a3 21 04 80 	movabs $0x800421a39e,%rax
  800420ee97:	00 00 00 
  800420ee9a:	ff d0                	callq  *%rax
  800420ee9c:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (err < 0) return err;
  800420ee9f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420eea3:	79 05                	jns    800420eeaa <sys_ept_map+0x1b1>
  800420eea5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420eea8:	eb 05                	jmp    800420eeaf <sys_ept_map+0x1b6>

    return 0;
  800420eeaa:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420eeaf:	c9                   	leaveq 
  800420eeb0:	c3                   	retq   

000000800420eeb1 <sys_env_mkguest>:

static envid_t
	sys_env_mkguest(uint64_t gphysz, uint64_t gRIP) {
  800420eeb1:	55                   	push   %rbp
  800420eeb2:	48 89 e5             	mov    %rsp,%rbp
  800420eeb5:	48 83 ec 20          	sub    $0x20,%rsp
  800420eeb9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420eebd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	// Check if the processor has VMX support.
	if ( !vmx_check_support() ) {
  800420eec1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eec6:	48 ba 85 b5 21 04 80 	movabs $0x800421b585,%rdx
  800420eecd:	00 00 00 
  800420eed0:	ff d2                	callq  *%rdx
  800420eed2:	83 f0 01             	xor    $0x1,%eax
  800420eed5:	84 c0                	test   %al,%al
  800420eed7:	74 0a                	je     800420eee3 <sys_env_mkguest+0x32>
		return -E_NO_VMX;
  800420eed9:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800420eede:	e9 b1 00 00 00       	jmpq   800420ef94 <sys_env_mkguest+0xe3>
	} else if ( !vmx_check_ept() ) {
  800420eee3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eee8:	48 ba 06 b6 21 04 80 	movabs $0x800421b606,%rdx
  800420eeef:	00 00 00 
  800420eef2:	ff d2                	callq  *%rdx
  800420eef4:	83 f0 01             	xor    $0x1,%eax
  800420eef7:	84 c0                	test   %al,%al
  800420eef9:	74 0a                	je     800420ef05 <sys_env_mkguest+0x54>
		return -E_NO_EPT;
  800420eefb:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
  800420ef00:	e9 8f 00 00 00       	jmpq   800420ef94 <sys_env_mkguest+0xe3>
	} 
	if ((r = env_guest_alloc(&e, curenv->env_id)) < 0)
  800420ef05:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420ef0c:	00 00 00 
  800420ef0f:	ff d0                	callq  *%rax
  800420ef11:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420ef18:	00 00 00 
  800420ef1b:	48 98                	cltq   
  800420ef1d:	48 c1 e0 03          	shl    $0x3,%rax
  800420ef21:	48 89 c1             	mov    %rax,%rcx
  800420ef24:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ef28:	48 01 c8             	add    %rcx,%rax
  800420ef2b:	48 01 d0             	add    %rdx,%rax
  800420ef2e:	48 83 c0 08          	add    $0x8,%rax
  800420ef32:	48 8b 00             	mov    (%rax),%rax
  800420ef35:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420ef3b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800420ef3f:	89 d6                	mov    %edx,%esi
  800420ef41:	48 89 c7             	mov    %rax,%rdi
  800420ef44:	48 b8 90 81 20 04 80 	movabs $0x8004208190,%rax
  800420ef4b:	00 00 00 
  800420ef4e:	ff d0                	callq  *%rax
  800420ef50:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420ef53:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420ef57:	79 05                	jns    800420ef5e <sys_env_mkguest+0xad>
		return r;
  800420ef59:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ef5c:	eb 36                	jmp    800420ef94 <sys_env_mkguest+0xe3>
	e->env_status = ENV_NOT_RUNNABLE;
  800420ef5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef62:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420ef69:	00 00 00 
	e->env_vmxinfo.phys_sz = gphysz;
  800420ef6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef70:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ef74:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
	e->env_tf.tf_rip = gRIP;
  800420ef7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef7f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ef83:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
	return e->env_id;
  800420ef8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef8e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420ef94:	c9                   	leaveq 
  800420ef95:	c3                   	retq   

000000800420ef96 <syscall>:
#endif //!VMM_GUEST

// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  800420ef96:	55                   	push   %rbp
  800420ef97:	48 89 e5             	mov    %rsp,%rbp
  800420ef9a:	48 83 ec 30          	sub    $0x30,%rsp
  800420ef9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420efa2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420efa6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420efaa:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420efae:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420efb2:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
	switch (syscallno) {
  800420efb6:	48 83 7d f8 16       	cmpq   $0x16,-0x8(%rbp)
  800420efbb:	0f 87 c6 02 00 00    	ja     800420f287 <syscall+0x2f1>
  800420efc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420efc5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420efcc:	00 
  800420efcd:	48 b8 50 04 22 04 80 	movabs $0x8004220450,%rax
  800420efd4:	00 00 00 
  800420efd7:	48 01 d0             	add    %rdx,%rax
  800420efda:	48 8b 00             	mov    (%rax),%rax
  800420efdd:	ff e0                	jmpq   *%rax
	case SYS_cputs:
		sys_cputs((const char*) a1, a2);
  800420efdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420efe3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420efe7:	48 89 d6             	mov    %rdx,%rsi
  800420efea:	48 89 c7             	mov    %rax,%rdi
  800420efed:	48 b8 5f e0 20 04 80 	movabs $0x800420e05f,%rax
  800420eff4:	00 00 00 
  800420eff7:	ff d0                	callq  *%rax
		return 0;
  800420eff9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420effe:	e9 8b 02 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_cgetc:
		return sys_cgetc();
  800420f003:	48 b8 e3 e0 20 04 80 	movabs $0x800420e0e3,%rax
  800420f00a:	00 00 00 
  800420f00d:	ff d0                	callq  *%rax
  800420f00f:	48 98                	cltq   
  800420f011:	e9 78 02 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_getenvid:
		return sys_getenvid();
  800420f016:	48 b8 f5 e0 20 04 80 	movabs $0x800420e0f5,%rax
  800420f01d:	00 00 00 
  800420f020:	ff d0                	callq  *%rax
  800420f022:	48 98                	cltq   
  800420f024:	e9 65 02 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_env_destroy:
		return sys_env_destroy(a1);
  800420f029:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f02d:	89 c7                	mov    %eax,%edi
  800420f02f:	48 b8 31 e1 20 04 80 	movabs $0x800420e131,%rax
  800420f036:	00 00 00 
  800420f039:	ff d0                	callq  *%rax
  800420f03b:	48 98                	cltq   
  800420f03d:	e9 4c 02 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_page_alloc:
		return sys_page_alloc(a1, (void*) a2, a3);
  800420f042:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f046:	89 c2                	mov    %eax,%edx
  800420f048:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420f04c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f050:	48 89 ce             	mov    %rcx,%rsi
  800420f053:	89 c7                	mov    %eax,%edi
  800420f055:	48 b8 04 e4 20 04 80 	movabs $0x800420e404,%rax
  800420f05c:	00 00 00 
  800420f05f:	ff d0                	callq  *%rax
  800420f061:	48 98                	cltq   
  800420f063:	e9 26 02 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_page_map:
		return sys_page_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420f068:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f06c:	89 c7                	mov    %eax,%edi
  800420f06e:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f072:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f076:	89 c2                	mov    %eax,%edx
  800420f078:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420f07c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f080:	41 89 f8             	mov    %edi,%r8d
  800420f083:	89 c7                	mov    %eax,%edi
  800420f085:	48 b8 ed e4 20 04 80 	movabs $0x800420e4ed,%rax
  800420f08c:	00 00 00 
  800420f08f:	ff d0                	callq  *%rax
  800420f091:	48 98                	cltq   
  800420f093:	e9 f6 01 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_page_unmap:
		return sys_page_unmap(a1, (void*) a2);
  800420f098:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f09c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f0a0:	48 89 d6             	mov    %rdx,%rsi
  800420f0a3:	89 c7                	mov    %eax,%edi
  800420f0a5:	48 b8 72 e6 20 04 80 	movabs $0x800420e672,%rax
  800420f0ac:	00 00 00 
  800420f0af:	ff d0                	callq  *%rax
  800420f0b1:	48 98                	cltq   
  800420f0b3:	e9 d6 01 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_exofork:
		return sys_exofork();
  800420f0b8:	48 b8 91 e1 20 04 80 	movabs $0x800420e191,%rax
  800420f0bf:	00 00 00 
  800420f0c2:	ff d0                	callq  *%rax
  800420f0c4:	48 98                	cltq   
  800420f0c6:	e9 c3 01 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_env_set_status:
		return sys_env_set_status(a1, a2);
  800420f0cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f0cf:	89 c2                	mov    %eax,%edx
  800420f0d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f0d5:	89 d6                	mov    %edx,%esi
  800420f0d7:	89 c7                	mov    %eax,%edi
  800420f0d9:	48 b8 66 e2 20 04 80 	movabs $0x800420e266,%rax
  800420f0e0:	00 00 00 
  800420f0e3:	ff d0                	callq  *%rax
  800420f0e5:	48 98                	cltq   
  800420f0e7:	e9 a2 01 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_env_set_trapframe:
		return sys_env_set_trapframe(a1, (struct Trapframe*) a2);
  800420f0ec:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f0f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f0f4:	48 89 d6             	mov    %rdx,%rsi
  800420f0f7:	89 c7                	mov    %eax,%edi
  800420f0f9:	48 b8 c6 e2 20 04 80 	movabs $0x800420e2c6,%rax
  800420f100:	00 00 00 
  800420f103:	ff d0                	callq  *%rax
  800420f105:	48 98                	cltq   
  800420f107:	e9 82 01 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_env_set_pgfault_upcall:
		return sys_env_set_pgfault_upcall(a1, (void*) a2);
  800420f10c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f110:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f114:	48 89 d6             	mov    %rdx,%rsi
  800420f117:	89 c7                	mov    %eax,%edi
  800420f119:	48 b8 b4 e3 20 04 80 	movabs $0x800420e3b4,%rax
  800420f120:	00 00 00 
  800420f123:	ff d0                	callq  *%rax
  800420f125:	48 98                	cltq   
  800420f127:	e9 62 01 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_yield:
		sys_yield();
  800420f12c:	48 b8 81 e1 20 04 80 	movabs $0x800420e181,%rax
  800420f133:	00 00 00 
  800420f136:	ff d0                	callq  *%rax
		return 0;
  800420f138:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f13d:	e9 4c 01 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_ipc_try_send:
		return sys_ipc_try_send(a1, a2, (void*) a3, a4);
  800420f142:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420f146:	89 c1                	mov    %eax,%ecx
  800420f148:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f14c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f150:	89 c6                	mov    %eax,%esi
  800420f152:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f156:	89 c7                	mov    %eax,%edi
  800420f158:	48 b8 f9 e6 20 04 80 	movabs $0x800420e6f9,%rax
  800420f15f:	00 00 00 
  800420f162:	ff d0                	callq  *%rax
  800420f164:	48 98                	cltq   
  800420f166:	e9 23 01 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_ipc_recv:
		sys_ipc_recv((void*) a1);
  800420f16b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f16f:	48 89 c7             	mov    %rax,%rdi
  800420f172:	48 b8 69 ea 20 04 80 	movabs $0x800420ea69,%rax
  800420f179:	00 00 00 
  800420f17c:	ff d0                	callq  *%rax
		return 0;
  800420f17e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f183:	e9 06 01 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_time_msec:
		return sys_time_msec();
  800420f188:	48 b8 92 eb 20 04 80 	movabs $0x800420eb92,%rax
  800420f18f:	00 00 00 
  800420f192:	ff d0                	callq  *%rax
  800420f194:	48 98                	cltq   
  800420f196:	e9 f3 00 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_net_transmit:
		return sys_net_transmit((const void*)a1, a2);
  800420f19b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f19f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f1a3:	48 89 d6             	mov    %rdx,%rsi
  800420f1a6:	48 89 c7             	mov    %rax,%rdi
  800420f1a9:	48 b8 a4 eb 20 04 80 	movabs $0x800420eba4,%rax
  800420f1b0:	00 00 00 
  800420f1b3:	ff d0                	callq  *%rax
  800420f1b5:	48 98                	cltq   
  800420f1b7:	e9 d2 00 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_net_receive:
		return sys_net_receive((void*)a1, a2);
  800420f1bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f1c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f1c4:	48 89 d6             	mov    %rdx,%rsi
  800420f1c7:	48 89 c7             	mov    %rax,%rdi
  800420f1ca:	48 b8 1d ec 20 04 80 	movabs $0x800420ec1d,%rax
  800420f1d1:	00 00 00 
  800420f1d4:	ff d0                	callq  *%rax
  800420f1d6:	48 98                	cltq   
  800420f1d8:	e9 b1 00 00 00       	jmpq   800420f28e <syscall+0x2f8>
#ifndef VMM_GUEST
	case SYS_ept_map:
		return sys_ept_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420f1dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f1e1:	89 c7                	mov    %eax,%edi
  800420f1e3:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420f1e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f1eb:	89 c2                	mov    %eax,%edx
  800420f1ed:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420f1f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f1f5:	41 89 f8             	mov    %edi,%r8d
  800420f1f8:	89 c7                	mov    %eax,%edi
  800420f1fa:	48 b8 f9 ec 20 04 80 	movabs $0x800420ecf9,%rax
  800420f201:	00 00 00 
  800420f204:	ff d0                	callq  *%rax
  800420f206:	48 98                	cltq   
  800420f208:	e9 81 00 00 00       	jmpq   800420f28e <syscall+0x2f8>
	case SYS_env_mkguest:
		return sys_env_mkguest(a1, a2);
  800420f20d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f211:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f215:	48 89 d6             	mov    %rdx,%rsi
  800420f218:	48 89 c7             	mov    %rax,%rdi
  800420f21b:	48 b8 b1 ee 20 04 80 	movabs $0x800420eeb1,%rax
  800420f222:	00 00 00 
  800420f225:	ff d0                	callq  *%rax
  800420f227:	48 98                	cltq   
  800420f229:	eb 63                	jmp    800420f28e <syscall+0x2f8>
	case SYS_vmx_list_vms:
		sys_vmx_list_vms();
  800420f22b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f230:	48 ba 96 ec 20 04 80 	movabs $0x800420ec96,%rdx
  800420f237:	00 00 00 
  800420f23a:	ff d2                	callq  *%rdx
		return 0;
  800420f23c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f241:	eb 4b                	jmp    800420f28e <syscall+0x2f8>
	case SYS_vmx_sel_resume:
		return sys_vmx_sel_resume(a1);
  800420f243:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f247:	89 c7                	mov    %eax,%edi
  800420f249:	48 b8 ad ec 20 04 80 	movabs $0x800420ecad,%rax
  800420f250:	00 00 00 
  800420f253:	ff d0                	callq  *%rax
  800420f255:	0f b6 c0             	movzbl %al,%eax
  800420f258:	eb 34                	jmp    800420f28e <syscall+0x2f8>
	case SYS_vmx_get_vmdisk_number:
		return sys_vmx_get_vmdisk_number();
  800420f25a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f25f:	48 ba cb ec 20 04 80 	movabs $0x800420eccb,%rdx
  800420f266:	00 00 00 
  800420f269:	ff d2                	callq  *%rdx
  800420f26b:	48 98                	cltq   
  800420f26d:	eb 1f                	jmp    800420f28e <syscall+0x2f8>
	case SYS_vmx_incr_vmdisk_number:
		sys_vmx_incr_vmdisk_number();
  800420f26f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f274:	48 ba e2 ec 20 04 80 	movabs $0x800420ece2,%rdx
  800420f27b:	00 00 00 
  800420f27e:	ff d2                	callq  *%rdx
		return 0;
  800420f280:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f285:	eb 07                	jmp    800420f28e <syscall+0x2f8>
#endif

	default:
		return -E_NO_SYS;
  800420f287:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
	}
}
  800420f28e:	c9                   	leaveq 
  800420f28f:	c3                   	retq   

000000800420f290 <_export_sys_ept_map>:

#ifdef TEST_EPT_MAP
int
_export_sys_ept_map(envid_t srcenvid, void *srcva,
		    envid_t guest, void* guest_pa, int perm)
{
  800420f290:	55                   	push   %rbp
  800420f291:	48 89 e5             	mov    %rsp,%rbp
  800420f294:	48 83 ec 20          	sub    $0x20,%rsp
  800420f298:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420f29b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f29f:	89 55 f8             	mov    %edx,-0x8(%rbp)
  800420f2a2:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  800420f2a6:	44 89 45 e4          	mov    %r8d,-0x1c(%rbp)
	return sys_ept_map(srcenvid, srcva, guest, guest_pa, perm);
  800420f2aa:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  800420f2ad:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420f2b1:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420f2b4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420f2b8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420f2bb:	41 89 f8             	mov    %edi,%r8d
  800420f2be:	89 c7                	mov    %eax,%edi
  800420f2c0:	48 b8 f9 ec 20 04 80 	movabs $0x800420ecf9,%rax
  800420f2c7:	00 00 00 
  800420f2ca:	ff d0                	callq  *%rax
}
  800420f2cc:	c9                   	leaveq 
  800420f2cd:	c3                   	retq   

000000800420f2ce <list_func_die>:
  800420f2ce:	55                   	push   %rbp
  800420f2cf:	48 89 e5             	mov    %rsp,%rbp
  800420f2d2:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420f2d9:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420f2e0:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420f2e7:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420f2ee:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f2f5:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420f2fc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420f300:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f307:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f30e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f312:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420f319:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f320:	48 89 d1             	mov    %rdx,%rcx
  800420f323:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f328:	48 89 ce             	mov    %rcx,%rsi
  800420f32b:	48 89 c7             	mov    %rax,%rdi
  800420f32e:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  800420f335:	00 00 00 
  800420f338:	ff d0                	callq  *%rax
  800420f33a:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420f341:	00 
  800420f342:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f349:	00 
  800420f34a:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f351:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f355:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420f359:	74 0a                	je     800420f365 <list_func_die+0x97>
  800420f35b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f360:	e9 cd 06 00 00       	jmpq   800420fa32 <list_func_die+0x764>
  800420f365:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420f36c:	ba 38 00 00 00       	mov    $0x38,%edx
  800420f371:	be 00 00 00 00       	mov    $0x0,%esi
  800420f376:	48 89 c7             	mov    %rax,%rdi
  800420f379:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  800420f380:	00 00 00 
  800420f383:	ff d0                	callq  *%rax
  800420f385:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f38c:	be 11 00 00 00       	mov    $0x11,%esi
  800420f391:	48 89 c7             	mov    %rax,%rdi
  800420f394:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  800420f39b:	00 00 00 
  800420f39e:	ff d0                	callq  *%rax
  800420f3a0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f3a4:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f3ab:	be 12 00 00 00       	mov    $0x12,%esi
  800420f3b0:	48 89 c7             	mov    %rax,%rdi
  800420f3b3:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  800420f3ba:	00 00 00 
  800420f3bd:	ff d0                	callq  *%rax
  800420f3bf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420f3c3:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420f3c8:	0f 84 5f 06 00 00    	je     800420fa2d <list_func_die+0x75f>
  800420f3ce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f3d2:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f3d6:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f3dd:	0f 83 4a 06 00 00    	jae    800420fa2d <list_func_die+0x75f>
  800420f3e3:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420f3e8:	0f 84 3f 06 00 00    	je     800420fa2d <list_func_die+0x75f>
  800420f3ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f3f2:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f3f6:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f3fd:	0f 86 2a 06 00 00    	jbe    800420fa2d <list_func_die+0x75f>
  800420f403:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f40a:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f411:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f418:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f41f:	48 89 10             	mov    %rdx,(%rax)
  800420f422:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f429:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f430:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f437:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f43b:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f442:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420f449:	48 89 c7             	mov    %rax,%rdi
  800420f44c:	48 b8 c3 0a 21 04 80 	movabs $0x8004210ac3,%rax
  800420f453:	00 00 00 
  800420f456:	ff d0                	callq  *%rax
  800420f458:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420f45f:	89 42 18             	mov    %eax,0x18(%rdx)
  800420f462:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f466:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420f46a:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f471:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f475:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f47c:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f483:	48 85 c0             	test   %rax,%rax
  800420f486:	75 35                	jne    800420f4bd <list_func_die+0x1ef>
  800420f488:	48 b9 40 08 22 04 80 	movabs $0x8004220840,%rcx
  800420f48f:	00 00 00 
  800420f492:	48 ba 4c 08 22 04 80 	movabs $0x800422084c,%rdx
  800420f499:	00 00 00 
  800420f49c:	be 95 00 00 00       	mov    $0x95,%esi
  800420f4a1:	48 bf 61 08 22 04 80 	movabs $0x8004220861,%rdi
  800420f4a8:	00 00 00 
  800420f4ab:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f4b0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420f4b7:	00 00 00 
  800420f4ba:	41 ff d0             	callq  *%r8
  800420f4bd:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f4c4:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f4cb:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420f4d2:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420f4d9:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420f4de:	48 89 c7             	mov    %rax,%rdi
  800420f4e1:	48 b8 24 63 21 04 80 	movabs $0x8004216324,%rax
  800420f4e8:	00 00 00 
  800420f4eb:	ff d0                	callq  *%rax
  800420f4ed:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420f4f4:	89 c2                	mov    %eax,%edx
  800420f4f6:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f4fd:	89 50 08             	mov    %edx,0x8(%rax)
  800420f500:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f507:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f50e:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f515:	00 00 00 
  800420f518:	48 8b 00             	mov    (%rax),%rax
  800420f51b:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f522:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f529:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f52d:	48 89 c7             	mov    %rax,%rdi
  800420f530:	48 b8 d4 2f 21 04 80 	movabs $0x8004212fd4,%rax
  800420f537:	00 00 00 
  800420f53a:	ff d0                	callq  *%rax
  800420f53c:	83 f8 04             	cmp    $0x4,%eax
  800420f53f:	0f 84 e1 04 00 00    	je     800420fa26 <list_func_die+0x758>
  800420f545:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f54c:	48 83 f8 05          	cmp    $0x5,%rax
  800420f550:	74 05                	je     800420f557 <list_func_die+0x289>
  800420f552:	e9 cf 04 00 00       	jmpq   800420fa26 <list_func_die+0x758>
  800420f557:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f55e:	be 49 00 00 00       	mov    $0x49,%esi
  800420f563:	48 89 c7             	mov    %rax,%rdi
  800420f566:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  800420f56d:	00 00 00 
  800420f570:	ff d0                	callq  *%rax
  800420f572:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f576:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f57b:	0f 84 d7 00 00 00    	je     800420f658 <list_func_die+0x38a>
  800420f581:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f585:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f589:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f58d:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f591:	48 01 d0             	add    %rdx,%rax
  800420f594:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f598:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f59f:	00 00 00 
  800420f5a2:	48 8b 08             	mov    (%rax),%rcx
  800420f5a5:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f5ac:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f5b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f5b4:	48 8b 38             	mov    (%rax),%rdi
  800420f5b7:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f5bb:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f5bf:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f5c4:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f5c8:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f5cd:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f5d1:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f5d6:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f5da:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f5df:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f5e3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f5e8:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f5ec:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f5f1:	48 89 cf             	mov    %rcx,%rdi
  800420f5f4:	48 b8 fa 2b 21 04 80 	movabs $0x8004212bfa,%rax
  800420f5fb:	00 00 00 
  800420f5fe:	ff d0                	callq  *%rax
  800420f600:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f607:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f60c:	48 89 c7             	mov    %rax,%rdi
  800420f60f:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  800420f616:	00 00 00 
  800420f619:	ff d0                	callq  *%rax
  800420f61b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f61f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f624:	74 0e                	je     800420f634 <list_func_die+0x366>
  800420f626:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f62a:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f62e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f632:	eb 24                	jmp    800420f658 <list_func_die+0x38a>
  800420f634:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f63b:	be 49 00 00 00       	mov    $0x49,%esi
  800420f640:	48 89 c7             	mov    %rax,%rdi
  800420f643:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  800420f64a:	00 00 00 
  800420f64d:	ff d0                	callq  *%rax
  800420f64f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f653:	e9 1e ff ff ff       	jmpq   800420f576 <list_func_die+0x2a8>
  800420f658:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f65f:	00 
  800420f660:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f667:	be 02 00 00 00       	mov    $0x2,%esi
  800420f66c:	48 89 c7             	mov    %rax,%rdi
  800420f66f:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  800420f676:	00 00 00 
  800420f679:	ff d0                	callq  *%rax
  800420f67b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f67f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f684:	0f 84 a2 00 00 00    	je     800420f72c <list_func_die+0x45e>
  800420f68a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f68e:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f692:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420f696:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f69a:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f69e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f6a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6a6:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f6aa:	48 83 f8 03          	cmp    $0x3,%rax
  800420f6ae:	72 7c                	jb     800420f72c <list_func_die+0x45e>
  800420f6b0:	48 83 f8 04          	cmp    $0x4,%rax
  800420f6b4:	76 06                	jbe    800420f6bc <list_func_die+0x3ee>
  800420f6b6:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f6ba:	75 70                	jne    800420f72c <list_func_die+0x45e>
  800420f6bc:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f6c3:	00 
  800420f6c4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f6c8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f6cc:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420f6d0:	0f b6 00             	movzbl (%rax),%eax
  800420f6d3:	88 45 af             	mov    %al,-0x51(%rbp)
  800420f6d6:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f6db:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420f6df:	75 4a                	jne    800420f72b <list_func_die+0x45d>
  800420f6e1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f6e5:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420f6ec:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420f6f3:	48 89 c7             	mov    %rax,%rdi
  800420f6f6:	48 b8 59 19 21 04 80 	movabs $0x8004211959,%rax
  800420f6fd:	00 00 00 
  800420f700:	ff d0                	callq  *%rax
  800420f702:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f706:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f70d:	48 89 c2             	mov    %rax,%rdx
  800420f710:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f714:	48 29 c2             	sub    %rax,%rdx
  800420f717:	48 89 d0             	mov    %rdx,%rax
  800420f71a:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f71e:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f725:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f729:	eb 00                	jmp    800420f72b <list_func_die+0x45d>
  800420f72b:	90                   	nop
  800420f72c:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f733:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f736:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f73a:	89 c2                	mov    %eax,%edx
  800420f73c:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f743:	48 63 c9             	movslq %ecx,%rcx
  800420f746:	48 83 c1 08          	add    $0x8,%rcx
  800420f74a:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f74e:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f755:	8b 50 28             	mov    0x28(%rax),%edx
  800420f758:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f75f:	48 63 d2             	movslq %edx,%rdx
  800420f762:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f766:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f76a:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f76f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f776:	8b 40 28             	mov    0x28(%rax),%eax
  800420f779:	8d 50 01             	lea    0x1(%rax),%edx
  800420f77c:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f783:	89 50 28             	mov    %edx,0x28(%rax)
  800420f786:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f78d:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f794:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f799:	48 89 ce             	mov    %rcx,%rsi
  800420f79c:	48 89 c7             	mov    %rax,%rdi
  800420f79f:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  800420f7a6:	00 00 00 
  800420f7a9:	ff d0                	callq  *%rax
  800420f7ab:	e9 40 02 00 00       	jmpq   800420f9f0 <list_func_die+0x722>
  800420f7b0:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f7b7:	48 83 f8 05          	cmp    $0x5,%rax
  800420f7bb:	74 05                	je     800420f7c2 <list_func_die+0x4f4>
  800420f7bd:	e9 64 02 00 00       	jmpq   800420fa26 <list_func_die+0x758>
  800420f7c2:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f7c9:	be 49 00 00 00       	mov    $0x49,%esi
  800420f7ce:	48 89 c7             	mov    %rax,%rdi
  800420f7d1:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  800420f7d8:	00 00 00 
  800420f7db:	ff d0                	callq  *%rax
  800420f7dd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f7e1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f7e6:	0f 84 b1 00 00 00    	je     800420f89d <list_func_die+0x5cf>
  800420f7ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f7f0:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f7f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f7f8:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f7fc:	48 01 d0             	add    %rdx,%rax
  800420f7ff:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f803:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f80a:	00 00 00 
  800420f80d:	48 8b 08             	mov    (%rax),%rcx
  800420f810:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f817:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f81b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f81f:	48 8b 38             	mov    (%rax),%rdi
  800420f822:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f826:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f82a:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f82f:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f833:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f838:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f83c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f841:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f845:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f84a:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f84e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f853:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f857:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f85c:	48 89 cf             	mov    %rcx,%rdi
  800420f85f:	48 b8 fa 2b 21 04 80 	movabs $0x8004212bfa,%rax
  800420f866:	00 00 00 
  800420f869:	ff d0                	callq  *%rax
  800420f86b:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f872:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f877:	48 89 c7             	mov    %rax,%rdi
  800420f87a:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  800420f881:	00 00 00 
  800420f884:	ff d0                	callq  *%rax
  800420f886:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f88a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f88f:	74 0c                	je     800420f89d <list_func_die+0x5cf>
  800420f891:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f895:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f899:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f89d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f8a4:	00 
  800420f8a5:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f8ac:	be 02 00 00 00       	mov    $0x2,%esi
  800420f8b1:	48 89 c7             	mov    %rax,%rdi
  800420f8b4:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  800420f8bb:	00 00 00 
  800420f8be:	ff d0                	callq  *%rax
  800420f8c0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f8c4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f8c9:	0f 84 a2 00 00 00    	je     800420f971 <list_func_die+0x6a3>
  800420f8cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f8d3:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f8d7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420f8db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f8df:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f8e3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f8e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f8eb:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f8ef:	48 83 f8 03          	cmp    $0x3,%rax
  800420f8f3:	72 7c                	jb     800420f971 <list_func_die+0x6a3>
  800420f8f5:	48 83 f8 04          	cmp    $0x4,%rax
  800420f8f9:	76 06                	jbe    800420f901 <list_func_die+0x633>
  800420f8fb:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f8ff:	75 70                	jne    800420f971 <list_func_die+0x6a3>
  800420f901:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f908:	00 
  800420f909:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f90d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f911:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f915:	0f b6 00             	movzbl (%rax),%eax
  800420f918:	88 45 97             	mov    %al,-0x69(%rbp)
  800420f91b:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f920:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420f924:	75 4a                	jne    800420f970 <list_func_die+0x6a2>
  800420f926:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f92a:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420f931:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420f938:	48 89 c7             	mov    %rax,%rdi
  800420f93b:	48 b8 59 19 21 04 80 	movabs $0x8004211959,%rax
  800420f942:	00 00 00 
  800420f945:	ff d0                	callq  *%rax
  800420f947:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f94b:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f952:	48 89 c2             	mov    %rax,%rdx
  800420f955:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f959:	48 29 c2             	sub    %rax,%rdx
  800420f95c:	48 89 d0             	mov    %rdx,%rax
  800420f95f:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f963:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f96a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f96e:	eb 00                	jmp    800420f970 <list_func_die+0x6a2>
  800420f970:	90                   	nop
  800420f971:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f978:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f97b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f97f:	89 c2                	mov    %eax,%edx
  800420f981:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f988:	48 63 c9             	movslq %ecx,%rcx
  800420f98b:	48 83 c1 08          	add    $0x8,%rcx
  800420f98f:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f993:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f99a:	8b 50 28             	mov    0x28(%rax),%edx
  800420f99d:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f9a4:	48 63 d2             	movslq %edx,%rdx
  800420f9a7:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f9ab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f9af:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f9b4:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f9bb:	8b 40 28             	mov    0x28(%rax),%eax
  800420f9be:	8d 50 01             	lea    0x1(%rax),%edx
  800420f9c1:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f9c8:	89 50 28             	mov    %edx,0x28(%rax)
  800420f9cb:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f9d2:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f9d9:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f9de:	48 89 ce             	mov    %rcx,%rsi
  800420f9e1:	48 89 c7             	mov    %rax,%rdi
  800420f9e4:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  800420f9eb:	00 00 00 
  800420f9ee:	ff d0                	callq  *%rax
  800420f9f0:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f9f7:	00 00 00 
  800420f9fa:	48 8b 00             	mov    (%rax),%rax
  800420f9fd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fa01:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420fa08:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420fa0f:	48 89 c7             	mov    %rax,%rdi
  800420fa12:	48 b8 90 2d 21 04 80 	movabs $0x8004212d90,%rax
  800420fa19:	00 00 00 
  800420fa1c:	ff d0                	callq  *%rax
  800420fa1e:	85 c0                	test   %eax,%eax
  800420fa20:	0f 84 8a fd ff ff    	je     800420f7b0 <list_func_die+0x4e2>
  800420fa26:	b8 01 00 00 00       	mov    $0x1,%eax
  800420fa2b:	eb 05                	jmp    800420fa32 <list_func_die+0x764>
  800420fa2d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fa32:	c9                   	leaveq 
  800420fa33:	c3                   	retq   

000000800420fa34 <debuginfo_rip>:
  800420fa34:	55                   	push   %rbp
  800420fa35:	48 89 e5             	mov    %rsp,%rbp
  800420fa38:	53                   	push   %rbx
  800420fa39:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420fa40:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420fa47:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420fa4e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420fa55:	00 
  800420fa56:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420fa5d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420fa61:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fa68:	48 bb 72 08 22 04 80 	movabs $0x8004220872,%rbx
  800420fa6f:	00 00 00 
  800420fa72:	48 89 18             	mov    %rbx,(%rax)
  800420fa75:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fa7c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420fa83:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fa8a:	48 bb 72 08 22 04 80 	movabs $0x8004220872,%rbx
  800420fa91:	00 00 00 
  800420fa94:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420fa98:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fa9f:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420faa6:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420faad:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fab4:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420fab8:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fabf:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420fac6:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420facd:	00 00 00 
  800420fad0:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420fad7:	76 13                	jbe    800420faec <debuginfo_rip+0xb8>
  800420fad9:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420fae0:	00 00 00 
  800420fae3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fae7:	e9 04 01 00 00       	jmpq   800420fbf0 <debuginfo_rip+0x1bc>
  800420faec:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420faf3:	00 00 00 
  800420faf6:	ff d0                	callq  *%rax
  800420faf8:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420faff:	00 00 00 
  800420fb02:	48 98                	cltq   
  800420fb04:	48 c1 e0 03          	shl    $0x3,%rax
  800420fb08:	48 89 c1             	mov    %rax,%rcx
  800420fb0b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fb0f:	48 01 c8             	add    %rcx,%rax
  800420fb12:	48 01 d0             	add    %rdx,%rax
  800420fb15:	48 83 c0 08          	add    $0x8,%rax
  800420fb19:	48 8b 10             	mov    (%rax),%rdx
  800420fb1c:	48 b8 98 e2 4d 04 80 	movabs $0x80044de298,%rax
  800420fb23:	00 00 00 
  800420fb26:	48 8b 00             	mov    (%rax),%rax
  800420fb29:	48 39 c2             	cmp    %rax,%rdx
  800420fb2c:	0f 84 83 00 00 00    	je     800420fbb5 <debuginfo_rip+0x181>
  800420fb32:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420fb39:	00 00 00 
  800420fb3c:	ff d0                	callq  *%rax
  800420fb3e:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420fb45:	00 00 00 
  800420fb48:	48 98                	cltq   
  800420fb4a:	48 c1 e0 03          	shl    $0x3,%rax
  800420fb4e:	48 89 c1             	mov    %rax,%rcx
  800420fb51:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fb55:	48 01 c8             	add    %rcx,%rax
  800420fb58:	48 01 d0             	add    %rdx,%rax
  800420fb5b:	48 83 c0 08          	add    $0x8,%rax
  800420fb5f:	48 8b 00             	mov    (%rax),%rax
  800420fb62:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420fb69:	48 89 c7             	mov    %rax,%rdi
  800420fb6c:	48 b8 1f 65 21 04 80 	movabs $0x800421651f,%rax
  800420fb73:	00 00 00 
  800420fb76:	ff d0                	callq  *%rax
  800420fb78:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420fb7f:	00 00 00 
  800420fb82:	ff d0                	callq  *%rax
  800420fb84:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420fb8b:	00 00 00 
  800420fb8e:	48 98                	cltq   
  800420fb90:	48 c1 e0 03          	shl    $0x3,%rax
  800420fb94:	48 89 c1             	mov    %rax,%rcx
  800420fb97:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fb9b:	48 01 c8             	add    %rcx,%rax
  800420fb9e:	48 01 d0             	add    %rdx,%rax
  800420fba1:	48 83 c0 08          	add    $0x8,%rax
  800420fba5:	48 8b 10             	mov    (%rax),%rdx
  800420fba8:	48 b8 98 e2 4d 04 80 	movabs $0x80044de298,%rax
  800420fbaf:	00 00 00 
  800420fbb2:	48 89 10             	mov    %rdx,(%rax)
  800420fbb5:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800420fbbc:	00 00 00 
  800420fbbf:	ff d0                	callq  *%rax
  800420fbc1:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800420fbc8:	00 00 00 
  800420fbcb:	48 98                	cltq   
  800420fbcd:	48 c1 e0 03          	shl    $0x3,%rax
  800420fbd1:	48 89 c1             	mov    %rax,%rcx
  800420fbd4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420fbd8:	48 01 c8             	add    %rcx,%rax
  800420fbdb:	48 01 d0             	add    %rdx,%rax
  800420fbde:	48 83 c0 08          	add    $0x8,%rax
  800420fbe2:	48 8b 00             	mov    (%rax),%rax
  800420fbe5:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420fbec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420fbf0:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fbf7:	00 00 00 
  800420fbfa:	48 8b 00             	mov    (%rax),%rax
  800420fbfd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc01:	48 89 d6             	mov    %rdx,%rsi
  800420fc04:	48 89 c7             	mov    %rax,%rdi
  800420fc07:	48 b8 08 1c 21 04 80 	movabs $0x8004211c08,%rax
  800420fc0e:	00 00 00 
  800420fc11:	ff d0                	callq  *%rax
  800420fc13:	48 bf 7c 08 22 04 80 	movabs $0x800422087c,%rdi
  800420fc1a:	00 00 00 
  800420fc1d:	48 b8 9f 64 21 04 80 	movabs $0x800421649f,%rax
  800420fc24:	00 00 00 
  800420fc27:	ff d0                	callq  *%rax
  800420fc29:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420fc2d:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fc34:	00 00 00 
  800420fc37:	48 8b 00             	mov    (%rax),%rax
  800420fc3a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420fc3e:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420fc42:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420fc46:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fc4d:	00 00 00 
  800420fc50:	48 8b 00             	mov    (%rax),%rax
  800420fc53:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420fc57:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420fc5b:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fc5f:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fc66:	00 00 00 
  800420fc69:	48 8b 00             	mov    (%rax),%rax
  800420fc6c:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420fc70:	48 85 c0             	test   %rax,%rax
  800420fc73:	75 35                	jne    800420fcaa <debuginfo_rip+0x276>
  800420fc75:	48 b9 88 08 22 04 80 	movabs $0x8004220888,%rcx
  800420fc7c:	00 00 00 
  800420fc7f:	48 ba 4c 08 22 04 80 	movabs $0x800422084c,%rdx
  800420fc86:	00 00 00 
  800420fc89:	be 40 01 00 00       	mov    $0x140,%esi
  800420fc8e:	48 bf 61 08 22 04 80 	movabs $0x8004220861,%rdi
  800420fc95:	00 00 00 
  800420fc98:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fc9d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420fca4:	00 00 00 
  800420fca7:	41 ff d0             	callq  *%r8
  800420fcaa:	e9 6f 01 00 00       	jmpq   800420fe1e <debuginfo_rip+0x3ea>
  800420fcaf:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fcb6:	00 00 00 
  800420fcb9:	48 8b 00             	mov    (%rax),%rax
  800420fcbc:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420fcc0:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420fcc7:	be 00 00 00 00       	mov    $0x0,%esi
  800420fccc:	48 89 c7             	mov    %rax,%rdi
  800420fccf:	48 b8 90 2d 21 04 80 	movabs $0x8004212d90,%rax
  800420fcd6:	00 00 00 
  800420fcd9:	ff d0                	callq  *%rax
  800420fcdb:	83 f8 04             	cmp    $0x4,%eax
  800420fcde:	75 05                	jne    800420fce5 <debuginfo_rip+0x2b1>
  800420fce0:	e9 39 01 00 00       	jmpq   800420fe1e <debuginfo_rip+0x3ea>
  800420fce5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fce9:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420fcf0:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420fcf7:	00 00 00 00 
  800420fcfb:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fd02:	00 00 00 
  800420fd05:	48 8b 00             	mov    (%rax),%rax
  800420fd08:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420fd0f:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420fd16:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420fd1a:	48 89 c7             	mov    %rax,%rdi
  800420fd1d:	48 b8 d4 2f 21 04 80 	movabs $0x8004212fd4,%rax
  800420fd24:	00 00 00 
  800420fd27:	ff d0                	callq  *%rax
  800420fd29:	83 f8 04             	cmp    $0x4,%eax
  800420fd2c:	75 05                	jne    800420fd33 <debuginfo_rip+0x2ff>
  800420fd2e:	e9 eb 00 00 00       	jmpq   800420fe1e <debuginfo_rip+0x3ea>
  800420fd33:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fd37:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420fd3e:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420fd45:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420fd4c:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fd53:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420fd5a:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fd61:	48 89 ce             	mov    %rcx,%rsi
  800420fd64:	48 89 c7             	mov    %rax,%rdi
  800420fd67:	48 b8 ce f2 20 04 80 	movabs $0x800420f2ce,%rax
  800420fd6e:	00 00 00 
  800420fd71:	ff d0                	callq  *%rax
  800420fd73:	85 c0                	test   %eax,%eax
  800420fd75:	74 30                	je     800420fda7 <debuginfo_rip+0x373>
  800420fd77:	90                   	nop
  800420fd78:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fd7f:	00 00 00 
  800420fd82:	48 8b 00             	mov    (%rax),%rax
  800420fd85:	be 00 00 00 00       	mov    $0x0,%esi
  800420fd8a:	48 89 c7             	mov    %rax,%rdi
  800420fd8d:	48 b8 ac 56 21 04 80 	movabs $0x80042156ac,%rax
  800420fd94:	00 00 00 
  800420fd97:	ff d0                	callq  *%rax
  800420fd99:	83 f8 01             	cmp    $0x1,%eax
  800420fd9c:	0f 85 bb 00 00 00    	jne    800420fe5d <debuginfo_rip+0x429>
  800420fda2:	e9 ac 00 00 00       	jmpq   800420fe53 <debuginfo_rip+0x41f>
  800420fda7:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fdae:	00 00 00 
  800420fdb1:	48 8b 00             	mov    (%rax),%rax
  800420fdb4:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420fdb8:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420fdbf:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420fdc6:	48 89 c7             	mov    %rax,%rdi
  800420fdc9:	48 b8 90 2d 21 04 80 	movabs $0x8004212d90,%rax
  800420fdd0:	00 00 00 
  800420fdd3:	ff d0                	callq  *%rax
  800420fdd5:	85 c0                	test   %eax,%eax
  800420fdd7:	79 02                	jns    800420fddb <debuginfo_rip+0x3a7>
  800420fdd9:	eb 43                	jmp    800420fe1e <debuginfo_rip+0x3ea>
  800420fddb:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420fde2:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420fde9:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420fdee:	48 89 ce             	mov    %rcx,%rsi
  800420fdf1:	48 89 c7             	mov    %rax,%rdi
  800420fdf4:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  800420fdfb:	00 00 00 
  800420fdfe:	ff d0                	callq  *%rax
  800420fe00:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fe04:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420fe0b:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420fe12:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420fe19:	e9 2e ff ff ff       	jmpq   800420fd4c <debuginfo_rip+0x318>
  800420fe1e:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fe25:	00 00 00 
  800420fe28:	48 8b 00             	mov    (%rax),%rax
  800420fe2b:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420fe2f:	48 89 d6             	mov    %rdx,%rsi
  800420fe32:	48 89 c7             	mov    %rax,%rdi
  800420fe35:	48 b8 ea 1c 21 04 80 	movabs $0x8004211cea,%rax
  800420fe3c:	00 00 00 
  800420fe3f:	ff d0                	callq  *%rax
  800420fe41:	85 c0                	test   %eax,%eax
  800420fe43:	0f 84 66 fe ff ff    	je     800420fcaf <debuginfo_rip+0x27b>
  800420fe49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fe4e:	e9 a0 00 00 00       	jmpq   800420fef3 <debuginfo_rip+0x4bf>
  800420fe53:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fe58:	e9 96 00 00 00       	jmpq   800420fef3 <debuginfo_rip+0x4bf>
  800420fe5d:	48 b8 80 56 23 04 80 	movabs $0x8004235680,%rax
  800420fe64:	00 00 00 
  800420fe67:	48 8b 08             	mov    (%rax),%rcx
  800420fe6a:	48 b8 78 56 23 04 80 	movabs $0x8004235678,%rax
  800420fe71:	00 00 00 
  800420fe74:	48 8b 10             	mov    (%rax),%rdx
  800420fe77:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fe7e:	00 00 00 
  800420fe81:	48 8b 00             	mov    (%rax),%rax
  800420fe84:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420fe8b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420fe91:	48 89 c7             	mov    %rax,%rdi
  800420fe94:	48 b8 15 32 21 04 80 	movabs $0x8004213215,%rax
  800420fe9b:	00 00 00 
  800420fe9e:	ff d0                	callq  *%rax
  800420fea0:	85 c0                	test   %eax,%eax
  800420fea2:	75 4a                	jne    800420feee <debuginfo_rip+0x4ba>
  800420fea4:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420feab:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420feb2:	48 b8 78 56 23 04 80 	movabs $0x8004235678,%rax
  800420feb9:	00 00 00 
  800420febc:	48 8b 30             	mov    (%rax),%rsi
  800420febf:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fec6:	00 00 00 
  800420fec9:	48 8b 00             	mov    (%rax),%rax
  800420fecc:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fed3:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420fed9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420fedf:	48 89 c7             	mov    %rax,%rdi
  800420fee2:	48 b8 21 45 21 04 80 	movabs $0x8004214521,%rax
  800420fee9:	00 00 00 
  800420feec:	ff d0                	callq  *%rax
  800420feee:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fef3:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420fefa:	5b                   	pop    %rbx
  800420fefb:	5d                   	pop    %rbp
  800420fefc:	c3                   	retq   

000000800420fefd <printnum>:
  800420fefd:	55                   	push   %rbp
  800420fefe:	48 89 e5             	mov    %rsp,%rbp
  800420ff01:	53                   	push   %rbx
  800420ff02:	48 83 ec 38          	sub    $0x38,%rsp
  800420ff06:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ff0a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420ff0e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420ff12:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420ff15:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420ff19:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800420ff1d:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420ff20:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420ff24:	77 3b                	ja     800420ff61 <printnum+0x64>
  800420ff26:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420ff29:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420ff2d:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420ff30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ff34:	ba 00 00 00 00       	mov    $0x0,%edx
  800420ff39:	48 f7 f3             	div    %rbx
  800420ff3c:	48 89 c2             	mov    %rax,%rdx
  800420ff3f:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420ff42:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420ff45:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420ff49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff4d:	41 89 f9             	mov    %edi,%r9d
  800420ff50:	48 89 c7             	mov    %rax,%rdi
  800420ff53:	48 b8 fd fe 20 04 80 	movabs $0x800420fefd,%rax
  800420ff5a:	00 00 00 
  800420ff5d:	ff d0                	callq  *%rax
  800420ff5f:	eb 1e                	jmp    800420ff7f <printnum+0x82>
  800420ff61:	eb 12                	jmp    800420ff75 <printnum+0x78>
  800420ff63:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420ff67:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420ff6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff6e:	48 89 ce             	mov    %rcx,%rsi
  800420ff71:	89 d7                	mov    %edx,%edi
  800420ff73:	ff d0                	callq  *%rax
  800420ff75:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420ff79:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420ff7d:	7f e4                	jg     800420ff63 <printnum+0x66>
  800420ff7f:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420ff82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ff86:	ba 00 00 00 00       	mov    $0x0,%edx
  800420ff8b:	48 f7 f1             	div    %rcx
  800420ff8e:	48 89 d0             	mov    %rdx,%rax
  800420ff91:	48 ba 90 0a 22 04 80 	movabs $0x8004220a90,%rdx
  800420ff98:	00 00 00 
  800420ff9b:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420ff9f:	0f be d0             	movsbl %al,%edx
  800420ffa2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420ffa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ffaa:	48 89 ce             	mov    %rcx,%rsi
  800420ffad:	89 d7                	mov    %edx,%edi
  800420ffaf:	ff d0                	callq  *%rax
  800420ffb1:	48 83 c4 38          	add    $0x38,%rsp
  800420ffb5:	5b                   	pop    %rbx
  800420ffb6:	5d                   	pop    %rbp
  800420ffb7:	c3                   	retq   

000000800420ffb8 <getuint>:
  800420ffb8:	55                   	push   %rbp
  800420ffb9:	48 89 e5             	mov    %rsp,%rbp
  800420ffbc:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420ffc0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ffc4:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420ffc7:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420ffcb:	7e 52                	jle    800421001f <getuint+0x67>
  800420ffcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ffd1:	8b 00                	mov    (%rax),%eax
  800420ffd3:	83 f8 30             	cmp    $0x30,%eax
  800420ffd6:	73 24                	jae    800420fffc <getuint+0x44>
  800420ffd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ffdc:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420ffe0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ffe4:	8b 00                	mov    (%rax),%eax
  800420ffe6:	89 c0                	mov    %eax,%eax
  800420ffe8:	48 01 d0             	add    %rdx,%rax
  800420ffeb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ffef:	8b 12                	mov    (%rdx),%edx
  800420fff1:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fff4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fff8:	89 0a                	mov    %ecx,(%rdx)
  800420fffa:	eb 17                	jmp    8004210013 <getuint+0x5b>
  800420fffc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210000:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004210004:	48 89 d0             	mov    %rdx,%rax
  8004210007:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800421000b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421000f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210013:	48 8b 00             	mov    (%rax),%rax
  8004210016:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421001a:	e9 a3 00 00 00       	jmpq   80042100c2 <getuint+0x10a>
  800421001f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004210023:	74 4f                	je     8004210074 <getuint+0xbc>
  8004210025:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210029:	8b 00                	mov    (%rax),%eax
  800421002b:	83 f8 30             	cmp    $0x30,%eax
  800421002e:	73 24                	jae    8004210054 <getuint+0x9c>
  8004210030:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210034:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210038:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421003c:	8b 00                	mov    (%rax),%eax
  800421003e:	89 c0                	mov    %eax,%eax
  8004210040:	48 01 d0             	add    %rdx,%rax
  8004210043:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210047:	8b 12                	mov    (%rdx),%edx
  8004210049:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800421004c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210050:	89 0a                	mov    %ecx,(%rdx)
  8004210052:	eb 17                	jmp    800421006b <getuint+0xb3>
  8004210054:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210058:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421005c:	48 89 d0             	mov    %rdx,%rax
  800421005f:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  8004210063:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210067:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800421006b:	48 8b 00             	mov    (%rax),%rax
  800421006e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210072:	eb 4e                	jmp    80042100c2 <getuint+0x10a>
  8004210074:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210078:	8b 00                	mov    (%rax),%eax
  800421007a:	83 f8 30             	cmp    $0x30,%eax
  800421007d:	73 24                	jae    80042100a3 <getuint+0xeb>
  800421007f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210083:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210087:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421008b:	8b 00                	mov    (%rax),%eax
  800421008d:	89 c0                	mov    %eax,%eax
  800421008f:	48 01 d0             	add    %rdx,%rax
  8004210092:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210096:	8b 12                	mov    (%rdx),%edx
  8004210098:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800421009b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421009f:	89 0a                	mov    %ecx,(%rdx)
  80042100a1:	eb 17                	jmp    80042100ba <getuint+0x102>
  80042100a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100a7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042100ab:	48 89 d0             	mov    %rdx,%rax
  80042100ae:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  80042100b2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042100b6:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  80042100ba:	8b 00                	mov    (%rax),%eax
  80042100bc:	89 c0                	mov    %eax,%eax
  80042100be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042100c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042100c6:	c9                   	leaveq 
  80042100c7:	c3                   	retq   

00000080042100c8 <getint>:
  80042100c8:	55                   	push   %rbp
  80042100c9:	48 89 e5             	mov    %rsp,%rbp
  80042100cc:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042100d0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042100d4:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042100d7:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  80042100db:	7e 52                	jle    800421012f <getint+0x67>
  80042100dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100e1:	8b 00                	mov    (%rax),%eax
  80042100e3:	83 f8 30             	cmp    $0x30,%eax
  80042100e6:	73 24                	jae    800421010c <getint+0x44>
  80042100e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100ec:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042100f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100f4:	8b 00                	mov    (%rax),%eax
  80042100f6:	89 c0                	mov    %eax,%eax
  80042100f8:	48 01 d0             	add    %rdx,%rax
  80042100fb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042100ff:	8b 12                	mov    (%rdx),%edx
  8004210101:	8d 4a 08             	lea    0x8(%rdx),%ecx
  8004210104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210108:	89 0a                	mov    %ecx,(%rdx)
  800421010a:	eb 17                	jmp    8004210123 <getint+0x5b>
  800421010c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210110:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004210114:	48 89 d0             	mov    %rdx,%rax
  8004210117:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800421011b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421011f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  8004210123:	48 8b 00             	mov    (%rax),%rax
  8004210126:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421012a:	e9 a3 00 00 00       	jmpq   80042101d2 <getint+0x10a>
  800421012f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004210133:	74 4f                	je     8004210184 <getint+0xbc>
  8004210135:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210139:	8b 00                	mov    (%rax),%eax
  800421013b:	83 f8 30             	cmp    $0x30,%eax
  800421013e:	73 24                	jae    8004210164 <getint+0x9c>
  8004210140:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210144:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210148:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421014c:	8b 00                	mov    (%rax),%eax
  800421014e:	89 c0                	mov    %eax,%eax
  8004210150:	48 01 d0             	add    %rdx,%rax
  8004210153:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210157:	8b 12                	mov    (%rdx),%edx
  8004210159:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800421015c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210160:	89 0a                	mov    %ecx,(%rdx)
  8004210162:	eb 17                	jmp    800421017b <getint+0xb3>
  8004210164:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210168:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421016c:	48 89 d0             	mov    %rdx,%rax
  800421016f:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  8004210173:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210177:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800421017b:	48 8b 00             	mov    (%rax),%rax
  800421017e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210182:	eb 4e                	jmp    80042101d2 <getint+0x10a>
  8004210184:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210188:	8b 00                	mov    (%rax),%eax
  800421018a:	83 f8 30             	cmp    $0x30,%eax
  800421018d:	73 24                	jae    80042101b3 <getint+0xeb>
  800421018f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210193:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004210197:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421019b:	8b 00                	mov    (%rax),%eax
  800421019d:	89 c0                	mov    %eax,%eax
  800421019f:	48 01 d0             	add    %rdx,%rax
  80042101a2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101a6:	8b 12                	mov    (%rdx),%edx
  80042101a8:	8d 4a 08             	lea    0x8(%rdx),%ecx
  80042101ab:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101af:	89 0a                	mov    %ecx,(%rdx)
  80042101b1:	eb 17                	jmp    80042101ca <getint+0x102>
  80042101b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101b7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042101bb:	48 89 d0             	mov    %rdx,%rax
  80042101be:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  80042101c2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101c6:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  80042101ca:	8b 00                	mov    (%rax),%eax
  80042101cc:	48 98                	cltq   
  80042101ce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042101d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042101d6:	c9                   	leaveq 
  80042101d7:	c3                   	retq   

00000080042101d8 <vprintfmt>:
  80042101d8:	55                   	push   %rbp
  80042101d9:	48 89 e5             	mov    %rsp,%rbp
  80042101dc:	41 54                	push   %r12
  80042101de:	53                   	push   %rbx
  80042101df:	48 83 ec 60          	sub    $0x60,%rsp
  80042101e3:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042101e7:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042101eb:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  80042101ef:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  80042101f3:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042101f7:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042101fb:	48 8b 0a             	mov    (%rdx),%rcx
  80042101fe:	48 89 08             	mov    %rcx,(%rax)
  8004210201:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210205:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004210209:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800421020d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210211:	eb 17                	jmp    800421022a <vprintfmt+0x52>
  8004210213:	85 db                	test   %ebx,%ebx
  8004210215:	0f 84 cc 04 00 00    	je     80042106e7 <vprintfmt+0x50f>
  800421021b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421021f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210223:	48 89 d6             	mov    %rdx,%rsi
  8004210226:	89 df                	mov    %ebx,%edi
  8004210228:	ff d0                	callq  *%rax
  800421022a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421022e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210232:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004210236:	0f b6 00             	movzbl (%rax),%eax
  8004210239:	0f b6 d8             	movzbl %al,%ebx
  800421023c:	83 fb 25             	cmp    $0x25,%ebx
  800421023f:	75 d2                	jne    8004210213 <vprintfmt+0x3b>
  8004210241:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  8004210245:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800421024c:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  8004210253:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800421025a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  8004210261:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210265:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210269:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800421026d:	0f b6 00             	movzbl (%rax),%eax
  8004210270:	0f b6 d8             	movzbl %al,%ebx
  8004210273:	8d 43 dd             	lea    -0x23(%rbx),%eax
  8004210276:	83 f8 55             	cmp    $0x55,%eax
  8004210279:	0f 87 34 04 00 00    	ja     80042106b3 <vprintfmt+0x4db>
  800421027f:	89 c0                	mov    %eax,%eax
  8004210281:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004210288:	00 
  8004210289:	48 b8 b8 0a 22 04 80 	movabs $0x8004220ab8,%rax
  8004210290:	00 00 00 
  8004210293:	48 01 d0             	add    %rdx,%rax
  8004210296:	48 8b 00             	mov    (%rax),%rax
  8004210299:	ff e0                	jmpq   *%rax
  800421029b:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  800421029f:	eb c0                	jmp    8004210261 <vprintfmt+0x89>
  80042102a1:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  80042102a5:	eb ba                	jmp    8004210261 <vprintfmt+0x89>
  80042102a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  80042102ae:	8b 55 d8             	mov    -0x28(%rbp),%edx
  80042102b1:	89 d0                	mov    %edx,%eax
  80042102b3:	c1 e0 02             	shl    $0x2,%eax
  80042102b6:	01 d0                	add    %edx,%eax
  80042102b8:	01 c0                	add    %eax,%eax
  80042102ba:	01 d8                	add    %ebx,%eax
  80042102bc:	83 e8 30             	sub    $0x30,%eax
  80042102bf:	89 45 d8             	mov    %eax,-0x28(%rbp)
  80042102c2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042102c6:	0f b6 00             	movzbl (%rax),%eax
  80042102c9:	0f be d8             	movsbl %al,%ebx
  80042102cc:	83 fb 2f             	cmp    $0x2f,%ebx
  80042102cf:	7e 0c                	jle    80042102dd <vprintfmt+0x105>
  80042102d1:	83 fb 39             	cmp    $0x39,%ebx
  80042102d4:	7f 07                	jg     80042102dd <vprintfmt+0x105>
  80042102d6:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  80042102db:	eb d1                	jmp    80042102ae <vprintfmt+0xd6>
  80042102dd:	eb 58                	jmp    8004210337 <vprintfmt+0x15f>
  80042102df:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042102e2:	83 f8 30             	cmp    $0x30,%eax
  80042102e5:	73 17                	jae    80042102fe <vprintfmt+0x126>
  80042102e7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042102eb:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042102ee:	89 c0                	mov    %eax,%eax
  80042102f0:	48 01 d0             	add    %rdx,%rax
  80042102f3:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042102f6:	83 c2 08             	add    $0x8,%edx
  80042102f9:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042102fc:	eb 0f                	jmp    800421030d <vprintfmt+0x135>
  80042102fe:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210302:	48 89 d0             	mov    %rdx,%rax
  8004210305:	48 83 c2 08          	add    $0x8,%rdx
  8004210309:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800421030d:	8b 00                	mov    (%rax),%eax
  800421030f:	89 45 d8             	mov    %eax,-0x28(%rbp)
  8004210312:	eb 23                	jmp    8004210337 <vprintfmt+0x15f>
  8004210314:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210318:	79 0c                	jns    8004210326 <vprintfmt+0x14e>
  800421031a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  8004210321:	e9 3b ff ff ff       	jmpq   8004210261 <vprintfmt+0x89>
  8004210326:	e9 36 ff ff ff       	jmpq   8004210261 <vprintfmt+0x89>
  800421032b:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  8004210332:	e9 2a ff ff ff       	jmpq   8004210261 <vprintfmt+0x89>
  8004210337:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421033b:	79 12                	jns    800421034f <vprintfmt+0x177>
  800421033d:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004210340:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004210343:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800421034a:	e9 12 ff ff ff       	jmpq   8004210261 <vprintfmt+0x89>
  800421034f:	e9 0d ff ff ff       	jmpq   8004210261 <vprintfmt+0x89>
  8004210354:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  8004210358:	e9 04 ff ff ff       	jmpq   8004210261 <vprintfmt+0x89>
  800421035d:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210360:	83 f8 30             	cmp    $0x30,%eax
  8004210363:	73 17                	jae    800421037c <vprintfmt+0x1a4>
  8004210365:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004210369:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421036c:	89 c0                	mov    %eax,%eax
  800421036e:	48 01 d0             	add    %rdx,%rax
  8004210371:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210374:	83 c2 08             	add    $0x8,%edx
  8004210377:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421037a:	eb 0f                	jmp    800421038b <vprintfmt+0x1b3>
  800421037c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210380:	48 89 d0             	mov    %rdx,%rax
  8004210383:	48 83 c2 08          	add    $0x8,%rdx
  8004210387:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800421038b:	8b 10                	mov    (%rax),%edx
  800421038d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004210391:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210395:	48 89 ce             	mov    %rcx,%rsi
  8004210398:	89 d7                	mov    %edx,%edi
  800421039a:	ff d0                	callq  *%rax
  800421039c:	e9 40 03 00 00       	jmpq   80042106e1 <vprintfmt+0x509>
  80042103a1:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042103a4:	83 f8 30             	cmp    $0x30,%eax
  80042103a7:	73 17                	jae    80042103c0 <vprintfmt+0x1e8>
  80042103a9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042103ad:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042103b0:	89 c0                	mov    %eax,%eax
  80042103b2:	48 01 d0             	add    %rdx,%rax
  80042103b5:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042103b8:	83 c2 08             	add    $0x8,%edx
  80042103bb:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042103be:	eb 0f                	jmp    80042103cf <vprintfmt+0x1f7>
  80042103c0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042103c4:	48 89 d0             	mov    %rdx,%rax
  80042103c7:	48 83 c2 08          	add    $0x8,%rdx
  80042103cb:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042103cf:	8b 18                	mov    (%rax),%ebx
  80042103d1:	85 db                	test   %ebx,%ebx
  80042103d3:	79 02                	jns    80042103d7 <vprintfmt+0x1ff>
  80042103d5:	f7 db                	neg    %ebx
  80042103d7:	83 fb 15             	cmp    $0x15,%ebx
  80042103da:	7f 16                	jg     80042103f2 <vprintfmt+0x21a>
  80042103dc:	48 b8 e0 09 22 04 80 	movabs $0x80042209e0,%rax
  80042103e3:	00 00 00 
  80042103e6:	48 63 d3             	movslq %ebx,%rdx
  80042103e9:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  80042103ed:	4d 85 e4             	test   %r12,%r12
  80042103f0:	75 2e                	jne    8004210420 <vprintfmt+0x248>
  80042103f2:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  80042103f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042103fa:	89 d9                	mov    %ebx,%ecx
  80042103fc:	48 ba a1 0a 22 04 80 	movabs $0x8004220aa1,%rdx
  8004210403:	00 00 00 
  8004210406:	48 89 c7             	mov    %rax,%rdi
  8004210409:	b8 00 00 00 00       	mov    $0x0,%eax
  800421040e:	49 b8 f0 06 21 04 80 	movabs $0x80042106f0,%r8
  8004210415:	00 00 00 
  8004210418:	41 ff d0             	callq  *%r8
  800421041b:	e9 c1 02 00 00       	jmpq   80042106e1 <vprintfmt+0x509>
  8004210420:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210424:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210428:	4c 89 e1             	mov    %r12,%rcx
  800421042b:	48 ba aa 0a 22 04 80 	movabs $0x8004220aaa,%rdx
  8004210432:	00 00 00 
  8004210435:	48 89 c7             	mov    %rax,%rdi
  8004210438:	b8 00 00 00 00       	mov    $0x0,%eax
  800421043d:	49 b8 f0 06 21 04 80 	movabs $0x80042106f0,%r8
  8004210444:	00 00 00 
  8004210447:	41 ff d0             	callq  *%r8
  800421044a:	e9 92 02 00 00       	jmpq   80042106e1 <vprintfmt+0x509>
  800421044f:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210452:	83 f8 30             	cmp    $0x30,%eax
  8004210455:	73 17                	jae    800421046e <vprintfmt+0x296>
  8004210457:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421045b:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421045e:	89 c0                	mov    %eax,%eax
  8004210460:	48 01 d0             	add    %rdx,%rax
  8004210463:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210466:	83 c2 08             	add    $0x8,%edx
  8004210469:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421046c:	eb 0f                	jmp    800421047d <vprintfmt+0x2a5>
  800421046e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210472:	48 89 d0             	mov    %rdx,%rax
  8004210475:	48 83 c2 08          	add    $0x8,%rdx
  8004210479:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800421047d:	4c 8b 20             	mov    (%rax),%r12
  8004210480:	4d 85 e4             	test   %r12,%r12
  8004210483:	75 0a                	jne    800421048f <vprintfmt+0x2b7>
  8004210485:	49 bc ad 0a 22 04 80 	movabs $0x8004220aad,%r12
  800421048c:	00 00 00 
  800421048f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210493:	7e 3f                	jle    80042104d4 <vprintfmt+0x2fc>
  8004210495:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  8004210499:	74 39                	je     80042104d4 <vprintfmt+0x2fc>
  800421049b:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421049e:	48 98                	cltq   
  80042104a0:	48 89 c6             	mov    %rax,%rsi
  80042104a3:	4c 89 e7             	mov    %r12,%rdi
  80042104a6:	48 b8 f1 0a 21 04 80 	movabs $0x8004210af1,%rax
  80042104ad:	00 00 00 
  80042104b0:	ff d0                	callq  *%rax
  80042104b2:	29 45 dc             	sub    %eax,-0x24(%rbp)
  80042104b5:	eb 17                	jmp    80042104ce <vprintfmt+0x2f6>
  80042104b7:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  80042104bb:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042104bf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042104c3:	48 89 ce             	mov    %rcx,%rsi
  80042104c6:	89 d7                	mov    %edx,%edi
  80042104c8:	ff d0                	callq  *%rax
  80042104ca:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  80042104ce:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042104d2:	7f e3                	jg     80042104b7 <vprintfmt+0x2df>
  80042104d4:	eb 37                	jmp    800421050d <vprintfmt+0x335>
  80042104d6:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  80042104da:	74 1e                	je     80042104fa <vprintfmt+0x322>
  80042104dc:	83 fb 1f             	cmp    $0x1f,%ebx
  80042104df:	7e 05                	jle    80042104e6 <vprintfmt+0x30e>
  80042104e1:	83 fb 7e             	cmp    $0x7e,%ebx
  80042104e4:	7e 14                	jle    80042104fa <vprintfmt+0x322>
  80042104e6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042104ea:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042104ee:	48 89 d6             	mov    %rdx,%rsi
  80042104f1:	bf 3f 00 00 00       	mov    $0x3f,%edi
  80042104f6:	ff d0                	callq  *%rax
  80042104f8:	eb 0f                	jmp    8004210509 <vprintfmt+0x331>
  80042104fa:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042104fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210502:	48 89 d6             	mov    %rdx,%rsi
  8004210505:	89 df                	mov    %ebx,%edi
  8004210507:	ff d0                	callq  *%rax
  8004210509:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800421050d:	4c 89 e0             	mov    %r12,%rax
  8004210510:	4c 8d 60 01          	lea    0x1(%rax),%r12
  8004210514:	0f b6 00             	movzbl (%rax),%eax
  8004210517:	0f be d8             	movsbl %al,%ebx
  800421051a:	85 db                	test   %ebx,%ebx
  800421051c:	74 10                	je     800421052e <vprintfmt+0x356>
  800421051e:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  8004210522:	78 b2                	js     80042104d6 <vprintfmt+0x2fe>
  8004210524:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  8004210528:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800421052c:	79 a8                	jns    80042104d6 <vprintfmt+0x2fe>
  800421052e:	eb 16                	jmp    8004210546 <vprintfmt+0x36e>
  8004210530:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210534:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210538:	48 89 d6             	mov    %rdx,%rsi
  800421053b:	bf 20 00 00 00       	mov    $0x20,%edi
  8004210540:	ff d0                	callq  *%rax
  8004210542:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  8004210546:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421054a:	7f e4                	jg     8004210530 <vprintfmt+0x358>
  800421054c:	e9 90 01 00 00       	jmpq   80042106e1 <vprintfmt+0x509>
  8004210551:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210555:	be 03 00 00 00       	mov    $0x3,%esi
  800421055a:	48 89 c7             	mov    %rax,%rdi
  800421055d:	48 b8 c8 00 21 04 80 	movabs $0x80042100c8,%rax
  8004210564:	00 00 00 
  8004210567:	ff d0                	callq  *%rax
  8004210569:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421056d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210571:	48 85 c0             	test   %rax,%rax
  8004210574:	79 1d                	jns    8004210593 <vprintfmt+0x3bb>
  8004210576:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421057a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421057e:	48 89 d6             	mov    %rdx,%rsi
  8004210581:	bf 2d 00 00 00       	mov    $0x2d,%edi
  8004210586:	ff d0                	callq  *%rax
  8004210588:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421058c:	48 f7 d8             	neg    %rax
  800421058f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210593:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800421059a:	e9 d5 00 00 00       	jmpq   8004210674 <vprintfmt+0x49c>
  800421059f:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042105a3:	be 03 00 00 00       	mov    $0x3,%esi
  80042105a8:	48 89 c7             	mov    %rax,%rdi
  80042105ab:	48 b8 b8 ff 20 04 80 	movabs $0x800420ffb8,%rax
  80042105b2:	00 00 00 
  80042105b5:	ff d0                	callq  *%rax
  80042105b7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042105bb:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  80042105c2:	e9 ad 00 00 00       	jmpq   8004210674 <vprintfmt+0x49c>
  80042105c7:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042105cb:	be 03 00 00 00       	mov    $0x3,%esi
  80042105d0:	48 89 c7             	mov    %rax,%rdi
  80042105d3:	48 b8 b8 ff 20 04 80 	movabs $0x800420ffb8,%rax
  80042105da:	00 00 00 
  80042105dd:	ff d0                	callq  *%rax
  80042105df:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042105e3:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  80042105ea:	e9 85 00 00 00       	jmpq   8004210674 <vprintfmt+0x49c>
  80042105ef:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042105f3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042105f7:	48 89 d6             	mov    %rdx,%rsi
  80042105fa:	bf 30 00 00 00       	mov    $0x30,%edi
  80042105ff:	ff d0                	callq  *%rax
  8004210601:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210605:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210609:	48 89 d6             	mov    %rdx,%rsi
  800421060c:	bf 78 00 00 00       	mov    $0x78,%edi
  8004210611:	ff d0                	callq  *%rax
  8004210613:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210616:	83 f8 30             	cmp    $0x30,%eax
  8004210619:	73 17                	jae    8004210632 <vprintfmt+0x45a>
  800421061b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421061f:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210622:	89 c0                	mov    %eax,%eax
  8004210624:	48 01 d0             	add    %rdx,%rax
  8004210627:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421062a:	83 c2 08             	add    $0x8,%edx
  800421062d:	89 55 b8             	mov    %edx,-0x48(%rbp)
  8004210630:	eb 0f                	jmp    8004210641 <vprintfmt+0x469>
  8004210632:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210636:	48 89 d0             	mov    %rdx,%rax
  8004210639:	48 83 c2 08          	add    $0x8,%rdx
  800421063d:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210641:	48 8b 00             	mov    (%rax),%rax
  8004210644:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210648:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800421064f:	eb 23                	jmp    8004210674 <vprintfmt+0x49c>
  8004210651:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210655:	be 03 00 00 00       	mov    $0x3,%esi
  800421065a:	48 89 c7             	mov    %rax,%rdi
  800421065d:	48 b8 b8 ff 20 04 80 	movabs $0x800420ffb8,%rax
  8004210664:	00 00 00 
  8004210667:	ff d0                	callq  *%rax
  8004210669:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421066d:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  8004210674:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  8004210679:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800421067c:	8b 7d dc             	mov    -0x24(%rbp),%edi
  800421067f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210683:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210687:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421068b:	45 89 c1             	mov    %r8d,%r9d
  800421068e:	41 89 f8             	mov    %edi,%r8d
  8004210691:	48 89 c7             	mov    %rax,%rdi
  8004210694:	48 b8 fd fe 20 04 80 	movabs $0x800420fefd,%rax
  800421069b:	00 00 00 
  800421069e:	ff d0                	callq  *%rax
  80042106a0:	eb 3f                	jmp    80042106e1 <vprintfmt+0x509>
  80042106a2:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042106a6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042106aa:	48 89 d6             	mov    %rdx,%rsi
  80042106ad:	89 df                	mov    %ebx,%edi
  80042106af:	ff d0                	callq  *%rax
  80042106b1:	eb 2e                	jmp    80042106e1 <vprintfmt+0x509>
  80042106b3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042106b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042106bb:	48 89 d6             	mov    %rdx,%rsi
  80042106be:	bf 25 00 00 00       	mov    $0x25,%edi
  80042106c3:	ff d0                	callq  *%rax
  80042106c5:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  80042106ca:	eb 05                	jmp    80042106d1 <vprintfmt+0x4f9>
  80042106cc:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  80042106d1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042106d5:	48 83 e8 01          	sub    $0x1,%rax
  80042106d9:	0f b6 00             	movzbl (%rax),%eax
  80042106dc:	3c 25                	cmp    $0x25,%al
  80042106de:	75 ec                	jne    80042106cc <vprintfmt+0x4f4>
  80042106e0:	90                   	nop
  80042106e1:	90                   	nop
  80042106e2:	e9 43 fb ff ff       	jmpq   800421022a <vprintfmt+0x52>
  80042106e7:	48 83 c4 60          	add    $0x60,%rsp
  80042106eb:	5b                   	pop    %rbx
  80042106ec:	41 5c                	pop    %r12
  80042106ee:	5d                   	pop    %rbp
  80042106ef:	c3                   	retq   

00000080042106f0 <printfmt>:
  80042106f0:	55                   	push   %rbp
  80042106f1:	48 89 e5             	mov    %rsp,%rbp
  80042106f4:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042106fb:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  8004210702:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  8004210709:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004210710:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004210717:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800421071e:	84 c0                	test   %al,%al
  8004210720:	74 20                	je     8004210742 <printfmt+0x52>
  8004210722:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004210726:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800421072a:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800421072e:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004210732:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004210736:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800421073a:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800421073e:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004210742:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004210749:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004210750:	00 00 00 
  8004210753:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800421075a:	00 00 00 
  800421075d:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004210761:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004210768:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421076f:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004210776:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  800421077d:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004210784:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800421078b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004210792:	48 89 c7             	mov    %rax,%rdi
  8004210795:	48 b8 d8 01 21 04 80 	movabs $0x80042101d8,%rax
  800421079c:	00 00 00 
  800421079f:	ff d0                	callq  *%rax
  80042107a1:	c9                   	leaveq 
  80042107a2:	c3                   	retq   

00000080042107a3 <sprintputch>:
  80042107a3:	55                   	push   %rbp
  80042107a4:	48 89 e5             	mov    %rsp,%rbp
  80042107a7:	48 83 ec 10          	sub    $0x10,%rsp
  80042107ab:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042107ae:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042107b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107b6:	8b 40 10             	mov    0x10(%rax),%eax
  80042107b9:	8d 50 01             	lea    0x1(%rax),%edx
  80042107bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107c0:	89 50 10             	mov    %edx,0x10(%rax)
  80042107c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107c7:	48 8b 10             	mov    (%rax),%rdx
  80042107ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107ce:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042107d2:	48 39 c2             	cmp    %rax,%rdx
  80042107d5:	73 17                	jae    80042107ee <sprintputch+0x4b>
  80042107d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107db:	48 8b 00             	mov    (%rax),%rax
  80042107de:	48 8d 48 01          	lea    0x1(%rax),%rcx
  80042107e2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042107e6:	48 89 0a             	mov    %rcx,(%rdx)
  80042107e9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042107ec:	88 10                	mov    %dl,(%rax)
  80042107ee:	c9                   	leaveq 
  80042107ef:	c3                   	retq   

00000080042107f0 <vsnprintf>:
  80042107f0:	55                   	push   %rbp
  80042107f1:	48 89 e5             	mov    %rsp,%rbp
  80042107f4:	48 83 ec 50          	sub    $0x50,%rsp
  80042107f8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042107fc:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042107ff:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004210803:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004210807:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  800421080b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421080f:	48 8b 0a             	mov    (%rdx),%rcx
  8004210812:	48 89 08             	mov    %rcx,(%rax)
  8004210815:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210819:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800421081d:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004210821:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210825:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004210829:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421082d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004210830:	48 98                	cltq   
  8004210832:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210836:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421083a:	48 01 d0             	add    %rdx,%rax
  800421083d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004210841:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  8004210848:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421084d:	74 06                	je     8004210855 <vsnprintf+0x65>
  800421084f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004210853:	7f 07                	jg     800421085c <vsnprintf+0x6c>
  8004210855:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421085a:	eb 2f                	jmp    800421088b <vsnprintf+0x9b>
  800421085c:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  8004210860:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004210864:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004210868:	48 89 c6             	mov    %rax,%rsi
  800421086b:	48 bf a3 07 21 04 80 	movabs $0x80042107a3,%rdi
  8004210872:	00 00 00 
  8004210875:	48 b8 d8 01 21 04 80 	movabs $0x80042101d8,%rax
  800421087c:	00 00 00 
  800421087f:	ff d0                	callq  *%rax
  8004210881:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210885:	c6 00 00             	movb   $0x0,(%rax)
  8004210888:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421088b:	c9                   	leaveq 
  800421088c:	c3                   	retq   

000000800421088d <snprintf>:
  800421088d:	55                   	push   %rbp
  800421088e:	48 89 e5             	mov    %rsp,%rbp
  8004210891:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004210898:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800421089f:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  80042108a5:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042108ac:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042108b3:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042108ba:	84 c0                	test   %al,%al
  80042108bc:	74 20                	je     80042108de <snprintf+0x51>
  80042108be:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042108c2:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  80042108c6:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  80042108ca:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  80042108ce:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  80042108d2:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  80042108d6:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  80042108da:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  80042108de:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  80042108e5:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  80042108ec:	00 00 00 
  80042108ef:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  80042108f6:	00 00 00 
  80042108f9:	48 8d 45 10          	lea    0x10(%rbp),%rax
  80042108fd:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004210904:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421090b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004210912:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004210919:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004210920:	48 8b 0a             	mov    (%rdx),%rcx
  8004210923:	48 89 08             	mov    %rcx,(%rax)
  8004210926:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421092a:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800421092e:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004210932:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210936:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  800421093d:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004210944:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  800421094a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004210951:	48 89 c7             	mov    %rax,%rdi
  8004210954:	48 b8 f0 07 21 04 80 	movabs $0x80042107f0,%rax
  800421095b:	00 00 00 
  800421095e:	ff d0                	callq  *%rax
  8004210960:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004210966:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421096c:	c9                   	leaveq 
  800421096d:	c3                   	retq   

000000800421096e <readline>:
  800421096e:	55                   	push   %rbp
  800421096f:	48 89 e5             	mov    %rsp,%rbp
  8004210972:	48 83 ec 20          	sub    $0x20,%rsp
  8004210976:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421097a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421097f:	74 22                	je     80042109a3 <readline+0x35>
  8004210981:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210985:	48 89 c6             	mov    %rax,%rsi
  8004210988:	48 bf 68 0d 22 04 80 	movabs $0x8004220d68,%rdi
  800421098f:	00 00 00 
  8004210992:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210997:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421099e:	00 00 00 
  80042109a1:	ff d2                	callq  *%rdx
  80042109a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042109aa:	bf 00 00 00 00       	mov    $0x0,%edi
  80042109af:	48 b8 33 12 20 04 80 	movabs $0x8004201233,%rax
  80042109b6:	00 00 00 
  80042109b9:	ff d0                	callq  *%rax
  80042109bb:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042109be:	48 b8 11 12 20 04 80 	movabs $0x8004201211,%rax
  80042109c5:	00 00 00 
  80042109c8:	ff d0                	callq  *%rax
  80042109ca:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042109cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042109d1:	79 30                	jns    8004210a03 <readline+0x95>
  80042109d3:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  80042109d7:	74 20                	je     80042109f9 <readline+0x8b>
  80042109d9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042109dc:	89 c6                	mov    %eax,%esi
  80042109de:	48 bf 6b 0d 22 04 80 	movabs $0x8004220d6b,%rdi
  80042109e5:	00 00 00 
  80042109e8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042109ed:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042109f4:	00 00 00 
  80042109f7:	ff d2                	callq  *%rdx
  80042109f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042109fe:	e9 be 00 00 00       	jmpq   8004210ac1 <readline+0x153>
  8004210a03:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004210a07:	74 06                	je     8004210a0f <readline+0xa1>
  8004210a09:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  8004210a0d:	75 26                	jne    8004210a35 <readline+0xc7>
  8004210a0f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210a13:	7e 20                	jle    8004210a35 <readline+0xc7>
  8004210a15:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210a19:	74 11                	je     8004210a2c <readline+0xbe>
  8004210a1b:	bf 08 00 00 00       	mov    $0x8,%edi
  8004210a20:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210a27:	00 00 00 
  8004210a2a:	ff d0                	callq  *%rax
  8004210a2c:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  8004210a30:	e9 87 00 00 00       	jmpq   8004210abc <readline+0x14e>
  8004210a35:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210a39:	7e 3f                	jle    8004210a7a <readline+0x10c>
  8004210a3b:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  8004210a42:	7f 36                	jg     8004210a7a <readline+0x10c>
  8004210a44:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210a48:	74 11                	je     8004210a5b <readline+0xed>
  8004210a4a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210a4d:	89 c7                	mov    %eax,%edi
  8004210a4f:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210a56:	00 00 00 
  8004210a59:	ff d0                	callq  *%rax
  8004210a5b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210a5e:	8d 50 01             	lea    0x1(%rax),%edx
  8004210a61:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004210a64:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004210a67:	89 d1                	mov    %edx,%ecx
  8004210a69:	48 ba a0 e2 4d 04 80 	movabs $0x80044de2a0,%rdx
  8004210a70:	00 00 00 
  8004210a73:	48 98                	cltq   
  8004210a75:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  8004210a78:	eb 42                	jmp    8004210abc <readline+0x14e>
  8004210a7a:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  8004210a7e:	74 06                	je     8004210a86 <readline+0x118>
  8004210a80:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  8004210a84:	75 36                	jne    8004210abc <readline+0x14e>
  8004210a86:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210a8a:	74 11                	je     8004210a9d <readline+0x12f>
  8004210a8c:	bf 0a 00 00 00       	mov    $0xa,%edi
  8004210a91:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210a98:	00 00 00 
  8004210a9b:	ff d0                	callq  *%rax
  8004210a9d:	48 ba a0 e2 4d 04 80 	movabs $0x80044de2a0,%rdx
  8004210aa4:	00 00 00 
  8004210aa7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210aaa:	48 98                	cltq   
  8004210aac:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  8004210ab0:	48 b8 a0 e2 4d 04 80 	movabs $0x80044de2a0,%rax
  8004210ab7:	00 00 00 
  8004210aba:	eb 05                	jmp    8004210ac1 <readline+0x153>
  8004210abc:	e9 fd fe ff ff       	jmpq   80042109be <readline+0x50>
  8004210ac1:	c9                   	leaveq 
  8004210ac2:	c3                   	retq   

0000008004210ac3 <strlen>:
  8004210ac3:	55                   	push   %rbp
  8004210ac4:	48 89 e5             	mov    %rsp,%rbp
  8004210ac7:	48 83 ec 18          	sub    $0x18,%rsp
  8004210acb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210acf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210ad6:	eb 09                	jmp    8004210ae1 <strlen+0x1e>
  8004210ad8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210adc:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210ae1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ae5:	0f b6 00             	movzbl (%rax),%eax
  8004210ae8:	84 c0                	test   %al,%al
  8004210aea:	75 ec                	jne    8004210ad8 <strlen+0x15>
  8004210aec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210aef:	c9                   	leaveq 
  8004210af0:	c3                   	retq   

0000008004210af1 <strnlen>:
  8004210af1:	55                   	push   %rbp
  8004210af2:	48 89 e5             	mov    %rsp,%rbp
  8004210af5:	48 83 ec 20          	sub    $0x20,%rsp
  8004210af9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210afd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210b01:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210b08:	eb 0e                	jmp    8004210b18 <strnlen+0x27>
  8004210b0a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210b0e:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210b13:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  8004210b18:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004210b1d:	74 0b                	je     8004210b2a <strnlen+0x39>
  8004210b1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b23:	0f b6 00             	movzbl (%rax),%eax
  8004210b26:	84 c0                	test   %al,%al
  8004210b28:	75 e0                	jne    8004210b0a <strnlen+0x19>
  8004210b2a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210b2d:	c9                   	leaveq 
  8004210b2e:	c3                   	retq   

0000008004210b2f <strcpy>:
  8004210b2f:	55                   	push   %rbp
  8004210b30:	48 89 e5             	mov    %rsp,%rbp
  8004210b33:	48 83 ec 20          	sub    $0x20,%rsp
  8004210b37:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210b3b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210b3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b43:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210b47:	90                   	nop
  8004210b48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b4c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210b50:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210b54:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210b58:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210b5c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210b60:	0f b6 12             	movzbl (%rdx),%edx
  8004210b63:	88 10                	mov    %dl,(%rax)
  8004210b65:	0f b6 00             	movzbl (%rax),%eax
  8004210b68:	84 c0                	test   %al,%al
  8004210b6a:	75 dc                	jne    8004210b48 <strcpy+0x19>
  8004210b6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b70:	c9                   	leaveq 
  8004210b71:	c3                   	retq   

0000008004210b72 <strcat>:
  8004210b72:	55                   	push   %rbp
  8004210b73:	48 89 e5             	mov    %rsp,%rbp
  8004210b76:	48 83 ec 20          	sub    $0x20,%rsp
  8004210b7a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210b7e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210b82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b86:	48 89 c7             	mov    %rax,%rdi
  8004210b89:	48 b8 c3 0a 21 04 80 	movabs $0x8004210ac3,%rax
  8004210b90:	00 00 00 
  8004210b93:	ff d0                	callq  *%rax
  8004210b95:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004210b98:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210b9b:	48 63 d0             	movslq %eax,%rdx
  8004210b9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ba2:	48 01 c2             	add    %rax,%rdx
  8004210ba5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210ba9:	48 89 c6             	mov    %rax,%rsi
  8004210bac:	48 89 d7             	mov    %rdx,%rdi
  8004210baf:	48 b8 2f 0b 21 04 80 	movabs $0x8004210b2f,%rax
  8004210bb6:	00 00 00 
  8004210bb9:	ff d0                	callq  *%rax
  8004210bbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bbf:	c9                   	leaveq 
  8004210bc0:	c3                   	retq   

0000008004210bc1 <strncpy>:
  8004210bc1:	55                   	push   %rbp
  8004210bc2:	48 89 e5             	mov    %rsp,%rbp
  8004210bc5:	48 83 ec 28          	sub    $0x28,%rsp
  8004210bc9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210bcd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210bd1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210bd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bd9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210bdd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210be4:	00 
  8004210be5:	eb 2a                	jmp    8004210c11 <strncpy+0x50>
  8004210be7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210beb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210bef:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210bf3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210bf7:	0f b6 12             	movzbl (%rdx),%edx
  8004210bfa:	88 10                	mov    %dl,(%rax)
  8004210bfc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210c00:	0f b6 00             	movzbl (%rax),%eax
  8004210c03:	84 c0                	test   %al,%al
  8004210c05:	74 05                	je     8004210c0c <strncpy+0x4b>
  8004210c07:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  8004210c0c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210c11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c15:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004210c19:	72 cc                	jb     8004210be7 <strncpy+0x26>
  8004210c1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c1f:	c9                   	leaveq 
  8004210c20:	c3                   	retq   

0000008004210c21 <strlcpy>:
  8004210c21:	55                   	push   %rbp
  8004210c22:	48 89 e5             	mov    %rsp,%rbp
  8004210c25:	48 83 ec 28          	sub    $0x28,%rsp
  8004210c29:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210c2d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210c31:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210c35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c39:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210c3d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210c42:	74 3d                	je     8004210c81 <strlcpy+0x60>
  8004210c44:	eb 1d                	jmp    8004210c63 <strlcpy+0x42>
  8004210c46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c4a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210c4e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210c52:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210c56:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210c5a:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210c5e:	0f b6 12             	movzbl (%rdx),%edx
  8004210c61:	88 10                	mov    %dl,(%rax)
  8004210c63:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  8004210c68:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210c6d:	74 0b                	je     8004210c7a <strlcpy+0x59>
  8004210c6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210c73:	0f b6 00             	movzbl (%rax),%eax
  8004210c76:	84 c0                	test   %al,%al
  8004210c78:	75 cc                	jne    8004210c46 <strlcpy+0x25>
  8004210c7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c7e:	c6 00 00             	movb   $0x0,(%rax)
  8004210c81:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210c85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c89:	48 29 c2             	sub    %rax,%rdx
  8004210c8c:	48 89 d0             	mov    %rdx,%rax
  8004210c8f:	c9                   	leaveq 
  8004210c90:	c3                   	retq   

0000008004210c91 <strcmp>:
  8004210c91:	55                   	push   %rbp
  8004210c92:	48 89 e5             	mov    %rsp,%rbp
  8004210c95:	48 83 ec 10          	sub    $0x10,%rsp
  8004210c99:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210c9d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210ca1:	eb 0a                	jmp    8004210cad <strcmp+0x1c>
  8004210ca3:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210ca8:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210cad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cb1:	0f b6 00             	movzbl (%rax),%eax
  8004210cb4:	84 c0                	test   %al,%al
  8004210cb6:	74 12                	je     8004210cca <strcmp+0x39>
  8004210cb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cbc:	0f b6 10             	movzbl (%rax),%edx
  8004210cbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210cc3:	0f b6 00             	movzbl (%rax),%eax
  8004210cc6:	38 c2                	cmp    %al,%dl
  8004210cc8:	74 d9                	je     8004210ca3 <strcmp+0x12>
  8004210cca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cce:	0f b6 00             	movzbl (%rax),%eax
  8004210cd1:	0f b6 d0             	movzbl %al,%edx
  8004210cd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210cd8:	0f b6 00             	movzbl (%rax),%eax
  8004210cdb:	0f b6 c0             	movzbl %al,%eax
  8004210cde:	29 c2                	sub    %eax,%edx
  8004210ce0:	89 d0                	mov    %edx,%eax
  8004210ce2:	c9                   	leaveq 
  8004210ce3:	c3                   	retq   

0000008004210ce4 <strncmp>:
  8004210ce4:	55                   	push   %rbp
  8004210ce5:	48 89 e5             	mov    %rsp,%rbp
  8004210ce8:	48 83 ec 18          	sub    $0x18,%rsp
  8004210cec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210cf0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210cf4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210cf8:	eb 0f                	jmp    8004210d09 <strncmp+0x25>
  8004210cfa:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  8004210cff:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210d04:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210d09:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210d0e:	74 1d                	je     8004210d2d <strncmp+0x49>
  8004210d10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d14:	0f b6 00             	movzbl (%rax),%eax
  8004210d17:	84 c0                	test   %al,%al
  8004210d19:	74 12                	je     8004210d2d <strncmp+0x49>
  8004210d1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d1f:	0f b6 10             	movzbl (%rax),%edx
  8004210d22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d26:	0f b6 00             	movzbl (%rax),%eax
  8004210d29:	38 c2                	cmp    %al,%dl
  8004210d2b:	74 cd                	je     8004210cfa <strncmp+0x16>
  8004210d2d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210d32:	75 07                	jne    8004210d3b <strncmp+0x57>
  8004210d34:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210d39:	eb 18                	jmp    8004210d53 <strncmp+0x6f>
  8004210d3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d3f:	0f b6 00             	movzbl (%rax),%eax
  8004210d42:	0f b6 d0             	movzbl %al,%edx
  8004210d45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d49:	0f b6 00             	movzbl (%rax),%eax
  8004210d4c:	0f b6 c0             	movzbl %al,%eax
  8004210d4f:	29 c2                	sub    %eax,%edx
  8004210d51:	89 d0                	mov    %edx,%eax
  8004210d53:	c9                   	leaveq 
  8004210d54:	c3                   	retq   

0000008004210d55 <strchr>:
  8004210d55:	55                   	push   %rbp
  8004210d56:	48 89 e5             	mov    %rsp,%rbp
  8004210d59:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210d5d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210d61:	89 f0                	mov    %esi,%eax
  8004210d63:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210d66:	eb 17                	jmp    8004210d7f <strchr+0x2a>
  8004210d68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d6c:	0f b6 00             	movzbl (%rax),%eax
  8004210d6f:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210d72:	75 06                	jne    8004210d7a <strchr+0x25>
  8004210d74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d78:	eb 15                	jmp    8004210d8f <strchr+0x3a>
  8004210d7a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210d7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d83:	0f b6 00             	movzbl (%rax),%eax
  8004210d86:	84 c0                	test   %al,%al
  8004210d88:	75 de                	jne    8004210d68 <strchr+0x13>
  8004210d8a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210d8f:	c9                   	leaveq 
  8004210d90:	c3                   	retq   

0000008004210d91 <strfind>:
  8004210d91:	55                   	push   %rbp
  8004210d92:	48 89 e5             	mov    %rsp,%rbp
  8004210d95:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210d99:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210d9d:	89 f0                	mov    %esi,%eax
  8004210d9f:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210da2:	eb 13                	jmp    8004210db7 <strfind+0x26>
  8004210da4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210da8:	0f b6 00             	movzbl (%rax),%eax
  8004210dab:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210dae:	75 02                	jne    8004210db2 <strfind+0x21>
  8004210db0:	eb 10                	jmp    8004210dc2 <strfind+0x31>
  8004210db2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210db7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210dbb:	0f b6 00             	movzbl (%rax),%eax
  8004210dbe:	84 c0                	test   %al,%al
  8004210dc0:	75 e2                	jne    8004210da4 <strfind+0x13>
  8004210dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210dc6:	c9                   	leaveq 
  8004210dc7:	c3                   	retq   

0000008004210dc8 <memset>:
  8004210dc8:	55                   	push   %rbp
  8004210dc9:	48 89 e5             	mov    %rsp,%rbp
  8004210dcc:	48 83 ec 18          	sub    $0x18,%rsp
  8004210dd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210dd4:	89 75 f4             	mov    %esi,-0xc(%rbp)
  8004210dd7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210ddb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210de0:	75 06                	jne    8004210de8 <memset+0x20>
  8004210de2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210de6:	eb 69                	jmp    8004210e51 <memset+0x89>
  8004210de8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210dec:	83 e0 03             	and    $0x3,%eax
  8004210def:	48 85 c0             	test   %rax,%rax
  8004210df2:	75 48                	jne    8004210e3c <memset+0x74>
  8004210df4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210df8:	83 e0 03             	and    $0x3,%eax
  8004210dfb:	48 85 c0             	test   %rax,%rax
  8004210dfe:	75 3c                	jne    8004210e3c <memset+0x74>
  8004210e00:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  8004210e07:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e0a:	c1 e0 18             	shl    $0x18,%eax
  8004210e0d:	89 c2                	mov    %eax,%edx
  8004210e0f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e12:	c1 e0 10             	shl    $0x10,%eax
  8004210e15:	09 c2                	or     %eax,%edx
  8004210e17:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e1a:	c1 e0 08             	shl    $0x8,%eax
  8004210e1d:	09 d0                	or     %edx,%eax
  8004210e1f:	09 45 f4             	or     %eax,-0xc(%rbp)
  8004210e22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e26:	48 c1 e8 02          	shr    $0x2,%rax
  8004210e2a:	48 89 c1             	mov    %rax,%rcx
  8004210e2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210e31:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e34:	48 89 d7             	mov    %rdx,%rdi
  8004210e37:	fc                   	cld    
  8004210e38:	f3 ab                	rep stos %eax,%es:(%rdi)
  8004210e3a:	eb 11                	jmp    8004210e4d <memset+0x85>
  8004210e3c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210e40:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210e43:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004210e47:	48 89 d7             	mov    %rdx,%rdi
  8004210e4a:	fc                   	cld    
  8004210e4b:	f3 aa                	rep stos %al,%es:(%rdi)
  8004210e4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e51:	c9                   	leaveq 
  8004210e52:	c3                   	retq   

0000008004210e53 <memmove>:
  8004210e53:	55                   	push   %rbp
  8004210e54:	48 89 e5             	mov    %rsp,%rbp
  8004210e57:	48 83 ec 28          	sub    $0x28,%rsp
  8004210e5b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210e5f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210e63:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210e67:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210e6b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210e6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e73:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210e77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e7b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210e7f:	0f 83 88 00 00 00    	jae    8004210f0d <memmove+0xba>
  8004210e85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e89:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210e8d:	48 01 d0             	add    %rdx,%rax
  8004210e90:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210e94:	76 77                	jbe    8004210f0d <memmove+0xba>
  8004210e96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e9a:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210e9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ea2:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  8004210ea6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210eaa:	83 e0 03             	and    $0x3,%eax
  8004210ead:	48 85 c0             	test   %rax,%rax
  8004210eb0:	75 3b                	jne    8004210eed <memmove+0x9a>
  8004210eb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210eb6:	83 e0 03             	and    $0x3,%eax
  8004210eb9:	48 85 c0             	test   %rax,%rax
  8004210ebc:	75 2f                	jne    8004210eed <memmove+0x9a>
  8004210ebe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ec2:	83 e0 03             	and    $0x3,%eax
  8004210ec5:	48 85 c0             	test   %rax,%rax
  8004210ec8:	75 23                	jne    8004210eed <memmove+0x9a>
  8004210eca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ece:	48 83 e8 04          	sub    $0x4,%rax
  8004210ed2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210ed6:	48 83 ea 04          	sub    $0x4,%rdx
  8004210eda:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210ede:	48 c1 e9 02          	shr    $0x2,%rcx
  8004210ee2:	48 89 c7             	mov    %rax,%rdi
  8004210ee5:	48 89 d6             	mov    %rdx,%rsi
  8004210ee8:	fd                   	std    
  8004210ee9:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210eeb:	eb 1d                	jmp    8004210f0a <memmove+0xb7>
  8004210eed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ef1:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210ef5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ef9:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  8004210efd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f01:	48 89 d7             	mov    %rdx,%rdi
  8004210f04:	48 89 c1             	mov    %rax,%rcx
  8004210f07:	fd                   	std    
  8004210f08:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210f0a:	fc                   	cld    
  8004210f0b:	eb 57                	jmp    8004210f64 <memmove+0x111>
  8004210f0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f11:	83 e0 03             	and    $0x3,%eax
  8004210f14:	48 85 c0             	test   %rax,%rax
  8004210f17:	75 36                	jne    8004210f4f <memmove+0xfc>
  8004210f19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f1d:	83 e0 03             	and    $0x3,%eax
  8004210f20:	48 85 c0             	test   %rax,%rax
  8004210f23:	75 2a                	jne    8004210f4f <memmove+0xfc>
  8004210f25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f29:	83 e0 03             	and    $0x3,%eax
  8004210f2c:	48 85 c0             	test   %rax,%rax
  8004210f2f:	75 1e                	jne    8004210f4f <memmove+0xfc>
  8004210f31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f35:	48 c1 e8 02          	shr    $0x2,%rax
  8004210f39:	48 89 c1             	mov    %rax,%rcx
  8004210f3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210f44:	48 89 c7             	mov    %rax,%rdi
  8004210f47:	48 89 d6             	mov    %rdx,%rsi
  8004210f4a:	fc                   	cld    
  8004210f4b:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210f4d:	eb 15                	jmp    8004210f64 <memmove+0x111>
  8004210f4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f53:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210f57:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210f5b:	48 89 c7             	mov    %rax,%rdi
  8004210f5e:	48 89 d6             	mov    %rdx,%rsi
  8004210f61:	fc                   	cld    
  8004210f62:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210f64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f68:	c9                   	leaveq 
  8004210f69:	c3                   	retq   

0000008004210f6a <memcpy>:
  8004210f6a:	55                   	push   %rbp
  8004210f6b:	48 89 e5             	mov    %rsp,%rbp
  8004210f6e:	48 83 ec 18          	sub    $0x18,%rsp
  8004210f72:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210f76:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210f7a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210f7e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210f82:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004210f86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f8a:	48 89 ce             	mov    %rcx,%rsi
  8004210f8d:	48 89 c7             	mov    %rax,%rdi
  8004210f90:	48 b8 53 0e 21 04 80 	movabs $0x8004210e53,%rax
  8004210f97:	00 00 00 
  8004210f9a:	ff d0                	callq  *%rax
  8004210f9c:	c9                   	leaveq 
  8004210f9d:	c3                   	retq   

0000008004210f9e <memcmp>:
  8004210f9e:	55                   	push   %rbp
  8004210f9f:	48 89 e5             	mov    %rsp,%rbp
  8004210fa2:	48 83 ec 28          	sub    $0x28,%rsp
  8004210fa6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210faa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210fae:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210fb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210fb6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210fba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210fbe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210fc2:	eb 36                	jmp    8004210ffa <memcmp+0x5c>
  8004210fc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210fc8:	0f b6 10             	movzbl (%rax),%edx
  8004210fcb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fcf:	0f b6 00             	movzbl (%rax),%eax
  8004210fd2:	38 c2                	cmp    %al,%dl
  8004210fd4:	74 1a                	je     8004210ff0 <memcmp+0x52>
  8004210fd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210fda:	0f b6 00             	movzbl (%rax),%eax
  8004210fdd:	0f b6 d0             	movzbl %al,%edx
  8004210fe0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fe4:	0f b6 00             	movzbl (%rax),%eax
  8004210fe7:	0f b6 c0             	movzbl %al,%eax
  8004210fea:	29 c2                	sub    %eax,%edx
  8004210fec:	89 d0                	mov    %edx,%eax
  8004210fee:	eb 20                	jmp    8004211010 <memcmp+0x72>
  8004210ff0:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210ff5:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210ffa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ffe:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004211002:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211006:	48 85 c0             	test   %rax,%rax
  8004211009:	75 b9                	jne    8004210fc4 <memcmp+0x26>
  800421100b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211010:	c9                   	leaveq 
  8004211011:	c3                   	retq   

0000008004211012 <memfind>:
  8004211012:	55                   	push   %rbp
  8004211013:	48 89 e5             	mov    %rsp,%rbp
  8004211016:	48 83 ec 28          	sub    $0x28,%rsp
  800421101a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421101e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004211021:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211025:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211029:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421102d:	48 01 d0             	add    %rdx,%rax
  8004211030:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211034:	eb 15                	jmp    800421104b <memfind+0x39>
  8004211036:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421103a:	0f b6 10             	movzbl (%rax),%edx
  800421103d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211040:	38 c2                	cmp    %al,%dl
  8004211042:	75 02                	jne    8004211046 <memfind+0x34>
  8004211044:	eb 0f                	jmp    8004211055 <memfind+0x43>
  8004211046:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800421104b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421104f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004211053:	72 e1                	jb     8004211036 <memfind+0x24>
  8004211055:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211059:	c9                   	leaveq 
  800421105a:	c3                   	retq   

000000800421105b <strtol>:
  800421105b:	55                   	push   %rbp
  800421105c:	48 89 e5             	mov    %rsp,%rbp
  800421105f:	48 83 ec 34          	sub    $0x34,%rsp
  8004211063:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211067:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421106b:	89 55 cc             	mov    %edx,-0x34(%rbp)
  800421106e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004211075:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800421107c:	00 
  800421107d:	eb 05                	jmp    8004211084 <strtol+0x29>
  800421107f:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004211084:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211088:	0f b6 00             	movzbl (%rax),%eax
  800421108b:	3c 20                	cmp    $0x20,%al
  800421108d:	74 f0                	je     800421107f <strtol+0x24>
  800421108f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211093:	0f b6 00             	movzbl (%rax),%eax
  8004211096:	3c 09                	cmp    $0x9,%al
  8004211098:	74 e5                	je     800421107f <strtol+0x24>
  800421109a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421109e:	0f b6 00             	movzbl (%rax),%eax
  80042110a1:	3c 2b                	cmp    $0x2b,%al
  80042110a3:	75 07                	jne    80042110ac <strtol+0x51>
  80042110a5:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042110aa:	eb 17                	jmp    80042110c3 <strtol+0x68>
  80042110ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042110b0:	0f b6 00             	movzbl (%rax),%eax
  80042110b3:	3c 2d                	cmp    $0x2d,%al
  80042110b5:	75 0c                	jne    80042110c3 <strtol+0x68>
  80042110b7:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042110bc:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  80042110c3:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042110c7:	74 06                	je     80042110cf <strtol+0x74>
  80042110c9:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  80042110cd:	75 28                	jne    80042110f7 <strtol+0x9c>
  80042110cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042110d3:	0f b6 00             	movzbl (%rax),%eax
  80042110d6:	3c 30                	cmp    $0x30,%al
  80042110d8:	75 1d                	jne    80042110f7 <strtol+0x9c>
  80042110da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042110de:	48 83 c0 01          	add    $0x1,%rax
  80042110e2:	0f b6 00             	movzbl (%rax),%eax
  80042110e5:	3c 78                	cmp    $0x78,%al
  80042110e7:	75 0e                	jne    80042110f7 <strtol+0x9c>
  80042110e9:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  80042110ee:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  80042110f5:	eb 2c                	jmp    8004211123 <strtol+0xc8>
  80042110f7:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042110fb:	75 19                	jne    8004211116 <strtol+0xbb>
  80042110fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211101:	0f b6 00             	movzbl (%rax),%eax
  8004211104:	3c 30                	cmp    $0x30,%al
  8004211106:	75 0e                	jne    8004211116 <strtol+0xbb>
  8004211108:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800421110d:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  8004211114:	eb 0d                	jmp    8004211123 <strtol+0xc8>
  8004211116:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  800421111a:	75 07                	jne    8004211123 <strtol+0xc8>
  800421111c:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  8004211123:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211127:	0f b6 00             	movzbl (%rax),%eax
  800421112a:	3c 2f                	cmp    $0x2f,%al
  800421112c:	7e 1d                	jle    800421114b <strtol+0xf0>
  800421112e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211132:	0f b6 00             	movzbl (%rax),%eax
  8004211135:	3c 39                	cmp    $0x39,%al
  8004211137:	7f 12                	jg     800421114b <strtol+0xf0>
  8004211139:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421113d:	0f b6 00             	movzbl (%rax),%eax
  8004211140:	0f be c0             	movsbl %al,%eax
  8004211143:	83 e8 30             	sub    $0x30,%eax
  8004211146:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004211149:	eb 4e                	jmp    8004211199 <strtol+0x13e>
  800421114b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421114f:	0f b6 00             	movzbl (%rax),%eax
  8004211152:	3c 60                	cmp    $0x60,%al
  8004211154:	7e 1d                	jle    8004211173 <strtol+0x118>
  8004211156:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421115a:	0f b6 00             	movzbl (%rax),%eax
  800421115d:	3c 7a                	cmp    $0x7a,%al
  800421115f:	7f 12                	jg     8004211173 <strtol+0x118>
  8004211161:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211165:	0f b6 00             	movzbl (%rax),%eax
  8004211168:	0f be c0             	movsbl %al,%eax
  800421116b:	83 e8 57             	sub    $0x57,%eax
  800421116e:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004211171:	eb 26                	jmp    8004211199 <strtol+0x13e>
  8004211173:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211177:	0f b6 00             	movzbl (%rax),%eax
  800421117a:	3c 40                	cmp    $0x40,%al
  800421117c:	7e 48                	jle    80042111c6 <strtol+0x16b>
  800421117e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211182:	0f b6 00             	movzbl (%rax),%eax
  8004211185:	3c 5a                	cmp    $0x5a,%al
  8004211187:	7f 3d                	jg     80042111c6 <strtol+0x16b>
  8004211189:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421118d:	0f b6 00             	movzbl (%rax),%eax
  8004211190:	0f be c0             	movsbl %al,%eax
  8004211193:	83 e8 37             	sub    $0x37,%eax
  8004211196:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004211199:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421119c:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  800421119f:	7c 02                	jl     80042111a3 <strtol+0x148>
  80042111a1:	eb 23                	jmp    80042111c6 <strtol+0x16b>
  80042111a3:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042111a8:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042111ab:	48 98                	cltq   
  80042111ad:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  80042111b2:	48 89 c2             	mov    %rax,%rdx
  80042111b5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042111b8:	48 98                	cltq   
  80042111ba:	48 01 d0             	add    %rdx,%rax
  80042111bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042111c1:	e9 5d ff ff ff       	jmpq   8004211123 <strtol+0xc8>
  80042111c6:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042111cb:	74 0b                	je     80042111d8 <strtol+0x17d>
  80042111cd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042111d1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042111d5:	48 89 10             	mov    %rdx,(%rax)
  80042111d8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042111dc:	74 09                	je     80042111e7 <strtol+0x18c>
  80042111de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111e2:	48 f7 d8             	neg    %rax
  80042111e5:	eb 04                	jmp    80042111eb <strtol+0x190>
  80042111e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111eb:	c9                   	leaveq 
  80042111ec:	c3                   	retq   

00000080042111ed <strstr>:
  80042111ed:	55                   	push   %rbp
  80042111ee:	48 89 e5             	mov    %rsp,%rbp
  80042111f1:	48 83 ec 30          	sub    $0x30,%rsp
  80042111f5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042111f9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042111fd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211201:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211205:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004211209:	0f b6 00             	movzbl (%rax),%eax
  800421120c:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421120f:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  8004211213:	75 06                	jne    800421121b <strstr+0x2e>
  8004211215:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211219:	eb 6b                	jmp    8004211286 <strstr+0x99>
  800421121b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421121f:	48 89 c7             	mov    %rax,%rdi
  8004211222:	48 b8 c3 0a 21 04 80 	movabs $0x8004210ac3,%rax
  8004211229:	00 00 00 
  800421122c:	ff d0                	callq  *%rax
  800421122e:	48 98                	cltq   
  8004211230:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004211234:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211238:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421123c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211240:	0f b6 00             	movzbl (%rax),%eax
  8004211243:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004211246:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421124a:	75 07                	jne    8004211253 <strstr+0x66>
  800421124c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211251:	eb 33                	jmp    8004211286 <strstr+0x99>
  8004211253:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004211257:	3a 45 ff             	cmp    -0x1(%rbp),%al
  800421125a:	75 d8                	jne    8004211234 <strstr+0x47>
  800421125c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211260:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  8004211264:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211268:	48 89 ce             	mov    %rcx,%rsi
  800421126b:	48 89 c7             	mov    %rax,%rdi
  800421126e:	48 b8 e4 0c 21 04 80 	movabs $0x8004210ce4,%rax
  8004211275:	00 00 00 
  8004211278:	ff d0                	callq  *%rax
  800421127a:	85 c0                	test   %eax,%eax
  800421127c:	75 b6                	jne    8004211234 <strstr+0x47>
  800421127e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211282:	48 83 e8 01          	sub    $0x1,%rax
  8004211286:	c9                   	leaveq 
  8004211287:	c3                   	retq   

0000008004211288 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004211288:	55                   	push   %rbp
  8004211289:	48 89 e5             	mov    %rsp,%rbp
  800421128c:	48 83 ec 24          	sub    $0x24,%rsp
  8004211290:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211294:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211298:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  800421129b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421129f:	48 8b 10             	mov    (%rax),%rdx
  80042112a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042112a6:	48 01 d0             	add    %rdx,%rax
  80042112a9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  80042112ad:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042112b4:	00 
	switch (bytes_to_read) {
  80042112b5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042112b8:	83 f8 02             	cmp    $0x2,%eax
  80042112bb:	0f 84 ab 00 00 00    	je     800421136c <_dwarf_read_lsb+0xe4>
  80042112c1:	83 f8 02             	cmp    $0x2,%eax
  80042112c4:	7f 0e                	jg     80042112d4 <_dwarf_read_lsb+0x4c>
  80042112c6:	83 f8 01             	cmp    $0x1,%eax
  80042112c9:	0f 84 b3 00 00 00    	je     8004211382 <_dwarf_read_lsb+0xfa>
  80042112cf:	e9 d9 00 00 00       	jmpq   80042113ad <_dwarf_read_lsb+0x125>
  80042112d4:	83 f8 04             	cmp    $0x4,%eax
  80042112d7:	74 65                	je     800421133e <_dwarf_read_lsb+0xb6>
  80042112d9:	83 f8 08             	cmp    $0x8,%eax
  80042112dc:	0f 85 cb 00 00 00    	jne    80042113ad <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  80042112e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112e6:	48 83 c0 04          	add    $0x4,%rax
  80042112ea:	0f b6 00             	movzbl (%rax),%eax
  80042112ed:	0f b6 c0             	movzbl %al,%eax
  80042112f0:	48 c1 e0 20          	shl    $0x20,%rax
  80042112f4:	48 89 c2             	mov    %rax,%rdx
  80042112f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112fb:	48 83 c0 05          	add    $0x5,%rax
  80042112ff:	0f b6 00             	movzbl (%rax),%eax
  8004211302:	0f b6 c0             	movzbl %al,%eax
  8004211305:	48 c1 e0 28          	shl    $0x28,%rax
  8004211309:	48 09 d0             	or     %rdx,%rax
  800421130c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004211310:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211314:	48 83 c0 06          	add    $0x6,%rax
  8004211318:	0f b6 00             	movzbl (%rax),%eax
  800421131b:	0f b6 c0             	movzbl %al,%eax
  800421131e:	48 c1 e0 30          	shl    $0x30,%rax
  8004211322:	48 89 c2             	mov    %rax,%rdx
  8004211325:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211329:	48 83 c0 07          	add    $0x7,%rax
  800421132d:	0f b6 00             	movzbl (%rax),%eax
  8004211330:	0f b6 c0             	movzbl %al,%eax
  8004211333:	48 c1 e0 38          	shl    $0x38,%rax
  8004211337:	48 09 d0             	or     %rdx,%rax
  800421133a:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  800421133e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211342:	48 83 c0 02          	add    $0x2,%rax
  8004211346:	0f b6 00             	movzbl (%rax),%eax
  8004211349:	0f b6 c0             	movzbl %al,%eax
  800421134c:	48 c1 e0 10          	shl    $0x10,%rax
  8004211350:	48 89 c2             	mov    %rax,%rdx
  8004211353:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211357:	48 83 c0 03          	add    $0x3,%rax
  800421135b:	0f b6 00             	movzbl (%rax),%eax
  800421135e:	0f b6 c0             	movzbl %al,%eax
  8004211361:	48 c1 e0 18          	shl    $0x18,%rax
  8004211365:	48 09 d0             	or     %rdx,%rax
  8004211368:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  800421136c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211370:	48 83 c0 01          	add    $0x1,%rax
  8004211374:	0f b6 00             	movzbl (%rax),%eax
  8004211377:	0f b6 c0             	movzbl %al,%eax
  800421137a:	48 c1 e0 08          	shl    $0x8,%rax
  800421137e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  8004211382:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211386:	0f b6 00             	movzbl (%rax),%eax
  8004211389:	0f b6 c0             	movzbl %al,%eax
  800421138c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211390:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  8004211391:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211395:	48 8b 10             	mov    (%rax),%rdx
  8004211398:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421139b:	48 98                	cltq   
  800421139d:	48 01 c2             	add    %rax,%rdx
  80042113a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042113a4:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042113a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042113ab:	eb 05                	jmp    80042113b2 <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  80042113ad:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  80042113b2:	c9                   	leaveq 
  80042113b3:	c3                   	retq   

00000080042113b4 <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  80042113b4:	55                   	push   %rbp
  80042113b5:	48 89 e5             	mov    %rsp,%rbp
  80042113b8:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042113bc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042113c0:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  80042113c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042113c7:	48 8b 00             	mov    (%rax),%rax
  80042113ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  80042113ce:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042113d5:	00 
	switch (bytes_to_read) {
  80042113d6:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042113d9:	83 f8 02             	cmp    $0x2,%eax
  80042113dc:	0f 84 ab 00 00 00    	je     800421148d <_dwarf_decode_lsb+0xd9>
  80042113e2:	83 f8 02             	cmp    $0x2,%eax
  80042113e5:	7f 0e                	jg     80042113f5 <_dwarf_decode_lsb+0x41>
  80042113e7:	83 f8 01             	cmp    $0x1,%eax
  80042113ea:	0f 84 b3 00 00 00    	je     80042114a3 <_dwarf_decode_lsb+0xef>
  80042113f0:	e9 d9 00 00 00       	jmpq   80042114ce <_dwarf_decode_lsb+0x11a>
  80042113f5:	83 f8 04             	cmp    $0x4,%eax
  80042113f8:	74 65                	je     800421145f <_dwarf_decode_lsb+0xab>
  80042113fa:	83 f8 08             	cmp    $0x8,%eax
  80042113fd:	0f 85 cb 00 00 00    	jne    80042114ce <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  8004211403:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211407:	48 83 c0 04          	add    $0x4,%rax
  800421140b:	0f b6 00             	movzbl (%rax),%eax
  800421140e:	0f b6 c0             	movzbl %al,%eax
  8004211411:	48 c1 e0 20          	shl    $0x20,%rax
  8004211415:	48 89 c2             	mov    %rax,%rdx
  8004211418:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421141c:	48 83 c0 05          	add    $0x5,%rax
  8004211420:	0f b6 00             	movzbl (%rax),%eax
  8004211423:	0f b6 c0             	movzbl %al,%eax
  8004211426:	48 c1 e0 28          	shl    $0x28,%rax
  800421142a:	48 09 d0             	or     %rdx,%rax
  800421142d:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004211431:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211435:	48 83 c0 06          	add    $0x6,%rax
  8004211439:	0f b6 00             	movzbl (%rax),%eax
  800421143c:	0f b6 c0             	movzbl %al,%eax
  800421143f:	48 c1 e0 30          	shl    $0x30,%rax
  8004211443:	48 89 c2             	mov    %rax,%rdx
  8004211446:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421144a:	48 83 c0 07          	add    $0x7,%rax
  800421144e:	0f b6 00             	movzbl (%rax),%eax
  8004211451:	0f b6 c0             	movzbl %al,%eax
  8004211454:	48 c1 e0 38          	shl    $0x38,%rax
  8004211458:	48 09 d0             	or     %rdx,%rax
  800421145b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  800421145f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211463:	48 83 c0 02          	add    $0x2,%rax
  8004211467:	0f b6 00             	movzbl (%rax),%eax
  800421146a:	0f b6 c0             	movzbl %al,%eax
  800421146d:	48 c1 e0 10          	shl    $0x10,%rax
  8004211471:	48 89 c2             	mov    %rax,%rdx
  8004211474:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211478:	48 83 c0 03          	add    $0x3,%rax
  800421147c:	0f b6 00             	movzbl (%rax),%eax
  800421147f:	0f b6 c0             	movzbl %al,%eax
  8004211482:	48 c1 e0 18          	shl    $0x18,%rax
  8004211486:	48 09 d0             	or     %rdx,%rax
  8004211489:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  800421148d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211491:	48 83 c0 01          	add    $0x1,%rax
  8004211495:	0f b6 00             	movzbl (%rax),%eax
  8004211498:	0f b6 c0             	movzbl %al,%eax
  800421149b:	48 c1 e0 08          	shl    $0x8,%rax
  800421149f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  80042114a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114a7:	0f b6 00             	movzbl (%rax),%eax
  80042114aa:	0f b6 c0             	movzbl %al,%eax
  80042114ad:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042114b1:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  80042114b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042114b6:	48 8b 10             	mov    (%rax),%rdx
  80042114b9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042114bc:	48 98                	cltq   
  80042114be:	48 01 c2             	add    %rax,%rdx
  80042114c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042114c5:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042114c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042114cc:	eb 05                	jmp    80042114d3 <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  80042114ce:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  80042114d3:	c9                   	leaveq 
  80042114d4:	c3                   	retq   

00000080042114d5 <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  80042114d5:	55                   	push   %rbp
  80042114d6:	48 89 e5             	mov    %rsp,%rbp
  80042114d9:	48 83 ec 24          	sub    $0x24,%rsp
  80042114dd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042114e1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042114e5:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  80042114e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042114ec:	48 8b 10             	mov    (%rax),%rdx
  80042114ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042114f3:	48 01 d0             	add    %rdx,%rax
  80042114f6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  80042114fa:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042114fd:	83 f8 02             	cmp    $0x2,%eax
  8004211500:	74 35                	je     8004211537 <_dwarf_read_msb+0x62>
  8004211502:	83 f8 02             	cmp    $0x2,%eax
  8004211505:	7f 0a                	jg     8004211511 <_dwarf_read_msb+0x3c>
  8004211507:	83 f8 01             	cmp    $0x1,%eax
  800421150a:	74 18                	je     8004211524 <_dwarf_read_msb+0x4f>
  800421150c:	e9 53 01 00 00       	jmpq   8004211664 <_dwarf_read_msb+0x18f>
  8004211511:	83 f8 04             	cmp    $0x4,%eax
  8004211514:	74 49                	je     800421155f <_dwarf_read_msb+0x8a>
  8004211516:	83 f8 08             	cmp    $0x8,%eax
  8004211519:	0f 84 96 00 00 00    	je     80042115b5 <_dwarf_read_msb+0xe0>
  800421151f:	e9 40 01 00 00       	jmpq   8004211664 <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  8004211524:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211528:	0f b6 00             	movzbl (%rax),%eax
  800421152b:	0f b6 c0             	movzbl %al,%eax
  800421152e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211532:	e9 34 01 00 00       	jmpq   800421166b <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004211537:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421153b:	48 83 c0 01          	add    $0x1,%rax
  800421153f:	0f b6 00             	movzbl (%rax),%eax
  8004211542:	0f b6 d0             	movzbl %al,%edx
  8004211545:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211549:	0f b6 00             	movzbl (%rax),%eax
  800421154c:	0f b6 c0             	movzbl %al,%eax
  800421154f:	48 c1 e0 08          	shl    $0x8,%rax
  8004211553:	48 09 d0             	or     %rdx,%rax
  8004211556:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800421155a:	e9 0c 01 00 00       	jmpq   800421166b <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  800421155f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211563:	48 83 c0 03          	add    $0x3,%rax
  8004211567:	0f b6 00             	movzbl (%rax),%eax
  800421156a:	0f b6 c0             	movzbl %al,%eax
  800421156d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211571:	48 83 c2 02          	add    $0x2,%rdx
  8004211575:	0f b6 12             	movzbl (%rdx),%edx
  8004211578:	0f b6 d2             	movzbl %dl,%edx
  800421157b:	48 c1 e2 08          	shl    $0x8,%rdx
  800421157f:	48 09 d0             	or     %rdx,%rax
  8004211582:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004211586:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421158a:	48 83 c0 01          	add    $0x1,%rax
  800421158e:	0f b6 00             	movzbl (%rax),%eax
  8004211591:	0f b6 c0             	movzbl %al,%eax
  8004211594:	48 c1 e0 10          	shl    $0x10,%rax
  8004211598:	48 89 c2             	mov    %rax,%rdx
  800421159b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421159f:	0f b6 00             	movzbl (%rax),%eax
  80042115a2:	0f b6 c0             	movzbl %al,%eax
  80042115a5:	48 c1 e0 18          	shl    $0x18,%rax
  80042115a9:	48 09 d0             	or     %rdx,%rax
  80042115ac:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042115b0:	e9 b6 00 00 00       	jmpq   800421166b <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  80042115b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115b9:	48 83 c0 07          	add    $0x7,%rax
  80042115bd:	0f b6 00             	movzbl (%rax),%eax
  80042115c0:	0f b6 c0             	movzbl %al,%eax
  80042115c3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042115c7:	48 83 c2 06          	add    $0x6,%rdx
  80042115cb:	0f b6 12             	movzbl (%rdx),%edx
  80042115ce:	0f b6 d2             	movzbl %dl,%edx
  80042115d1:	48 c1 e2 08          	shl    $0x8,%rdx
  80042115d5:	48 09 d0             	or     %rdx,%rax
  80042115d8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  80042115dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115e0:	48 83 c0 05          	add    $0x5,%rax
  80042115e4:	0f b6 00             	movzbl (%rax),%eax
  80042115e7:	0f b6 c0             	movzbl %al,%eax
  80042115ea:	48 c1 e0 10          	shl    $0x10,%rax
  80042115ee:	48 89 c2             	mov    %rax,%rdx
  80042115f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115f5:	48 83 c0 04          	add    $0x4,%rax
  80042115f9:	0f b6 00             	movzbl (%rax),%eax
  80042115fc:	0f b6 c0             	movzbl %al,%eax
  80042115ff:	48 c1 e0 18          	shl    $0x18,%rax
  8004211603:	48 09 d0             	or     %rdx,%rax
  8004211606:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  800421160a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421160e:	48 83 c0 03          	add    $0x3,%rax
  8004211612:	0f b6 00             	movzbl (%rax),%eax
  8004211615:	0f b6 c0             	movzbl %al,%eax
  8004211618:	48 c1 e0 20          	shl    $0x20,%rax
  800421161c:	48 89 c2             	mov    %rax,%rdx
  800421161f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211623:	48 83 c0 02          	add    $0x2,%rax
  8004211627:	0f b6 00             	movzbl (%rax),%eax
  800421162a:	0f b6 c0             	movzbl %al,%eax
  800421162d:	48 c1 e0 28          	shl    $0x28,%rax
  8004211631:	48 09 d0             	or     %rdx,%rax
  8004211634:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004211638:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421163c:	48 83 c0 01          	add    $0x1,%rax
  8004211640:	0f b6 00             	movzbl (%rax),%eax
  8004211643:	0f b6 c0             	movzbl %al,%eax
  8004211646:	48 c1 e0 30          	shl    $0x30,%rax
  800421164a:	48 89 c2             	mov    %rax,%rdx
  800421164d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211651:	0f b6 00             	movzbl (%rax),%eax
  8004211654:	0f b6 c0             	movzbl %al,%eax
  8004211657:	48 c1 e0 38          	shl    $0x38,%rax
  800421165b:	48 09 d0             	or     %rdx,%rax
  800421165e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211662:	eb 07                	jmp    800421166b <_dwarf_read_msb+0x196>
	default:
		return (0);
  8004211664:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211669:	eb 1a                	jmp    8004211685 <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  800421166b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421166f:	48 8b 10             	mov    (%rax),%rdx
  8004211672:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004211675:	48 98                	cltq   
  8004211677:	48 01 c2             	add    %rax,%rdx
  800421167a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421167e:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211681:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211685:	c9                   	leaveq 
  8004211686:	c3                   	retq   

0000008004211687 <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  8004211687:	55                   	push   %rbp
  8004211688:	48 89 e5             	mov    %rsp,%rbp
  800421168b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421168f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211693:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211696:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421169a:	48 8b 00             	mov    (%rax),%rax
  800421169d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  80042116a1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042116a8:	00 
	switch (bytes_to_read) {
  80042116a9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042116ac:	83 f8 02             	cmp    $0x2,%eax
  80042116af:	74 35                	je     80042116e6 <_dwarf_decode_msb+0x5f>
  80042116b1:	83 f8 02             	cmp    $0x2,%eax
  80042116b4:	7f 0a                	jg     80042116c0 <_dwarf_decode_msb+0x39>
  80042116b6:	83 f8 01             	cmp    $0x1,%eax
  80042116b9:	74 18                	je     80042116d3 <_dwarf_decode_msb+0x4c>
  80042116bb:	e9 53 01 00 00       	jmpq   8004211813 <_dwarf_decode_msb+0x18c>
  80042116c0:	83 f8 04             	cmp    $0x4,%eax
  80042116c3:	74 49                	je     800421170e <_dwarf_decode_msb+0x87>
  80042116c5:	83 f8 08             	cmp    $0x8,%eax
  80042116c8:	0f 84 96 00 00 00    	je     8004211764 <_dwarf_decode_msb+0xdd>
  80042116ce:	e9 40 01 00 00       	jmpq   8004211813 <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  80042116d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042116d7:	0f b6 00             	movzbl (%rax),%eax
  80042116da:	0f b6 c0             	movzbl %al,%eax
  80042116dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042116e1:	e9 34 01 00 00       	jmpq   800421181a <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  80042116e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042116ea:	48 83 c0 01          	add    $0x1,%rax
  80042116ee:	0f b6 00             	movzbl (%rax),%eax
  80042116f1:	0f b6 d0             	movzbl %al,%edx
  80042116f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042116f8:	0f b6 00             	movzbl (%rax),%eax
  80042116fb:	0f b6 c0             	movzbl %al,%eax
  80042116fe:	48 c1 e0 08          	shl    $0x8,%rax
  8004211702:	48 09 d0             	or     %rdx,%rax
  8004211705:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211709:	e9 0c 01 00 00       	jmpq   800421181a <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  800421170e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211712:	48 83 c0 03          	add    $0x3,%rax
  8004211716:	0f b6 00             	movzbl (%rax),%eax
  8004211719:	0f b6 c0             	movzbl %al,%eax
  800421171c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211720:	48 83 c2 02          	add    $0x2,%rdx
  8004211724:	0f b6 12             	movzbl (%rdx),%edx
  8004211727:	0f b6 d2             	movzbl %dl,%edx
  800421172a:	48 c1 e2 08          	shl    $0x8,%rdx
  800421172e:	48 09 d0             	or     %rdx,%rax
  8004211731:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004211735:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211739:	48 83 c0 01          	add    $0x1,%rax
  800421173d:	0f b6 00             	movzbl (%rax),%eax
  8004211740:	0f b6 c0             	movzbl %al,%eax
  8004211743:	48 c1 e0 10          	shl    $0x10,%rax
  8004211747:	48 89 c2             	mov    %rax,%rdx
  800421174a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421174e:	0f b6 00             	movzbl (%rax),%eax
  8004211751:	0f b6 c0             	movzbl %al,%eax
  8004211754:	48 c1 e0 18          	shl    $0x18,%rax
  8004211758:	48 09 d0             	or     %rdx,%rax
  800421175b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421175f:	e9 b6 00 00 00       	jmpq   800421181a <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004211764:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211768:	48 83 c0 07          	add    $0x7,%rax
  800421176c:	0f b6 00             	movzbl (%rax),%eax
  800421176f:	0f b6 c0             	movzbl %al,%eax
  8004211772:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211776:	48 83 c2 06          	add    $0x6,%rdx
  800421177a:	0f b6 12             	movzbl (%rdx),%edx
  800421177d:	0f b6 d2             	movzbl %dl,%edx
  8004211780:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211784:	48 09 d0             	or     %rdx,%rax
  8004211787:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  800421178b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421178f:	48 83 c0 05          	add    $0x5,%rax
  8004211793:	0f b6 00             	movzbl (%rax),%eax
  8004211796:	0f b6 c0             	movzbl %al,%eax
  8004211799:	48 c1 e0 10          	shl    $0x10,%rax
  800421179d:	48 89 c2             	mov    %rax,%rdx
  80042117a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117a4:	48 83 c0 04          	add    $0x4,%rax
  80042117a8:	0f b6 00             	movzbl (%rax),%eax
  80042117ab:	0f b6 c0             	movzbl %al,%eax
  80042117ae:	48 c1 e0 18          	shl    $0x18,%rax
  80042117b2:	48 09 d0             	or     %rdx,%rax
  80042117b5:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  80042117b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117bd:	48 83 c0 03          	add    $0x3,%rax
  80042117c1:	0f b6 00             	movzbl (%rax),%eax
  80042117c4:	0f b6 c0             	movzbl %al,%eax
  80042117c7:	48 c1 e0 20          	shl    $0x20,%rax
  80042117cb:	48 89 c2             	mov    %rax,%rdx
  80042117ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117d2:	48 83 c0 02          	add    $0x2,%rax
  80042117d6:	0f b6 00             	movzbl (%rax),%eax
  80042117d9:	0f b6 c0             	movzbl %al,%eax
  80042117dc:	48 c1 e0 28          	shl    $0x28,%rax
  80042117e0:	48 09 d0             	or     %rdx,%rax
  80042117e3:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  80042117e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042117eb:	48 83 c0 01          	add    $0x1,%rax
  80042117ef:	0f b6 00             	movzbl (%rax),%eax
  80042117f2:	0f b6 c0             	movzbl %al,%eax
  80042117f5:	48 c1 e0 30          	shl    $0x30,%rax
  80042117f9:	48 89 c2             	mov    %rax,%rdx
  80042117fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211800:	0f b6 00             	movzbl (%rax),%eax
  8004211803:	0f b6 c0             	movzbl %al,%eax
  8004211806:	48 c1 e0 38          	shl    $0x38,%rax
  800421180a:	48 09 d0             	or     %rdx,%rax
  800421180d:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211811:	eb 07                	jmp    800421181a <_dwarf_decode_msb+0x193>
	default:
		return (0);
  8004211813:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211818:	eb 1a                	jmp    8004211834 <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  800421181a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421181e:	48 8b 10             	mov    (%rax),%rdx
  8004211821:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211824:	48 98                	cltq   
  8004211826:	48 01 c2             	add    %rax,%rdx
  8004211829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421182d:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211830:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211834:	c9                   	leaveq 
  8004211835:	c3                   	retq   

0000008004211836 <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  8004211836:	55                   	push   %rbp
  8004211837:	48 89 e5             	mov    %rsp,%rbp
  800421183a:	48 83 ec 30          	sub    $0x30,%rsp
  800421183e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211842:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  8004211846:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421184d:	00 
	uint8_t b;
	int shift = 0;
  800421184e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004211855:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211859:	48 8b 10             	mov    (%rax),%rdx
  800421185c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211860:	48 01 d0             	add    %rdx,%rax
  8004211863:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211867:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421186b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421186f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211873:	0f b6 00             	movzbl (%rax),%eax
  8004211876:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211879:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421187d:	83 e0 7f             	and    $0x7f,%eax
  8004211880:	89 c2                	mov    %eax,%edx
  8004211882:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211885:	89 c1                	mov    %eax,%ecx
  8004211887:	d3 e2                	shl    %cl,%edx
  8004211889:	89 d0                	mov    %edx,%eax
  800421188b:	48 98                	cltq   
  800421188d:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211891:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211895:	48 8b 00             	mov    (%rax),%rax
  8004211898:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421189c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042118a0:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  80042118a3:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  80042118a7:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042118ab:	84 c0                	test   %al,%al
  80042118ad:	78 b8                	js     8004211867 <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  80042118af:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  80042118b3:	7f 1f                	jg     80042118d4 <_dwarf_read_sleb128+0x9e>
  80042118b5:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042118b9:	83 e0 40             	and    $0x40,%eax
  80042118bc:	85 c0                	test   %eax,%eax
  80042118be:	74 14                	je     80042118d4 <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  80042118c0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042118c3:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80042118c8:	89 c1                	mov    %eax,%ecx
  80042118ca:	d3 e2                	shl    %cl,%edx
  80042118cc:	89 d0                	mov    %edx,%eax
  80042118ce:	48 98                	cltq   
  80042118d0:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  80042118d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042118d8:	c9                   	leaveq 
  80042118d9:	c3                   	retq   

00000080042118da <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  80042118da:	55                   	push   %rbp
  80042118db:	48 89 e5             	mov    %rsp,%rbp
  80042118de:	48 83 ec 30          	sub    $0x30,%rsp
  80042118e2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042118e6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  80042118ea:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042118f1:	00 
	uint8_t b;
	int shift = 0;
  80042118f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  80042118f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042118fd:	48 8b 10             	mov    (%rax),%rdx
  8004211900:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211904:	48 01 d0             	add    %rdx,%rax
  8004211907:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800421190b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421190f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211913:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211917:	0f b6 00             	movzbl (%rax),%eax
  800421191a:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  800421191d:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211921:	83 e0 7f             	and    $0x7f,%eax
  8004211924:	89 c2                	mov    %eax,%edx
  8004211926:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211929:	89 c1                	mov    %eax,%ecx
  800421192b:	d3 e2                	shl    %cl,%edx
  800421192d:	89 d0                	mov    %edx,%eax
  800421192f:	48 98                	cltq   
  8004211931:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211935:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211939:	48 8b 00             	mov    (%rax),%rax
  800421193c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211940:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211944:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004211947:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  800421194b:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421194f:	84 c0                	test   %al,%al
  8004211951:	78 b8                	js     800421190b <_dwarf_read_uleb128+0x31>

	return (ret);
  8004211953:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211957:	c9                   	leaveq 
  8004211958:	c3                   	retq   

0000008004211959 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  8004211959:	55                   	push   %rbp
  800421195a:	48 89 e5             	mov    %rsp,%rbp
  800421195d:	48 83 ec 28          	sub    $0x28,%rsp
  8004211961:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004211965:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421196c:	00 
	uint8_t b;
	int shift = 0;
  800421196d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004211974:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211978:	48 8b 00             	mov    (%rax),%rax
  800421197b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800421197f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211983:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211987:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421198b:	0f b6 00             	movzbl (%rax),%eax
  800421198e:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211991:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211995:	83 e0 7f             	and    $0x7f,%eax
  8004211998:	89 c2                	mov    %eax,%edx
  800421199a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421199d:	89 c1                	mov    %eax,%ecx
  800421199f:	d3 e2                	shl    %cl,%edx
  80042119a1:	89 d0                	mov    %edx,%eax
  80042119a3:	48 98                	cltq   
  80042119a5:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  80042119a9:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  80042119ad:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042119b1:	84 c0                	test   %al,%al
  80042119b3:	78 ca                	js     800421197f <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  80042119b5:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  80042119b9:	7f 1f                	jg     80042119da <_dwarf_decode_sleb128+0x81>
  80042119bb:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042119bf:	83 e0 40             	and    $0x40,%eax
  80042119c2:	85 c0                	test   %eax,%eax
  80042119c4:	74 14                	je     80042119da <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  80042119c6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042119c9:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80042119ce:	89 c1                	mov    %eax,%ecx
  80042119d0:	d3 e2                	shl    %cl,%edx
  80042119d2:	89 d0                	mov    %edx,%eax
  80042119d4:	48 98                	cltq   
  80042119d6:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  80042119da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042119de:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042119e2:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042119e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042119e9:	c9                   	leaveq 
  80042119ea:	c3                   	retq   

00000080042119eb <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  80042119eb:	55                   	push   %rbp
  80042119ec:	48 89 e5             	mov    %rsp,%rbp
  80042119ef:	48 83 ec 28          	sub    $0x28,%rsp
  80042119f3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  80042119f7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042119fe:	00 
	uint8_t b;
	int shift = 0;
  80042119ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004211a06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211a0a:	48 8b 00             	mov    (%rax),%rax
  8004211a0d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211a11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a15:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211a19:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211a1d:	0f b6 00             	movzbl (%rax),%eax
  8004211a20:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211a23:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211a27:	83 e0 7f             	and    $0x7f,%eax
  8004211a2a:	89 c2                	mov    %eax,%edx
  8004211a2c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211a2f:	89 c1                	mov    %eax,%ecx
  8004211a31:	d3 e2                	shl    %cl,%edx
  8004211a33:	89 d0                	mov    %edx,%eax
  8004211a35:	48 98                	cltq   
  8004211a37:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004211a3b:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211a3f:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211a43:	84 c0                	test   %al,%al
  8004211a45:	78 ca                	js     8004211a11 <_dwarf_decode_uleb128+0x26>

	*dp = src;
  8004211a47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211a4b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211a4f:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211a52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211a56:	c9                   	leaveq 
  8004211a57:	c3                   	retq   

0000008004211a58 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  8004211a58:	55                   	push   %rbp
  8004211a59:	48 89 e5             	mov    %rsp,%rbp
  8004211a5c:	48 83 ec 28          	sub    $0x28,%rsp
  8004211a60:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211a64:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211a68:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  8004211a6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211a70:	48 8b 10             	mov    (%rax),%rdx
  8004211a73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a77:	48 01 d0             	add    %rdx,%rax
  8004211a7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211a7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211a82:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004211a86:	eb 17                	jmp    8004211a9f <_dwarf_read_string+0x47>
		src++;
  8004211a88:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004211a8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211a91:	48 8b 00             	mov    (%rax),%rax
  8004211a94:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211a98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211a9c:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  8004211a9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211aa3:	0f b6 00             	movzbl (%rax),%eax
  8004211aa6:	84 c0                	test   %al,%al
  8004211aa8:	74 0d                	je     8004211ab7 <_dwarf_read_string+0x5f>
  8004211aaa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211aae:	48 8b 00             	mov    (%rax),%rax
  8004211ab1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211ab5:	72 d1                	jb     8004211a88 <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  8004211ab7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211abb:	0f b6 00             	movzbl (%rax),%eax
  8004211abe:	84 c0                	test   %al,%al
  8004211ac0:	75 1f                	jne    8004211ae1 <_dwarf_read_string+0x89>
  8004211ac2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211ac6:	48 8b 00             	mov    (%rax),%rax
  8004211ac9:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211acd:	73 12                	jae    8004211ae1 <_dwarf_read_string+0x89>
		(*offsetp)++;
  8004211acf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211ad3:	48 8b 00             	mov    (%rax),%rax
  8004211ad6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211ada:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211ade:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211ae1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211ae5:	c9                   	leaveq 
  8004211ae6:	c3                   	retq   

0000008004211ae7 <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  8004211ae7:	55                   	push   %rbp
  8004211ae8:	48 89 e5             	mov    %rsp,%rbp
  8004211aeb:	48 83 ec 28          	sub    $0x28,%rsp
  8004211aef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211af3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211af7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  8004211afb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211aff:	48 8b 10             	mov    (%rax),%rdx
  8004211b02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b06:	48 01 d0             	add    %rdx,%rax
  8004211b09:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211b0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211b11:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  8004211b15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b19:	48 8b 10             	mov    (%rax),%rdx
  8004211b1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211b20:	48 01 c2             	add    %rax,%rdx
  8004211b23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b27:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211b2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211b2e:	c9                   	leaveq 
  8004211b2f:	c3                   	retq   

0000008004211b30 <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  8004211b30:	55                   	push   %rbp
  8004211b31:	48 89 e5             	mov    %rsp,%rbp
  8004211b34:	48 83 ec 20          	sub    $0x20,%rsp
  8004211b38:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  8004211b3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b40:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211b44:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211b49:	75 35                	jne    8004211b80 <_dwarf_elf_get_byte_order+0x50>
  8004211b4b:	48 b9 80 0d 22 04 80 	movabs $0x8004220d80,%rcx
  8004211b52:	00 00 00 
  8004211b55:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004211b5c:	00 00 00 
  8004211b5f:	be 29 01 00 00       	mov    $0x129,%esi
  8004211b64:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004211b6b:	00 00 00 
  8004211b6e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211b73:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211b7a:	00 00 00 
  8004211b7d:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  8004211b80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211b84:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  8004211b88:	0f b6 c0             	movzbl %al,%eax
  8004211b8b:	83 f8 02             	cmp    $0x2,%eax
  8004211b8e:	75 07                	jne    8004211b97 <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  8004211b90:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211b95:	eb 05                	jmp    8004211b9c <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004211b97:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004211b9c:	c9                   	leaveq 
  8004211b9d:	c3                   	retq   

0000008004211b9e <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004211b9e:	55                   	push   %rbp
  8004211b9f:	48 89 e5             	mov    %rsp,%rbp
  8004211ba2:	48 83 ec 20          	sub    $0x20,%rsp
  8004211ba6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004211baa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211bae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211bb2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211bb7:	75 35                	jne    8004211bee <_dwarf_elf_get_pointer_size+0x50>
  8004211bb9:	48 b9 80 0d 22 04 80 	movabs $0x8004220d80,%rcx
  8004211bc0:	00 00 00 
  8004211bc3:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004211bca:	00 00 00 
  8004211bcd:	be 3f 01 00 00       	mov    $0x13f,%esi
  8004211bd2:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004211bd9:	00 00 00 
  8004211bdc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211be1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211be8:	00 00 00 
  8004211beb:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  8004211bee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211bf2:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  8004211bf6:	3c 01                	cmp    $0x1,%al
  8004211bf8:	75 07                	jne    8004211c01 <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  8004211bfa:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211bff:	eb 05                	jmp    8004211c06 <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  8004211c01:	b8 08 00 00 00       	mov    $0x8,%eax
}
  8004211c06:	c9                   	leaveq 
  8004211c07:	c3                   	retq   

0000008004211c08 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  8004211c08:	55                   	push   %rbp
  8004211c09:	48 89 e5             	mov    %rsp,%rbp
  8004211c0c:	53                   	push   %rbx
  8004211c0d:	48 83 ec 18          	sub    $0x18,%rsp
  8004211c11:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211c15:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  8004211c19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c1d:	ba 60 00 00 00       	mov    $0x60,%edx
  8004211c22:	be 00 00 00 00       	mov    $0x0,%esi
  8004211c27:	48 89 c7             	mov    %rax,%rdi
  8004211c2a:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004211c31:	00 00 00 
  8004211c34:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  8004211c36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c3a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  8004211c41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c45:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004211c4c:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  8004211c4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211c51:	48 89 c7             	mov    %rax,%rdi
  8004211c54:	48 b8 9e 1b 21 04 80 	movabs $0x8004211b9e,%rax
  8004211c5b:	00 00 00 
  8004211c5e:	ff d0                	callq  *%rax
  8004211c60:	0f b6 d0             	movzbl %al,%edx
  8004211c63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c67:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004211c6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211c6e:	48 89 c7             	mov    %rax,%rdi
  8004211c71:	48 b8 30 1b 21 04 80 	movabs $0x8004211b30,%rax
  8004211c78:	00 00 00 
  8004211c7b:	ff d0                	callq  *%rax
  8004211c7d:	85 c0                	test   %eax,%eax
  8004211c7f:	75 26                	jne    8004211ca7 <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  8004211c81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c85:	48 b9 d5 14 21 04 80 	movabs $0x80042114d5,%rcx
  8004211c8c:	00 00 00 
  8004211c8f:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  8004211c93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c97:	48 bb 87 16 21 04 80 	movabs $0x8004211687,%rbx
  8004211c9e:	00 00 00 
  8004211ca1:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004211ca5:	eb 24                	jmp    8004211ccb <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004211ca7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211cab:	48 b9 88 12 21 04 80 	movabs $0x8004211288,%rcx
  8004211cb2:	00 00 00 
  8004211cb5:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004211cb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211cbd:	48 be b4 13 21 04 80 	movabs $0x80042113b4,%rsi
  8004211cc4:	00 00 00 
  8004211cc7:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004211ccb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ccf:	48 89 c7             	mov    %rax,%rdi
  8004211cd2:	48 b8 d5 31 21 04 80 	movabs $0x80042131d5,%rax
  8004211cd9:	00 00 00 
  8004211cdc:	ff d0                	callq  *%rax
	return 0;
  8004211cde:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211ce3:	48 83 c4 18          	add    $0x18,%rsp
  8004211ce7:	5b                   	pop    %rbx
  8004211ce8:	5d                   	pop    %rbp
  8004211ce9:	c3                   	retq   

0000008004211cea <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  8004211cea:	55                   	push   %rbp
  8004211ceb:	48 89 e5             	mov    %rsp,%rbp
  8004211cee:	48 83 ec 20          	sub    $0x20,%rsp
  8004211cf2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211cf6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  8004211cfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211cfe:	48 8b 10             	mov    (%rax),%rdx
  8004211d01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d05:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004211d09:	48 39 c2             	cmp    %rax,%rdx
  8004211d0c:	76 0a                	jbe    8004211d18 <_get_next_cu+0x2e>
		return -1;
  8004211d0e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211d13:	e9 6b 01 00 00       	jmpq   8004211e83 <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  8004211d18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d1c:	48 8b 00             	mov    (%rax),%rax
  8004211d1f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  8004211d23:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211d27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211d2b:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  8004211d2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d33:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211d37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211d3b:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211d3f:	48 89 d1             	mov    %rdx,%rcx
  8004211d42:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211d46:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211d4b:	48 89 cf             	mov    %rcx,%rdi
  8004211d4e:	ff d0                	callq  *%rax
  8004211d50:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  8004211d53:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004211d57:	75 2a                	jne    8004211d83 <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  8004211d59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211d5d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211d61:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211d65:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211d69:	48 89 d1             	mov    %rdx,%rcx
  8004211d6c:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211d70:	ba 08 00 00 00       	mov    $0x8,%edx
  8004211d75:	48 89 cf             	mov    %rcx,%rdi
  8004211d78:	ff d0                	callq  *%rax
  8004211d7a:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004211d7d:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  8004211d81:	eb 04                	jmp    8004211d87 <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  8004211d83:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  8004211d87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211d8b:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211d8f:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  8004211d92:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211d95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211d99:	48 01 c2             	add    %rax,%rdx
  8004211d9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211da0:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  8004211da3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211da7:	48 8b 10             	mov    (%rax),%rdx
  8004211daa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211dae:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  8004211db2:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211db5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211db9:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004211dbc:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  8004211dc0:	75 07                	jne    8004211dc9 <_get_next_cu+0xdf>
  8004211dc2:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211dc7:	eb 05                	jmp    8004211dce <_get_next_cu+0xe4>
  8004211dc9:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004211dce:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211dd2:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004211dd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211dd9:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211ddd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211de1:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211de5:	48 89 d1             	mov    %rdx,%rcx
  8004211de8:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211dec:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211df1:	48 89 cf             	mov    %rcx,%rdi
  8004211df4:	ff d0                	callq  *%rax
  8004211df6:	89 c2                	mov    %eax,%edx
  8004211df8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211dfc:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  8004211e00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e04:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211e08:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211e0c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211e10:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  8004211e14:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211e18:	48 89 cf             	mov    %rcx,%rdi
  8004211e1b:	ff d0                	callq  *%rax
  8004211e1d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211e21:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  8004211e25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211e29:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211e2d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211e31:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211e35:	48 89 d1             	mov    %rdx,%rcx
  8004211e38:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211e3c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211e41:	48 89 cf             	mov    %rcx,%rdi
  8004211e44:	ff d0                	callq  *%rax
  8004211e46:	89 c2                	mov    %eax,%edx
  8004211e48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211e4c:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  8004211e4f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211e53:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211e57:	66 83 f8 01          	cmp    $0x1,%ax
  8004211e5b:	76 0e                	jbe    8004211e6b <_get_next_cu+0x181>
  8004211e5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211e61:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211e65:	66 83 f8 04          	cmp    $0x4,%ax
  8004211e69:	76 07                	jbe    8004211e72 <_get_next_cu+0x188>
		return -1;
  8004211e6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211e70:	eb 11                	jmp    8004211e83 <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  8004211e72:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211e76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211e7a:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  8004211e7e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211e83:	c9                   	leaveq 
  8004211e84:	c3                   	retq   

0000008004211e85 <print_cu>:

void print_cu(Dwarf_CU cu)
{
  8004211e85:	55                   	push   %rbp
  8004211e86:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  8004211e89:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  8004211e8d:	0f b6 c8             	movzbl %al,%ecx
  8004211e90:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  8004211e94:	0f b7 d0             	movzwl %ax,%edx
  8004211e97:	48 8b 45 10          	mov    0x10(%rbp),%rax
  8004211e9b:	48 89 c6             	mov    %rax,%rsi
  8004211e9e:	48 bf b2 0d 22 04 80 	movabs $0x8004220db2,%rdi
  8004211ea5:	00 00 00 
  8004211ea8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211ead:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004211eb4:	00 00 00 
  8004211eb7:	41 ff d0             	callq  *%r8
}
  8004211eba:	5d                   	pop    %rbp
  8004211ebb:	c3                   	retq   

0000008004211ebc <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004211ebc:	55                   	push   %rbp
  8004211ebd:	48 89 e5             	mov    %rsp,%rbp
  8004211ec0:	48 83 ec 60          	sub    $0x60,%rsp
  8004211ec4:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004211ec8:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004211ecc:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004211ed0:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  8004211ed4:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004211ed9:	75 35                	jne    8004211f10 <_dwarf_abbrev_parse+0x54>
  8004211edb:	48 b9 c1 0d 22 04 80 	movabs $0x8004220dc1,%rcx
  8004211ee2:	00 00 00 
  8004211ee5:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004211eec:	00 00 00 
  8004211eef:	be a4 01 00 00       	mov    $0x1a4,%esi
  8004211ef4:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004211efb:	00 00 00 
  8004211efe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f03:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211f0a:	00 00 00 
  8004211f0d:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  8004211f10:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  8004211f15:	75 35                	jne    8004211f4c <_dwarf_abbrev_parse+0x90>
  8004211f17:	48 b9 cd 0d 22 04 80 	movabs $0x8004220dcd,%rcx
  8004211f1e:	00 00 00 
  8004211f21:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004211f28:	00 00 00 
  8004211f2b:	be a5 01 00 00       	mov    $0x1a5,%esi
  8004211f30:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004211f37:	00 00 00 
  8004211f3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f3f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211f46:	00 00 00 
  8004211f49:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  8004211f4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211f50:	48 8b 10             	mov    (%rax),%rdx
  8004211f53:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211f57:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211f5b:	48 39 c2             	cmp    %rax,%rdx
  8004211f5e:	72 0a                	jb     8004211f6a <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  8004211f60:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211f65:	e9 d3 01 00 00       	jmpq   800421213d <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004211f6a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211f6e:	48 8b 00             	mov    (%rax),%rax
  8004211f71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  8004211f75:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211f79:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211f7d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211f81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211f85:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211f89:	48 89 d6             	mov    %rdx,%rsi
  8004211f8c:	48 89 c7             	mov    %rax,%rdi
  8004211f8f:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  8004211f96:	00 00 00 
  8004211f99:	ff d0                	callq  *%rax
  8004211f9b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  8004211f9f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211fa4:	75 15                	jne    8004211fbb <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  8004211fa6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211faa:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  8004211fb1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211fb6:	e9 82 01 00 00       	jmpq   800421213d <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211fbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211fbf:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211fc3:	48 89 d6             	mov    %rdx,%rsi
  8004211fc6:	48 89 c7             	mov    %rax,%rdi
  8004211fc9:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  8004211fd0:	00 00 00 
  8004211fd3:	ff d0                	callq  *%rax
  8004211fd5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  8004211fd9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004211fdd:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211fe1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004211fe5:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004211fe9:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211fee:	48 89 cf             	mov    %rcx,%rdi
  8004211ff1:	ff d0                	callq  *%rax
  8004211ff3:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  8004211ff6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211ffa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211ffe:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  8004212001:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212005:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004212009:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  800421200d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212011:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  8004212015:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  8004212018:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421201c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004212020:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  8004212024:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212028:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  800421202f:	00 
	abp->ab_atnum    = 0;
  8004212030:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212034:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  800421203b:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  800421203c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212040:	48 8b 00             	mov    (%rax),%rax
  8004212043:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004212047:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421204b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421204f:	48 89 d6             	mov    %rdx,%rsi
  8004212052:	48 89 c7             	mov    %rax,%rdi
  8004212055:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  800421205c:	00 00 00 
  800421205f:	ff d0                	callq  *%rax
  8004212061:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004212065:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212069:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421206d:	48 89 d6             	mov    %rdx,%rsi
  8004212070:	48 89 c7             	mov    %rax,%rdi
  8004212073:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  800421207a:	00 00 00 
  800421207d:	ff d0                	callq  *%rax
  800421207f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  8004212083:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212088:	0f 84 89 00 00 00    	je     8004212117 <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  800421208e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212092:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212096:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  800421209a:	48 89 d0             	mov    %rdx,%rax
  800421209d:	48 01 c0             	add    %rax,%rax
  80042120a0:	48 01 d0             	add    %rdx,%rax
  80042120a3:	48 c1 e0 03          	shl    $0x3,%rax
  80042120a7:	48 01 c8             	add    %rcx,%rax
  80042120aa:	48 8d 50 30          	lea    0x30(%rax),%rdx
  80042120ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042120b2:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  80042120b5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042120b9:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042120bd:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  80042120c1:	48 89 d0             	mov    %rdx,%rax
  80042120c4:	48 01 c0             	add    %rax,%rax
  80042120c7:	48 01 d0             	add    %rdx,%rax
  80042120ca:	48 c1 e0 03          	shl    $0x3,%rax
  80042120ce:	48 01 c8             	add    %rcx,%rax
  80042120d1:	48 8d 50 38          	lea    0x38(%rax),%rdx
  80042120d5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042120d9:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  80042120dc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042120e0:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042120e4:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  80042120e8:	48 89 d0             	mov    %rdx,%rax
  80042120eb:	48 01 c0             	add    %rax,%rax
  80042120ee:	48 01 d0             	add    %rdx,%rax
  80042120f1:	48 c1 e0 03          	shl    $0x3,%rax
  80042120f5:	48 01 c8             	add    %rcx,%rax
  80042120f8:	48 8d 50 40          	lea    0x40(%rax),%rdx
  80042120fc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212100:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  8004212103:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212107:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421210b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421210f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212113:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  8004212117:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421211c:	0f 85 1a ff ff ff    	jne    800421203c <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  8004212122:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212126:	48 8b 00             	mov    (%rax),%rax
  8004212129:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  800421212d:	48 89 c2             	mov    %rax,%rdx
  8004212130:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004212134:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  8004212138:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421213d:	c9                   	leaveq 
  800421213e:	c3                   	retq   

000000800421213f <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  800421213f:	55                   	push   %rbp
  8004212140:	48 89 e5             	mov    %rsp,%rbp
  8004212143:	48 83 ec 70          	sub    $0x70,%rsp
  8004212147:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421214b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421214f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  8004212153:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212158:	75 0a                	jne    8004212164 <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  800421215a:	b8 04 00 00 00       	mov    $0x4,%eax
  800421215f:	e9 0a 01 00 00       	jmpq   800421226e <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  8004212164:	48 bf d8 0d 22 04 80 	movabs $0x8004220dd8,%rdi
  800421216b:	00 00 00 
  800421216e:	48 b8 9f 64 21 04 80 	movabs $0x800421649f,%rax
  8004212175:	00 00 00 
  8004212178:	ff d0                	callq  *%rax
  800421217a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  800421217e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004212183:	75 35                	jne    80042121ba <_dwarf_abbrev_find+0x7b>
  8004212185:	48 b9 cd 0d 22 04 80 	movabs $0x8004220dcd,%rcx
  800421218c:	00 00 00 
  800421218f:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004212196:	00 00 00 
  8004212199:	be e5 01 00 00       	mov    $0x1e5,%esi
  800421219e:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  80042121a5:	00 00 00 
  80042121a8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042121ad:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042121b4:	00 00 00 
  80042121b7:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  80042121ba:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042121be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  80042121c2:	e9 8d 00 00 00       	jmpq   8004212254 <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  80042121c7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  80042121cb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042121cf:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  80042121d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042121d7:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  80042121db:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042121df:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  80042121e3:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  80042121e8:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  80042121ec:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042121f1:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  80042121f5:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042121fa:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  80042121fe:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004212203:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  8004212207:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800421220c:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  8004212210:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  8004212215:	48 89 c7             	mov    %rax,%rdi
  8004212218:	48 b8 bc 1e 21 04 80 	movabs $0x8004211ebc,%rax
  800421221f:	00 00 00 
  8004212222:	ff d0                	callq  *%rax
  8004212224:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  8004212227:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421222b:	74 05                	je     8004212232 <_dwarf_abbrev_find+0xf3>
			return (ret);
  800421222d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212230:	eb 3c                	jmp    800421226e <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  8004212232:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212236:	48 8b 00             	mov    (%rax),%rax
  8004212239:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421223d:	75 07                	jne    8004212246 <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  800421223f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212244:	eb 28                	jmp    800421226e <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  8004212246:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421224a:	48 8b 00             	mov    (%rax),%rax
  800421224d:	48 85 c0             	test   %rax,%rax
  8004212250:	75 02                	jne    8004212254 <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  8004212252:	eb 15                	jmp    8004212269 <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  8004212254:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212258:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421225c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212260:	48 39 c2             	cmp    %rax,%rdx
  8004212263:	0f 87 5e ff ff ff    	ja     80042121c7 <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  8004212269:	b8 04 00 00 00       	mov    $0x4,%eax
}
  800421226e:	c9                   	leaveq 
  800421226f:	c3                   	retq   

0000008004212270 <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  8004212270:	55                   	push   %rbp
  8004212271:	48 89 e5             	mov    %rsp,%rbp
  8004212274:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  800421227b:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004212282:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004212289:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004212290:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  8004212297:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  800421229e:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  80042122a5:	48 bf e6 0d 22 04 80 	movabs $0x8004220de6,%rdi
  80042122ac:	00 00 00 
  80042122af:	48 b8 9f 64 21 04 80 	movabs $0x800421649f,%rax
  80042122b6:	00 00 00 
  80042122b9:	ff d0                	callq  *%rax
  80042122bb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  80042122bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042122c3:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042122c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  80042122cb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042122d2:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  80042122d6:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  80042122d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  80042122e0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  80042122e7:	ba 60 00 00 00       	mov    $0x60,%edx
  80042122ec:	be 00 00 00 00       	mov    $0x0,%esi
  80042122f1:	48 89 c7             	mov    %rax,%rdi
  80042122f4:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  80042122fb:	00 00 00 
  80042122fe:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  8004212300:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212307:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  800421230e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004212315:	48 8b 00             	mov    (%rax),%rax
  8004212318:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  800421231c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004212323:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212327:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  800421232b:	8b 45 10             	mov    0x10(%rbp),%eax
  800421232e:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  8004212331:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004212338:	00 

	switch (form) {
  8004212339:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  8004212340:	20 
  8004212341:	0f 87 82 04 00 00    	ja     80042127c9 <_dwarf_attr_init+0x559>
  8004212347:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421234e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004212355:	00 
  8004212356:	48 b8 10 0e 22 04 80 	movabs $0x8004220e10,%rax
  800421235d:	00 00 00 
  8004212360:	48 01 d0             	add    %rdx,%rax
  8004212363:	48 8b 00             	mov    (%rax),%rax
  8004212366:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004212368:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421236f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212373:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421237a:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  800421237e:	0f b6 d2             	movzbl %dl,%edx
  8004212381:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212388:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421238c:	48 89 cf             	mov    %rcx,%rdi
  800421238f:	ff d0                	callq  *%rax
  8004212391:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212395:	e9 37 04 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  800421239a:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042123a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042123a5:	48 89 d6             	mov    %rdx,%rsi
  80042123a8:	48 89 c7             	mov    %rax,%rdi
  80042123ab:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  80042123b2:	00 00 00 
  80042123b5:	ff d0                	callq  *%rax
  80042123b7:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042123bb:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042123bf:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042123c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042123ca:	48 89 ce             	mov    %rcx,%rsi
  80042123cd:	48 89 c7             	mov    %rax,%rdi
  80042123d0:	48 b8 e7 1a 21 04 80 	movabs $0x8004211ae7,%rax
  80042123d7:	00 00 00 
  80042123da:	ff d0                	callq  *%rax
  80042123dc:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042123e0:	e9 ec 03 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  80042123e5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042123ec:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042123f0:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042123f7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042123fb:	ba 01 00 00 00       	mov    $0x1,%edx
  8004212400:	48 89 cf             	mov    %rcx,%rdi
  8004212403:	ff d0                	callq  *%rax
  8004212405:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212409:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421240d:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212414:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212418:	48 89 ce             	mov    %rcx,%rsi
  800421241b:	48 89 c7             	mov    %rax,%rdi
  800421241e:	48 b8 e7 1a 21 04 80 	movabs $0x8004211ae7,%rax
  8004212425:	00 00 00 
  8004212428:	ff d0                	callq  *%rax
  800421242a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421242e:	e9 9e 03 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004212433:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421243a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421243e:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212445:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212449:	ba 02 00 00 00       	mov    $0x2,%edx
  800421244e:	48 89 cf             	mov    %rcx,%rdi
  8004212451:	ff d0                	callq  *%rax
  8004212453:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212457:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421245b:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212462:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212466:	48 89 ce             	mov    %rcx,%rsi
  8004212469:	48 89 c7             	mov    %rax,%rdi
  800421246c:	48 b8 e7 1a 21 04 80 	movabs $0x8004211ae7,%rax
  8004212473:	00 00 00 
  8004212476:	ff d0                	callq  *%rax
  8004212478:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421247c:	e9 50 03 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004212481:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212488:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421248c:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212493:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212497:	ba 04 00 00 00       	mov    $0x4,%edx
  800421249c:	48 89 cf             	mov    %rcx,%rdi
  800421249f:	ff d0                	callq  *%rax
  80042124a1:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042124a5:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042124a9:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042124b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042124b4:	48 89 ce             	mov    %rcx,%rsi
  80042124b7:	48 89 c7             	mov    %rax,%rdi
  80042124ba:	48 b8 e7 1a 21 04 80 	movabs $0x8004211ae7,%rax
  80042124c1:	00 00 00 
  80042124c4:	ff d0                	callq  *%rax
  80042124c6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042124ca:	e9 02 03 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  80042124cf:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042124d6:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042124da:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042124e1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042124e5:	ba 01 00 00 00       	mov    $0x1,%edx
  80042124ea:	48 89 cf             	mov    %rcx,%rdi
  80042124ed:	ff d0                	callq  *%rax
  80042124ef:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042124f3:	e9 d9 02 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042124f8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042124ff:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212503:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421250a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421250e:	ba 02 00 00 00       	mov    $0x2,%edx
  8004212513:	48 89 cf             	mov    %rcx,%rdi
  8004212516:	ff d0                	callq  *%rax
  8004212518:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421251c:	e9 b0 02 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004212521:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212528:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421252c:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212533:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212537:	ba 04 00 00 00       	mov    $0x4,%edx
  800421253c:	48 89 cf             	mov    %rcx,%rdi
  800421253f:	ff d0                	callq  *%rax
  8004212541:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212545:	e9 87 02 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  800421254a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212551:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212555:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421255c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212560:	ba 08 00 00 00       	mov    $0x8,%edx
  8004212565:	48 89 cf             	mov    %rcx,%rdi
  8004212568:	ff d0                	callq  *%rax
  800421256a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421256e:	e9 5e 02 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  8004212573:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421257a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421257e:	48 89 d6             	mov    %rdx,%rsi
  8004212581:	48 89 c7             	mov    %rax,%rdi
  8004212584:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  800421258b:	00 00 00 
  800421258e:	ff d0                	callq  *%rax
  8004212590:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  8004212597:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  800421259e:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  80042125a5:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  80042125ac:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042125b3:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042125ba:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042125c1:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  80042125c8:	4d 89 c1             	mov    %r8,%r9
  80042125cb:	49 89 f8             	mov    %rdi,%r8
  80042125ce:	48 89 c7             	mov    %rax,%rdi
  80042125d1:	48 b8 70 22 21 04 80 	movabs $0x8004212270,%rax
  80042125d8:	00 00 00 
  80042125db:	ff d0                	callq  *%rax
  80042125dd:	e9 1d 03 00 00       	jmpq   80042128ff <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  80042125e2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042125e9:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042125ed:	66 83 f8 02          	cmp    $0x2,%ax
  80042125f1:	75 2f                	jne    8004212622 <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  80042125f3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042125fa:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042125fe:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004212605:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004212609:	0f b6 d2             	movzbl %dl,%edx
  800421260c:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212613:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212617:	48 89 cf             	mov    %rcx,%rdi
  800421261a:	ff d0                	callq  *%rax
  800421261c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004212620:	eb 39                	jmp    800421265b <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  8004212622:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004212629:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421262d:	66 83 f8 03          	cmp    $0x3,%ax
  8004212631:	75 28                	jne    800421265b <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004212633:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421263a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421263e:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004212642:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212649:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421264d:	48 89 cf             	mov    %rcx,%rdi
  8004212650:	ff d0                	callq  *%rax
  8004212652:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212656:	e9 76 01 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
  800421265b:	e9 71 01 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004212660:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212667:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421266b:	48 89 d6             	mov    %rdx,%rsi
  800421266e:	48 89 c7             	mov    %rax,%rdi
  8004212671:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  8004212678:	00 00 00 
  800421267b:	ff d0                	callq  *%rax
  800421267d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212681:	e9 4b 01 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  8004212686:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421268d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212691:	48 89 d6             	mov    %rdx,%rsi
  8004212694:	48 89 c7             	mov    %rax,%rdi
  8004212697:	48 b8 36 18 21 04 80 	movabs $0x8004211836,%rax
  800421269e:	00 00 00 
  80042126a1:	ff d0                	callq  *%rax
  80042126a3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042126a7:	e9 25 01 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042126ac:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042126b3:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042126b7:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042126bb:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042126c2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042126c6:	48 89 cf             	mov    %rcx,%rdi
  80042126c9:	ff d0                	callq  *%rax
  80042126cb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042126cf:	e9 fd 00 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  80042126d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042126d8:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042126dc:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042126e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042126e7:	48 89 ce             	mov    %rcx,%rsi
  80042126ea:	48 89 c7             	mov    %rax,%rdi
  80042126ed:	48 b8 58 1a 21 04 80 	movabs $0x8004211a58,%rax
  80042126f4:	00 00 00 
  80042126f7:	ff d0                	callq  *%rax
  80042126f9:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042126fd:	e9 cf 00 00 00       	jmpq   80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004212702:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212709:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421270d:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004212711:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212718:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421271c:	48 89 cf             	mov    %rcx,%rdi
  800421271f:	ff d0                	callq  *%rax
  8004212721:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  8004212725:	48 bf f2 0d 22 04 80 	movabs $0x8004220df2,%rdi
  800421272c:	00 00 00 
  800421272f:	48 b8 9f 64 21 04 80 	movabs $0x800421649f,%rax
  8004212736:	00 00 00 
  8004212739:	ff d0                	callq  *%rax
  800421273b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  800421273f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212744:	75 35                	jne    800421277b <_dwarf_attr_init+0x50b>
  8004212746:	48 b9 fd 0d 22 04 80 	movabs $0x8004220dfd,%rcx
  800421274d:	00 00 00 
  8004212750:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004212757:	00 00 00 
  800421275a:	be 51 02 00 00       	mov    $0x251,%esi
  800421275f:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004212766:	00 00 00 
  8004212769:	b8 00 00 00 00       	mov    $0x0,%eax
  800421276e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212775:	00 00 00 
  8004212778:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  800421277b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421277f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004212783:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212787:	48 01 d0             	add    %rdx,%rax
  800421278a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421278e:	eb 41                	jmp    80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  8004212790:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  8004212797:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  8004212798:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421279c:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042127a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042127a7:	48 89 ce             	mov    %rcx,%rsi
  80042127aa:	48 89 c7             	mov    %rax,%rdi
  80042127ad:	48 b8 e7 1a 21 04 80 	movabs $0x8004211ae7,%rax
  80042127b4:	00 00 00 
  80042127b7:	ff d0                	callq  *%rax
  80042127b9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042127bd:	eb 12                	jmp    80042127d1 <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  80042127bf:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  80042127c6:	00 
		break;
  80042127c7:	eb 08                	jmp    80042127d1 <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  80042127c9:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  80042127d0:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  80042127d1:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042127d5:	0f 85 21 01 00 00    	jne    80042128fc <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  80042127db:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  80042127e2:	09 
  80042127e3:	74 1e                	je     8004212803 <_dwarf_attr_init+0x593>
  80042127e5:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  80042127ec:	0a 
  80042127ed:	74 14                	je     8004212803 <_dwarf_attr_init+0x593>
  80042127ef:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  80042127f6:	03 
  80042127f7:	74 0a                	je     8004212803 <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  80042127f9:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  8004212800:	04 
  8004212801:	75 10                	jne    8004212813 <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  8004212803:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212807:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  800421280b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421280f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  8004212813:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004212817:	48 83 f8 03          	cmp    $0x3,%rax
  800421281b:	75 39                	jne    8004212856 <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  800421281d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004212821:	48 83 f8 08          	cmp    $0x8,%rax
  8004212825:	74 1c                	je     8004212843 <_dwarf_attr_init+0x5d3>
  8004212827:	48 83 f8 0e          	cmp    $0xe,%rax
  800421282b:	74 02                	je     800421282f <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  800421282d:	eb 27                	jmp    8004212856 <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  800421282f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212833:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800421283a:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004212841:	eb 13                	jmp    8004212856 <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  8004212843:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212847:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800421284e:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004212855:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  8004212856:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800421285d:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004212864:	8d 48 01             	lea    0x1(%rax),%ecx
  8004212867:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421286e:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  8004212874:	0f b6 c0             	movzbl %al,%eax
  8004212877:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  800421287e:	48 63 d0             	movslq %eax,%rdx
  8004212881:	48 89 d0             	mov    %rdx,%rax
  8004212884:	48 01 c0             	add    %rax,%rax
  8004212887:	48 01 d0             	add    %rdx,%rax
  800421288a:	48 c1 e0 05          	shl    $0x5,%rax
  800421288e:	48 01 c8             	add    %rcx,%rax
  8004212891:	48 05 70 03 00 00    	add    $0x370,%rax
  8004212897:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421289e:	48 89 10             	mov    %rdx,(%rax)
  80042128a1:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042128a8:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042128ac:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042128b0:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042128b4:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  80042128b8:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042128bc:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042128c0:	48 89 50 20          	mov    %rdx,0x20(%rax)
  80042128c4:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042128c8:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042128cc:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042128d0:	48 89 50 30          	mov    %rdx,0x30(%rax)
  80042128d4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042128d8:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042128dc:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042128e0:	48 89 50 40          	mov    %rdx,0x40(%rax)
  80042128e4:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042128e8:	48 89 50 48          	mov    %rdx,0x48(%rax)
  80042128ec:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042128f0:	48 89 50 50          	mov    %rdx,0x50(%rax)
  80042128f4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042128f8:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  80042128fc:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042128ff:	c9                   	leaveq 
  8004212900:	c3                   	retq   

0000008004212901 <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  8004212901:	55                   	push   %rbp
  8004212902:	48 89 e5             	mov    %rsp,%rbp
  8004212905:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  800421290c:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  8004212913:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  800421291a:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  8004212921:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  8004212927:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  800421292e:	00 
  800421292f:	75 35                	jne    8004212966 <dwarf_search_die_within_cu+0x65>
  8004212931:	48 b9 18 0f 22 04 80 	movabs $0x8004220f18,%rcx
  8004212938:	00 00 00 
  800421293b:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004212942:	00 00 00 
  8004212945:	be 86 02 00 00       	mov    $0x286,%esi
  800421294a:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004212951:	00 00 00 
  8004212954:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212959:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212960:	00 00 00 
  8004212963:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004212966:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  800421296d:	00 
  800421296e:	75 35                	jne    80042129a5 <dwarf_search_die_within_cu+0xa4>
  8004212970:	48 b9 1c 0f 22 04 80 	movabs $0x8004220f1c,%rcx
  8004212977:	00 00 00 
  800421297a:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004212981:	00 00 00 
  8004212984:	be 88 02 00 00       	mov    $0x288,%esi
  8004212989:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004212990:	00 00 00 
  8004212993:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212998:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421299f:	00 00 00 
  80042129a2:	41 ff d0             	callq  *%r8

	level = 1;
  80042129a5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  80042129ac:	e9 17 02 00 00       	jmpq   8004212bc8 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  80042129b1:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  80042129b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  80042129bc:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  80042129c3:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042129c7:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  80042129ce:	48 89 d6             	mov    %rdx,%rsi
  80042129d1:	48 89 c7             	mov    %rax,%rdi
  80042129d4:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  80042129db:	00 00 00 
  80042129de:	ff d0                	callq  *%rax
  80042129e0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  80042129e4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042129e9:	75 22                	jne    8004212a0d <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  80042129eb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042129ef:	74 09                	je     80042129fa <dwarf_search_die_within_cu+0xf9>
  80042129f1:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  80042129f8:	75 0a                	jne    8004212a04 <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  80042129fa:	b8 04 00 00 00       	mov    $0x4,%eax
  80042129ff:	e9 f4 01 00 00       	jmpq   8004212bf8 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  8004212a04:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  8004212a08:	e9 bb 01 00 00       	jmpq   8004212bc8 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  8004212a0d:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004212a14:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212a18:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212a1f:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004212a23:	48 89 34 24          	mov    %rsi,(%rsp)
  8004212a27:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  8004212a2b:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  8004212a30:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  8004212a34:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  8004212a39:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  8004212a3d:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  8004212a42:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  8004212a46:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  8004212a4b:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  8004212a4f:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  8004212a54:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  8004212a58:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004212a5d:	48 89 ce             	mov    %rcx,%rsi
  8004212a60:	48 89 c7             	mov    %rax,%rdi
  8004212a63:	48 b8 3f 21 21 04 80 	movabs $0x800421213f,%rax
  8004212a6a:	00 00 00 
  8004212a6d:	ff d0                	callq  *%rax
  8004212a6f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212a72:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212a76:	74 08                	je     8004212a80 <dwarf_search_die_within_cu+0x17f>
			return (ret);
  8004212a78:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212a7b:	e9 78 01 00 00       	jmpq   8004212bf8 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  8004212a80:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212a87:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004212a8b:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004212a8e:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212a95:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004212a99:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004212a9d:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212aa4:	48 8d 78 20          	lea    0x20(%rax),%rdi
  8004212aa8:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004212aaf:	b8 66 00 00 00       	mov    $0x66,%eax
  8004212ab4:	48 89 d6             	mov    %rdx,%rsi
  8004212ab7:	48 89 c1             	mov    %rax,%rcx
  8004212aba:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004212abd:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212ac4:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004212acb:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  8004212ad2:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212ad9:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212add:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004212ae4:	e9 8e 00 00 00       	jmpq   8004212b77 <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  8004212ae9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212aec:	48 63 d0             	movslq %eax,%rdx
  8004212aef:	48 89 d0             	mov    %rdx,%rax
  8004212af2:	48 01 c0             	add    %rax,%rax
  8004212af5:	48 01 d0             	add    %rdx,%rax
  8004212af8:	48 c1 e0 03          	shl    $0x3,%rax
  8004212afc:	48 01 e8             	add    %rbp,%rax
  8004212aff:	48 2d 18 03 00 00    	sub    $0x318,%rax
  8004212b05:	48 8b 08             	mov    (%rax),%rcx
  8004212b08:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  8004212b0f:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212b12:	48 63 d0             	movslq %eax,%rdx
  8004212b15:	48 89 d0             	mov    %rdx,%rax
  8004212b18:	48 01 c0             	add    %rax,%rax
  8004212b1b:	48 01 d0             	add    %rdx,%rax
  8004212b1e:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b22:	48 83 c0 30          	add    $0x30,%rax
  8004212b26:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  8004212b2a:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  8004212b31:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  8004212b38:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212b3f:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  8004212b46:	49 89 c9             	mov    %rcx,%r9
  8004212b49:	49 89 f8             	mov    %rdi,%r8
  8004212b4c:	48 89 d1             	mov    %rdx,%rcx
  8004212b4f:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  8004212b53:	48 89 c7             	mov    %rax,%rdi
  8004212b56:	48 b8 70 22 21 04 80 	movabs $0x8004212270,%rax
  8004212b5d:	00 00 00 
  8004212b60:	ff d0                	callq  *%rax
  8004212b62:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212b65:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212b69:	74 08                	je     8004212b73 <dwarf_search_die_within_cu+0x272>
				return (ret);
  8004212b6b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212b6e:	e9 85 00 00 00       	jmpq   8004212bf8 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212b73:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004212b77:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212b7a:	48 63 d0             	movslq %eax,%rdx
  8004212b7d:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004212b84:	48 39 c2             	cmp    %rax,%rdx
  8004212b87:	0f 82 5c ff ff ff    	jb     8004212ae9 <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  8004212b8d:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004212b94:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212b9b:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  8004212b9f:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212ba6:	74 19                	je     8004212bc1 <dwarf_search_die_within_cu+0x2c0>
  8004212ba8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212bac:	7e 13                	jle    8004212bc1 <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212bae:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004212bb5:	3c 01                	cmp    $0x1,%al
  8004212bb7:	75 06                	jne    8004212bbf <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  8004212bb9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212bbd:	eb 09                	jmp    8004212bc8 <dwarf_search_die_within_cu+0x2c7>
  8004212bbf:	eb 07                	jmp    8004212bc8 <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  8004212bc1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212bc6:	eb 30                	jmp    8004212bf8 <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212bc8:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  8004212bcc:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212bd3:	48 39 c2             	cmp    %rax,%rdx
  8004212bd6:	76 1b                	jbe    8004212bf3 <dwarf_search_die_within_cu+0x2f2>
  8004212bd8:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212bdf:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004212be3:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212bea:	48 39 c2             	cmp    %rax,%rdx
  8004212bed:	0f 87 be fd ff ff    	ja     80042129b1 <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  8004212bf3:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004212bf8:	c9                   	leaveq 
  8004212bf9:	c3                   	retq   

0000008004212bfa <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  8004212bfa:	55                   	push   %rbp
  8004212bfb:	48 89 e5             	mov    %rsp,%rbp
  8004212bfe:	48 83 ec 60          	sub    $0x60,%rsp
  8004212c02:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212c06:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212c0a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  8004212c0e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212c13:	75 35                	jne    8004212c4a <dwarf_offdie+0x50>
  8004212c15:	48 b9 18 0f 22 04 80 	movabs $0x8004220f18,%rcx
  8004212c1c:	00 00 00 
  8004212c1f:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004212c26:	00 00 00 
  8004212c29:	be c4 02 00 00       	mov    $0x2c4,%esi
  8004212c2e:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004212c35:	00 00 00 
  8004212c38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212c3d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212c44:	00 00 00 
  8004212c47:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212c4a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212c4f:	75 35                	jne    8004212c86 <dwarf_offdie+0x8c>
  8004212c51:	48 b9 1c 0f 22 04 80 	movabs $0x8004220f1c,%rcx
  8004212c58:	00 00 00 
  8004212c5b:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004212c62:	00 00 00 
  8004212c65:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004212c6a:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004212c71:	00 00 00 
  8004212c74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212c79:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212c80:	00 00 00 
  8004212c83:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004212c86:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004212c8a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212c8e:	76 66                	jbe    8004212cf6 <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  8004212c90:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004212c94:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004212c98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212c9c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  8004212ca0:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212ca4:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004212ca8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212cad:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  8004212cb1:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212cb6:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212cba:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212cbf:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  8004212cc3:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212cc8:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004212ccc:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212cd1:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004212cd5:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  8004212cda:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212cdf:	48 89 c7             	mov    %rax,%rdi
  8004212ce2:	48 b8 01 29 21 04 80 	movabs $0x8004212901,%rax
  8004212ce9:	00 00 00 
  8004212cec:	ff d0                	callq  *%rax
  8004212cee:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  8004212cf1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004212cf4:	eb 05                	jmp    8004212cfb <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004212cf6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212cfb:	c9                   	leaveq 
  8004212cfc:	c3                   	retq   

0000008004212cfd <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  8004212cfd:	55                   	push   %rbp
  8004212cfe:	48 89 e5             	mov    %rsp,%rbp
  8004212d01:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004212d05:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212d09:	89 f0                	mov    %esi,%eax
  8004212d0b:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  8004212d0f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004212d16:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212d17:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004212d1e:	eb 57                	jmp    8004212d77 <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  8004212d20:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212d24:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212d27:	48 63 d0             	movslq %eax,%rdx
  8004212d2a:	48 89 d0             	mov    %rdx,%rax
  8004212d2d:	48 01 c0             	add    %rax,%rax
  8004212d30:	48 01 d0             	add    %rdx,%rax
  8004212d33:	48 c1 e0 05          	shl    $0x5,%rax
  8004212d37:	48 01 c8             	add    %rcx,%rax
  8004212d3a:	48 05 80 03 00 00    	add    $0x380,%rax
  8004212d40:	48 8b 10             	mov    (%rax),%rdx
  8004212d43:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004212d47:	48 39 c2             	cmp    %rax,%rdx
  8004212d4a:	75 27                	jne    8004212d73 <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004212d4c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212d4f:	48 63 d0             	movslq %eax,%rdx
  8004212d52:	48 89 d0             	mov    %rdx,%rax
  8004212d55:	48 01 c0             	add    %rax,%rax
  8004212d58:	48 01 d0             	add    %rdx,%rax
  8004212d5b:	48 c1 e0 05          	shl    $0x5,%rax
  8004212d5f:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  8004212d66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d6a:	48 01 d0             	add    %rdx,%rax
  8004212d6d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  8004212d71:	eb 17                	jmp    8004212d8a <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212d73:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004212d77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d7b:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004212d82:	0f b6 c0             	movzbl %al,%eax
  8004212d85:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004212d88:	7f 96                	jg     8004212d20 <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  8004212d8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004212d8e:	c9                   	leaveq 
  8004212d8f:	c3                   	retq   

0000008004212d90 <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  8004212d90:	55                   	push   %rbp
  8004212d91:	48 89 e5             	mov    %rsp,%rbp
  8004212d94:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004212d98:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212d9c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212da0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004212da4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004212da8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212dad:	75 35                	jne    8004212de4 <dwarf_siblingof+0x54>
  8004212daf:	48 b9 18 0f 22 04 80 	movabs $0x8004220f18,%rcx
  8004212db6:	00 00 00 
  8004212db9:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004212dc0:	00 00 00 
  8004212dc3:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004212dc8:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004212dcf:	00 00 00 
  8004212dd2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212dd7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212dde:	00 00 00 
  8004212de1:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212de4:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212de9:	75 35                	jne    8004212e20 <dwarf_siblingof+0x90>
  8004212deb:	48 b9 1c 0f 22 04 80 	movabs $0x8004220f1c,%rcx
  8004212df2:	00 00 00 
  8004212df5:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004212dfc:	00 00 00 
  8004212dff:	be ed 02 00 00       	mov    $0x2ed,%esi
  8004212e04:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004212e0b:	00 00 00 
  8004212e0e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e13:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212e1a:	00 00 00 
  8004212e1d:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212e20:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004212e25:	75 35                	jne    8004212e5c <dwarf_siblingof+0xcc>
  8004212e27:	48 b9 24 0f 22 04 80 	movabs $0x8004220f24,%rcx
  8004212e2e:	00 00 00 
  8004212e31:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004212e38:	00 00 00 
  8004212e3b:	be ee 02 00 00       	mov    $0x2ee,%esi
  8004212e40:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004212e47:	00 00 00 
  8004212e4a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e4f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212e56:	00 00 00 
  8004212e59:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  8004212e5c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212e61:	75 65                	jne    8004212ec8 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  8004212e63:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212e67:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004212e6b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212e6f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004212e73:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212e77:	48 8b 38             	mov    (%rax),%rdi
  8004212e7a:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004212e7e:	48 8b 78 08          	mov    0x8(%rax),%rdi
  8004212e82:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004212e87:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004212e8b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004212e90:	48 8b 78 18          	mov    0x18(%rax),%rdi
  8004212e94:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004212e99:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004212e9d:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004212ea2:	48 8b 78 28          	mov    0x28(%rax),%rdi
  8004212ea6:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004212eab:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212eaf:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212eb4:	48 89 cf             	mov    %rcx,%rdi
  8004212eb7:	48 b8 fa 2b 21 04 80 	movabs $0x8004212bfa,%rax
  8004212ebe:	00 00 00 
  8004212ec1:	ff d0                	callq  *%rax
  8004212ec3:	e9 0a 01 00 00       	jmpq   8004212fd2 <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004212ec8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212ecf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212ed3:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212ed7:	84 c0                	test   %al,%al
  8004212ed9:	75 0e                	jne    8004212ee9 <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  8004212edb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212edf:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212ee3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212ee7:	eb 6b                	jmp    8004212f54 <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  8004212ee9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212eed:	be 01 00 00 00       	mov    $0x1,%esi
  8004212ef2:	48 89 c7             	mov    %rax,%rdi
  8004212ef5:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  8004212efc:	00 00 00 
  8004212eff:	ff d0                	callq  *%rax
  8004212f01:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004212f05:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212f0a:	74 35                	je     8004212f41 <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  8004212f0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f10:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212f14:	48 83 f8 10          	cmp    $0x10,%rax
  8004212f18:	74 19                	je     8004212f33 <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  8004212f1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f1e:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212f22:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212f26:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212f2a:	48 01 d0             	add    %rdx,%rax
  8004212f2d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212f31:	eb 21                	jmp    8004212f54 <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  8004212f33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f37:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004212f3b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212f3f:	eb 13                	jmp    8004212f54 <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  8004212f41:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f45:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212f49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  8004212f4d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  8004212f54:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004212f57:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212f5b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004212f5f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  8004212f63:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212f67:	4c 8b 00             	mov    (%rax),%r8
  8004212f6a:	4c 89 04 24          	mov    %r8,(%rsp)
  8004212f6e:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004212f72:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004212f77:	4c 8b 40 10          	mov    0x10(%rax),%r8
  8004212f7b:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004212f80:	4c 8b 40 18          	mov    0x18(%rax),%r8
  8004212f84:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004212f89:	4c 8b 40 20          	mov    0x20(%rax),%r8
  8004212f8d:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  8004212f92:	4c 8b 40 28          	mov    0x28(%rax),%r8
  8004212f96:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  8004212f9b:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212f9f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212fa4:	48 b8 01 29 21 04 80 	movabs $0x8004212901,%rax
  8004212fab:	00 00 00 
  8004212fae:	ff d0                	callq  *%rax
  8004212fb0:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  8004212fb3:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  8004212fb7:	75 07                	jne    8004212fc0 <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  8004212fb9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212fbe:	eb 12                	jmp    8004212fd2 <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  8004212fc0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212fc4:	74 07                	je     8004212fcd <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  8004212fc6:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212fcb:	eb 05                	jmp    8004212fd2 <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  8004212fcd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212fd2:	c9                   	leaveq 
  8004212fd3:	c3                   	retq   

0000008004212fd4 <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  8004212fd4:	55                   	push   %rbp
  8004212fd5:	48 89 e5             	mov    %rsp,%rbp
  8004212fd8:	48 83 ec 70          	sub    $0x70,%rsp
  8004212fdc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212fe0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212fe4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212fe8:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  8004212fec:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212ff1:	75 35                	jne    8004213028 <dwarf_child+0x54>
  8004212ff3:	48 b9 27 0f 22 04 80 	movabs $0x8004220f27,%rcx
  8004212ffa:	00 00 00 
  8004212ffd:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004213004:	00 00 00 
  8004213007:	be 1c 03 00 00       	mov    $0x31c,%esi
  800421300c:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  8004213013:	00 00 00 
  8004213016:	b8 00 00 00 00       	mov    $0x0,%eax
  800421301b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213022:	00 00 00 
  8004213025:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004213028:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421302d:	75 35                	jne    8004213064 <dwarf_child+0x90>
  800421302f:	48 b9 1c 0f 22 04 80 	movabs $0x8004220f1c,%rcx
  8004213036:	00 00 00 
  8004213039:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  8004213040:	00 00 00 
  8004213043:	be 1d 03 00 00       	mov    $0x31d,%esi
  8004213048:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  800421304f:	00 00 00 
  8004213052:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213057:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421305e:	00 00 00 
  8004213061:	41 ff d0             	callq  *%r8
	assert(dbg);
  8004213064:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004213069:	75 35                	jne    80042130a0 <dwarf_child+0xcc>
  800421306b:	48 b9 18 0f 22 04 80 	movabs $0x8004220f18,%rcx
  8004213072:	00 00 00 
  8004213075:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  800421307c:	00 00 00 
  800421307f:	be 1e 03 00 00       	mov    $0x31e,%esi
  8004213084:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  800421308b:	00 00 00 
  800421308e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213093:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421309a:	00 00 00 
  800421309d:	41 ff d0             	callq  *%r8
	assert(cu);
  80042130a0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042130a5:	75 35                	jne    80042130dc <dwarf_child+0x108>
  80042130a7:	48 b9 24 0f 22 04 80 	movabs $0x8004220f24,%rcx
  80042130ae:	00 00 00 
  80042130b1:	48 ba 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdx
  80042130b8:	00 00 00 
  80042130bb:	be 1f 03 00 00       	mov    $0x31f,%esi
  80042130c0:	48 bf 9f 0d 22 04 80 	movabs $0x8004220d9f,%rdi
  80042130c7:	00 00 00 
  80042130ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042130cf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042130d6:	00 00 00 
  80042130d9:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  80042130dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042130e0:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  80042130e4:	84 c0                	test   %al,%al
  80042130e6:	75 0a                	jne    80042130f2 <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  80042130e8:	b8 04 00 00 00       	mov    $0x4,%eax
  80042130ed:	e9 84 00 00 00       	jmpq   8004213176 <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  80042130f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042130f6:	48 8b 70 08          	mov    0x8(%rax),%rsi
  80042130fa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042130fe:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  8004213102:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213106:	48 8b 08             	mov    (%rax),%rcx
  8004213109:	48 89 0c 24          	mov    %rcx,(%rsp)
  800421310d:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004213111:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004213116:	48 8b 48 10          	mov    0x10(%rax),%rcx
  800421311a:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  800421311f:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004213123:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004213128:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421312c:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004213131:	48 8b 48 28          	mov    0x28(%rax),%rcx
  8004213135:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  800421313a:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421313e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004213143:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004213148:	48 b8 01 29 21 04 80 	movabs $0x8004212901,%rax
  800421314f:	00 00 00 
  8004213152:	ff d0                	callq  *%rax
  8004213154:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  8004213157:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  800421315b:	75 07                	jne    8004213164 <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  800421315d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004213162:	eb 12                	jmp    8004213176 <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  8004213164:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004213168:	74 07                	je     8004213171 <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  800421316a:	b8 01 00 00 00       	mov    $0x1,%eax
  800421316f:	eb 05                	jmp    8004213176 <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  8004213171:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213176:	c9                   	leaveq 
  8004213177:	c3                   	retq   

0000008004213178 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  8004213178:	55                   	push   %rbp
  8004213179:	48 89 e5             	mov    %rsp,%rbp
  800421317c:	48 83 ec 20          	sub    $0x20,%rsp
  8004213180:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  8004213184:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213188:	48 8b 00             	mov    (%rax),%rax
  800421318b:	48 89 c7             	mov    %rax,%rdi
  800421318e:	48 b8 9f 64 21 04 80 	movabs $0x800421649f,%rax
  8004213195:	00 00 00 
  8004213198:	ff d0                	callq  *%rax
  800421319a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  800421319e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042131a2:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042131a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042131aa:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  80042131ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042131b2:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042131b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042131ba:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  80042131be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042131c2:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042131c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042131ca:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  80042131ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042131d3:	c9                   	leaveq 
  80042131d4:	c3                   	retq   

00000080042131d5 <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  80042131d5:	55                   	push   %rbp
  80042131d6:	48 89 e5             	mov    %rsp,%rbp
  80042131d9:	48 83 ec 08          	sub    $0x8,%rsp
  80042131dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  80042131e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042131e5:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  80042131eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042131ef:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  80042131f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042131f9:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  80042131ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213203:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  8004213209:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421320d:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  8004213213:	c9                   	leaveq 
  8004213214:	c3                   	retq   

0000008004213215 <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  8004213215:	55                   	push   %rbp
  8004213216:	48 89 e5             	mov    %rsp,%rbp
  8004213219:	48 83 ec 40          	sub    $0x40,%rsp
  800421321d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004213221:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004213225:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004213229:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  800421322d:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  8004213231:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213235:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  8004213239:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421323d:	ba 80 00 00 00       	mov    $0x80,%edx
  8004213242:	be 00 00 00 00       	mov    $0x0,%esi
  8004213247:	48 89 c7             	mov    %rax,%rdi
  800421324a:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004213251:	00 00 00 
  8004213254:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  8004213256:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421325a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421325e:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  8004213262:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004213267:	75 07                	jne    8004213270 <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  8004213269:	b8 01 00 00 00       	mov    $0x1,%eax
  800421326e:	eb 75                	jmp    80042132e5 <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004213270:	eb 59                	jmp    80042132cb <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  8004213272:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004213276:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421327a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421327e:	be 01 00 00 00       	mov    $0x1,%esi
  8004213283:	48 89 c7             	mov    %rax,%rdi
  8004213286:	48 b8 2a 54 21 04 80 	movabs $0x800421542a,%rax
  800421328d:	00 00 00 
  8004213290:	ff d0                	callq  *%rax
  8004213292:	85 c0                	test   %eax,%eax
  8004213294:	79 07                	jns    800421329d <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  8004213296:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421329b:	eb 48                	jmp    80042132e5 <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  800421329d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042132a1:	48 8b 40 30          	mov    0x30(%rax),%rax
  80042132a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042132a9:	77 20                	ja     80042132cb <dwarf_get_fde_at_pc+0xb6>
  80042132ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042132af:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  80042132b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042132b7:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  80042132bb:	48 01 d0             	add    %rdx,%rax
  80042132be:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042132c2:	76 07                	jbe    80042132cb <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  80042132c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042132c9:	eb 1a                	jmp    80042132e5 <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  80042132cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042132cf:	48 8b 50 30          	mov    0x30(%rax),%rdx
  80042132d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042132d7:	48 8b 40 40          	mov    0x40(%rax),%rax
  80042132db:	48 39 c2             	cmp    %rax,%rdx
  80042132de:	72 92                	jb     8004213272 <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  80042132e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  80042132e5:	c9                   	leaveq 
  80042132e6:	c3                   	retq   

00000080042132e7 <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  80042132e7:	55                   	push   %rbp
  80042132e8:	48 89 e5             	mov    %rsp,%rbp
  80042132eb:	53                   	push   %rbx
  80042132ec:	48 83 ec 38          	sub    $0x38,%rsp
  80042132f0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042132f4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042132f8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042132fc:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  8004213300:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004213305:	75 35                	jne    800421333c <_dwarf_frame_regtable_copy+0x55>
  8004213307:	48 b9 3a 0f 22 04 80 	movabs $0x8004220f3a,%rcx
  800421330e:	00 00 00 
  8004213311:	48 ba 47 0f 22 04 80 	movabs $0x8004220f47,%rdx
  8004213318:	00 00 00 
  800421331b:	be 57 00 00 00       	mov    $0x57,%esi
  8004213320:	48 bf 5c 0f 22 04 80 	movabs $0x8004220f5c,%rdi
  8004213327:	00 00 00 
  800421332a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421332f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213336:	00 00 00 
  8004213339:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  800421333c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004213341:	75 35                	jne    8004213378 <_dwarf_frame_regtable_copy+0x91>
  8004213343:	48 b9 72 0f 22 04 80 	movabs $0x8004220f72,%rcx
  800421334a:	00 00 00 
  800421334d:	48 ba 47 0f 22 04 80 	movabs $0x8004220f47,%rdx
  8004213354:	00 00 00 
  8004213357:	be 58 00 00 00       	mov    $0x58,%esi
  800421335c:	48 bf 5c 0f 22 04 80 	movabs $0x8004220f5c,%rdi
  8004213363:	00 00 00 
  8004213366:	b8 00 00 00 00       	mov    $0x0,%eax
  800421336b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213372:	00 00 00 
  8004213375:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  8004213378:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421337c:	48 8b 00             	mov    (%rax),%rax
  800421337f:	48 85 c0             	test   %rax,%rax
  8004213382:	75 39                	jne    80042133bd <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  8004213384:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213388:	48 bb e0 e6 4d 04 80 	movabs $0x80044de6e0,%rbx
  800421338f:	00 00 00 
  8004213392:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  8004213395:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213399:	48 8b 00             	mov    (%rax),%rax
  800421339c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042133a0:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  80042133a4:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  80042133a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042133ac:	48 8b 00             	mov    (%rax),%rax
  80042133af:	48 bb 00 c8 6d 04 80 	movabs $0x80046dc800,%rbx
  80042133b6:	00 00 00 
  80042133b9:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  80042133bd:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042133c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042133c5:	48 8b 00             	mov    (%rax),%rax
  80042133c8:	ba 18 00 00 00       	mov    $0x18,%edx
  80042133cd:	48 89 ce             	mov    %rcx,%rsi
  80042133d0:	48 89 c7             	mov    %rax,%rdi
  80042133d3:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  80042133da:	00 00 00 
  80042133dd:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042133df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042133e6:	eb 5a                	jmp    8004213442 <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  80042133e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042133ec:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133f0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042133f3:	48 63 d0             	movslq %eax,%rdx
  80042133f6:	48 89 d0             	mov    %rdx,%rax
  80042133f9:	48 01 c0             	add    %rax,%rax
  80042133fc:	48 01 d0             	add    %rdx,%rax
  80042133ff:	48 c1 e0 03          	shl    $0x3,%rax
  8004213403:	48 01 c1             	add    %rax,%rcx
  8004213406:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421340a:	48 8b 00             	mov    (%rax),%rax
  800421340d:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213411:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004213414:	48 63 d0             	movslq %eax,%rdx
  8004213417:	48 89 d0             	mov    %rdx,%rax
  800421341a:	48 01 c0             	add    %rax,%rax
  800421341d:	48 01 d0             	add    %rdx,%rax
  8004213420:	48 c1 e0 03          	shl    $0x3,%rax
  8004213424:	48 01 f0             	add    %rsi,%rax
  8004213427:	ba 18 00 00 00       	mov    $0x18,%edx
  800421342c:	48 89 ce             	mov    %rcx,%rsi
  800421342f:	48 89 c7             	mov    %rax,%rdi
  8004213432:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  8004213439:	00 00 00 
  800421343c:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  800421343e:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004213442:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213446:	48 8b 00             	mov    (%rax),%rax
  8004213449:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421344d:	0f b7 c0             	movzwl %ax,%eax
  8004213450:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004213453:	7e 10                	jle    8004213465 <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  8004213455:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213459:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421345d:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004213460:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004213463:	7f 83                	jg     80042133e8 <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004213465:	eb 32                	jmp    8004213499 <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  8004213467:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421346b:	48 8b 00             	mov    (%rax),%rax
  800421346e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213472:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004213475:	48 63 d0             	movslq %eax,%rdx
  8004213478:	48 89 d0             	mov    %rdx,%rax
  800421347b:	48 01 c0             	add    %rax,%rax
  800421347e:	48 01 d0             	add    %rdx,%rax
  8004213481:	48 c1 e0 03          	shl    $0x3,%rax
  8004213485:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  8004213489:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421348d:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  8004213491:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004213495:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004213499:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421349d:	48 8b 00             	mov    (%rax),%rax
  80042134a0:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042134a4:	0f b7 c0             	movzwl %ax,%eax
  80042134a7:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042134aa:	7f bb                	jg     8004213467 <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  80042134ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042134b1:	48 83 c4 38          	add    $0x38,%rsp
  80042134b5:	5b                   	pop    %rbx
  80042134b6:	5d                   	pop    %rbp
  80042134b7:	c3                   	retq   

00000080042134b8 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  80042134b8:	55                   	push   %rbp
  80042134b9:	48 89 e5             	mov    %rsp,%rbp
  80042134bc:	53                   	push   %rbx
  80042134bd:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  80042134c4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  80042134c8:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  80042134cc:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  80042134d0:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  80042134d4:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  80042134db:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  80042134e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  80042134e9:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  80042134f0:	00 
  80042134f1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042134f5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  80042134f9:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042134fd:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213501:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  8004213504:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004213508:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  800421350c:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  8004213510:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213514:	48 89 c7             	mov    %rax,%rdi
  8004213517:	48 b8 e7 32 21 04 80 	movabs $0x80042132e7,%rax
  800421351e:	00 00 00 
  8004213521:	ff d0                	callq  *%rax
	p = insts;
  8004213523:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004213527:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  800421352b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421352f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004213533:	48 01 d0             	add    %rdx,%rax
  8004213536:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  800421353a:	e9 3a 0d 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  800421353f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213543:	0f b6 00             	movzbl (%rax),%eax
  8004213546:	84 c0                	test   %al,%al
  8004213548:	75 11                	jne    800421355b <_dwarf_frame_run_inst+0xa3>
			p++;
  800421354a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421354e:	48 83 c0 01          	add    $0x1,%rax
  8004213552:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  8004213556:	e9 1e 0d 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  800421355b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421355f:	0f b6 00             	movzbl (%rax),%eax
  8004213562:	83 e0 c0             	and    $0xffffffc0,%eax
  8004213565:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  8004213568:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421356c:	0f b6 00             	movzbl (%rax),%eax
  800421356f:	83 e0 3f             	and    $0x3f,%eax
  8004213572:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  8004213575:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213579:	48 83 c0 01          	add    $0x1,%rax
  800421357d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  8004213581:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  8004213585:	0f 84 a1 01 00 00    	je     800421372c <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  800421358b:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800421358f:	3d 80 00 00 00       	cmp    $0x80,%eax
  8004213594:	74 38                	je     80042135ce <_dwarf_frame_run_inst+0x116>
  8004213596:	3d c0 00 00 00       	cmp    $0xc0,%eax
  800421359b:	0f 84 01 01 00 00    	je     80042136a2 <_dwarf_frame_run_inst+0x1ea>
  80042135a1:	83 f8 40             	cmp    $0x40,%eax
  80042135a4:	0f 85 71 01 00 00    	jne    800421371b <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  80042135aa:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  80042135ae:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042135b5:	ff 
  80042135b6:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  80042135ba:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042135be:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042135c2:	73 05                	jae    80042135c9 <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  80042135c4:	e9 be 0c 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			        break;
  80042135c9:	e9 59 01 00 00       	jmpq   8004213727 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  80042135ce:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042135d2:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042135d6:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  80042135d9:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042135dd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042135e1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042135e5:	66 39 c2             	cmp    %ax,%dx
  80042135e8:	72 0c                	jb     80042135f6 <_dwarf_frame_run_inst+0x13e>
  80042135ea:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042135f1:	e9 91 0c 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  80042135f6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042135fa:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135fe:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213602:	48 89 d0             	mov    %rdx,%rax
  8004213605:	48 01 c0             	add    %rax,%rax
  8004213608:	48 01 d0             	add    %rdx,%rax
  800421360b:	48 c1 e0 03          	shl    $0x3,%rax
  800421360f:	48 01 c8             	add    %rcx,%rax
  8004213612:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  8004213615:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213619:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421361d:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213621:	48 89 d0             	mov    %rdx,%rax
  8004213624:	48 01 c0             	add    %rax,%rax
  8004213627:	48 01 d0             	add    %rdx,%rax
  800421362a:	48 c1 e0 03          	shl    $0x3,%rax
  800421362e:	48 01 c8             	add    %rcx,%rax
  8004213631:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213635:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213639:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421363d:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213641:	48 89 d0             	mov    %rdx,%rax
  8004213644:	48 01 c0             	add    %rax,%rax
  8004213647:	48 01 d0             	add    %rdx,%rax
  800421364a:	48 c1 e0 03          	shl    $0x3,%rax
  800421364e:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213652:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213656:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421365a:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  800421365e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213662:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213666:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421366a:	48 89 d0             	mov    %rdx,%rax
  800421366d:	48 01 c0             	add    %rax,%rax
  8004213670:	48 01 d0             	add    %rdx,%rax
  8004213673:	48 c1 e0 03          	shl    $0x3,%rax
  8004213677:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  800421367b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421367f:	48 89 c7             	mov    %rax,%rdi
  8004213682:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213689:	00 00 00 
  800421368c:	ff d0                	callq  *%rax
  800421368e:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213695:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  8004213699:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  800421369d:	e9 85 00 00 00       	jmpq   8004213727 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  80042136a2:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042136a6:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042136aa:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  80042136ad:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042136b1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136b5:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042136b9:	66 39 c2             	cmp    %ax,%dx
  80042136bc:	72 0c                	jb     80042136ca <_dwarf_frame_run_inst+0x212>
  80042136be:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042136c5:	e9 bd 0b 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  80042136ca:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042136ce:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042136d2:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042136d6:	48 89 d0             	mov    %rdx,%rax
  80042136d9:	48 01 c0             	add    %rax,%rax
  80042136dc:	48 01 d0             	add    %rdx,%rax
  80042136df:	48 c1 e0 03          	shl    $0x3,%rax
  80042136e3:	48 01 c1             	add    %rax,%rcx
  80042136e6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136ea:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042136ee:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042136f2:	48 89 d0             	mov    %rdx,%rax
  80042136f5:	48 01 c0             	add    %rax,%rax
  80042136f8:	48 01 d0             	add    %rdx,%rax
  80042136fb:	48 c1 e0 03          	shl    $0x3,%rax
  80042136ff:	48 01 f0             	add    %rsi,%rax
  8004213702:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213707:	48 89 ce             	mov    %rcx,%rsi
  800421370a:	48 89 c7             	mov    %rax,%rdi
  800421370d:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  8004213714:	00 00 00 
  8004213717:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  8004213719:	eb 0c                	jmp    8004213727 <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  800421371b:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  8004213722:	e9 60 0b 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  8004213727:	e9 4d 0b 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  800421372c:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004213730:	83 f8 16             	cmp    $0x16,%eax
  8004213733:	0f 87 37 0b 00 00    	ja     8004214270 <_dwarf_frame_run_inst+0xdb8>
  8004213739:	89 c0                	mov    %eax,%eax
  800421373b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004213742:	00 
  8004213743:	48 b8 80 0f 22 04 80 	movabs $0x8004220f80,%rax
  800421374a:	00 00 00 
  800421374d:	48 01 d0             	add    %rdx,%rax
  8004213750:	48 8b 00             	mov    (%rax),%rax
  8004213753:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  8004213755:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213759:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421375d:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004213761:	8b 4a 28             	mov    0x28(%rdx),%ecx
  8004213764:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213768:	89 ce                	mov    %ecx,%esi
  800421376a:	48 89 d7             	mov    %rdx,%rdi
  800421376d:	ff d0                	callq  *%rax
  800421376f:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213773:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213777:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421377b:	73 05                	jae    8004213782 <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  800421377d:	e9 05 0b 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213782:	e9 f2 0a 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  8004213787:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421378b:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421378f:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213793:	be 01 00 00 00       	mov    $0x1,%esi
  8004213798:	48 89 d7             	mov    %rdx,%rdi
  800421379b:	ff d0                	callq  *%rax
  800421379d:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042137a4:	ff 
  80042137a5:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042137a9:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042137ad:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042137b1:	73 05                	jae    80042137b8 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  80042137b3:	e9 cf 0a 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			break;
  80042137b8:	e9 bc 0a 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  80042137bd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042137c1:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042137c5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042137c9:	be 02 00 00 00       	mov    $0x2,%esi
  80042137ce:	48 89 d7             	mov    %rdx,%rdi
  80042137d1:	ff d0                	callq  *%rax
  80042137d3:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042137da:	ff 
  80042137db:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042137df:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042137e3:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042137e7:	73 05                	jae    80042137ee <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  80042137e9:	e9 99 0a 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			break;
  80042137ee:	e9 86 0a 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  80042137f3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042137f7:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042137fb:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042137ff:	be 04 00 00 00       	mov    $0x4,%esi
  8004213804:	48 89 d7             	mov    %rdx,%rdi
  8004213807:	ff d0                	callq  *%rax
  8004213809:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213810:	ff 
  8004213811:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213815:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213819:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421381d:	73 05                	jae    8004213824 <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  800421381f:	e9 63 0a 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213824:	e9 50 0a 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  8004213829:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421382d:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213831:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213834:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213838:	48 89 c7             	mov    %rax,%rdi
  800421383b:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213842:	00 00 00 
  8004213845:	ff d0                	callq  *%rax
  8004213847:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  800421384b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421384f:	48 89 c7             	mov    %rax,%rdi
  8004213852:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213859:	00 00 00 
  800421385c:	ff d0                	callq  *%rax
  800421385e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213862:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213866:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421386a:	0f b7 c0             	movzwl %ax,%eax
  800421386d:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213871:	77 0c                	ja     800421387f <_dwarf_frame_run_inst+0x3c7>
  8004213873:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421387a:	e9 08 0a 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  800421387f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213883:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213887:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421388b:	48 89 d0             	mov    %rdx,%rax
  800421388e:	48 01 c0             	add    %rax,%rax
  8004213891:	48 01 d0             	add    %rdx,%rax
  8004213894:	48 c1 e0 03          	shl    $0x3,%rax
  8004213898:	48 01 c8             	add    %rcx,%rax
  800421389b:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  800421389e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138a2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138a6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042138aa:	48 89 d0             	mov    %rdx,%rax
  80042138ad:	48 01 c0             	add    %rax,%rax
  80042138b0:	48 01 d0             	add    %rdx,%rax
  80042138b3:	48 c1 e0 03          	shl    $0x3,%rax
  80042138b7:	48 01 c8             	add    %rcx,%rax
  80042138ba:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042138be:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138c2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138c6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042138ca:	48 89 d0             	mov    %rdx,%rax
  80042138cd:	48 01 c0             	add    %rax,%rax
  80042138d0:	48 01 d0             	add    %rdx,%rax
  80042138d3:	48 c1 e0 03          	shl    $0x3,%rax
  80042138d7:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042138db:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042138df:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042138e3:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  80042138e7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138eb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138ef:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042138f3:	48 89 d0             	mov    %rdx,%rax
  80042138f6:	48 01 c0             	add    %rax,%rax
  80042138f9:	48 01 d0             	add    %rdx,%rax
  80042138fc:	48 c1 e0 03          	shl    $0x3,%rax
  8004213900:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213904:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421390b:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004213910:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213914:	e9 60 09 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  8004213919:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421391d:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213921:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213924:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213928:	48 89 c7             	mov    %rax,%rdi
  800421392b:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213932:	00 00 00 
  8004213935:	ff d0                	callq  *%rax
  8004213937:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421393b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421393f:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213943:	0f b7 c0             	movzwl %ax,%eax
  8004213946:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421394a:	77 0c                	ja     8004213958 <_dwarf_frame_run_inst+0x4a0>
  800421394c:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213953:	e9 2f 09 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  8004213958:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421395c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213960:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213964:	48 89 d0             	mov    %rdx,%rax
  8004213967:	48 01 c0             	add    %rax,%rax
  800421396a:	48 01 d0             	add    %rdx,%rax
  800421396d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213971:	48 01 c1             	add    %rax,%rcx
  8004213974:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213978:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421397c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213980:	48 89 d0             	mov    %rdx,%rax
  8004213983:	48 01 c0             	add    %rax,%rax
  8004213986:	48 01 d0             	add    %rdx,%rax
  8004213989:	48 c1 e0 03          	shl    $0x3,%rax
  800421398d:	48 01 f0             	add    %rsi,%rax
  8004213990:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213995:	48 89 ce             	mov    %rcx,%rsi
  8004213998:	48 89 c7             	mov    %rax,%rdi
  800421399b:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  80042139a2:	00 00 00 
  80042139a5:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  80042139a7:	e9 cd 08 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  80042139ac:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042139b0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042139b4:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042139b7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042139bb:	48 89 c7             	mov    %rax,%rdi
  80042139be:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  80042139c5:	00 00 00 
  80042139c8:	ff d0                	callq  *%rax
  80042139ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042139ce:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139d2:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042139d6:	0f b7 c0             	movzwl %ax,%eax
  80042139d9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042139dd:	77 0c                	ja     80042139eb <_dwarf_frame_run_inst+0x533>
  80042139df:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042139e6:	e9 9c 08 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042139eb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139ef:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042139f3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042139f7:	48 89 d0             	mov    %rdx,%rax
  80042139fa:	48 01 c0             	add    %rax,%rax
  80042139fd:	48 01 d0             	add    %rdx,%rax
  8004213a00:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a04:	48 01 c8             	add    %rcx,%rax
  8004213a07:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  8004213a0a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a0e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a12:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a16:	48 89 d0             	mov    %rdx,%rax
  8004213a19:	48 01 c0             	add    %rax,%rax
  8004213a1c:	48 01 d0             	add    %rdx,%rax
  8004213a1f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a23:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213a27:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213a2b:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  8004213a2f:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213a33:	e9 41 08 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  8004213a38:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a3c:	48 89 c7             	mov    %rax,%rdi
  8004213a3f:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213a46:	00 00 00 
  8004213a49:	ff d0                	callq  *%rax
  8004213a4b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213a4f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a53:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213a57:	0f b7 c0             	movzwl %ax,%eax
  8004213a5a:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213a5e:	77 0c                	ja     8004213a6c <_dwarf_frame_run_inst+0x5b4>
  8004213a60:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213a67:	e9 1b 08 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213a6c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a70:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a74:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a78:	48 89 d0             	mov    %rdx,%rax
  8004213a7b:	48 01 c0             	add    %rax,%rax
  8004213a7e:	48 01 d0             	add    %rdx,%rax
  8004213a81:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a85:	48 01 c8             	add    %rcx,%rax
  8004213a88:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  8004213a8b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a8f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a93:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a97:	48 89 d0             	mov    %rdx,%rax
  8004213a9a:	48 01 c0             	add    %rax,%rax
  8004213a9d:	48 01 d0             	add    %rdx,%rax
  8004213aa0:	48 c1 e0 03          	shl    $0x3,%rax
  8004213aa4:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213aa8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213aac:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  8004213ab0:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213ab4:	e9 c0 07 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  8004213ab9:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213abd:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213ac1:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213ac4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213ac8:	48 89 c7             	mov    %rax,%rdi
  8004213acb:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213ad2:	00 00 00 
  8004213ad5:	ff d0                	callq  *%rax
  8004213ad7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  8004213adb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213adf:	48 89 c7             	mov    %rax,%rdi
  8004213ae2:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213ae9:	00 00 00 
  8004213aec:	ff d0                	callq  *%rax
  8004213aee:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213af2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213af6:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213afa:	0f b7 c0             	movzwl %ax,%eax
  8004213afd:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213b01:	77 0c                	ja     8004213b0f <_dwarf_frame_run_inst+0x657>
  8004213b03:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213b0a:	e9 78 07 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213b0f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b13:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b17:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b1b:	48 89 d0             	mov    %rdx,%rax
  8004213b1e:	48 01 c0             	add    %rax,%rax
  8004213b21:	48 01 d0             	add    %rdx,%rax
  8004213b24:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b28:	48 01 c8             	add    %rcx,%rax
  8004213b2b:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  8004213b2e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b32:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b36:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b3a:	48 89 d0             	mov    %rdx,%rax
  8004213b3d:	48 01 c0             	add    %rax,%rax
  8004213b40:	48 01 d0             	add    %rdx,%rax
  8004213b43:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b47:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213b4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213b4f:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213b53:	e9 21 07 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  8004213b58:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004213b5c:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213b60:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004213b64:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213b68:	48 89 c7             	mov    %rax,%rdi
  8004213b6b:	48 b8 e7 32 21 04 80 	movabs $0x80042132e7,%rax
  8004213b72:	00 00 00 
  8004213b75:	ff d0                	callq  *%rax
			break;
  8004213b77:	e9 fd 06 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  8004213b7c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213b80:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213b84:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  8004213b87:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004213b8b:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213b8f:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  8004213b93:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213b97:	48 89 c7             	mov    %rax,%rdi
  8004213b9a:	48 b8 e7 32 21 04 80 	movabs $0x80042132e7,%rax
  8004213ba1:	00 00 00 
  8004213ba4:	ff d0                	callq  *%rax
			break;
  8004213ba6:	e9 ce 06 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004213bab:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213baf:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213bb3:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213bb6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213bba:	48 89 c7             	mov    %rax,%rdi
  8004213bbd:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213bc4:	00 00 00 
  8004213bc7:	ff d0                	callq  *%rax
  8004213bc9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213bcd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213bd1:	48 89 c7             	mov    %rax,%rdi
  8004213bd4:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213bdb:	00 00 00 
  8004213bde:	ff d0                	callq  *%rax
  8004213be0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213be4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213be8:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213beb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213bef:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213bf3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213bf7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213bfb:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004213bff:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c03:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213c07:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213c0b:	e9 69 06 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  8004213c10:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213c14:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213c18:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213c1b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c1f:	48 89 c7             	mov    %rax,%rdi
  8004213c22:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213c29:	00 00 00 
  8004213c2c:	ff d0                	callq  *%rax
  8004213c2e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  8004213c32:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c36:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c3a:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  8004213c3e:	e9 36 06 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  8004213c43:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213c47:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213c4b:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  8004213c4e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c52:	48 89 c7             	mov    %rax,%rdi
  8004213c55:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213c5c:	00 00 00 
  8004213c5f:	ff d0                	callq  *%rax
  8004213c61:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213c65:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c69:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213c6c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c70:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004213c74:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c78:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213c7c:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213c80:	e9 f4 05 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004213c85:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213c89:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213c8d:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  8004213c90:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c94:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004213c97:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c9b:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  8004213c9f:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  8004213ca3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213ca7:	48 89 c7             	mov    %rax,%rdi
  8004213caa:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213cb1:	00 00 00 
  8004213cb4:	ff d0                	callq  *%rax
  8004213cb6:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004213cba:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cbe:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213cc2:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004213cc6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213cca:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cce:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213cd2:	48 01 d0             	add    %rdx,%rax
  8004213cd5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213cd9:	e9 9b 05 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  8004213cde:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213ce2:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213ce6:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213ce9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213ced:	48 89 c7             	mov    %rax,%rdi
  8004213cf0:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213cf7:	00 00 00 
  8004213cfa:	ff d0                	callq  *%rax
  8004213cfc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213d00:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d04:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213d08:	0f b7 c0             	movzwl %ax,%eax
  8004213d0b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213d0f:	77 0c                	ja     8004213d1d <_dwarf_frame_run_inst+0x865>
  8004213d11:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213d18:	e9 6a 05 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213d1d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d21:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d25:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d29:	48 89 d0             	mov    %rdx,%rax
  8004213d2c:	48 01 c0             	add    %rax,%rax
  8004213d2f:	48 01 d0             	add    %rdx,%rax
  8004213d32:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d36:	48 01 c8             	add    %rcx,%rax
  8004213d39:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  8004213d3c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d40:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d44:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d48:	48 89 d0             	mov    %rdx,%rax
  8004213d4b:	48 01 c0             	add    %rax,%rax
  8004213d4e:	48 01 d0             	add    %rdx,%rax
  8004213d51:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d55:	48 01 c8             	add    %rcx,%rax
  8004213d58:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213d5c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d60:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d64:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d68:	48 89 d0             	mov    %rdx,%rax
  8004213d6b:	48 01 c0             	add    %rax,%rax
  8004213d6e:	48 01 d0             	add    %rdx,%rax
  8004213d71:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d75:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213d79:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d7d:	48 89 c7             	mov    %rax,%rdi
  8004213d80:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213d87:	00 00 00 
  8004213d8a:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213d8c:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213d90:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d94:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d98:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d9c:	48 89 d0             	mov    %rdx,%rax
  8004213d9f:	48 01 c0             	add    %rax,%rax
  8004213da2:	48 01 d0             	add    %rdx,%rax
  8004213da5:	48 c1 e0 03          	shl    $0x3,%rax
  8004213da9:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213dad:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213db1:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213db5:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213db9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213dbd:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213dc1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213dc5:	48 89 d0             	mov    %rdx,%rax
  8004213dc8:	48 01 c0             	add    %rax,%rax
  8004213dcb:	48 01 d0             	add    %rdx,%rax
  8004213dce:	48 c1 e0 03          	shl    $0x3,%rax
  8004213dd2:	48 01 f0             	add    %rsi,%rax
  8004213dd5:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213dd9:	48 01 c8             	add    %rcx,%rax
  8004213ddc:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213de0:	e9 94 04 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  8004213de5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213de9:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213ded:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213df0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213df4:	48 89 c7             	mov    %rax,%rdi
  8004213df7:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213dfe:	00 00 00 
  8004213e01:	ff d0                	callq  *%rax
  8004213e03:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213e07:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213e0b:	48 89 c7             	mov    %rax,%rdi
  8004213e0e:	48 b8 59 19 21 04 80 	movabs $0x8004211959,%rax
  8004213e15:	00 00 00 
  8004213e18:	ff d0                	callq  *%rax
  8004213e1a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213e1e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e22:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213e26:	0f b7 c0             	movzwl %ax,%eax
  8004213e29:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213e2d:	77 0c                	ja     8004213e3b <_dwarf_frame_run_inst+0x983>
  8004213e2f:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213e36:	e9 4c 04 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213e3b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e3f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213e43:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e47:	48 89 d0             	mov    %rdx,%rax
  8004213e4a:	48 01 c0             	add    %rax,%rax
  8004213e4d:	48 01 d0             	add    %rdx,%rax
  8004213e50:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e54:	48 01 c8             	add    %rcx,%rax
  8004213e57:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213e5a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e5e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213e62:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e66:	48 89 d0             	mov    %rdx,%rax
  8004213e69:	48 01 c0             	add    %rax,%rax
  8004213e6c:	48 01 d0             	add    %rdx,%rax
  8004213e6f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e73:	48 01 c8             	add    %rcx,%rax
  8004213e76:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213e7a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e7e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213e82:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e86:	48 89 d0             	mov    %rdx,%rax
  8004213e89:	48 01 c0             	add    %rax,%rax
  8004213e8c:	48 01 d0             	add    %rdx,%rax
  8004213e8f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e93:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213e97:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213e9b:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213e9f:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213ea3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ea7:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213eab:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213eaf:	48 89 d0             	mov    %rdx,%rax
  8004213eb2:	48 01 c0             	add    %rax,%rax
  8004213eb5:	48 01 d0             	add    %rdx,%rax
  8004213eb8:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ebc:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213ec0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213ec7:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213ecc:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213ed0:	e9 a4 03 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  8004213ed5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213ed9:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213edd:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213ee0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213ee4:	48 89 c7             	mov    %rax,%rdi
  8004213ee7:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213eee:	00 00 00 
  8004213ef1:	ff d0                	callq  *%rax
  8004213ef3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213ef7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213efb:	48 89 c7             	mov    %rax,%rdi
  8004213efe:	48 b8 59 19 21 04 80 	movabs $0x8004211959,%rax
  8004213f05:	00 00 00 
  8004213f08:	ff d0                	callq  *%rax
  8004213f0a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213f0e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f12:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213f15:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f19:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213f1d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f21:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f25:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213f29:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f2d:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213f34:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213f39:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213f3d:	e9 37 03 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  8004213f42:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213f46:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213f4a:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  8004213f4d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213f51:	48 89 c7             	mov    %rax,%rdi
  8004213f54:	48 b8 59 19 21 04 80 	movabs $0x8004211959,%rax
  8004213f5b:	00 00 00 
  8004213f5e:	ff d0                	callq  *%rax
  8004213f60:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213f64:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f68:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213f6b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f6f:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213f73:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f77:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213f7e:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213f83:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213f87:	e9 ed 02 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  8004213f8c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213f90:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213f94:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213f97:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213f9b:	48 89 c7             	mov    %rax,%rdi
  8004213f9e:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213fa5:	00 00 00 
  8004213fa8:	ff d0                	callq  *%rax
  8004213faa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213fae:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213fb2:	48 89 c7             	mov    %rax,%rdi
  8004213fb5:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004213fbc:	00 00 00 
  8004213fbf:	ff d0                	callq  *%rax
  8004213fc1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213fc5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213fc9:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213fcd:	0f b7 c0             	movzwl %ax,%eax
  8004213fd0:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213fd4:	77 0c                	ja     8004213fe2 <_dwarf_frame_run_inst+0xb2a>
  8004213fd6:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213fdd:	e9 a5 02 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213fe2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213fe6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213fea:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213fee:	48 89 d0             	mov    %rdx,%rax
  8004213ff1:	48 01 c0             	add    %rax,%rax
  8004213ff4:	48 01 d0             	add    %rdx,%rax
  8004213ff7:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ffb:	48 01 c8             	add    %rcx,%rax
  8004213ffe:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004214001:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214005:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214009:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421400d:	48 89 d0             	mov    %rdx,%rax
  8004214010:	48 01 c0             	add    %rax,%rax
  8004214013:	48 01 d0             	add    %rdx,%rax
  8004214016:	48 c1 e0 03          	shl    $0x3,%rax
  800421401a:	48 01 c8             	add    %rcx,%rax
  800421401d:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004214021:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214025:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214029:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421402d:	48 89 d0             	mov    %rdx,%rax
  8004214030:	48 01 c0             	add    %rax,%rax
  8004214033:	48 01 d0             	add    %rdx,%rax
  8004214036:	48 c1 e0 03          	shl    $0x3,%rax
  800421403a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421403e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004214042:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004214046:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  800421404a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421404e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214052:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214056:	48 89 d0             	mov    %rdx,%rax
  8004214059:	48 01 c0             	add    %rax,%rax
  800421405c:	48 01 d0             	add    %rdx,%rax
  800421405f:	48 c1 e0 03          	shl    $0x3,%rax
  8004214063:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214067:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421406e:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004214073:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004214077:	e9 fd 01 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  800421407c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004214080:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004214084:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004214087:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421408b:	48 89 c7             	mov    %rax,%rdi
  800421408e:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004214095:	00 00 00 
  8004214098:	ff d0                	callq  *%rax
  800421409a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800421409e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042140a2:	48 89 c7             	mov    %rax,%rdi
  80042140a5:	48 b8 59 19 21 04 80 	movabs $0x8004211959,%rax
  80042140ac:	00 00 00 
  80042140af:	ff d0                	callq  *%rax
  80042140b1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042140b5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140b9:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042140bd:	0f b7 c0             	movzwl %ax,%eax
  80042140c0:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042140c4:	77 0c                	ja     80042140d2 <_dwarf_frame_run_inst+0xc1a>
  80042140c6:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042140cd:	e9 b5 01 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  80042140d2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140d6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042140da:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042140de:	48 89 d0             	mov    %rdx,%rax
  80042140e1:	48 01 c0             	add    %rax,%rax
  80042140e4:	48 01 d0             	add    %rdx,%rax
  80042140e7:	48 c1 e0 03          	shl    $0x3,%rax
  80042140eb:	48 01 c8             	add    %rcx,%rax
  80042140ee:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  80042140f1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042140f5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042140f9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042140fd:	48 89 d0             	mov    %rdx,%rax
  8004214100:	48 01 c0             	add    %rax,%rax
  8004214103:	48 01 d0             	add    %rdx,%rax
  8004214106:	48 c1 e0 03          	shl    $0x3,%rax
  800421410a:	48 01 c8             	add    %rcx,%rax
  800421410d:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004214111:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214115:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214119:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421411d:	48 89 d0             	mov    %rdx,%rax
  8004214120:	48 01 c0             	add    %rax,%rax
  8004214123:	48 01 d0             	add    %rdx,%rax
  8004214126:	48 c1 e0 03          	shl    $0x3,%rax
  800421412a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421412e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004214132:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004214136:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  800421413a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421413e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214142:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214146:	48 89 d0             	mov    %rdx,%rax
  8004214149:	48 01 c0             	add    %rax,%rax
  800421414c:	48 01 d0             	add    %rdx,%rax
  800421414f:	48 c1 e0 03          	shl    $0x3,%rax
  8004214153:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214157:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421415e:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004214163:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004214167:	e9 0d 01 00 00       	jmpq   8004214279 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  800421416c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004214170:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004214174:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004214177:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421417b:	48 89 c7             	mov    %rax,%rdi
  800421417e:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004214185:	00 00 00 
  8004214188:	ff d0                	callq  *%rax
  800421418a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421418e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214192:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214196:	0f b7 c0             	movzwl %ax,%eax
  8004214199:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421419d:	77 0c                	ja     80042141ab <_dwarf_frame_run_inst+0xcf3>
  800421419f:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042141a6:	e9 dc 00 00 00       	jmpq   8004214287 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042141ab:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042141af:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042141b3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042141b7:	48 89 d0             	mov    %rdx,%rax
  80042141ba:	48 01 c0             	add    %rax,%rax
  80042141bd:	48 01 d0             	add    %rdx,%rax
  80042141c0:	48 c1 e0 03          	shl    $0x3,%rax
  80042141c4:	48 01 c8             	add    %rcx,%rax
  80042141c7:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  80042141ca:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042141ce:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042141d2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042141d6:	48 89 d0             	mov    %rdx,%rax
  80042141d9:	48 01 c0             	add    %rax,%rax
  80042141dc:	48 01 d0             	add    %rdx,%rax
  80042141df:	48 c1 e0 03          	shl    $0x3,%rax
  80042141e3:	48 01 c8             	add    %rcx,%rax
  80042141e6:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  80042141ea:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042141ee:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042141f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042141f6:	48 89 d0             	mov    %rdx,%rax
  80042141f9:	48 01 c0             	add    %rax,%rax
  80042141fc:	48 01 d0             	add    %rdx,%rax
  80042141ff:	48 c1 e0 03          	shl    $0x3,%rax
  8004214203:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004214207:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421420b:	48 89 c7             	mov    %rax,%rdi
  800421420e:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004214215:	00 00 00 
  8004214218:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  800421421a:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  800421421e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214222:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214226:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421422a:	48 89 d0             	mov    %rdx,%rax
  800421422d:	48 01 c0             	add    %rax,%rax
  8004214230:	48 01 d0             	add    %rdx,%rax
  8004214233:	48 c1 e0 03          	shl    $0x3,%rax
  8004214237:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421423b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421423f:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004214243:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004214247:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421424b:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421424f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214253:	48 89 d0             	mov    %rdx,%rax
  8004214256:	48 01 c0             	add    %rax,%rax
  8004214259:	48 01 d0             	add    %rdx,%rax
  800421425c:	48 c1 e0 03          	shl    $0x3,%rax
  8004214260:	48 01 f0             	add    %rsi,%rax
  8004214263:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004214267:	48 01 c8             	add    %rcx,%rax
  800421426a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  800421426e:	eb 09                	jmp    8004214279 <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004214270:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  8004214277:	eb 0e                	jmp    8004214287 <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  8004214279:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421427d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004214281:	0f 82 b8 f2 ff ff    	jb     800421353f <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  8004214287:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  800421428a:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  8004214291:	5b                   	pop    %rbx
  8004214292:	5d                   	pop    %rbp
  8004214293:	c3                   	retq   

0000008004214294 <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  8004214294:	55                   	push   %rbp
  8004214295:	48 89 e5             	mov    %rsp,%rbp
  8004214298:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800421429c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042142a0:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042142a4:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042142a8:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042142ac:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  80042142b0:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  80042142b4:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  80042142b9:	75 35                	jne    80042142f0 <_dwarf_frame_get_internal_table+0x5c>
  80042142bb:	48 b9 38 10 22 04 80 	movabs $0x8004221038,%rcx
  80042142c2:	00 00 00 
  80042142c5:	48 ba 47 0f 22 04 80 	movabs $0x8004220f47,%rdx
  80042142cc:	00 00 00 
  80042142cf:	be 83 01 00 00       	mov    $0x183,%esi
  80042142d4:	48 bf 5c 0f 22 04 80 	movabs $0x8004220f5c,%rdi
  80042142db:	00 00 00 
  80042142de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042142e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042142ea:	00 00 00 
  80042142ed:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  80042142f0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042142f5:	75 35                	jne    800421432c <_dwarf_frame_get_internal_table+0x98>
  80042142f7:	48 b9 47 10 22 04 80 	movabs $0x8004221047,%rcx
  80042142fe:	00 00 00 
  8004214301:	48 ba 47 0f 22 04 80 	movabs $0x8004220f47,%rdx
  8004214308:	00 00 00 
  800421430b:	be 86 01 00 00       	mov    $0x186,%esi
  8004214310:	48 bf 5c 0f 22 04 80 	movabs $0x8004220f5c,%rdi
  8004214317:	00 00 00 
  800421431a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421431f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214326:	00 00 00 
  8004214329:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  800421432c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214330:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214334:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  8004214338:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421433c:	ba 18 00 00 00       	mov    $0x18,%edx
  8004214341:	be 00 00 00 00       	mov    $0x0,%esi
  8004214346:	48 89 c7             	mov    %rax,%rdi
  8004214349:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004214350:	00 00 00 
  8004214353:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  8004214355:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214359:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421435d:	0f b7 d0             	movzwl %ax,%edx
  8004214360:	48 89 d0             	mov    %rdx,%rax
  8004214363:	48 01 c0             	add    %rax,%rax
  8004214366:	48 01 d0             	add    %rdx,%rax
  8004214369:	48 c1 e0 03          	shl    $0x3,%rax
  800421436d:	48 89 c2             	mov    %rax,%rdx
  8004214370:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214374:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214378:	be 00 00 00 00       	mov    $0x0,%esi
  800421437d:	48 89 c7             	mov    %rax,%rdi
  8004214380:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004214387:	00 00 00 
  800421438a:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  800421438c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004214393:	eb 2f                	jmp    80042143c4 <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  8004214395:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214399:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421439d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042143a0:	48 63 d0             	movslq %eax,%rdx
  80042143a3:	48 89 d0             	mov    %rdx,%rax
  80042143a6:	48 01 c0             	add    %rax,%rax
  80042143a9:	48 01 d0             	add    %rdx,%rax
  80042143ac:	48 c1 e0 03          	shl    $0x3,%rax
  80042143b0:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042143b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042143b8:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  80042143bc:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  80042143c0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042143c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042143c8:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042143cc:	0f b7 c0             	movzwl %ax,%eax
  80042143cf:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042143d2:	7f c1                	jg     8004214395 <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  80042143d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042143d8:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042143dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  80042143e0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042143e5:	75 35                	jne    800421441c <_dwarf_frame_get_internal_table+0x188>
  80042143e7:	48 b9 53 10 22 04 80 	movabs $0x8004221053,%rcx
  80042143ee:	00 00 00 
  80042143f1:	48 ba 47 0f 22 04 80 	movabs $0x8004220f47,%rdx
  80042143f8:	00 00 00 
  80042143fb:	be 95 01 00 00       	mov    $0x195,%esi
  8004214400:	48 bf 5c 0f 22 04 80 	movabs $0x8004220f5c,%rdi
  8004214407:	00 00 00 
  800421440a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421440f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214416:	00 00 00 
  8004214419:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  800421441c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214420:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004214424:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214428:	4c 8b 40 38          	mov    0x38(%rax),%r8
  800421442c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214430:	48 8b 48 70          	mov    0x70(%rax),%rcx
  8004214434:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214438:	48 8b 50 68          	mov    0x68(%rax),%rdx
  800421443c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004214440:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214444:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  8004214448:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800421444d:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  8004214451:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004214456:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  800421445d:	ff ff 
  800421445f:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  8004214466:	00 
  8004214467:	48 89 c7             	mov    %rax,%rdi
  800421446a:	48 b8 b8 34 21 04 80 	movabs $0x80042134b8,%rax
  8004214471:	00 00 00 
  8004214474:	ff d0                	callq  *%rax
  8004214476:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  8004214479:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421447d:	74 08                	je     8004214487 <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  800421447f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004214482:	e9 98 00 00 00       	jmpq   800421451f <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  8004214487:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421448b:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421448f:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004214493:	77 6f                	ja     8004214504 <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  8004214495:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214499:	48 8b 78 30          	mov    0x30(%rax),%rdi
  800421449d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144a1:	4c 8b 48 40          	mov    0x40(%rax),%r9
  80042144a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144a9:	4c 8b 50 38          	mov    0x38(%rax),%r10
  80042144ad:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042144b1:	48 8b 48 58          	mov    0x58(%rax),%rcx
  80042144b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042144b9:	48 8b 50 50          	mov    0x50(%rax),%rdx
  80042144bd:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042144c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144c5:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  80042144c9:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  80042144ce:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  80042144d2:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  80042144d7:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  80042144db:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  80042144e0:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042144e4:	4d 89 d0             	mov    %r10,%r8
  80042144e7:	48 89 c7             	mov    %rax,%rdi
  80042144ea:	48 b8 b8 34 21 04 80 	movabs $0x80042134b8,%rax
  80042144f1:	00 00 00 
  80042144f4:	ff d0                	callq  *%rax
  80042144f6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  80042144f9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042144fd:	74 05                	je     8004214504 <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  80042144ff:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004214502:	eb 1b                	jmp    800421451f <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  8004214504:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214508:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421450c:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  800421450f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004214513:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004214517:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  800421451a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421451f:	c9                   	leaveq 
  8004214520:	c3                   	retq   

0000008004214521 <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  8004214521:	55                   	push   %rbp
  8004214522:	48 89 e5             	mov    %rsp,%rbp
  8004214525:	48 83 ec 50          	sub    $0x50,%rsp
  8004214529:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421452d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004214531:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004214535:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004214539:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  800421453d:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  8004214541:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004214546:	74 07                	je     800421454f <dwarf_get_fde_info_for_all_regs+0x2e>
  8004214548:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421454d:	75 0a                	jne    8004214559 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  800421454f:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214554:	e9 eb 02 00 00       	jmpq   8004214844 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  8004214559:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421455e:	75 35                	jne    8004214595 <dwarf_get_fde_info_for_all_regs+0x74>
  8004214560:	48 b9 47 10 22 04 80 	movabs $0x8004221047,%rcx
  8004214567:	00 00 00 
  800421456a:	48 ba 47 0f 22 04 80 	movabs $0x8004220f47,%rdx
  8004214571:	00 00 00 
  8004214574:	be bf 01 00 00       	mov    $0x1bf,%esi
  8004214579:	48 bf 5c 0f 22 04 80 	movabs $0x8004220f5c,%rdi
  8004214580:	00 00 00 
  8004214583:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214588:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421458f:	00 00 00 
  8004214592:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  8004214595:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214599:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421459d:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042145a1:	77 19                	ja     80042145bc <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  80042145a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042145a7:	48 8b 50 30          	mov    0x30(%rax),%rdx
  80042145ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042145af:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042145b3:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  80042145b6:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042145ba:	77 0a                	ja     80042145c6 <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  80042145bc:	b8 01 00 00 00       	mov    $0x1,%eax
  80042145c1:	e9 7e 02 00 00       	jmpq   8004214844 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  80042145c6:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  80042145ca:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  80042145ce:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  80042145d2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042145d6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042145da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042145de:	4d 89 c1             	mov    %r8,%r9
  80042145e1:	49 89 f8             	mov    %rdi,%r8
  80042145e4:	48 89 c7             	mov    %rax,%rdi
  80042145e7:	48 b8 94 42 21 04 80 	movabs $0x8004214294,%rax
  80042145ee:	00 00 00 
  80042145f1:	ff d0                	callq  *%rax
  80042145f3:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  80042145f6:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042145fa:	74 0a                	je     8004214606 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  80042145fc:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214601:	e9 3e 02 00 00       	jmpq   8004214844 <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  8004214606:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421460a:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421460e:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  8004214612:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  8004214617:	0f 87 b1 00 00 00    	ja     80042146ce <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  800421461d:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  8004214621:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214625:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  8004214628:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421462c:	48 63 c9             	movslq %ecx,%rcx
  800421462f:	48 83 c1 01          	add    $0x1,%rcx
  8004214633:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214637:	48 01 ca             	add    %rcx,%rdx
  800421463a:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  800421463c:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214640:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214644:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004214648:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421464c:	48 63 c9             	movslq %ecx,%rcx
  800421464f:	48 83 c1 01          	add    $0x1,%rcx
  8004214653:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214657:	48 01 ca             	add    %rcx,%rdx
  800421465a:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  800421465d:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214661:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214665:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004214669:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421466d:	48 63 c9             	movslq %ecx,%rcx
  8004214670:	48 83 c1 01          	add    $0x1,%rcx
  8004214674:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214678:	48 01 ca             	add    %rcx,%rdx
  800421467b:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  800421467f:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214687:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421468b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421468f:	48 63 c9             	movslq %ecx,%rcx
  8004214692:	48 83 c1 01          	add    $0x1,%rcx
  8004214696:	48 c1 e1 04          	shl    $0x4,%rcx
  800421469a:	48 01 ca             	add    %rcx,%rdx
  800421469d:	48 83 c2 08          	add    $0x8,%rdx
  80042146a1:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  80042146a4:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  80042146a8:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  80042146ac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042146b0:	48 63 d2             	movslq %edx,%rdx
  80042146b3:	48 83 c2 01          	add    $0x1,%rdx
  80042146b7:	48 c1 e2 04          	shl    $0x4,%rdx
  80042146bb:	48 01 d0             	add    %rdx,%rax
  80042146be:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042146c2:	48 8b 00             	mov    (%rax),%rax
  80042146c5:	48 89 01             	mov    %rax,(%rcx)
  80042146c8:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  80042146cc:	eb 3c                	jmp    800421470a <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  80042146ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146d2:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  80042146d5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042146d9:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  80042146db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146df:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  80042146e3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042146e7:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  80042146ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146ee:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  80042146f2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042146f6:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  80042146fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146fe:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004214702:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214706:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  800421470a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004214711:	e9 fd 00 00 00       	jmpq   8004214813 <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  8004214716:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  800421471a:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800421471d:	75 05                	jne    8004214724 <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  800421471f:	e9 eb 00 00 00       	jmpq   800421480f <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  8004214724:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214728:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421472c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421472f:	48 63 d0             	movslq %eax,%rdx
  8004214732:	48 89 d0             	mov    %rdx,%rax
  8004214735:	48 01 c0             	add    %rax,%rax
  8004214738:	48 01 d0             	add    %rdx,%rax
  800421473b:	48 c1 e0 03          	shl    $0x3,%rax
  800421473f:	48 01 c8             	add    %rcx,%rax
  8004214742:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  8004214745:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214749:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421474c:	48 63 c9             	movslq %ecx,%rcx
  800421474f:	48 83 c1 01          	add    $0x1,%rcx
  8004214753:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214757:	48 01 ca             	add    %rcx,%rdx
  800421475a:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  800421475c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214760:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214764:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214767:	48 63 d0             	movslq %eax,%rdx
  800421476a:	48 89 d0             	mov    %rdx,%rax
  800421476d:	48 01 c0             	add    %rax,%rax
  8004214770:	48 01 d0             	add    %rdx,%rax
  8004214773:	48 c1 e0 03          	shl    $0x3,%rax
  8004214777:	48 01 c8             	add    %rcx,%rax
  800421477a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  800421477e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214782:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214785:	48 63 c9             	movslq %ecx,%rcx
  8004214788:	48 83 c1 01          	add    $0x1,%rcx
  800421478c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214790:	48 01 ca             	add    %rcx,%rdx
  8004214793:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  8004214796:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421479a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421479e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042147a1:	48 63 d0             	movslq %eax,%rdx
  80042147a4:	48 89 d0             	mov    %rdx,%rax
  80042147a7:	48 01 c0             	add    %rax,%rax
  80042147aa:	48 01 d0             	add    %rdx,%rax
  80042147ad:	48 c1 e0 03          	shl    $0x3,%rax
  80042147b1:	48 01 c8             	add    %rcx,%rax
  80042147b4:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042147b8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042147bc:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042147bf:	48 63 c9             	movslq %ecx,%rcx
  80042147c2:	48 83 c1 01          	add    $0x1,%rcx
  80042147c6:	48 c1 e1 04          	shl    $0x4,%rcx
  80042147ca:	48 01 ca             	add    %rcx,%rdx
  80042147cd:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  80042147d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042147d5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042147d9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042147dc:	48 63 d0             	movslq %eax,%rdx
  80042147df:	48 89 d0             	mov    %rdx,%rax
  80042147e2:	48 01 c0             	add    %rax,%rax
  80042147e5:	48 01 d0             	add    %rdx,%rax
  80042147e8:	48 c1 e0 03          	shl    $0x3,%rax
  80042147ec:	48 01 c8             	add    %rcx,%rax
  80042147ef:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  80042147f3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042147f7:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042147fa:	48 63 c9             	movslq %ecx,%rcx
  80042147fd:	48 83 c1 01          	add    $0x1,%rcx
  8004214801:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214805:	48 01 ca             	add    %rcx,%rdx
  8004214808:	48 83 c2 08          	add    $0x8,%rdx
  800421480c:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  800421480f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004214813:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  8004214817:	7f 14                	jg     800421482d <dwarf_get_fde_info_for_all_regs+0x30c>
  8004214819:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421481d:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  8004214821:	0f b7 c0             	movzwl %ax,%eax
  8004214824:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004214827:	0f 8f e9 fe ff ff    	jg     8004214716 <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  800421482d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004214832:	74 0b                	je     800421483f <dwarf_get_fde_info_for_all_regs+0x31e>
  8004214834:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214838:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421483c:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  800421483f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214844:	c9                   	leaveq 
  8004214845:	c3                   	retq   

0000008004214846 <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004214846:	55                   	push   %rbp
  8004214847:	48 89 e5             	mov    %rsp,%rbp
  800421484a:	48 83 ec 40          	sub    $0x40,%rsp
  800421484e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214852:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004214856:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421485a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  800421485e:	44 89 c0             	mov    %r8d,%eax
  8004214861:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004214865:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  8004214868:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  800421486c:	75 0a                	jne    8004214878 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  800421486e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214873:	e9 e6 01 00 00       	jmpq   8004214a5e <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  8004214878:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  800421487c:	83 e0 f0             	and    $0xfffffff0,%eax
  800421487f:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  8004214882:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004214886:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  800421488a:	83 f8 0c             	cmp    $0xc,%eax
  800421488d:	0f 87 72 01 00 00    	ja     8004214a05 <_dwarf_frame_read_lsb_encoded+0x1bf>
  8004214893:	89 c0                	mov    %eax,%eax
  8004214895:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421489c:	00 
  800421489d:	48 b8 60 10 22 04 80 	movabs $0x8004221060,%rax
  80042148a4:	00 00 00 
  80042148a7:	48 01 d0             	add    %rdx,%rax
  80042148aa:	48 8b 00             	mov    (%rax),%rax
  80042148ad:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  80042148af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148b3:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042148b7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042148bb:	8b 52 28             	mov    0x28(%rdx),%edx
  80042148be:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042148c2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042148c6:	48 89 cf             	mov    %rcx,%rdi
  80042148c9:	ff d0                	callq  *%rax
  80042148cb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042148cf:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042148d2:	e9 35 01 00 00       	jmpq   8004214a0c <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  80042148d7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042148db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042148df:	48 89 d6             	mov    %rdx,%rsi
  80042148e2:	48 89 c7             	mov    %rax,%rdi
  80042148e5:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  80042148ec:	00 00 00 
  80042148ef:	ff d0                	callq  *%rax
  80042148f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042148f5:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042148f8:	e9 0f 01 00 00       	jmpq   8004214a0c <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  80042148fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214901:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214905:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214909:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421490d:	ba 02 00 00 00       	mov    $0x2,%edx
  8004214912:	48 89 cf             	mov    %rcx,%rdi
  8004214915:	ff d0                	callq  *%rax
  8004214917:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421491b:	48 89 02             	mov    %rax,(%rdx)
		break;
  800421491e:	e9 e9 00 00 00       	jmpq   8004214a0c <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  8004214923:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214927:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421492b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421492f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214933:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214938:	48 89 cf             	mov    %rcx,%rdi
  800421493b:	ff d0                	callq  *%rax
  800421493d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214941:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214944:	e9 c3 00 00 00       	jmpq   8004214a0c <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  8004214949:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421494d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214951:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214955:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214959:	ba 08 00 00 00       	mov    $0x8,%edx
  800421495e:	48 89 cf             	mov    %rcx,%rdi
  8004214961:	ff d0                	callq  *%rax
  8004214963:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214967:	48 89 02             	mov    %rax,(%rdx)
		break;
  800421496a:	e9 9d 00 00 00       	jmpq   8004214a0c <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  800421496f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214973:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214977:	48 89 d6             	mov    %rdx,%rsi
  800421497a:	48 89 c7             	mov    %rax,%rdi
  800421497d:	48 b8 36 18 21 04 80 	movabs $0x8004211836,%rax
  8004214984:	00 00 00 
  8004214987:	ff d0                	callq  *%rax
  8004214989:	48 89 c2             	mov    %rax,%rdx
  800421498c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214990:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214993:	eb 77                	jmp    8004214a0c <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004214995:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214999:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421499d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042149a1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042149a5:	ba 02 00 00 00       	mov    $0x2,%edx
  80042149aa:	48 89 cf             	mov    %rcx,%rdi
  80042149ad:	ff d0                	callq  *%rax
  80042149af:	48 0f bf d0          	movswq %ax,%rdx
  80042149b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042149b7:	48 89 10             	mov    %rdx,(%rax)
		break;
  80042149ba:	eb 50                	jmp    8004214a0c <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  80042149bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149c0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042149c4:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042149c8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042149cc:	ba 04 00 00 00       	mov    $0x4,%edx
  80042149d1:	48 89 cf             	mov    %rcx,%rdi
  80042149d4:	ff d0                	callq  *%rax
  80042149d6:	48 63 d0             	movslq %eax,%rdx
  80042149d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042149dd:	48 89 10             	mov    %rdx,(%rax)
		break;
  80042149e0:	eb 2a                	jmp    8004214a0c <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  80042149e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149e6:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042149ea:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042149ee:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042149f2:	ba 08 00 00 00       	mov    $0x8,%edx
  80042149f7:	48 89 cf             	mov    %rcx,%rdi
  80042149fa:	ff d0                	callq  *%rax
  80042149fc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214a00:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214a03:	eb 07                	jmp    8004214a0c <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214a05:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214a0a:	eb 52                	jmp    8004214a5e <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  8004214a0c:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  8004214a10:	75 47                	jne    8004214a59 <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  8004214a12:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214a16:	83 f8 01             	cmp    $0x1,%eax
  8004214a19:	7c 3d                	jl     8004214a58 <_dwarf_frame_read_lsb_encoded+0x212>
  8004214a1b:	83 f8 04             	cmp    $0x4,%eax
  8004214a1e:	7e 0a                	jle    8004214a2a <_dwarf_frame_read_lsb_encoded+0x1e4>
  8004214a20:	83 e8 09             	sub    $0x9,%eax
  8004214a23:	83 f8 03             	cmp    $0x3,%eax
  8004214a26:	77 30                	ja     8004214a58 <_dwarf_frame_read_lsb_encoded+0x212>
  8004214a28:	eb 17                	jmp    8004214a41 <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  8004214a2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214a2e:	48 8b 10             	mov    (%rax),%rdx
  8004214a31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214a35:	48 01 c2             	add    %rax,%rdx
  8004214a38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214a3c:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214a3f:	eb 18                	jmp    8004214a59 <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  8004214a41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214a45:	48 8b 10             	mov    (%rax),%rdx
  8004214a48:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214a4c:	48 01 c2             	add    %rax,%rdx
  8004214a4f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214a53:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214a56:	eb 01                	jmp    8004214a59 <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  8004214a58:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  8004214a59:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214a5e:	c9                   	leaveq 
  8004214a5f:	c3                   	retq   

0000008004214a60 <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  8004214a60:	55                   	push   %rbp
  8004214a61:	48 89 e5             	mov    %rsp,%rbp
  8004214a64:	48 83 ec 50          	sub    $0x50,%rsp
  8004214a68:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214a6c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214a70:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004214a74:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214a78:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214a7c:	48 85 c0             	test   %rax,%rax
  8004214a7f:	74 0f                	je     8004214a90 <_dwarf_frame_parse_lsb_cie_augment+0x30>
  8004214a81:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214a85:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214a89:	0f b6 00             	movzbl (%rax),%eax
  8004214a8c:	3c 7a                	cmp    $0x7a,%al
  8004214a8e:	74 35                	je     8004214ac5 <_dwarf_frame_parse_lsb_cie_augment+0x65>
  8004214a90:	48 b9 c8 10 22 04 80 	movabs $0x80042210c8,%rcx
  8004214a97:	00 00 00 
  8004214a9a:	48 ba 47 0f 22 04 80 	movabs $0x8004220f47,%rdx
  8004214aa1:	00 00 00 
  8004214aa4:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004214aa9:	48 bf 5c 0f 22 04 80 	movabs $0x8004220f5c,%rdi
  8004214ab0:	00 00 00 
  8004214ab3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214ab8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214abf:	00 00 00 
  8004214ac2:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004214ac5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214ac9:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214acd:	48 83 c0 01          	add    $0x1,%rax
  8004214ad1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004214ad5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214ad9:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214add:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  8004214ae1:	e9 af 00 00 00       	jmpq   8004214b95 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  8004214ae6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214aea:	0f b6 00             	movzbl (%rax),%eax
  8004214aed:	0f b6 c0             	movzbl %al,%eax
  8004214af0:	83 f8 50             	cmp    $0x50,%eax
  8004214af3:	74 18                	je     8004214b0d <_dwarf_frame_parse_lsb_cie_augment+0xad>
  8004214af5:	83 f8 52             	cmp    $0x52,%eax
  8004214af8:	74 77                	je     8004214b71 <_dwarf_frame_parse_lsb_cie_augment+0x111>
  8004214afa:	83 f8 4c             	cmp    $0x4c,%eax
  8004214afd:	0f 85 86 00 00 00    	jne    8004214b89 <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  8004214b03:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  8004214b08:	e9 83 00 00 00       	jmpq   8004214b90 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  8004214b0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214b11:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214b15:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214b19:	0f b6 00             	movzbl (%rax),%eax
  8004214b1c:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  8004214b1f:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  8004214b26:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214b27:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  8004214b2c:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  8004214b30:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214b34:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  8004214b38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214b3c:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214b40:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214b44:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214b4a:	48 89 c7             	mov    %rax,%rdi
  8004214b4d:	48 b8 46 48 21 04 80 	movabs $0x8004214846,%rax
  8004214b54:	00 00 00 
  8004214b57:	ff d0                	callq  *%rax
  8004214b59:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  8004214b5c:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004214b60:	74 05                	je     8004214b67 <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  8004214b62:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004214b65:	eb 42                	jmp    8004214ba9 <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  8004214b67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214b6b:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  8004214b6f:	eb 1f                	jmp    8004214b90 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  8004214b71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214b75:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214b79:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214b7d:	0f b6 10             	movzbl (%rax),%edx
  8004214b80:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214b84:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  8004214b87:	eb 07                	jmp    8004214b90 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214b89:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214b8e:	eb 19                	jmp    8004214ba9 <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  8004214b90:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004214b95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214b99:	0f b6 00             	movzbl (%rax),%eax
  8004214b9c:	84 c0                	test   %al,%al
  8004214b9e:	0f 85 42 ff ff ff    	jne    8004214ae6 <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  8004214ba4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214ba9:	c9                   	leaveq 
  8004214baa:	c3                   	retq   

0000008004214bab <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004214bab:	55                   	push   %rbp
  8004214bac:	48 89 e5             	mov    %rsp,%rbp
  8004214baf:	48 83 ec 60          	sub    $0x60,%rsp
  8004214bb3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214bb7:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214bbb:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214bbf:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004214bc3:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004214bc7:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004214bcc:	75 35                	jne    8004214c03 <_dwarf_frame_set_cie+0x58>
  8004214bce:	48 b9 fd 10 22 04 80 	movabs $0x80042210fd,%rcx
  8004214bd5:	00 00 00 
  8004214bd8:	48 ba 47 0f 22 04 80 	movabs $0x8004220f47,%rdx
  8004214bdf:	00 00 00 
  8004214be2:	be 7b 02 00 00       	mov    $0x27b,%esi
  8004214be7:	48 bf 5c 0f 22 04 80 	movabs $0x8004220f5c,%rdi
  8004214bee:	00 00 00 
  8004214bf1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214bf6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214bfd:	00 00 00 
  8004214c00:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  8004214c03:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214c07:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  8004214c0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c0f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c13:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  8004214c16:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c1a:	48 8b 10             	mov    (%rax),%rdx
  8004214c1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c21:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214c25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c29:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214c2d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c31:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214c35:	48 89 d1             	mov    %rdx,%rcx
  8004214c38:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214c3c:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214c41:	48 89 cf             	mov    %rcx,%rdi
  8004214c44:	ff d0                	callq  *%rax
  8004214c46:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214c4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214c4f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214c53:	75 2e                	jne    8004214c83 <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004214c55:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214c5c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c60:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214c64:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c68:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214c6c:	48 89 d1             	mov    %rdx,%rcx
  8004214c6f:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214c73:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214c78:	48 89 cf             	mov    %rcx,%rdi
  8004214c7b:	ff d0                	callq  *%rax
  8004214c7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214c81:	eb 07                	jmp    8004214c8a <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  8004214c83:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214c8a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c8e:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214c92:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c96:	48 8b 00             	mov    (%rax),%rax
  8004214c99:	48 29 c2             	sub    %rax,%rdx
  8004214c9c:	48 89 d0             	mov    %rdx,%rax
  8004214c9f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214ca3:	73 0a                	jae    8004214caf <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214ca5:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214caa:	e9 5d 03 00 00       	jmpq   800421500c <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  8004214caf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214cb3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214cb7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214cbb:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214cbf:	48 89 d1             	mov    %rdx,%rcx
  8004214cc2:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214cc5:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214cc9:	48 89 cf             	mov    %rcx,%rdi
  8004214ccc:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004214cce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214cd2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214cd6:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214cda:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214cde:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214ce2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214ce6:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214cea:	48 89 d1             	mov    %rdx,%rcx
  8004214ced:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214cf1:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214cf6:	48 89 cf             	mov    %rcx,%rdi
  8004214cf9:	ff d0                	callq  *%rax
  8004214cfb:	89 c2                	mov    %eax,%edx
  8004214cfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d01:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214d05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d09:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214d0d:	66 83 f8 01          	cmp    $0x1,%ax
  8004214d11:	74 26                	je     8004214d39 <_dwarf_frame_set_cie+0x18e>
  8004214d13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d17:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214d1b:	66 83 f8 03          	cmp    $0x3,%ax
  8004214d1f:	74 18                	je     8004214d39 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  8004214d21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d25:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214d29:	66 83 f8 04          	cmp    $0x4,%ax
  8004214d2d:	74 0a                	je     8004214d39 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  8004214d2f:	b8 16 00 00 00       	mov    $0x16,%eax
  8004214d34:	e9 d3 02 00 00       	jmpq   800421500c <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214d39:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d3d:	48 8b 10             	mov    (%rax),%rdx
  8004214d40:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d44:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214d48:	48 01 d0             	add    %rdx,%rax
  8004214d4b:	48 89 c2             	mov    %rax,%rdx
  8004214d4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d52:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004214d56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d5a:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214d5e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  8004214d62:	90                   	nop
  8004214d63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d67:	48 8b 00             	mov    (%rax),%rax
  8004214d6a:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004214d6e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214d72:	48 89 0a             	mov    %rcx,(%rdx)
  8004214d75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214d79:	48 01 d0             	add    %rdx,%rax
  8004214d7c:	0f b6 00             	movzbl (%rax),%eax
  8004214d7f:	84 c0                	test   %al,%al
  8004214d81:	75 e0                	jne    8004214d63 <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  8004214d83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d87:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214d8b:	0f b6 00             	movzbl (%rax),%eax
  8004214d8e:	84 c0                	test   %al,%al
  8004214d90:	74 48                	je     8004214dda <_dwarf_frame_set_cie+0x22f>
  8004214d92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d96:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214d9a:	0f b6 00             	movzbl (%rax),%eax
  8004214d9d:	3c 7a                	cmp    $0x7a,%al
  8004214d9f:	74 39                	je     8004214dda <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214da1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214da5:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214da9:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214dad:	75 07                	jne    8004214db6 <_dwarf_frame_set_cie+0x20b>
  8004214daf:	b8 04 00 00 00       	mov    $0x4,%eax
  8004214db4:	eb 05                	jmp    8004214dbb <_dwarf_frame_set_cie+0x210>
  8004214db6:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004214dbb:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  8004214dbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214dc2:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214dc6:	48 01 c2             	add    %rax,%rdx
  8004214dc9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214dcd:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  8004214dd0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214dd5:	e9 32 02 00 00       	jmpq   800421500c <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  8004214dda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214dde:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214de2:	48 be 05 11 22 04 80 	movabs $0x8004221105,%rsi
  8004214de9:	00 00 00 
  8004214dec:	48 89 c7             	mov    %rax,%rdi
  8004214def:	48 b8 ed 11 21 04 80 	movabs $0x80042111ed,%rax
  8004214df6:	00 00 00 
  8004214df9:	ff d0                	callq  *%rax
  8004214dfb:	48 85 c0             	test   %rax,%rax
  8004214dfe:	74 28                	je     8004214e28 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214e00:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e04:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e08:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e0c:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214e0f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214e13:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214e17:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214e1b:	48 89 cf             	mov    %rcx,%rdi
  8004214e1e:	ff d0                	callq  *%rax
  8004214e20:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214e24:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214e28:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e2c:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214e30:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214e34:	48 89 d6             	mov    %rdx,%rsi
  8004214e37:	48 89 c7             	mov    %rax,%rdi
  8004214e3a:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  8004214e41:	00 00 00 
  8004214e44:	ff d0                	callq  *%rax
  8004214e46:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214e4a:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214e4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e52:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214e56:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214e5a:	48 89 d6             	mov    %rdx,%rsi
  8004214e5d:	48 89 c7             	mov    %rax,%rdi
  8004214e60:	48 b8 36 18 21 04 80 	movabs $0x8004211836,%rax
  8004214e67:	00 00 00 
  8004214e6a:	ff d0                	callq  *%rax
  8004214e6c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214e70:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  8004214e74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e78:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214e7c:	66 83 f8 01          	cmp    $0x1,%ax
  8004214e80:	75 2b                	jne    8004214ead <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214e82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e86:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e8a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e8e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214e92:	48 89 d1             	mov    %rdx,%rcx
  8004214e95:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214e99:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214e9e:	48 89 cf             	mov    %rcx,%rdi
  8004214ea1:	ff d0                	callq  *%rax
  8004214ea3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214ea7:	48 89 42 48          	mov    %rax,0x48(%rdx)
  8004214eab:	eb 26                	jmp    8004214ed3 <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214ead:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214eb1:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214eb5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214eb9:	48 89 d6             	mov    %rdx,%rsi
  8004214ebc:	48 89 c7             	mov    %rax,%rdi
  8004214ebf:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  8004214ec6:	00 00 00 
  8004214ec9:	ff d0                	callq  *%rax
  8004214ecb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214ecf:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  8004214ed3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ed7:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214edb:	0f b6 00             	movzbl (%rax),%eax
  8004214ede:	3c 7a                	cmp    $0x7a,%al
  8004214ee0:	0f 85 93 00 00 00    	jne    8004214f79 <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214ee6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214eea:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214eee:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214ef2:	48 89 d6             	mov    %rdx,%rsi
  8004214ef5:	48 89 c7             	mov    %rax,%rdi
  8004214ef8:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  8004214eff:	00 00 00 
  8004214f02:	ff d0                	callq  *%rax
  8004214f04:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214f08:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214f0c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f10:	48 8b 10             	mov    (%rax),%rdx
  8004214f13:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f17:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214f1b:	48 01 d0             	add    %rdx,%rax
  8004214f1e:	48 89 c2             	mov    %rax,%rdx
  8004214f21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f25:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  8004214f29:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f2d:	48 8b 10             	mov    (%rax),%rdx
  8004214f30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f34:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004214f38:	48 01 c2             	add    %rax,%rdx
  8004214f3b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f3f:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  8004214f42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f46:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  8004214f4a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004214f4e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004214f52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f56:	48 89 ce             	mov    %rcx,%rsi
  8004214f59:	48 89 c7             	mov    %rax,%rdi
  8004214f5c:	48 b8 60 4a 21 04 80 	movabs $0x8004214a60,%rax
  8004214f63:	00 00 00 
  8004214f66:	ff d0                	callq  *%rax
  8004214f68:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004214f6b:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214f6f:	74 08                	je     8004214f79 <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  8004214f71:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214f74:	e9 93 00 00 00       	jmpq   800421500c <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214f79:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f7d:	48 8b 10             	mov    (%rax),%rdx
  8004214f80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f84:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214f88:	48 01 d0             	add    %rdx,%rax
  8004214f8b:	48 89 c2             	mov    %rax,%rdx
  8004214f8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f92:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  8004214f96:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214f9a:	75 2a                	jne    8004214fc6 <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  8004214f9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fa0:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214fa4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214fa8:	48 01 c2             	add    %rax,%rdx
  8004214fab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214faf:	48 8b 00             	mov    (%rax),%rax
  8004214fb2:	48 29 c2             	sub    %rax,%rdx
  8004214fb5:	48 89 d0             	mov    %rdx,%rax
  8004214fb8:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214fbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fc0:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004214fc4:	eb 28                	jmp    8004214fee <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  8004214fc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fca:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214fce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214fd2:	48 01 c2             	add    %rax,%rdx
  8004214fd5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214fd9:	48 8b 00             	mov    (%rax),%rax
  8004214fdc:	48 29 c2             	sub    %rax,%rdx
  8004214fdf:	48 89 d0             	mov    %rdx,%rax
  8004214fe2:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004214fe6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fea:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  8004214fee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ff2:	48 8b 10             	mov    (%rax),%rdx
  8004214ff5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ff9:	48 8b 40 70          	mov    0x70(%rax),%rax
  8004214ffd:	48 01 c2             	add    %rax,%rdx
  8004215000:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215004:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004215007:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421500c:	c9                   	leaveq 
  800421500d:	c3                   	retq   

000000800421500e <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  800421500e:	55                   	push   %rbp
  800421500f:	48 89 e5             	mov    %rsp,%rbp
  8004215012:	48 83 ec 70          	sub    $0x70,%rsp
  8004215016:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421501a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421501e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004215022:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004215026:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  800421502a:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  800421502e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215032:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  8004215036:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421503a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421503e:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004215041:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215045:	48 8b 10             	mov    (%rax),%rdx
  8004215048:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421504c:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215050:	48 01 d0             	add    %rdx,%rax
  8004215053:	48 89 c2             	mov    %rax,%rdx
  8004215056:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421505a:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  800421505e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215062:	48 8b 10             	mov    (%rax),%rdx
  8004215065:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215069:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  800421506d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215071:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215075:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215079:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421507d:	48 89 d1             	mov    %rdx,%rcx
  8004215080:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215084:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215089:	48 89 cf             	mov    %rcx,%rdi
  800421508c:	ff d0                	callq  *%rax
  800421508e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004215092:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215097:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421509b:	75 2e                	jne    80042150cb <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  800421509d:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  80042150a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150a8:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042150ac:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042150b0:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042150b4:	48 89 d1             	mov    %rdx,%rcx
  80042150b7:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042150bb:	ba 08 00 00 00       	mov    $0x8,%edx
  80042150c0:	48 89 cf             	mov    %rcx,%rdi
  80042150c3:	ff d0                	callq  *%rax
  80042150c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042150c9:	eb 07                	jmp    80042150d2 <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  80042150cb:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  80042150d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150d6:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042150da:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042150de:	48 8b 00             	mov    (%rax),%rax
  80042150e1:	48 29 c2             	sub    %rax,%rdx
  80042150e4:	48 89 d0             	mov    %rdx,%rax
  80042150e7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042150eb:	73 0a                	jae    80042150f7 <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042150ed:	b8 12 00 00 00       	mov    $0x12,%eax
  80042150f2:	e9 ca 02 00 00       	jmpq   80042153c1 <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  80042150f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042150ff:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  8004215103:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004215107:	74 5e                	je     8004215167 <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004215109:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421510d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215111:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215115:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215119:	48 89 d1             	mov    %rdx,%rcx
  800421511c:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215120:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215125:	48 89 cf             	mov    %rcx,%rdi
  8004215128:	ff d0                	callq  *%rax
  800421512a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421512e:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  8004215132:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215136:	48 8b 10             	mov    (%rax),%rdx
  8004215139:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421513d:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215141:	48 29 c2             	sub    %rax,%rdx
  8004215144:	48 89 d0             	mov    %rdx,%rax
  8004215147:	48 83 e8 04          	sub    $0x4,%rax
  800421514b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  800421514f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215153:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215157:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421515b:	75 3d                	jne    800421519a <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  800421515d:	b8 13 00 00 00       	mov    $0x13,%eax
  8004215162:	e9 5a 02 00 00       	jmpq   80042153c1 <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  8004215167:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421516b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421516f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215173:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215177:	48 89 d1             	mov    %rdx,%rcx
  800421517a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421517d:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215181:	48 89 cf             	mov    %rcx,%rdi
  8004215184:	ff d0                	callq  *%rax
  8004215186:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421518a:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  800421518e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215192:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215196:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  800421519a:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  800421519e:	0f 84 c9 00 00 00    	je     800421526d <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  80042151a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042151a8:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042151ac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042151b0:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042151b3:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  80042151b7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042151bb:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042151bf:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  80042151c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042151c7:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042151cb:	48 89 c2             	mov    %rax,%rdx
  80042151ce:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  80042151d2:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  80042151d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042151da:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  80042151de:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042151e2:	48 89 c7             	mov    %rax,%rdi
  80042151e5:	48 b8 46 48 21 04 80 	movabs $0x8004214846,%rax
  80042151ec:	00 00 00 
  80042151ef:	ff d0                	callq  *%rax
  80042151f1:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  80042151f4:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042151f8:	74 08                	je     8004215202 <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  80042151fa:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042151fd:	e9 bf 01 00 00       	jmpq   80042153c1 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  8004215202:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215206:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421520a:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  800421520e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215212:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215216:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  800421521a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421521e:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215222:	48 89 c2             	mov    %rax,%rdx
  8004215225:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004215229:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  800421522d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215231:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004215235:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215239:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800421523f:	48 89 c7             	mov    %rax,%rdi
  8004215242:	48 b8 46 48 21 04 80 	movabs $0x8004214846,%rax
  8004215249:	00 00 00 
  800421524c:	ff d0                	callq  *%rax
  800421524e:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  8004215251:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004215255:	74 08                	je     800421525f <_dwarf_frame_set_fde+0x251>
			return (ret);
  8004215257:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421525a:	e9 62 01 00 00       	jmpq   80042153c1 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  800421525f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215267:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421526b:	eb 50                	jmp    80042152bd <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  800421526d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215271:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215275:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215279:	8b 52 28             	mov    0x28(%rdx),%edx
  800421527c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004215280:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004215284:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215288:	48 89 cf             	mov    %rcx,%rdi
  800421528b:	ff d0                	callq  *%rax
  800421528d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215291:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004215295:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215299:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421529d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042152a1:	8b 52 28             	mov    0x28(%rdx),%edx
  80042152a4:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042152a8:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042152ac:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042152b0:	48 89 cf             	mov    %rcx,%rdi
  80042152b3:	ff d0                	callq  *%rax
  80042152b5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042152b9:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  80042152bd:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042152c1:	74 6b                	je     800421532e <_dwarf_frame_set_fde+0x320>
  80042152c3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042152c7:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042152cb:	0f b6 00             	movzbl (%rax),%eax
  80042152ce:	3c 7a                	cmp    $0x7a,%al
  80042152d0:	75 5c                	jne    800421532e <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042152d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042152d6:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042152da:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042152de:	48 89 d6             	mov    %rdx,%rsi
  80042152e1:	48 89 c7             	mov    %rax,%rdi
  80042152e4:	48 b8 da 18 21 04 80 	movabs $0x80042118da,%rax
  80042152eb:	00 00 00 
  80042152ee:	ff d0                	callq  *%rax
  80042152f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042152f4:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042152f8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042152fc:	48 8b 10             	mov    (%rax),%rdx
  80042152ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215303:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215307:	48 01 d0             	add    %rdx,%rax
  800421530a:	48 89 c2             	mov    %rax,%rdx
  800421530d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215311:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  8004215315:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215319:	48 8b 10             	mov    (%rax),%rdx
  800421531c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215320:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004215324:	48 01 c2             	add    %rax,%rdx
  8004215327:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421532b:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  800421532e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215332:	48 8b 10             	mov    (%rax),%rdx
  8004215335:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215339:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421533d:	48 01 d0             	add    %rdx,%rax
  8004215340:	48 89 c2             	mov    %rax,%rdx
  8004215343:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215347:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  800421534b:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800421534f:	75 2a                	jne    800421537b <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  8004215351:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215355:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215359:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421535d:	48 01 c2             	add    %rax,%rdx
  8004215360:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215364:	48 8b 00             	mov    (%rax),%rax
  8004215367:	48 29 c2             	sub    %rax,%rdx
  800421536a:	48 89 d0             	mov    %rdx,%rax
  800421536d:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004215371:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215375:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004215379:	eb 28                	jmp    80042153a3 <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  800421537b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421537f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215383:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215387:	48 01 c2             	add    %rax,%rdx
  800421538a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421538e:	48 8b 00             	mov    (%rax),%rax
  8004215391:	48 29 c2             	sub    %rax,%rdx
  8004215394:	48 89 d0             	mov    %rdx,%rax
  8004215397:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  800421539b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421539f:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  80042153a3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042153a7:	48 8b 10             	mov    (%rax),%rdx
  80042153aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042153ae:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042153b2:	48 01 c2             	add    %rax,%rdx
  80042153b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042153b9:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  80042153bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042153c1:	c9                   	leaveq 
  80042153c2:	c3                   	retq   

00000080042153c3 <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  80042153c3:	55                   	push   %rbp
  80042153c4:	48 89 e5             	mov    %rsp,%rbp
  80042153c7:	48 83 ec 20          	sub    $0x20,%rsp
  80042153cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042153cf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  80042153d3:	48 b8 a0 e6 4d 04 80 	movabs $0x80044de6a0,%rax
  80042153da:	00 00 00 
  80042153dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  80042153e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042153e5:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042153e9:	48 85 c0             	test   %rax,%rax
  80042153ec:	74 07                	je     80042153f5 <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  80042153ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042153f3:	eb 33                	jmp    8004215428 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  80042153f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042153f9:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  80042153fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215401:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  8004215405:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215409:	48 b9 40 ce 6d 04 80 	movabs $0x80046dce40,%rcx
  8004215410:	00 00 00 
  8004215413:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  8004215417:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421541b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421541f:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  8004215423:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215428:	c9                   	leaveq 
  8004215429:	c3                   	retq   

000000800421542a <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  800421542a:	55                   	push   %rbp
  800421542b:	48 89 e5             	mov    %rsp,%rbp
  800421542e:	48 83 ec 60          	sub    $0x60,%rsp
  8004215432:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004215436:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004215439:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421543d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  8004215441:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  8004215448:	00 00 00 
  800421544b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  800421544f:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  8004215456:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421545a:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421545e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  8004215462:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215466:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421546a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421546e:	48 39 c2             	cmp    %rax,%rdx
  8004215471:	0f 86 fe 01 00 00    	jbe    8004215675 <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  8004215477:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421547b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  800421547f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215483:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215487:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421548b:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421548f:	48 89 d1             	mov    %rdx,%rcx
  8004215492:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215496:	ba 04 00 00 00       	mov    $0x4,%edx
  800421549b:	48 89 cf             	mov    %rcx,%rdi
  800421549e:	ff d0                	callq  *%rax
  80042154a0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  80042154a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042154a9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042154ad:	75 2e                	jne    80042154dd <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  80042154af:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  80042154b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042154ba:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042154be:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042154c2:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042154c6:	48 89 d1             	mov    %rdx,%rcx
  80042154c9:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  80042154cd:	ba 08 00 00 00       	mov    $0x8,%edx
  80042154d2:	48 89 cf             	mov    %rcx,%rdi
  80042154d5:	ff d0                	callq  *%rax
  80042154d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042154db:	eb 07                	jmp    80042154e4 <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  80042154dd:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  80042154e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042154e8:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042154ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042154f0:	48 29 c2             	sub    %rax,%rdx
  80042154f3:	48 89 d0             	mov    %rdx,%rax
  80042154f6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042154fa:	72 0d                	jb     8004215509 <_dwarf_get_next_fde+0xdf>
  80042154fc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215501:	75 10                	jne    8004215513 <_dwarf_get_next_fde+0xe9>
  8004215503:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215507:	75 0a                	jne    8004215513 <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004215509:	b8 12 00 00 00       	mov    $0x12,%eax
  800421550e:	e9 67 01 00 00       	jmpq   800421567a <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  8004215513:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215517:	74 11                	je     800421552a <_dwarf_get_next_fde+0x100>
  8004215519:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421551e:	75 0a                	jne    800421552a <_dwarf_get_next_fde+0x100>
			return(-1);
  8004215520:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215525:	e9 50 01 00 00       	jmpq   800421567a <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  800421552a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421552e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215532:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215536:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421553a:	48 89 d1             	mov    %rdx,%rcx
  800421553d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004215540:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215544:	48 89 cf             	mov    %rcx,%rdi
  8004215547:	ff d0                	callq  *%rax
  8004215549:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  800421554d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215551:	74 79                	je     80042155cc <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  8004215553:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004215558:	75 32                	jne    800421558c <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  800421555a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421555e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004215562:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215566:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800421556a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800421556e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215572:	49 89 f8             	mov    %rdi,%r8
  8004215575:	48 89 c7             	mov    %rax,%rdi
  8004215578:	48 b8 ab 4b 21 04 80 	movabs $0x8004214bab,%rax
  800421557f:	00 00 00 
  8004215582:	ff d0                	callq  *%rax
  8004215584:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215587:	e9 c8 00 00 00       	jmpq   8004215654 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  800421558c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215590:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004215594:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004215598:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421559c:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042155a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042155a4:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042155a8:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042155ac:	4d 89 c1             	mov    %r8,%r9
  80042155af:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  80042155b5:	48 89 c7             	mov    %rax,%rdi
  80042155b8:	48 b8 0e 50 21 04 80 	movabs $0x800421500e,%rax
  80042155bf:	00 00 00 
  80042155c2:	ff d0                	callq  *%rax
  80042155c4:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042155c7:	e9 88 00 00 00       	jmpq   8004215654 <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  80042155cc:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042155d0:	75 0b                	jne    80042155dd <_dwarf_get_next_fde+0x1b3>
  80042155d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042155d7:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042155db:	74 0d                	je     80042155ea <_dwarf_get_next_fde+0x1c0>
  80042155dd:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  80042155e1:	75 36                	jne    8004215619 <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  80042155e3:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  80042155e8:	75 2f                	jne    8004215619 <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  80042155ea:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042155ee:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042155f2:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042155f6:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  80042155fa:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042155fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215602:	49 89 f8             	mov    %rdi,%r8
  8004215605:	48 89 c7             	mov    %rax,%rdi
  8004215608:	48 b8 ab 4b 21 04 80 	movabs $0x8004214bab,%rax
  800421560f:	00 00 00 
  8004215612:	ff d0                	callq  *%rax
  8004215614:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215617:	eb 3b                	jmp    8004215654 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  8004215619:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421561d:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004215621:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004215625:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215629:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421562d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215631:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215635:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215639:	4d 89 c1             	mov    %r8,%r9
  800421563c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004215642:	48 89 c7             	mov    %rax,%rdi
  8004215645:	48 b8 0e 50 21 04 80 	movabs $0x800421500e,%rax
  800421564c:	00 00 00 
  800421564f:	ff d0                	callq  *%rax
  8004215651:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  8004215654:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004215658:	74 07                	je     8004215661 <_dwarf_get_next_fde+0x237>
			return(-1);
  800421565a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421565f:	eb 19                	jmp    800421567a <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  8004215661:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215665:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  8004215669:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421566d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215671:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  8004215675:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421567a:	c9                   	leaveq 
  800421567b:	c3                   	retq   

000000800421567c <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  800421567c:	55                   	push   %rbp
  800421567d:	48 89 e5             	mov    %rsp,%rbp
  8004215680:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004215684:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215688:	89 f0                	mov    %esi,%eax
  800421568a:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  800421568e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215692:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004215696:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  800421569a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421569e:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  80042156a2:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  80042156a6:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  80042156aa:	c9                   	leaveq 
  80042156ab:	c3                   	retq   

00000080042156ac <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  80042156ac:	55                   	push   %rbp
  80042156ad:	48 89 e5             	mov    %rsp,%rbp
  80042156b0:	48 83 ec 10          	sub    $0x10,%rsp
  80042156b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042156b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  80042156bc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042156c1:	75 0a                	jne    80042156cd <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  80042156c3:	b8 01 00 00 00       	mov    $0x1,%eax
  80042156c8:	e9 85 00 00 00       	jmpq   8004215752 <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  80042156cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042156d1:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042156d5:	48 85 c0             	test   %rax,%rax
  80042156d8:	75 25                	jne    80042156ff <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  80042156da:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042156de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042156e2:	48 89 d6             	mov    %rdx,%rsi
  80042156e5:	48 89 c7             	mov    %rax,%rdi
  80042156e8:	48 b8 c3 53 21 04 80 	movabs $0x80042153c3,%rax
  80042156ef:	00 00 00 
  80042156f2:	ff d0                	callq  *%rax
  80042156f4:	85 c0                	test   %eax,%eax
  80042156f6:	74 07                	je     80042156ff <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  80042156f8:	b8 01 00 00 00       	mov    $0x1,%eax
  80042156fd:	eb 53                	jmp    8004215752 <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  80042156ff:	48 bf a0 56 23 04 80 	movabs $0x80042356a0,%rdi
  8004215706:	00 00 00 
  8004215709:	48 b8 78 31 21 04 80 	movabs $0x8004213178,%rax
  8004215710:	00 00 00 
  8004215713:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  8004215715:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215719:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  8004215720:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  8004215721:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  8004215728:	00 00 00 
  800421572b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421572f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215733:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  8004215737:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  800421573e:	00 00 00 
  8004215741:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215745:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215749:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  800421574d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215752:	c9                   	leaveq 
  8004215753:	c3                   	retq   

0000008004215754 <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004215754:	55                   	push   %rbp
  8004215755:	48 89 e5             	mov    %rsp,%rbp
  8004215758:	53                   	push   %rbx
  8004215759:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  8004215760:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004215764:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  8004215768:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  800421576f:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  8004215776:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  800421577d:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  8004215784:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215788:	48 83 c0 48          	add    $0x48,%rax
  800421578c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  8004215790:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215797:	00 
  8004215798:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  800421579f:	00 
  80042157a0:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  80042157a7:	00 
  80042157a8:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  80042157af:	00 
  80042157b0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042157b4:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  80042157b8:	0f b6 c0             	movzbl %al,%eax
  80042157bb:	89 45 cc             	mov    %eax,-0x34(%rbp)
  80042157be:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  80042157c5:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  80042157cc:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  80042157d3:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  80042157da:	e9 0a 05 00 00       	jmpq   8004215ce9 <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  80042157df:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042157e6:	0f b6 00             	movzbl (%rax),%eax
  80042157e9:	84 c0                	test   %al,%al
  80042157eb:	0f 85 78 01 00 00    	jne    8004215969 <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  80042157f1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042157f8:	48 83 c0 01          	add    $0x1,%rax
  80042157fc:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  8004215803:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  800421580a:	48 89 c7             	mov    %rax,%rdi
  800421580d:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004215814:	00 00 00 
  8004215817:	ff d0                	callq  *%rax
  8004215819:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  800421581d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215824:	0f b6 00             	movzbl (%rax),%eax
  8004215827:	0f b6 c0             	movzbl %al,%eax
  800421582a:	83 f8 02             	cmp    $0x2,%eax
  800421582d:	74 7a                	je     80042158a9 <_dwarf_lineno_run_program+0x155>
  800421582f:	83 f8 03             	cmp    $0x3,%eax
  8004215832:	0f 84 b3 00 00 00    	je     80042158eb <_dwarf_lineno_run_program+0x197>
  8004215838:	83 f8 01             	cmp    $0x1,%eax
  800421583b:	0f 85 09 01 00 00    	jne    800421594a <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  8004215841:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215848:	48 83 c0 01          	add    $0x1,%rax
  800421584c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  8004215853:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  800421585a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215861:	00 
  8004215862:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004215869:	00 
  800421586a:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004215871:	00 
  8004215872:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004215879:	00 
  800421587a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421587e:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004215882:	0f b6 c0             	movzbl %al,%eax
  8004215885:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004215888:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  800421588f:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215896:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  800421589d:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  80042158a4:	e9 bb 00 00 00       	jmpq   8004215964 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  80042158a9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042158b0:	48 83 c0 01          	add    $0x1,%rax
  80042158b4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  80042158bb:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  80042158c2:	00 00 00 
  80042158c5:	48 8b 00             	mov    (%rax),%rax
  80042158c8:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042158cc:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  80042158d0:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042158d4:	0f b6 ca             	movzbl %dl,%ecx
  80042158d7:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  80042158de:	89 ce                	mov    %ecx,%esi
  80042158e0:	48 89 d7             	mov    %rdx,%rdi
  80042158e3:	ff d0                	callq  *%rax
  80042158e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  80042158e9:	eb 79                	jmp    8004215964 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  80042158eb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042158f2:	48 83 c0 01          	add    $0x1,%rax
  80042158f6:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  80042158fd:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215904:	00 00 00 
  8004215907:	48 8b 08             	mov    (%rax),%rcx
  800421590a:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004215911:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  8004215918:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421591c:	49 89 c8             	mov    %rcx,%r8
  800421591f:	48 89 d1             	mov    %rdx,%rcx
  8004215922:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215927:	48 89 c7             	mov    %rax,%rdi
  800421592a:	48 b8 0c 5d 21 04 80 	movabs $0x8004215d0c,%rax
  8004215931:	00 00 00 
  8004215934:	ff d0                	callq  *%rax
  8004215936:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  8004215939:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  800421593d:	74 09                	je     8004215948 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  800421593f:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  8004215940:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004215943:	e9 ba 03 00 00       	jmpq   8004215d02 <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  8004215948:	eb 1a                	jmp    8004215964 <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  800421594a:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004215951:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215955:	48 01 d0             	add    %rdx,%rax
  8004215958:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  800421595f:	e9 85 03 00 00       	jmpq   8004215ce9 <_dwarf_lineno_run_program+0x595>
  8004215964:	e9 80 03 00 00       	jmpq   8004215ce9 <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  8004215969:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215970:	0f b6 00             	movzbl (%rax),%eax
  8004215973:	84 c0                	test   %al,%al
  8004215975:	0f 84 3c 02 00 00    	je     8004215bb7 <_dwarf_lineno_run_program+0x463>
  800421597b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215982:	0f b6 10             	movzbl (%rax),%edx
  8004215985:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215989:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  800421598d:	38 c2                	cmp    %al,%dl
  800421598f:	0f 83 22 02 00 00    	jae    8004215bb7 <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004215995:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421599c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042159a0:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  80042159a7:	0f b6 00             	movzbl (%rax),%eax
  80042159aa:	0f b6 c0             	movzbl %al,%eax
  80042159ad:	83 f8 0c             	cmp    $0xc,%eax
  80042159b0:	0f 87 fb 01 00 00    	ja     8004215bb1 <_dwarf_lineno_run_program+0x45d>
  80042159b6:	89 c0                	mov    %eax,%eax
  80042159b8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042159bf:	00 
  80042159c0:	48 b8 08 11 22 04 80 	movabs $0x8004221108,%rax
  80042159c7:	00 00 00 
  80042159ca:	48 01 d0             	add    %rdx,%rax
  80042159cd:	48 8b 00             	mov    (%rax),%rax
  80042159d0:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  80042159d2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042159d9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042159dd:	73 0a                	jae    80042159e9 <_dwarf_lineno_run_program+0x295>
  80042159df:	b8 00 00 00 00       	mov    $0x0,%eax
  80042159e4:	e9 19 03 00 00       	jmpq   8004215d02 <_dwarf_lineno_run_program+0x5ae>
  80042159e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042159ed:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042159f1:	48 89 10             	mov    %rdx,(%rax)
  80042159f4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042159f8:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  80042159ff:	00 
  8004215a00:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a04:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215a08:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215a0c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a10:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215a14:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215a18:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215a1c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a20:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215a24:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a28:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004215a2b:	89 50 28             	mov    %edx,0x28(%rax)
  8004215a2e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a32:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215a35:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215a38:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a3c:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215a3f:	89 50 30             	mov    %edx,0x30(%rax)
  8004215a42:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215a46:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215a4d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215a51:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215a55:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004215a5c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  8004215a63:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  8004215a6a:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215a71:	e9 3c 01 00 00       	jmpq   8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215a76:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215a7d:	48 89 c7             	mov    %rax,%rdi
  8004215a80:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004215a87:	00 00 00 
  8004215a8a:	ff d0                	callq  *%rax
					li->li_minlen;
  8004215a8c:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004215a90:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215a94:	0f b6 d2             	movzbl %dl,%edx
  8004215a97:	48 0f af c2          	imul   %rdx,%rax
  8004215a9b:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  8004215a9f:	e9 0e 01 00 00       	jmpq   8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  8004215aa4:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215aab:	48 89 c7             	mov    %rax,%rdi
  8004215aae:	48 b8 59 19 21 04 80 	movabs $0x8004211959,%rax
  8004215ab5:	00 00 00 
  8004215ab8:	ff d0                	callq  *%rax
  8004215aba:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  8004215abe:	e9 ef 00 00 00       	jmpq   8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  8004215ac3:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215aca:	48 89 c7             	mov    %rax,%rdi
  8004215acd:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004215ad4:	00 00 00 
  8004215ad7:	ff d0                	callq  *%rax
  8004215ad9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004215add:	e9 d0 00 00 00       	jmpq   8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  8004215ae2:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215ae9:	48 89 c7             	mov    %rax,%rdi
  8004215aec:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004215af3:	00 00 00 
  8004215af6:	ff d0                	callq  *%rax
  8004215af8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  8004215afc:	e9 b1 00 00 00       	jmpq   8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  8004215b01:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004215b05:	0f 94 c0             	sete   %al
  8004215b08:	0f b6 c0             	movzbl %al,%eax
  8004215b0b:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  8004215b0e:	e9 9f 00 00 00       	jmpq   8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  8004215b13:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  8004215b1a:	e9 93 00 00 00       	jmpq   8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  8004215b1f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215b23:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215b27:	0f b6 c0             	movzbl %al,%eax
  8004215b2a:	ba ff 00 00 00       	mov    $0xff,%edx
  8004215b2f:	89 d1                	mov    %edx,%ecx
  8004215b31:	29 c1                	sub    %eax,%ecx
  8004215b33:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215b37:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215b3b:	0f b6 d8             	movzbl %al,%ebx
  8004215b3e:	89 c8                	mov    %ecx,%eax
  8004215b40:	99                   	cltd   
  8004215b41:	f7 fb                	idiv   %ebx
  8004215b43:	89 c2                	mov    %eax,%edx
  8004215b45:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215b49:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215b4d:	0f b6 c0             	movzbl %al,%eax
  8004215b50:	0f af c2             	imul   %edx,%eax
  8004215b53:	48 98                	cltq   
  8004215b55:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215b59:	eb 57                	jmp    8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  8004215b5b:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215b62:	00 00 00 
  8004215b65:	48 8b 00             	mov    (%rax),%rax
  8004215b68:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215b6c:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004215b73:	be 02 00 00 00       	mov    $0x2,%esi
  8004215b78:	48 89 d7             	mov    %rdx,%rdi
  8004215b7b:	ff d0                	callq  *%rax
  8004215b7d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215b81:	eb 2f                	jmp    8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  8004215b83:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  8004215b8a:	eb 26                	jmp    8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  8004215b8c:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  8004215b93:	eb 1d                	jmp    8004215bb2 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004215b95:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215b9c:	48 89 c7             	mov    %rax,%rdi
  8004215b9f:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004215ba6:	00 00 00 
  8004215ba9:	ff d0                	callq  *%rax
  8004215bab:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  8004215baf:	eb 01                	jmp    8004215bb2 <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  8004215bb1:	90                   	nop
			}

		} else {
  8004215bb2:	e9 32 01 00 00       	jmpq   8004215ce9 <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  8004215bb7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215bbb:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  8004215bbf:	0f be c8             	movsbl %al,%ecx
  8004215bc2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215bc9:	0f b6 00             	movzbl (%rax),%eax
  8004215bcc:	0f b6 d0             	movzbl %al,%edx
  8004215bcf:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215bd3:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215bd7:	0f b6 c0             	movzbl %al,%eax
  8004215bda:	29 c2                	sub    %eax,%edx
  8004215bdc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215be0:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215be4:	0f b6 f0             	movzbl %al,%esi
  8004215be7:	89 d0                	mov    %edx,%eax
  8004215be9:	99                   	cltd   
  8004215bea:	f7 fe                	idiv   %esi
  8004215bec:	89 d0                	mov    %edx,%eax
  8004215bee:	01 c8                	add    %ecx,%eax
  8004215bf0:	48 98                	cltq   
  8004215bf2:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  8004215bf6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215bfd:	0f b6 00             	movzbl (%rax),%eax
  8004215c00:	0f b6 d0             	movzbl %al,%edx
  8004215c03:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c07:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215c0b:	0f b6 c0             	movzbl %al,%eax
  8004215c0e:	89 d1                	mov    %edx,%ecx
  8004215c10:	29 c1                	sub    %eax,%ecx
  8004215c12:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c16:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215c1a:	0f b6 d8             	movzbl %al,%ebx
  8004215c1d:	89 c8                	mov    %ecx,%eax
  8004215c1f:	99                   	cltd   
  8004215c20:	f7 fb                	idiv   %ebx
  8004215c22:	89 c2                	mov    %eax,%edx
  8004215c24:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215c28:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215c2c:	0f b6 c0             	movzbl %al,%eax
  8004215c2f:	0f af c2             	imul   %edx,%eax
  8004215c32:	48 98                	cltq   
  8004215c34:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  8004215c38:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215c3f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215c43:	73 0a                	jae    8004215c4f <_dwarf_lineno_run_program+0x4fb>
  8004215c45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215c4a:	e9 b3 00 00 00       	jmpq   8004215d02 <_dwarf_lineno_run_program+0x5ae>
  8004215c4f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215c53:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215c57:	48 89 10             	mov    %rdx,(%rax)
  8004215c5a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215c5e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004215c65:	00 
  8004215c66:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215c6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215c6e:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215c72:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215c76:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215c7a:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215c7e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215c82:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215c86:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215c8a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215c8e:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004215c91:	89 50 28             	mov    %edx,0x28(%rax)
  8004215c94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215c98:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215c9b:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215c9e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215ca2:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215ca5:	89 50 30             	mov    %edx,0x30(%rax)
  8004215ca8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215cac:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215cb3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215cb7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215cbb:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  8004215cc2:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004215cc9:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  8004215cd0:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004215cd7:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215cde:	48 83 c0 01          	add    $0x1,%rax
  8004215ce2:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004215ce9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215cf0:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  8004215cf7:	0f 82 e2 fa ff ff    	jb     80042157df <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  8004215cfd:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  8004215d02:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  8004215d09:	5b                   	pop    %rbx
  8004215d0a:	5d                   	pop    %rbp
  8004215d0b:	c3                   	retq   

0000008004215d0c <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  8004215d0c:	55                   	push   %rbp
  8004215d0d:	48 89 e5             	mov    %rsp,%rbp
  8004215d10:	53                   	push   %rbx
  8004215d11:	48 83 ec 48          	sub    $0x48,%rsp
  8004215d15:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004215d19:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004215d1d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004215d21:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004215d25:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004215d29:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215d2d:	48 8b 00             	mov    (%rax),%rax
  8004215d30:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004215d34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215d38:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  8004215d3c:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  8004215d40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215d44:	48 89 c7             	mov    %rax,%rdi
  8004215d47:	48 b8 c3 0a 21 04 80 	movabs $0x8004210ac3,%rax
  8004215d4e:	00 00 00 
  8004215d51:	ff d0                	callq  *%rax
  8004215d53:	48 98                	cltq   
  8004215d55:	48 83 c0 01          	add    $0x1,%rax
  8004215d59:	48 01 d8             	add    %rbx,%rax
  8004215d5c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  8004215d60:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215d64:	48 89 c7             	mov    %rax,%rdi
  8004215d67:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004215d6e:	00 00 00 
  8004215d71:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  8004215d73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215d77:	48 89 c7             	mov    %rax,%rdi
  8004215d7a:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004215d81:	00 00 00 
  8004215d84:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004215d86:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215d8a:	48 89 c7             	mov    %rax,%rdi
  8004215d8d:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  8004215d94:	00 00 00 
  8004215d97:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004215d99:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215d9d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215da1:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004215da4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215da9:	48 83 c4 48          	add    $0x48,%rsp
  8004215dad:	5b                   	pop    %rbx
  8004215dae:	5d                   	pop    %rbp
  8004215daf:	c3                   	retq   

0000008004215db0 <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  8004215db0:	55                   	push   %rbp
  8004215db1:	48 89 e5             	mov    %rsp,%rbp
  8004215db4:	53                   	push   %rbx
  8004215db5:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004215dbc:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  8004215dc3:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004215dca:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  8004215dd1:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004215dd8:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  8004215ddf:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  8004215de6:	00 
  8004215de7:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004215dee:	00 
  8004215def:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  8004215df6:	00 
  8004215df7:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004215dfe:	00 
  8004215dff:	48 b8 70 11 22 04 80 	movabs $0x8004221170,%rax
  8004215e06:	00 00 00 
  8004215e09:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  8004215e0d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004215e11:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  8004215e15:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004215e1c:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  8004215e23:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  8004215e27:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004215e2c:	75 35                	jne    8004215e63 <_dwarf_lineno_init+0xb3>
  8004215e2e:	48 b9 7c 11 22 04 80 	movabs $0x800422117c,%rcx
  8004215e35:	00 00 00 
  8004215e38:	48 ba 87 11 22 04 80 	movabs $0x8004221187,%rdx
  8004215e3f:	00 00 00 
  8004215e42:	be 13 01 00 00       	mov    $0x113,%esi
  8004215e47:	48 bf 9c 11 22 04 80 	movabs $0x800422119c,%rdi
  8004215e4e:	00 00 00 
  8004215e51:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215e56:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215e5d:	00 00 00 
  8004215e60:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  8004215e63:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215e6a:	00 00 00 
  8004215e6d:	48 8b 00             	mov    (%rax),%rax
  8004215e70:	48 85 c0             	test   %rax,%rax
  8004215e73:	75 35                	jne    8004215eaa <_dwarf_lineno_init+0xfa>
  8004215e75:	48 b9 b3 11 22 04 80 	movabs $0x80042211b3,%rcx
  8004215e7c:	00 00 00 
  8004215e7f:	48 ba 87 11 22 04 80 	movabs $0x8004221187,%rdx
  8004215e86:	00 00 00 
  8004215e89:	be 14 01 00 00       	mov    $0x114,%esi
  8004215e8e:	48 bf 9c 11 22 04 80 	movabs $0x800422119c,%rdi
  8004215e95:	00 00 00 
  8004215e98:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215e9d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215ea4:	00 00 00 
  8004215ea7:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004215eaa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215eae:	48 89 c7             	mov    %rax,%rdi
  8004215eb1:	48 b8 78 31 21 04 80 	movabs $0x8004213178,%rax
  8004215eb8:	00 00 00 
  8004215ebb:	ff d0                	callq  *%rax
  8004215ebd:	85 c0                	test   %eax,%eax
  8004215ebf:	74 0a                	je     8004215ecb <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  8004215ec1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215ec6:	e9 4f 04 00 00       	jmpq   800421631a <_dwarf_lineno_init+0x56a>

	li = linfo;
  8004215ecb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004215ed2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  8004215ed6:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215edd:	00 00 00 
  8004215ee0:	48 8b 00             	mov    (%rax),%rax
  8004215ee3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215ee7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215eeb:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215eef:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215ef6:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215efb:	48 89 cf             	mov    %rcx,%rdi
  8004215efe:	ff d0                	callq  *%rax
  8004215f00:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  8004215f04:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215f09:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004215f0d:	75 37                	jne    8004215f46 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  8004215f0f:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  8004215f16:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215f1d:	00 00 00 
  8004215f20:	48 8b 00             	mov    (%rax),%rax
  8004215f23:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215f27:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215f2b:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215f2f:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215f36:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215f3b:	48 89 cf             	mov    %rcx,%rdi
  8004215f3e:	ff d0                	callq  *%rax
  8004215f40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004215f44:	eb 07                	jmp    8004215f4d <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004215f46:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004215f4d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215f51:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215f55:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215f5c:	48 29 c2             	sub    %rax,%rdx
  8004215f5f:	48 89 d0             	mov    %rdx,%rax
  8004215f62:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215f66:	73 0a                	jae    8004215f72 <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004215f68:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004215f6d:	e9 a8 03 00 00       	jmpq   800421631a <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  8004215f72:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215f76:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215f7a:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004215f7d:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  8004215f84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215f88:	48 01 d0             	add    %rdx,%rax
  8004215f8b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  8004215f8f:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215f96:	00 00 00 
  8004215f99:	48 8b 00             	mov    (%rax),%rax
  8004215f9c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215fa0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215fa4:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215fa8:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215faf:	ba 02 00 00 00       	mov    $0x2,%edx
  8004215fb4:	48 89 cf             	mov    %rcx,%rdi
  8004215fb7:	ff d0                	callq  *%rax
  8004215fb9:	89 c2                	mov    %eax,%edx
  8004215fbb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215fbf:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  8004215fc3:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215fca:	00 00 00 
  8004215fcd:	48 8b 00             	mov    (%rax),%rax
  8004215fd0:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215fd4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215fd8:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215fdc:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004215fdf:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215fe6:	48 89 cf             	mov    %rcx,%rdi
  8004215fe9:	ff d0                	callq  *%rax
  8004215feb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215fef:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  8004215ff3:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215ffa:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  8004215ffe:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004216005:	00 00 00 
  8004216008:	48 8b 00             	mov    (%rax),%rax
  800421600b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421600f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216013:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004216017:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421601e:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216023:	48 89 cf             	mov    %rcx,%rdi
  8004216026:	ff d0                	callq  *%rax
  8004216028:	89 c2                	mov    %eax,%edx
  800421602a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421602e:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  8004216031:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004216038:	00 00 00 
  800421603b:	48 8b 00             	mov    (%rax),%rax
  800421603e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216042:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216046:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421604a:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216051:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216056:	48 89 cf             	mov    %rcx,%rdi
  8004216059:	ff d0                	callq  *%rax
  800421605b:	89 c2                	mov    %eax,%edx
  800421605d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216061:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  8004216064:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800421606b:	00 00 00 
  800421606e:	48 8b 00             	mov    (%rax),%rax
  8004216071:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216075:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216079:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421607d:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216084:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216089:	48 89 cf             	mov    %rcx,%rdi
  800421608c:	ff d0                	callq  *%rax
  800421608e:	89 c2                	mov    %eax,%edx
  8004216090:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216094:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  8004216097:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800421609e:	00 00 00 
  80042160a1:	48 8b 00             	mov    (%rax),%rax
  80042160a4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042160a8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042160ac:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042160b0:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042160b7:	ba 01 00 00 00       	mov    $0x1,%edx
  80042160bc:	48 89 cf             	mov    %rcx,%rdi
  80042160bf:	ff d0                	callq  *%rax
  80042160c1:	89 c2                	mov    %eax,%edx
  80042160c3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042160c7:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  80042160ca:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  80042160d1:	00 00 00 
  80042160d4:	48 8b 00             	mov    (%rax),%rax
  80042160d7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042160db:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042160df:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042160e3:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042160ea:	ba 01 00 00 00       	mov    $0x1,%edx
  80042160ef:	48 89 cf             	mov    %rcx,%rdi
  80042160f2:	ff d0                	callq  *%rax
  80042160f4:	89 c2                	mov    %eax,%edx
  80042160f6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042160fa:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  80042160fd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216101:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216105:	8d 50 fb             	lea    -0x5(%rax),%edx
  8004216108:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421610c:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004216110:	0f b6 c0             	movzbl %al,%eax
  8004216113:	83 e8 01             	sub    $0x1,%eax
  8004216116:	39 c2                	cmp    %eax,%edx
  8004216118:	7d 0c                	jge    8004216126 <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  800421611a:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004216121:	e9 f1 01 00 00       	jmpq   8004216317 <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  8004216126:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421612a:	48 bb 80 d4 6d 04 80 	movabs $0x80046dd480,%rbx
  8004216131:	00 00 00 
  8004216134:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004216138:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  800421613f:	eb 41                	jmp    8004216182 <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  8004216141:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216145:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216149:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421614c:	48 98                	cltq   
  800421614e:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004216152:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004216159:	00 00 00 
  800421615c:	48 8b 00             	mov    (%rax),%rax
  800421615f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216163:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004216167:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421616b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004216172:	ba 01 00 00 00       	mov    $0x1,%edx
  8004216177:	48 89 cf             	mov    %rcx,%rdi
  800421617a:	ff d0                	callq  *%rax
  800421617c:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  800421617e:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  8004216182:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216186:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  800421618a:	0f b6 c0             	movzbl %al,%eax
  800421618d:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  8004216190:	7f af                	jg     8004216141 <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  8004216192:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004216199:	00 
	p = ds->ds_data + offset;
  800421619a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421619e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042161a2:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042161a9:	48 01 d0             	add    %rdx,%rax
  80042161ac:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  80042161b3:	eb 1f                	jmp    80042161d4 <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  80042161b5:	90                   	nop
  80042161b6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042161bd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042161c1:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  80042161c8:	0f b6 00             	movzbl (%rax),%eax
  80042161cb:	84 c0                	test   %al,%al
  80042161cd:	75 e7                	jne    80042161b6 <_dwarf_lineno_init+0x406>
			;
		length++;
  80042161cf:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  80042161d4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042161db:	0f b6 00             	movzbl (%rax),%eax
  80042161de:	84 c0                	test   %al,%al
  80042161e0:	75 d3                	jne    80042161b5 <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  80042161e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042161e6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042161ea:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  80042161ee:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042161f5:	48 89 c2             	mov    %rax,%rdx
  80042161f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042161fc:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004216200:	48 29 c2             	sub    %rax,%rdx
  8004216203:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216207:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421620b:	48 98                	cltq   
  800421620d:	48 39 c2             	cmp    %rax,%rdx
  8004216210:	7e 0c                	jle    800421621e <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004216212:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004216219:	e9 f9 00 00 00       	jmpq   8004216317 <_dwarf_lineno_init+0x567>
	}
	p++;
  800421621e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216225:	48 83 c0 01          	add    $0x1,%rax
  8004216229:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004216230:	eb 3c                	jmp    800421626e <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  8004216232:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004216239:	00 00 00 
  800421623c:	48 8b 08             	mov    (%rax),%rcx
  800421623f:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004216246:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  800421624d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216251:	49 89 c8             	mov    %rcx,%r8
  8004216254:	48 89 d1             	mov    %rdx,%rcx
  8004216257:	ba 00 00 00 00       	mov    $0x0,%edx
  800421625c:	48 89 c7             	mov    %rax,%rdi
  800421625f:	48 b8 0c 5d 21 04 80 	movabs $0x8004215d0c,%rax
  8004216266:	00 00 00 
  8004216269:	ff d0                	callq  *%rax
  800421626b:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  800421626e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216275:	0f b6 00             	movzbl (%rax),%eax
  8004216278:	84 c0                	test   %al,%al
  800421627a:	75 b6                	jne    8004216232 <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  800421627c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216283:	48 83 c0 01          	add    $0x1,%rax
  8004216287:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  800421628e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216295:	48 89 c2             	mov    %rax,%rdx
  8004216298:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421629c:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042162a0:	48 29 c2             	sub    %rax,%rdx
  80042162a3:	48 89 d0             	mov    %rdx,%rax
  80042162a6:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  80042162aa:	48 89 c2             	mov    %rax,%rdx
  80042162ad:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042162b1:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042162b5:	48 39 c2             	cmp    %rax,%rdx
  80042162b8:	74 09                	je     80042162c3 <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042162ba:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042162c1:	eb 54                	jmp    8004216317 <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  80042162c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042162c7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042162cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042162cf:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042162d3:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042162da:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  80042162e1:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  80042162e8:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042162ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042162f0:	4d 89 c1             	mov    %r8,%r9
  80042162f3:	49 89 f8             	mov    %rdi,%r8
  80042162f6:	48 89 c7             	mov    %rax,%rdi
  80042162f9:	48 b8 54 57 21 04 80 	movabs $0x8004215754,%rax
  8004216300:	00 00 00 
  8004216303:	ff d0                	callq  *%rax
  8004216305:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  8004216308:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421630c:	74 02                	je     8004216310 <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  800421630e:	eb 07                	jmp    8004216317 <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  8004216310:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216315:	eb 03                	jmp    800421631a <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  8004216317:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  800421631a:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  8004216321:	5b                   	pop    %rbx
  8004216322:	5d                   	pop    %rbp
  8004216323:	c3                   	retq   

0000008004216324 <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004216324:	55                   	push   %rbp
  8004216325:	48 89 e5             	mov    %rsp,%rbp
  8004216328:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  800421632f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004216336:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  800421633d:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004216344:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  800421634b:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  8004216352:	00 
  8004216353:	75 35                	jne    800421638a <dwarf_srclines+0x66>
  8004216355:	48 b9 bf 11 22 04 80 	movabs $0x80042211bf,%rcx
  800421635c:	00 00 00 
  800421635f:	48 ba 87 11 22 04 80 	movabs $0x8004221187,%rdx
  8004216366:	00 00 00 
  8004216369:	be 9a 01 00 00       	mov    $0x19a,%esi
  800421636e:	48 bf 9c 11 22 04 80 	movabs $0x800422119c,%rdi
  8004216375:	00 00 00 
  8004216378:	b8 00 00 00 00       	mov    $0x0,%eax
  800421637d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216384:	00 00 00 
  8004216387:	41 ff d0             	callq  *%r8
	assert(linebuf);
  800421638a:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004216391:	00 
  8004216392:	75 35                	jne    80042163c9 <dwarf_srclines+0xa5>
  8004216394:	48 b9 c3 11 22 04 80 	movabs $0x80042211c3,%rcx
  800421639b:	00 00 00 
  800421639e:	48 ba 87 11 22 04 80 	movabs $0x8004221187,%rdx
  80042163a5:	00 00 00 
  80042163a8:	be 9b 01 00 00       	mov    $0x19b,%esi
  80042163ad:	48 bf 9c 11 22 04 80 	movabs $0x800422119c,%rdi
  80042163b4:	00 00 00 
  80042163b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042163bc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042163c3:	00 00 00 
  80042163c6:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  80042163c9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  80042163d0:	ba 88 00 00 00       	mov    $0x88,%edx
  80042163d5:	be 00 00 00 00       	mov    $0x0,%esi
  80042163da:	48 89 c7             	mov    %rax,%rdi
  80042163dd:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  80042163e4:	00 00 00 
  80042163e7:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  80042163e9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042163f0:	be 10 00 00 00       	mov    $0x10,%esi
  80042163f5:	48 89 c7             	mov    %rax,%rdi
  80042163f8:	48 b8 fd 2c 21 04 80 	movabs $0x8004212cfd,%rax
  80042163ff:	00 00 00 
  8004216402:	ff d0                	callq  *%rax
  8004216404:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216408:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421640d:	75 0a                	jne    8004216419 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  800421640f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004216414:	e9 84 00 00 00       	jmpq   800421649d <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  8004216419:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421641d:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004216421:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  8004216428:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  800421642f:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  8004216436:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421643d:	49 89 f8             	mov    %rdi,%r8
  8004216440:	48 89 c7             	mov    %rax,%rdi
  8004216443:	48 b8 b0 5d 21 04 80 	movabs $0x8004215db0,%rax
  800421644a:	00 00 00 
  800421644d:	ff d0                	callq  *%rax
  800421644f:	85 c0                	test   %eax,%eax
  8004216451:	74 07                	je     800421645a <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  8004216453:	b8 01 00 00 00       	mov    $0x1,%eax
  8004216458:	eb 43                	jmp    800421649d <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  800421645a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004216461:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004216465:	48 89 10             	mov    %rdx,(%rax)
  8004216468:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421646c:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216470:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004216474:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216478:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421647c:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216480:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216484:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004216488:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421648c:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004216490:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216494:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  8004216498:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421649d:	c9                   	leaveq 
  800421649e:	c3                   	retq   

000000800421649f <_dwarf_find_section>:
  800421649f:	55                   	push   %rbp
  80042164a0:	48 89 e5             	mov    %rsp,%rbp
  80042164a3:	48 83 ec 20          	sub    $0x20,%rsp
  80042164a7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042164ab:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042164b2:	00 
  80042164b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042164ba:	eb 57                	jmp    8004216513 <_dwarf_find_section+0x74>
  80042164bc:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042164c3:	00 00 00 
  80042164c6:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042164c9:	48 63 d2             	movslq %edx,%rdx
  80042164cc:	48 c1 e2 05          	shl    $0x5,%rdx
  80042164d0:	48 01 d0             	add    %rdx,%rax
  80042164d3:	48 8b 00             	mov    (%rax),%rax
  80042164d6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042164da:	48 89 d6             	mov    %rdx,%rsi
  80042164dd:	48 89 c7             	mov    %rax,%rdi
  80042164e0:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  80042164e7:	00 00 00 
  80042164ea:	ff d0                	callq  *%rax
  80042164ec:	85 c0                	test   %eax,%eax
  80042164ee:	75 1f                	jne    800421650f <_dwarf_find_section+0x70>
  80042164f0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042164f3:	48 98                	cltq   
  80042164f5:	48 c1 e0 05          	shl    $0x5,%rax
  80042164f9:	48 89 c2             	mov    %rax,%rdx
  80042164fc:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216503:	00 00 00 
  8004216506:	48 01 d0             	add    %rdx,%rax
  8004216509:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421650d:	eb 0a                	jmp    8004216519 <_dwarf_find_section+0x7a>
  800421650f:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216513:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004216517:	7e a3                	jle    80042164bc <_dwarf_find_section+0x1d>
  8004216519:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421651d:	c9                   	leaveq 
  800421651e:	c3                   	retq   

000000800421651f <find_debug_sections>:
  800421651f:	55                   	push   %rbp
  8004216520:	48 89 e5             	mov    %rsp,%rbp
  8004216523:	48 83 ec 40          	sub    $0x40,%rsp
  8004216527:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421652b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421652f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004216533:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  800421653a:	00 
  800421653b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421653f:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004216543:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216547:	48 01 d0             	add    %rdx,%rax
  800421654a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421654e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216552:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004216556:	0f b7 c0             	movzwl %ax,%eax
  8004216559:	48 c1 e0 06          	shl    $0x6,%rax
  800421655d:	48 89 c2             	mov    %rax,%rdx
  8004216560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216564:	48 01 d0             	add    %rdx,%rax
  8004216567:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421656b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421656f:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004216573:	0f b7 c0             	movzwl %ax,%eax
  8004216576:	48 c1 e0 06          	shl    $0x6,%rax
  800421657a:	48 89 c2             	mov    %rax,%rdx
  800421657d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216581:	48 01 d0             	add    %rdx,%rax
  8004216584:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216588:	e9 4b 02 00 00       	jmpq   80042167d8 <find_debug_sections+0x2b9>
  800421658d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216591:	8b 00                	mov    (%rax),%eax
  8004216593:	89 c2                	mov    %eax,%edx
  8004216595:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216599:	48 8b 48 18          	mov    0x18(%rax),%rcx
  800421659d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042165a1:	48 01 c8             	add    %rcx,%rax
  80042165a4:	48 01 d0             	add    %rdx,%rax
  80042165a7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042165ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042165af:	48 be cb 11 22 04 80 	movabs $0x80042211cb,%rsi
  80042165b6:	00 00 00 
  80042165b9:	48 89 c7             	mov    %rax,%rdi
  80042165bc:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  80042165c3:	00 00 00 
  80042165c6:	ff d0                	callq  *%rax
  80042165c8:	85 c0                	test   %eax,%eax
  80042165ca:	75 4b                	jne    8004216617 <find_debug_sections+0xf8>
  80042165cc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042165d0:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042165d7:	00 00 00 
  80042165da:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042165de:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042165e5:	00 00 00 
  80042165e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042165ec:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042165f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042165f4:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042165f8:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042165ff:	00 00 00 
  8004216602:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216606:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421660a:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421660e:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216612:	e9 bc 01 00 00       	jmpq   80042167d3 <find_debug_sections+0x2b4>
  8004216617:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421661b:	48 be d7 11 22 04 80 	movabs $0x80042211d7,%rsi
  8004216622:	00 00 00 
  8004216625:	48 89 c7             	mov    %rax,%rdi
  8004216628:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  800421662f:	00 00 00 
  8004216632:	ff d0                	callq  *%rax
  8004216634:	85 c0                	test   %eax,%eax
  8004216636:	75 4b                	jne    8004216683 <find_debug_sections+0x164>
  8004216638:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421663c:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216643:	00 00 00 
  8004216646:	48 89 50 28          	mov    %rdx,0x28(%rax)
  800421664a:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216651:	00 00 00 
  8004216654:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216658:	48 89 50 30          	mov    %rdx,0x30(%rax)
  800421665c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216660:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216664:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421666b:	00 00 00 
  800421666e:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004216672:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216676:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421667a:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421667e:	e9 50 01 00 00       	jmpq   80042167d3 <find_debug_sections+0x2b4>
  8004216683:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216687:	48 be ef 11 22 04 80 	movabs $0x80042211ef,%rsi
  800421668e:	00 00 00 
  8004216691:	48 89 c7             	mov    %rax,%rdi
  8004216694:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  800421669b:	00 00 00 
  800421669e:	ff d0                	callq  *%rax
  80042166a0:	85 c0                	test   %eax,%eax
  80042166a2:	75 4b                	jne    80042166ef <find_debug_sections+0x1d0>
  80042166a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042166a8:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042166af:	00 00 00 
  80042166b2:	48 89 50 68          	mov    %rdx,0x68(%rax)
  80042166b6:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042166bd:	00 00 00 
  80042166c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042166c4:	48 89 50 70          	mov    %rdx,0x70(%rax)
  80042166c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042166cc:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042166d0:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042166d7:	00 00 00 
  80042166da:	48 89 50 78          	mov    %rdx,0x78(%rax)
  80042166de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042166e2:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042166e6:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042166ea:	e9 e4 00 00 00       	jmpq   80042167d3 <find_debug_sections+0x2b4>
  80042166ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042166f3:	48 be e5 11 22 04 80 	movabs $0x80042211e5,%rsi
  80042166fa:	00 00 00 
  80042166fd:	48 89 c7             	mov    %rax,%rdi
  8004216700:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004216707:	00 00 00 
  800421670a:	ff d0                	callq  *%rax
  800421670c:	85 c0                	test   %eax,%eax
  800421670e:	75 53                	jne    8004216763 <find_debug_sections+0x244>
  8004216710:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216714:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216718:	48 89 c2             	mov    %rax,%rdx
  800421671b:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216722:	00 00 00 
  8004216725:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216729:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421672d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004216731:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216738:	00 00 00 
  800421673b:	48 89 50 50          	mov    %rdx,0x50(%rax)
  800421673f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216743:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216747:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421674e:	00 00 00 
  8004216751:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216755:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216759:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421675d:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216761:	eb 70                	jmp    80042167d3 <find_debug_sections+0x2b4>
  8004216763:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216767:	48 be fb 11 22 04 80 	movabs $0x80042211fb,%rsi
  800421676e:	00 00 00 
  8004216771:	48 89 c7             	mov    %rax,%rdi
  8004216774:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  800421677b:	00 00 00 
  800421677e:	ff d0                	callq  *%rax
  8004216780:	85 c0                	test   %eax,%eax
  8004216782:	75 4f                	jne    80042167d3 <find_debug_sections+0x2b4>
  8004216784:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216788:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421678f:	00 00 00 
  8004216792:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216799:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042167a0:	00 00 00 
  80042167a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042167a7:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  80042167ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042167b2:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042167b6:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042167bd:	00 00 00 
  80042167c0:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  80042167c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042167cb:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042167cf:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042167d3:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  80042167d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042167dc:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  80042167e0:	0f 82 a7 fd ff ff    	jb     800421658d <find_debug_sections+0x6e>
  80042167e6:	c9                   	leaveq 
  80042167e7:	c3                   	retq   

00000080042167e8 <read_section_headers>:
  80042167e8:	55                   	push   %rbp
  80042167e9:	48 89 e5             	mov    %rsp,%rbp
  80042167ec:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  80042167f3:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  80042167fa:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  8004216801:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  8004216808:	b8 00 00 00 00       	mov    $0x0,%eax
  800421680d:	ba 14 00 00 00       	mov    $0x14,%edx
  8004216812:	48 89 f7             	mov    %rsi,%rdi
  8004216815:	48 89 d1             	mov    %rdx,%rcx
  8004216818:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  800421681b:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  8004216822:	00 
  8004216823:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216827:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  800421682e:	48 01 d0             	add    %rdx,%rax
  8004216831:	48 83 e8 01          	sub    $0x1,%rax
  8004216835:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216839:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421683d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004216842:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004216846:	48 89 d0             	mov    %rdx,%rax
  8004216849:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421684d:	48 29 c2             	sub    %rax,%rdx
  8004216850:	48 89 d0             	mov    %rdx,%rax
  8004216853:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216857:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  800421685e:	00 00 00 00 
  8004216862:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216866:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421686a:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004216871:	00 
  8004216872:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  8004216879:	00 00 00 
  800421687c:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004216883:	75 11                	jne    8004216896 <read_section_headers+0xae>
  8004216885:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421688c:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004216890:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216894:	eb 26                	jmp    80042168bc <read_section_headers+0xd4>
  8004216896:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421689d:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042168a1:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  80042168a8:	48 01 c2             	add    %rax,%rdx
  80042168ab:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  80042168b2:	ff ff ff 
  80042168b5:	48 01 d0             	add    %rdx,%rax
  80042168b8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042168bc:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  80042168c3:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  80042168c7:	0f b7 c0             	movzwl %ax,%eax
  80042168ca:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042168cd:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  80042168d4:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  80042168d8:	0f b7 c0             	movzwl %ax,%eax
  80042168db:	89 45 c0             	mov    %eax,-0x40(%rbp)
  80042168de:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  80042168e5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042168e9:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042168ec:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  80042168f0:	48 63 f0             	movslq %eax,%rsi
  80042168f3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042168f7:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042168fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216902:	48 89 c7             	mov    %rax,%rdi
  8004216905:	48 b8 27 6f 21 04 80 	movabs $0x8004216f27,%rax
  800421690c:	00 00 00 
  800421690f:	ff d0                	callq  *%rax
  8004216911:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216915:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004216919:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421691d:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216923:	48 89 c2             	mov    %rax,%rdx
  8004216926:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421692a:	48 29 d0             	sub    %rdx,%rax
  800421692d:	48 89 c2             	mov    %rax,%rdx
  8004216930:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216934:	48 01 d0             	add    %rdx,%rax
  8004216937:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800421693b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216942:	eb 24                	jmp    8004216968 <read_section_headers+0x180>
  8004216944:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216947:	48 98                	cltq   
  8004216949:	48 c1 e0 06          	shl    $0x6,%rax
  800421694d:	48 89 c2             	mov    %rax,%rdx
  8004216950:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216954:	48 01 c2             	add    %rax,%rdx
  8004216957:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421695a:	48 98                	cltq   
  800421695c:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  8004216963:	ff 
  8004216964:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216968:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421696b:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  800421696e:	7c d4                	jl     8004216944 <read_section_headers+0x15c>
  8004216970:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004216974:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004216978:	0f b7 c0             	movzwl %ax,%eax
  800421697b:	48 98                	cltq   
  800421697d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216984:	ff 
  8004216985:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004216989:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216990:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216994:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216998:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421699c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042169a0:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042169a4:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  80042169ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042169af:	48 01 c8             	add    %rcx,%rax
  80042169b2:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042169b9:	48 89 c7             	mov    %rax,%rdi
  80042169bc:	48 b8 27 6f 21 04 80 	movabs $0x8004216f27,%rax
  80042169c3:	00 00 00 
  80042169c6:	ff d0                	callq  *%rax
  80042169c8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042169cc:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042169d0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042169d4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042169d8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042169dc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042169e0:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042169e6:	48 29 c2             	sub    %rax,%rdx
  80042169e9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042169ed:	48 01 c2             	add    %rax,%rdx
  80042169f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042169f4:	48 01 d0             	add    %rdx,%rax
  80042169f7:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042169fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216a02:	e9 04 05 00 00       	jmpq   8004216f0b <read_section_headers+0x723>
  8004216a07:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a0a:	48 98                	cltq   
  8004216a0c:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a13:	ff 
  8004216a14:	8b 00                	mov    (%rax),%eax
  8004216a16:	89 c2                	mov    %eax,%edx
  8004216a18:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004216a1c:	48 01 d0             	add    %rdx,%rax
  8004216a1f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004216a23:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216a2a:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216a2f:	48 85 c0             	test   %rax,%rax
  8004216a32:	74 35                	je     8004216a69 <read_section_headers+0x281>
  8004216a34:	48 b9 06 12 22 04 80 	movabs $0x8004221206,%rcx
  8004216a3b:	00 00 00 
  8004216a3e:	48 ba 1f 12 22 04 80 	movabs $0x800422121f,%rdx
  8004216a45:	00 00 00 
  8004216a48:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004216a4d:	48 bf 34 12 22 04 80 	movabs $0x8004221234,%rdi
  8004216a54:	00 00 00 
  8004216a57:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216a5c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216a63:	00 00 00 
  8004216a66:	41 ff d0             	callq  *%r8
  8004216a69:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216a70:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216a74:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216a78:	48 be cb 11 22 04 80 	movabs $0x80042211cb,%rsi
  8004216a7f:	00 00 00 
  8004216a82:	48 89 c7             	mov    %rax,%rdi
  8004216a85:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004216a8c:	00 00 00 
  8004216a8f:	ff d0                	callq  *%rax
  8004216a91:	85 c0                	test   %eax,%eax
  8004216a93:	0f 85 d8 00 00 00    	jne    8004216b71 <read_section_headers+0x389>
  8004216a99:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a9c:	48 98                	cltq   
  8004216a9e:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216aa5:	ff 
  8004216aa6:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216aaa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216aad:	48 98                	cltq   
  8004216aaf:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ab6:	ff 
  8004216ab7:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216abb:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216ac2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216ac6:	48 01 c8             	add    %rcx,%rax
  8004216ac9:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216ad0:	48 89 c7             	mov    %rax,%rdi
  8004216ad3:	48 b8 27 6f 21 04 80 	movabs $0x8004216f27,%rax
  8004216ada:	00 00 00 
  8004216add:	ff d0                	callq  *%rax
  8004216adf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ae2:	48 98                	cltq   
  8004216ae4:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216aeb:	ff 
  8004216aec:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216af0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216af3:	48 98                	cltq   
  8004216af5:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216afc:	ff 
  8004216afd:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216b01:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004216b05:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004216b09:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216b0f:	48 29 c2             	sub    %rax,%rdx
  8004216b12:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216b16:	48 01 c2             	add    %rax,%rdx
  8004216b19:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216b1d:	48 01 c2             	add    %rax,%rdx
  8004216b20:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b27:	00 00 00 
  8004216b2a:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216b2e:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b35:	00 00 00 
  8004216b38:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004216b3c:	48 89 c2             	mov    %rax,%rdx
  8004216b3f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b46:	00 00 00 
  8004216b49:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216b4d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b50:	48 98                	cltq   
  8004216b52:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b59:	ff 
  8004216b5a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216b5e:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b65:	00 00 00 
  8004216b68:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216b6c:	e9 96 03 00 00       	jmpq   8004216f07 <read_section_headers+0x71f>
  8004216b71:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216b75:	48 be d7 11 22 04 80 	movabs $0x80042211d7,%rsi
  8004216b7c:	00 00 00 
  8004216b7f:	48 89 c7             	mov    %rax,%rdi
  8004216b82:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004216b89:	00 00 00 
  8004216b8c:	ff d0                	callq  *%rax
  8004216b8e:	85 c0                	test   %eax,%eax
  8004216b90:	0f 85 de 00 00 00    	jne    8004216c74 <read_section_headers+0x48c>
  8004216b96:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b99:	48 98                	cltq   
  8004216b9b:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ba2:	ff 
  8004216ba3:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216ba7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216baa:	48 98                	cltq   
  8004216bac:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216bb3:	ff 
  8004216bb4:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216bb8:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216bbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216bc3:	48 01 c8             	add    %rcx,%rax
  8004216bc6:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216bcd:	48 89 c7             	mov    %rax,%rdi
  8004216bd0:	48 b8 27 6f 21 04 80 	movabs $0x8004216f27,%rax
  8004216bd7:	00 00 00 
  8004216bda:	ff d0                	callq  *%rax
  8004216bdc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216bdf:	48 98                	cltq   
  8004216be1:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216be8:	ff 
  8004216be9:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216bed:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216bf0:	48 98                	cltq   
  8004216bf2:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216bf9:	ff 
  8004216bfa:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216bfe:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004216c05:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004216c0c:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216c12:	48 29 c2             	sub    %rax,%rdx
  8004216c15:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216c19:	48 01 c2             	add    %rax,%rdx
  8004216c1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c20:	48 01 c2             	add    %rax,%rdx
  8004216c23:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216c2a:	00 00 00 
  8004216c2d:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004216c31:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216c38:	00 00 00 
  8004216c3b:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004216c3f:	48 89 c2             	mov    %rax,%rdx
  8004216c42:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216c49:	00 00 00 
  8004216c4c:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004216c50:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c53:	48 98                	cltq   
  8004216c55:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c5c:	ff 
  8004216c5d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216c61:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216c68:	00 00 00 
  8004216c6b:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004216c6f:	e9 93 02 00 00       	jmpq   8004216f07 <read_section_headers+0x71f>
  8004216c74:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216c78:	48 be ef 11 22 04 80 	movabs $0x80042211ef,%rsi
  8004216c7f:	00 00 00 
  8004216c82:	48 89 c7             	mov    %rax,%rdi
  8004216c85:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004216c8c:	00 00 00 
  8004216c8f:	ff d0                	callq  *%rax
  8004216c91:	85 c0                	test   %eax,%eax
  8004216c93:	0f 85 de 00 00 00    	jne    8004216d77 <read_section_headers+0x58f>
  8004216c99:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c9c:	48 98                	cltq   
  8004216c9e:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ca5:	ff 
  8004216ca6:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216caa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216cad:	48 98                	cltq   
  8004216caf:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216cb6:	ff 
  8004216cb7:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216cbb:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216cc2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216cc6:	48 01 c8             	add    %rcx,%rax
  8004216cc9:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216cd0:	48 89 c7             	mov    %rax,%rdi
  8004216cd3:	48 b8 27 6f 21 04 80 	movabs $0x8004216f27,%rax
  8004216cda:	00 00 00 
  8004216cdd:	ff d0                	callq  *%rax
  8004216cdf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ce2:	48 98                	cltq   
  8004216ce4:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ceb:	ff 
  8004216cec:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216cf0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216cf3:	48 98                	cltq   
  8004216cf5:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216cfc:	ff 
  8004216cfd:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216d01:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004216d08:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004216d0f:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216d15:	48 29 c2             	sub    %rax,%rdx
  8004216d18:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216d1c:	48 01 c2             	add    %rax,%rdx
  8004216d1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216d23:	48 01 c2             	add    %rax,%rdx
  8004216d26:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216d2d:	00 00 00 
  8004216d30:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216d34:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216d3b:	00 00 00 
  8004216d3e:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004216d42:	48 89 c2             	mov    %rax,%rdx
  8004216d45:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216d4c:	00 00 00 
  8004216d4f:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216d53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d56:	48 98                	cltq   
  8004216d58:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216d5f:	ff 
  8004216d60:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216d64:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216d6b:	00 00 00 
  8004216d6e:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004216d72:	e9 90 01 00 00       	jmpq   8004216f07 <read_section_headers+0x71f>
  8004216d77:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216d7b:	48 be e5 11 22 04 80 	movabs $0x80042211e5,%rsi
  8004216d82:	00 00 00 
  8004216d85:	48 89 c7             	mov    %rax,%rdi
  8004216d88:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004216d8f:	00 00 00 
  8004216d92:	ff d0                	callq  *%rax
  8004216d94:	85 c0                	test   %eax,%eax
  8004216d96:	75 65                	jne    8004216dfd <read_section_headers+0x615>
  8004216d98:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d9b:	48 98                	cltq   
  8004216d9d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216da4:	ff 
  8004216da5:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216da9:	48 89 c2             	mov    %rax,%rdx
  8004216dac:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216db3:	00 00 00 
  8004216db6:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216dba:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216dc1:	00 00 00 
  8004216dc4:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004216dc8:	48 89 c2             	mov    %rax,%rdx
  8004216dcb:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216dd2:	00 00 00 
  8004216dd5:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216dd9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ddc:	48 98                	cltq   
  8004216dde:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216de5:	ff 
  8004216de6:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216dea:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216df1:	00 00 00 
  8004216df4:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216df8:	e9 0a 01 00 00       	jmpq   8004216f07 <read_section_headers+0x71f>
  8004216dfd:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216e01:	48 be fb 11 22 04 80 	movabs $0x80042211fb,%rsi
  8004216e08:	00 00 00 
  8004216e0b:	48 89 c7             	mov    %rax,%rdi
  8004216e0e:	48 b8 91 0c 21 04 80 	movabs $0x8004210c91,%rax
  8004216e15:	00 00 00 
  8004216e18:	ff d0                	callq  *%rax
  8004216e1a:	85 c0                	test   %eax,%eax
  8004216e1c:	0f 85 e5 00 00 00    	jne    8004216f07 <read_section_headers+0x71f>
  8004216e22:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e25:	48 98                	cltq   
  8004216e27:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e2e:	ff 
  8004216e2f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216e33:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e36:	48 98                	cltq   
  8004216e38:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e3f:	ff 
  8004216e40:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216e44:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216e4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216e4f:	48 01 c8             	add    %rcx,%rax
  8004216e52:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216e59:	48 89 c7             	mov    %rax,%rdi
  8004216e5c:	48 b8 27 6f 21 04 80 	movabs $0x8004216f27,%rax
  8004216e63:	00 00 00 
  8004216e66:	ff d0                	callq  *%rax
  8004216e68:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e6b:	48 98                	cltq   
  8004216e6d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e74:	ff 
  8004216e75:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216e79:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216e7c:	48 98                	cltq   
  8004216e7e:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216e85:	ff 
  8004216e86:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216e8a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004216e91:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216e98:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216e9e:	48 29 c2             	sub    %rax,%rdx
  8004216ea1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216ea5:	48 01 c2             	add    %rax,%rdx
  8004216ea8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216eac:	48 01 c2             	add    %rax,%rdx
  8004216eaf:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216eb6:	00 00 00 
  8004216eb9:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216ec0:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216ec7:	00 00 00 
  8004216eca:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004216ed1:	48 89 c2             	mov    %rax,%rdx
  8004216ed4:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216edb:	00 00 00 
  8004216ede:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216ee5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ee8:	48 98                	cltq   
  8004216eea:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ef1:	ff 
  8004216ef2:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216ef6:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216efd:	00 00 00 
  8004216f00:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216f07:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216f0b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216f0e:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216f11:	0f 8c f0 fa ff ff    	jl     8004216a07 <read_section_headers+0x21f>
  8004216f17:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216f1b:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216f22:	48 01 d0             	add    %rdx,%rax
  8004216f25:	c9                   	leaveq 
  8004216f26:	c3                   	retq   

0000008004216f27 <readseg>:
  8004216f27:	55                   	push   %rbp
  8004216f28:	48 89 e5             	mov    %rsp,%rbp
  8004216f2b:	48 83 ec 30          	sub    $0x30,%rsp
  8004216f2f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216f33:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004216f37:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004216f3b:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004216f3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216f43:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216f47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216f4b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216f4f:	48 01 d0             	add    %rdx,%rax
  8004216f52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216f56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216f5a:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216f5f:	48 85 c0             	test   %rax,%rax
  8004216f62:	74 35                	je     8004216f99 <readseg+0x72>
  8004216f64:	48 b9 45 12 22 04 80 	movabs $0x8004221245,%rcx
  8004216f6b:	00 00 00 
  8004216f6e:	48 ba 1f 12 22 04 80 	movabs $0x800422121f,%rdx
  8004216f75:	00 00 00 
  8004216f78:	be c4 00 00 00       	mov    $0xc4,%esi
  8004216f7d:	48 bf 34 12 22 04 80 	movabs $0x8004221234,%rdi
  8004216f84:	00 00 00 
  8004216f87:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216f8c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216f93:	00 00 00 
  8004216f96:	41 ff d0             	callq  *%r8
  8004216f99:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  8004216fa0:	ff 
  8004216fa1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216fa5:	48 c1 e8 09          	shr    $0x9,%rax
  8004216fa9:	48 83 c0 01          	add    $0x1,%rax
  8004216fad:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216fb1:	eb 3c                	jmp    8004216fef <readseg+0xc8>
  8004216fb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216fb7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216fbb:	48 89 d6             	mov    %rdx,%rsi
  8004216fbe:	48 89 c7             	mov    %rax,%rdi
  8004216fc1:	48 b8 b7 70 21 04 80 	movabs $0x80042170b7,%rax
  8004216fc8:	00 00 00 
  8004216fcb:	ff d0                	callq  *%rax
  8004216fcd:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  8004216fd4:	00 
  8004216fd5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216fd9:	48 8b 00             	mov    (%rax),%rax
  8004216fdc:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216fe3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216fe7:	48 89 10             	mov    %rdx,(%rax)
  8004216fea:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004216fef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216ff3:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004216ff7:	72 ba                	jb     8004216fb3 <readseg+0x8c>
  8004216ff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216ffd:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004217002:	48 89 c2             	mov    %rax,%rdx
  8004217005:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217009:	48 01 d0             	add    %rdx,%rax
  800421700c:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  8004217012:	76 2f                	jbe    8004217043 <readseg+0x11c>
  8004217014:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217018:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421701c:	48 89 d6             	mov    %rdx,%rsi
  800421701f:	48 89 c7             	mov    %rax,%rdi
  8004217022:	48 b8 b7 70 21 04 80 	movabs $0x80042170b7,%rax
  8004217029:	00 00 00 
  800421702c:	ff d0                	callq  *%rax
  800421702e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217032:	48 8b 00             	mov    (%rax),%rax
  8004217035:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  800421703c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217040:	48 89 10             	mov    %rdx,(%rax)
  8004217043:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217047:	48 8b 00             	mov    (%rax),%rax
  800421704a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421704f:	48 85 c0             	test   %rax,%rax
  8004217052:	74 35                	je     8004217089 <readseg+0x162>
  8004217054:	48 b9 58 12 22 04 80 	movabs $0x8004221258,%rcx
  800421705b:	00 00 00 
  800421705e:	48 ba 1f 12 22 04 80 	movabs $0x800422121f,%rdx
  8004217065:	00 00 00 
  8004217068:	be da 00 00 00       	mov    $0xda,%esi
  800421706d:	48 bf 34 12 22 04 80 	movabs $0x8004221234,%rdi
  8004217074:	00 00 00 
  8004217077:	b8 00 00 00 00       	mov    $0x0,%eax
  800421707c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217083:	00 00 00 
  8004217086:	41 ff d0             	callq  *%r8
  8004217089:	c9                   	leaveq 
  800421708a:	c3                   	retq   

000000800421708b <waitdisk>:
  800421708b:	55                   	push   %rbp
  800421708c:	48 89 e5             	mov    %rsp,%rbp
  800421708f:	48 83 ec 10          	sub    $0x10,%rsp
  8004217093:	90                   	nop
  8004217094:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800421709b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421709e:	89 c2                	mov    %eax,%edx
  80042170a0:	ec                   	in     (%dx),%al
  80042170a1:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  80042170a4:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042170a8:	0f b6 c0             	movzbl %al,%eax
  80042170ab:	25 c0 00 00 00       	and    $0xc0,%eax
  80042170b0:	83 f8 40             	cmp    $0x40,%eax
  80042170b3:	75 df                	jne    8004217094 <waitdisk+0x9>
  80042170b5:	c9                   	leaveq 
  80042170b6:	c3                   	retq   

00000080042170b7 <readsect>:
  80042170b7:	55                   	push   %rbp
  80042170b8:	48 89 e5             	mov    %rsp,%rbp
  80042170bb:	48 83 ec 60          	sub    $0x60,%rsp
  80042170bf:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042170c3:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042170c7:	48 b8 8b 70 21 04 80 	movabs $0x800421708b,%rax
  80042170ce:	00 00 00 
  80042170d1:	ff d0                	callq  *%rax
  80042170d3:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  80042170da:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042170de:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042170e2:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042170e5:	ee                   	out    %al,(%dx)
  80042170e6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042170ea:	0f b6 c0             	movzbl %al,%eax
  80042170ed:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  80042170f4:	88 45 f3             	mov    %al,-0xd(%rbp)
  80042170f7:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042170fb:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042170fe:	ee                   	out    %al,(%dx)
  80042170ff:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004217103:	48 c1 e8 08          	shr    $0x8,%rax
  8004217107:	0f b6 c0             	movzbl %al,%eax
  800421710a:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  8004217111:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004217114:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004217118:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421711b:	ee                   	out    %al,(%dx)
  800421711c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004217120:	48 c1 e8 10          	shr    $0x10,%rax
  8004217124:	0f b6 c0             	movzbl %al,%eax
  8004217127:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  800421712e:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004217131:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004217135:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217138:	ee                   	out    %al,(%dx)
  8004217139:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421713d:	48 c1 e8 18          	shr    $0x18,%rax
  8004217141:	83 c8 e0             	or     $0xffffffe0,%eax
  8004217144:	0f b6 c0             	movzbl %al,%eax
  8004217147:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  800421714e:	88 45 db             	mov    %al,-0x25(%rbp)
  8004217151:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217155:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217158:	ee                   	out    %al,(%dx)
  8004217159:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  8004217160:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  8004217164:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004217168:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800421716b:	ee                   	out    %al,(%dx)
  800421716c:	48 b8 8b 70 21 04 80 	movabs $0x800421708b,%rax
  8004217173:	00 00 00 
  8004217176:	ff d0                	callq  *%rax
  8004217178:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  800421717f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004217183:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004217187:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  800421718e:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004217191:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004217195:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004217198:	48 89 ce             	mov    %rcx,%rsi
  800421719b:	48 89 f7             	mov    %rsi,%rdi
  800421719e:	89 c1                	mov    %eax,%ecx
  80042171a0:	fc                   	cld    
  80042171a1:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  80042171a3:	89 c8                	mov    %ecx,%eax
  80042171a5:	48 89 fe             	mov    %rdi,%rsi
  80042171a8:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042171ac:	89 45 bc             	mov    %eax,-0x44(%rbp)
  80042171af:	c9                   	leaveq 
  80042171b0:	c3                   	retq   
  80042171b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000080042171b8 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  80042171b8:	fa                   	cli    
	xorw    %ax, %ax
  80042171b9:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  80042171bb:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042171bd:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042171bf:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  80042171c1:	0f 01 16             	lgdt   (%rsi)
  80042171c4:	e0 70                	loopne 8004217236 <start64+0x10>
	movl    %cr0, %eax
  80042171c6:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  80042171c9:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  80042171cd:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  80042171d0:	ea                   	(bad)  
  80042171d1:	1d                   	.byte 0x1d
  80042171d2:	70 08                	jo     80042171dc <start32+0x7>
	...

00000080042171d5 <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  80042171d5:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  80042171d9:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042171db:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042171dd:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  80042171df:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  80042171e3:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  80042171e5:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
  80042171e7:	b8 20 00 00 00       	mov    $0x20,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
#endif

	movl %eax,%cr4
  80042171ec:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  80042171ef:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421e2b6 <handle_wrmsr+0x80>
	movl    %cr0, %eax
  80042171f6:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  80042171f9:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  80042171fc:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  80042171ff:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  8004217204:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  8004217207:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  800421720c:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  800421720e:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  8004217212:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  8004217214:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  8004217217:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  800421721c:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  800421721f:	ea                   	(bad)  
  8004217220:	6e                   	outsb  %ds:(%rsi),(%dx)
  8004217221:	70 00                	jo     8004217223 <start32+0x4e>
  8004217223:	00 08                	add    %cl,(%rax)
	...

0000008004217226 <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  8004217226:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  800421722a:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  800421722c:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  800421722e:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004217230:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004217234:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004217236:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  8004217238:	48 a1 e0 c5 6d 04 80 	movabs 0x80046dc5e0,%rax
  800421723f:	00 00 00 
	movq    %rax,%rsp
  8004217242:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  8004217245:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  800421724c:	48 b8 03 04 20 04 80 	movabs $0x8004200403,%rax
  8004217253:	00 00 00 
	call    *%rax
  8004217256:	ff d0                	callq  *%rax

0000008004217258 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004217258:	eb fe                	jmp    8004217258 <spin>
  800421725a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000008004217260 <gdt>:
	...
  8004217268:	ff                   	(bad)  
  8004217269:	ff 00                	incl   (%rax)
  800421726b:	00 00                	add    %al,(%rax)
  800421726d:	9a                   	(bad)  
  800421726e:	af                   	scas   %es:(%rdi),%eax
  800421726f:	00 ff                	add    %bh,%bh
  8004217271:	ff 00                	incl   (%rax)
  8004217273:	00 00                	add    %al,(%rax)
  8004217275:	92                   	xchg   %eax,%edx
  8004217276:	af                   	scas   %es:(%rdi),%eax
	...

0000008004217278 <gdtdesc>:
  8004217278:	17                   	(bad)  
  8004217279:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  800421727f:	90                   	nop

0000008004217280 <gdt32>:
	...
  8004217288:	ff                   	(bad)  
  8004217289:	ff 00                	incl   (%rax)
  800421728b:	00 00                	add    %al,(%rax)
  800421728d:	9a                   	(bad)  
  800421728e:	cf                   	iret   
  800421728f:	00 ff                	add    %bh,%bh
  8004217291:	ff 00                	incl   (%rax)
  8004217293:	00 00                	add    %al,(%rax)
  8004217295:	92                   	xchg   %eax,%edx
  8004217296:	cf                   	iret   
	...

0000008004217298 <gdt32desc>:
  8004217298:	17                   	(bad)  
  8004217299:	00 c8                	add    %cl,%al
  800421729b:	70 00                	jo     800421729d <gdt32desc+0x5>
	...

000000800421729e <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  800421729e:	90                   	nop

000000800421729f <sum>:
  800421729f:	55                   	push   %rbp
  80042172a0:	48 89 e5             	mov    %rsp,%rbp
  80042172a3:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042172a7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042172ab:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042172ae:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  80042172b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042172bc:	eb 1a                	jmp    80042172d8 <sum+0x39>
  80042172be:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042172c1:	48 63 d0             	movslq %eax,%rdx
  80042172c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042172c8:	48 01 d0             	add    %rdx,%rax
  80042172cb:	0f b6 00             	movzbl (%rax),%eax
  80042172ce:	0f b6 c0             	movzbl %al,%eax
  80042172d1:	01 45 f8             	add    %eax,-0x8(%rbp)
  80042172d4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042172d8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042172db:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  80042172de:	7c de                	jl     80042172be <sum+0x1f>
  80042172e0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042172e3:	c9                   	leaveq 
  80042172e4:	c3                   	retq   

00000080042172e5 <mpsearch1>:
  80042172e5:	55                   	push   %rbp
  80042172e6:	48 89 e5             	mov    %rsp,%rbp
  80042172e9:	48 83 ec 40          	sub    $0x40,%rsp
  80042172ed:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042172f1:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042172f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042172f8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042172fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217300:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217304:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217307:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421730a:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004217311:	00 00 00 
  8004217314:	48 8b 00             	mov    (%rax),%rax
  8004217317:	48 39 c2             	cmp    %rax,%rdx
  800421731a:	72 32                	jb     800421734e <mpsearch1+0x69>
  800421731c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217320:	48 89 c1             	mov    %rax,%rcx
  8004217323:	48 ba 78 12 22 04 80 	movabs $0x8004221278,%rdx
  800421732a:	00 00 00 
  800421732d:	be 74 00 00 00       	mov    $0x74,%esi
  8004217332:	48 bf 9b 12 22 04 80 	movabs $0x800422129b,%rdi
  8004217339:	00 00 00 
  800421733c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217341:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217348:	00 00 00 
  800421734b:	41 ff d0             	callq  *%r8
  800421734e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217355:	00 00 00 
  8004217358:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421735c:	48 01 d0             	add    %rdx,%rax
  800421735f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217363:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217366:	48 63 d0             	movslq %eax,%rdx
  8004217369:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421736d:	48 01 d0             	add    %rdx,%rax
  8004217370:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217374:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217378:	48 c1 e8 0c          	shr    $0xc,%rax
  800421737c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421737f:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217382:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004217389:	00 00 00 
  800421738c:	48 8b 00             	mov    (%rax),%rax
  800421738f:	48 39 c2             	cmp    %rax,%rdx
  8004217392:	72 32                	jb     80042173c6 <mpsearch1+0xe1>
  8004217394:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217398:	48 89 c1             	mov    %rax,%rcx
  800421739b:	48 ba 78 12 22 04 80 	movabs $0x8004221278,%rdx
  80042173a2:	00 00 00 
  80042173a5:	be 74 00 00 00       	mov    $0x74,%esi
  80042173aa:	48 bf 9b 12 22 04 80 	movabs $0x800422129b,%rdi
  80042173b1:	00 00 00 
  80042173b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042173b9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042173c0:	00 00 00 
  80042173c3:	41 ff d0             	callq  *%r8
  80042173c6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042173cd:	00 00 00 
  80042173d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042173d4:	48 01 d0             	add    %rdx,%rax
  80042173d7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042173db:	eb 4d                	jmp    800421742a <mpsearch1+0x145>
  80042173dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042173e1:	ba 04 00 00 00       	mov    $0x4,%edx
  80042173e6:	48 be ae 12 22 04 80 	movabs $0x80042212ae,%rsi
  80042173ed:	00 00 00 
  80042173f0:	48 89 c7             	mov    %rax,%rdi
  80042173f3:	48 b8 9e 0f 21 04 80 	movabs $0x8004210f9e,%rax
  80042173fa:	00 00 00 
  80042173fd:	ff d0                	callq  *%rax
  80042173ff:	85 c0                	test   %eax,%eax
  8004217401:	75 22                	jne    8004217425 <mpsearch1+0x140>
  8004217403:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217407:	be 10 00 00 00       	mov    $0x10,%esi
  800421740c:	48 89 c7             	mov    %rax,%rdi
  800421740f:	48 b8 9f 72 21 04 80 	movabs $0x800421729f,%rax
  8004217416:	00 00 00 
  8004217419:	ff d0                	callq  *%rax
  800421741b:	84 c0                	test   %al,%al
  800421741d:	75 06                	jne    8004217425 <mpsearch1+0x140>
  800421741f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217423:	eb 14                	jmp    8004217439 <mpsearch1+0x154>
  8004217425:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  800421742a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421742e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004217432:	72 a9                	jb     80042173dd <mpsearch1+0xf8>
  8004217434:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217439:	c9                   	leaveq 
  800421743a:	c3                   	retq   

000000800421743b <mpsearch>:
  800421743b:	55                   	push   %rbp
  800421743c:	48 89 e5             	mov    %rsp,%rbp
  800421743f:	48 83 ec 30          	sub    $0x30,%rsp
  8004217443:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  800421744a:	00 
  800421744b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421744f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217453:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004217456:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004217459:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004217460:	00 00 00 
  8004217463:	48 8b 00             	mov    (%rax),%rax
  8004217466:	48 39 c2             	cmp    %rax,%rdx
  8004217469:	72 32                	jb     800421749d <mpsearch+0x62>
  800421746b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421746f:	48 89 c1             	mov    %rax,%rcx
  8004217472:	48 ba 78 12 22 04 80 	movabs $0x8004221278,%rdx
  8004217479:	00 00 00 
  800421747c:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004217481:	48 bf 9b 12 22 04 80 	movabs $0x800422129b,%rdi
  8004217488:	00 00 00 
  800421748b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217490:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217497:	00 00 00 
  800421749a:	41 ff d0             	callq  *%r8
  800421749d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042174a4:	00 00 00 
  80042174a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042174ab:	48 01 d0             	add    %rdx,%rax
  80042174ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042174b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042174b6:	48 83 c0 0e          	add    $0xe,%rax
  80042174ba:	0f b7 00             	movzwl (%rax),%eax
  80042174bd:	0f b7 c0             	movzwl %ax,%eax
  80042174c0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042174c3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042174c7:	74 2c                	je     80042174f5 <mpsearch+0xba>
  80042174c9:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  80042174cd:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042174d0:	be 00 04 00 00       	mov    $0x400,%esi
  80042174d5:	48 89 c7             	mov    %rax,%rdi
  80042174d8:	48 b8 e5 72 21 04 80 	movabs $0x80042172e5,%rax
  80042174df:	00 00 00 
  80042174e2:	ff d0                	callq  *%rax
  80042174e4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042174e8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042174ed:	74 49                	je     8004217538 <mpsearch+0xfd>
  80042174ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042174f3:	eb 59                	jmp    800421754e <mpsearch+0x113>
  80042174f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042174f9:	48 83 c0 13          	add    $0x13,%rax
  80042174fd:	0f b7 00             	movzwl (%rax),%eax
  8004217500:	0f b7 c0             	movzwl %ax,%eax
  8004217503:	c1 e0 0a             	shl    $0xa,%eax
  8004217506:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217509:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421750c:	2d 00 04 00 00       	sub    $0x400,%eax
  8004217511:	89 c0                	mov    %eax,%eax
  8004217513:	be 00 04 00 00       	mov    $0x400,%esi
  8004217518:	48 89 c7             	mov    %rax,%rdi
  800421751b:	48 b8 e5 72 21 04 80 	movabs $0x80042172e5,%rax
  8004217522:	00 00 00 
  8004217525:	ff d0                	callq  *%rax
  8004217527:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421752b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217530:	74 06                	je     8004217538 <mpsearch+0xfd>
  8004217532:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217536:	eb 16                	jmp    800421754e <mpsearch+0x113>
  8004217538:	be 00 00 01 00       	mov    $0x10000,%esi
  800421753d:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  8004217542:	48 b8 e5 72 21 04 80 	movabs $0x80042172e5,%rax
  8004217549:	00 00 00 
  800421754c:	ff d0                	callq  *%rax
  800421754e:	c9                   	leaveq 
  800421754f:	c3                   	retq   

0000008004217550 <mpconfig>:
  8004217550:	55                   	push   %rbp
  8004217551:	48 89 e5             	mov    %rsp,%rbp
  8004217554:	48 83 ec 30          	sub    $0x30,%rsp
  8004217558:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421755c:	48 b8 3b 74 21 04 80 	movabs $0x800421743b,%rax
  8004217563:	00 00 00 
  8004217566:	ff d0                	callq  *%rax
  8004217568:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421756c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004217571:	75 0a                	jne    800421757d <mpconfig+0x2d>
  8004217573:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217578:	e9 f6 01 00 00       	jmpq   8004217773 <mpconfig+0x223>
  800421757d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217581:	8b 40 04             	mov    0x4(%rax),%eax
  8004217584:	85 c0                	test   %eax,%eax
  8004217586:	74 0c                	je     8004217594 <mpconfig+0x44>
  8004217588:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421758c:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  8004217590:	84 c0                	test   %al,%al
  8004217592:	74 25                	je     80042175b9 <mpconfig+0x69>
  8004217594:	48 bf b8 12 22 04 80 	movabs $0x80042212b8,%rdi
  800421759b:	00 00 00 
  800421759e:	b8 00 00 00 00       	mov    $0x0,%eax
  80042175a3:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042175aa:	00 00 00 
  80042175ad:	ff d2                	callq  *%rdx
  80042175af:	b8 00 00 00 00       	mov    $0x0,%eax
  80042175b4:	e9 ba 01 00 00       	jmpq   8004217773 <mpconfig+0x223>
  80042175b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042175bd:	8b 40 04             	mov    0x4(%rax),%eax
  80042175c0:	89 c0                	mov    %eax,%eax
  80042175c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042175c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042175ca:	48 c1 e8 0c          	shr    $0xc,%rax
  80042175ce:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042175d1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042175d4:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042175db:	00 00 00 
  80042175de:	48 8b 00             	mov    (%rax),%rax
  80042175e1:	48 39 c2             	cmp    %rax,%rdx
  80042175e4:	72 32                	jb     8004217618 <mpconfig+0xc8>
  80042175e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042175ea:	48 89 c1             	mov    %rax,%rcx
  80042175ed:	48 ba 78 12 22 04 80 	movabs $0x8004221278,%rdx
  80042175f4:	00 00 00 
  80042175f7:	be ad 00 00 00       	mov    $0xad,%esi
  80042175fc:	48 bf 9b 12 22 04 80 	movabs $0x800422129b,%rdi
  8004217603:	00 00 00 
  8004217606:	b8 00 00 00 00       	mov    $0x0,%eax
  800421760b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217612:	00 00 00 
  8004217615:	41 ff d0             	callq  *%r8
  8004217618:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421761f:	00 00 00 
  8004217622:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217626:	48 01 d0             	add    %rdx,%rax
  8004217629:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421762d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217631:	ba 04 00 00 00       	mov    $0x4,%edx
  8004217636:	48 be e5 12 22 04 80 	movabs $0x80042212e5,%rsi
  800421763d:	00 00 00 
  8004217640:	48 89 c7             	mov    %rax,%rdi
  8004217643:	48 b8 9e 0f 21 04 80 	movabs $0x8004210f9e,%rax
  800421764a:	00 00 00 
  800421764d:	ff d0                	callq  *%rax
  800421764f:	85 c0                	test   %eax,%eax
  8004217651:	74 25                	je     8004217678 <mpconfig+0x128>
  8004217653:	48 bf f0 12 22 04 80 	movabs $0x80042212f0,%rdi
  800421765a:	00 00 00 
  800421765d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217662:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217669:	00 00 00 
  800421766c:	ff d2                	callq  *%rdx
  800421766e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217673:	e9 fb 00 00 00       	jmpq   8004217773 <mpconfig+0x223>
  8004217678:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421767c:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  8004217680:	0f b7 d0             	movzwl %ax,%edx
  8004217683:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217687:	89 d6                	mov    %edx,%esi
  8004217689:	48 89 c7             	mov    %rax,%rdi
  800421768c:	48 b8 9f 72 21 04 80 	movabs $0x800421729f,%rax
  8004217693:	00 00 00 
  8004217696:	ff d0                	callq  *%rax
  8004217698:	84 c0                	test   %al,%al
  800421769a:	74 25                	je     80042176c1 <mpconfig+0x171>
  800421769c:	48 bf 28 13 22 04 80 	movabs $0x8004221328,%rdi
  80042176a3:	00 00 00 
  80042176a6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176ab:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042176b2:	00 00 00 
  80042176b5:	ff d2                	callq  *%rdx
  80042176b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176bc:	e9 b2 00 00 00       	jmpq   8004217773 <mpconfig+0x223>
  80042176c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042176c5:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042176c9:	3c 01                	cmp    $0x1,%al
  80042176cb:	74 3b                	je     8004217708 <mpconfig+0x1b8>
  80042176cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042176d1:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042176d5:	3c 04                	cmp    $0x4,%al
  80042176d7:	74 2f                	je     8004217708 <mpconfig+0x1b8>
  80042176d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042176dd:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042176e1:	0f b6 c0             	movzbl %al,%eax
  80042176e4:	89 c6                	mov    %eax,%esi
  80042176e6:	48 bf 50 13 22 04 80 	movabs $0x8004221350,%rdi
  80042176ed:	00 00 00 
  80042176f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176f5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042176fc:	00 00 00 
  80042176ff:	ff d2                	callq  *%rdx
  8004217701:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217706:	eb 6b                	jmp    8004217773 <mpconfig+0x223>
  8004217708:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421770c:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  8004217710:	0f b7 c0             	movzwl %ax,%eax
  8004217713:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004217717:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  800421771b:	0f b7 ca             	movzwl %dx,%ecx
  800421771e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004217722:	48 01 ca             	add    %rcx,%rdx
  8004217725:	89 c6                	mov    %eax,%esi
  8004217727:	48 89 d7             	mov    %rdx,%rdi
  800421772a:	48 b8 9f 72 21 04 80 	movabs $0x800421729f,%rax
  8004217731:	00 00 00 
  8004217734:	ff d0                	callq  *%rax
  8004217736:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421773a:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  800421773e:	38 d0                	cmp    %dl,%al
  8004217740:	74 22                	je     8004217764 <mpconfig+0x214>
  8004217742:	48 bf 70 13 22 04 80 	movabs $0x8004221370,%rdi
  8004217749:	00 00 00 
  800421774c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217751:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217758:	00 00 00 
  800421775b:	ff d2                	callq  *%rdx
  800421775d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217762:	eb 0f                	jmp    8004217773 <mpconfig+0x223>
  8004217764:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217768:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421776c:	48 89 10             	mov    %rdx,(%rax)
  800421776f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217773:	c9                   	leaveq 
  8004217774:	c3                   	retq   

0000008004217775 <mp_init>:
  8004217775:	55                   	push   %rbp
  8004217776:	48 89 e5             	mov    %rsp,%rbp
  8004217779:	53                   	push   %rbx
  800421777a:	48 83 ec 58          	sub    $0x58,%rsp
  800421777e:	48 b8 40 e2 6d 04 80 	movabs $0x80046de240,%rax
  8004217785:	00 00 00 
  8004217788:	48 bb 20 e0 6d 04 80 	movabs $0x80046de020,%rbx
  800421778f:	00 00 00 
  8004217792:	48 89 18             	mov    %rbx,(%rax)
  8004217795:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  8004217799:	48 89 c7             	mov    %rax,%rdi
  800421779c:	48 b8 50 75 21 04 80 	movabs $0x8004217550,%rax
  80042177a3:	00 00 00 
  80042177a6:	ff d0                	callq  *%rax
  80042177a8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042177ac:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042177b1:	75 05                	jne    80042177b8 <mp_init+0x43>
  80042177b3:	e9 d2 03 00 00       	jmpq   8004217b8a <mp_init+0x415>
  80042177b8:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  80042177bf:	00 00 00 
  80042177c2:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  80042177c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042177cc:	8b 40 24             	mov    0x24(%rax),%eax
  80042177cf:	89 c2                	mov    %eax,%edx
  80042177d1:	48 b8 00 f0 71 04 80 	movabs $0x800471f000,%rax
  80042177d8:	00 00 00 
  80042177db:	48 89 10             	mov    %rdx,(%rax)
  80042177de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042177e2:	48 83 c0 2c          	add    $0x2c,%rax
  80042177e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042177ea:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  80042177f1:	e9 17 02 00 00       	jmpq   8004217a0d <mp_init+0x298>
  80042177f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042177fa:	0f b6 00             	movzbl (%rax),%eax
  80042177fd:	0f b6 c0             	movzbl %al,%eax
  8004217800:	85 c0                	test   %eax,%eax
  8004217802:	74 16                	je     800421781a <mp_init+0xa5>
  8004217804:	85 c0                	test   %eax,%eax
  8004217806:	0f 88 b8 01 00 00    	js     80042179c4 <mp_init+0x24f>
  800421780c:	83 f8 04             	cmp    $0x4,%eax
  800421780f:	0f 8f af 01 00 00    	jg     80042179c4 <mp_init+0x24f>
  8004217815:	e9 a3 01 00 00       	jmpq   80042179bd <mp_init+0x248>
  800421781a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421781e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004217822:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217826:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  800421782a:	0f b6 c0             	movzbl %al,%eax
  800421782d:	83 e0 02             	and    $0x2,%eax
  8004217830:	85 c0                	test   %eax,%eax
  8004217832:	74 51                	je     8004217885 <mp_init+0x110>
  8004217834:	48 b8 48 e2 6d 04 80 	movabs $0x80046de248,%rax
  800421783b:	00 00 00 
  800421783e:	8b 00                	mov    (%rax),%eax
  8004217840:	48 98                	cltq   
  8004217842:	48 c1 e0 03          	shl    $0x3,%rax
  8004217846:	48 89 c2             	mov    %rax,%rdx
  8004217849:	48 c1 e2 04          	shl    $0x4,%rdx
  800421784d:	48 01 d0             	add    %rdx,%rax
  8004217850:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004217857:	00 00 00 
  800421785a:	48 01 c2             	add    %rax,%rdx
  800421785d:	48 b8 40 e2 6d 04 80 	movabs $0x80046de240,%rax
  8004217864:	00 00 00 
  8004217867:	48 89 10             	mov    %rdx,(%rax)
  800421786a:	48 bf 9d 13 22 04 80 	movabs $0x800422139d,%rdi
  8004217871:	00 00 00 
  8004217874:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217879:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217880:	00 00 00 
  8004217883:	ff d2                	callq  *%rdx
  8004217885:	48 b8 48 e2 6d 04 80 	movabs $0x80046de248,%rax
  800421788c:	00 00 00 
  800421788f:	8b 00                	mov    (%rax),%eax
  8004217891:	83 f8 03             	cmp    $0x3,%eax
  8004217894:	0f 8f f4 00 00 00    	jg     800421798e <mp_init+0x219>
  800421789a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421789e:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  80042178a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042178a6:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  80042178aa:	0f b6 f0             	movzbl %al,%esi
  80042178ad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042178b1:	8b 78 08             	mov    0x8(%rax),%edi
  80042178b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042178b8:	4c 8d 50 04          	lea    0x4(%rax),%r10
  80042178bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042178c0:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  80042178c4:	0f b6 c8             	movzbl %al,%ecx
  80042178c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042178cb:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  80042178cf:	0f b6 d0             	movzbl %al,%edx
  80042178d2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042178d6:	0f b6 00             	movzbl (%rax),%eax
  80042178d9:	0f b6 c0             	movzbl %al,%eax
  80042178dc:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  80042178e1:	89 34 24             	mov    %esi,(%rsp)
  80042178e4:	41 89 f9             	mov    %edi,%r9d
  80042178e7:	4d 89 d0             	mov    %r10,%r8
  80042178ea:	89 c6                	mov    %eax,%esi
  80042178ec:	48 bf b0 13 22 04 80 	movabs $0x80042213b0,%rdi
  80042178f3:	00 00 00 
  80042178f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178fb:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004217902:	00 00 00 
  8004217905:	41 ff d2             	callq  *%r10
  8004217908:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421790c:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217910:	0f b6 c0             	movzbl %al,%eax
  8004217913:	83 e0 01             	and    $0x1,%eax
  8004217916:	85 c0                	test   %eax,%eax
  8004217918:	74 57                	je     8004217971 <mp_init+0x1fc>
  800421791a:	48 b8 48 e2 6d 04 80 	movabs $0x80046de248,%rax
  8004217921:	00 00 00 
  8004217924:	8b 30                	mov    (%rax),%esi
  8004217926:	48 b8 48 e2 6d 04 80 	movabs $0x80046de248,%rax
  800421792d:	00 00 00 
  8004217930:	8b 00                	mov    (%rax),%eax
  8004217932:	89 c2                	mov    %eax,%edx
  8004217934:	48 b9 20 e0 6d 04 80 	movabs $0x80046de020,%rcx
  800421793b:	00 00 00 
  800421793e:	48 63 c6             	movslq %esi,%rax
  8004217941:	48 c1 e0 03          	shl    $0x3,%rax
  8004217945:	48 89 c6             	mov    %rax,%rsi
  8004217948:	48 c1 e6 04          	shl    $0x4,%rsi
  800421794c:	48 01 f0             	add    %rsi,%rax
  800421794f:	48 01 c8             	add    %rcx,%rax
  8004217952:	88 10                	mov    %dl,(%rax)
  8004217954:	48 b8 48 e2 6d 04 80 	movabs $0x80046de248,%rax
  800421795b:	00 00 00 
  800421795e:	8b 00                	mov    (%rax),%eax
  8004217960:	8d 50 01             	lea    0x1(%rax),%edx
  8004217963:	48 b8 48 e2 6d 04 80 	movabs $0x80046de248,%rax
  800421796a:	00 00 00 
  800421796d:	89 10                	mov    %edx,(%rax)
  800421796f:	eb 45                	jmp    80042179b6 <mp_init+0x241>
  8004217971:	48 bf 00 14 22 04 80 	movabs $0x8004221400,%rdi
  8004217978:	00 00 00 
  800421797b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217980:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217987:	00 00 00 
  800421798a:	ff d2                	callq  *%rdx
  800421798c:	eb 28                	jmp    80042179b6 <mp_init+0x241>
  800421798e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217992:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004217996:	0f b6 c0             	movzbl %al,%eax
  8004217999:	89 c6                	mov    %eax,%esi
  800421799b:	48 bf 30 14 22 04 80 	movabs $0x8004221430,%rdi
  80042179a2:	00 00 00 
  80042179a5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179aa:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042179b1:	00 00 00 
  80042179b4:	ff d2                	callq  *%rdx
  80042179b6:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  80042179bb:	eb 4c                	jmp    8004217a09 <mp_init+0x294>
  80042179bd:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  80042179c2:	eb 45                	jmp    8004217a09 <mp_init+0x294>
  80042179c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042179c8:	0f b6 00             	movzbl (%rax),%eax
  80042179cb:	0f b6 c0             	movzbl %al,%eax
  80042179ce:	89 c6                	mov    %eax,%esi
  80042179d0:	48 bf 58 14 22 04 80 	movabs $0x8004221458,%rdi
  80042179d7:	00 00 00 
  80042179da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179df:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042179e6:	00 00 00 
  80042179e9:	ff d2                	callq  *%rdx
  80042179eb:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  80042179f2:	00 00 00 
  80042179f5:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042179fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042179ff:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004217a03:	0f b7 c0             	movzwl %ax,%eax
  8004217a06:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217a09:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217a0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217a11:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004217a15:	0f b7 c0             	movzwl %ax,%eax
  8004217a18:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004217a1b:	0f 87 d5 fd ff ff    	ja     80042177f6 <mp_init+0x81>
  8004217a21:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004217a28:	eb 53                	jmp    8004217a7d <mp_init+0x308>
  8004217a2a:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004217a31:	00 00 00 
  8004217a34:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217a37:	48 c1 e0 03          	shl    $0x3,%rax
  8004217a3b:	48 89 c1             	mov    %rax,%rcx
  8004217a3e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217a42:	48 01 c8             	add    %rcx,%rax
  8004217a45:	48 01 d0             	add    %rdx,%rax
  8004217a48:	48 83 c0 70          	add    $0x70,%rax
  8004217a4c:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  8004217a50:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004217a57:	00 00 00 
  8004217a5a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217a5d:	48 c1 e0 03          	shl    $0x3,%rax
  8004217a61:	48 89 c1             	mov    %rax,%rcx
  8004217a64:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217a68:	48 01 c8             	add    %rcx,%rax
  8004217a6b:	48 01 d0             	add    %rdx,%rax
  8004217a6e:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  8004217a72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217a79:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217a7d:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004217a81:	76 a7                	jbe    8004217a2a <mp_init+0x2b5>
  8004217a83:	48 b8 40 e2 6d 04 80 	movabs $0x80046de240,%rax
  8004217a8a:	00 00 00 
  8004217a8d:	48 8b 00             	mov    (%rax),%rax
  8004217a90:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  8004217a97:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004217a9e:	00 00 00 
  8004217aa1:	8b 00                	mov    (%rax),%eax
  8004217aa3:	85 c0                	test   %eax,%eax
  8004217aa5:	75 41                	jne    8004217ae8 <mp_init+0x373>
  8004217aa7:	48 b8 48 e2 6d 04 80 	movabs $0x80046de248,%rax
  8004217aae:	00 00 00 
  8004217ab1:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217ab7:	48 b8 00 f0 71 04 80 	movabs $0x800471f000,%rax
  8004217abe:	00 00 00 
  8004217ac1:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217ac8:	48 bf 78 14 22 04 80 	movabs $0x8004221478,%rdi
  8004217acf:	00 00 00 
  8004217ad2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ad7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217ade:	00 00 00 
  8004217ae1:	ff d2                	callq  *%rdx
  8004217ae3:	e9 a2 00 00 00       	jmpq   8004217b8a <mp_init+0x415>
  8004217ae8:	48 b8 48 e2 6d 04 80 	movabs $0x80046de248,%rax
  8004217aef:	00 00 00 
  8004217af2:	8b 10                	mov    (%rax),%edx
  8004217af4:	48 b8 40 e2 6d 04 80 	movabs $0x80046de240,%rax
  8004217afb:	00 00 00 
  8004217afe:	48 8b 00             	mov    (%rax),%rax
  8004217b01:	0f b6 00             	movzbl (%rax),%eax
  8004217b04:	0f b6 c0             	movzbl %al,%eax
  8004217b07:	89 c6                	mov    %eax,%esi
  8004217b09:	48 bf a4 14 22 04 80 	movabs $0x80042214a4,%rdi
  8004217b10:	00 00 00 
  8004217b13:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b18:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004217b1f:	00 00 00 
  8004217b22:	ff d1                	callq  *%rcx
  8004217b24:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004217b28:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217b2c:	84 c0                	test   %al,%al
  8004217b2e:	74 5a                	je     8004217b8a <mp_init+0x415>
  8004217b30:	48 bf c8 14 22 04 80 	movabs $0x80042214c8,%rdi
  8004217b37:	00 00 00 
  8004217b3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b3f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217b46:	00 00 00 
  8004217b49:	ff d2                	callq  *%rdx
  8004217b4b:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  8004217b52:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217b56:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004217b5a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004217b5d:	ee                   	out    %al,(%dx)
  8004217b5e:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004217b65:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217b68:	89 c2                	mov    %eax,%edx
  8004217b6a:	ec                   	in     (%dx),%al
  8004217b6b:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  8004217b6e:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004217b72:	83 c8 01             	or     $0x1,%eax
  8004217b75:	0f b6 c0             	movzbl %al,%eax
  8004217b78:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  8004217b7f:	88 45 bb             	mov    %al,-0x45(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217b82:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004217b86:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004217b89:	ee                   	out    %al,(%dx)
  8004217b8a:	48 83 c4 58          	add    $0x58,%rsp
  8004217b8e:	5b                   	pop    %rbx
  8004217b8f:	5d                   	pop    %rbp
  8004217b90:	c3                   	retq   

0000008004217b91 <lapicw>:
  8004217b91:	55                   	push   %rbp
  8004217b92:	48 89 e5             	mov    %rsp,%rbp
  8004217b95:	48 83 ec 08          	sub    $0x8,%rsp
  8004217b99:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217b9c:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004217b9f:	48 b8 08 f0 71 04 80 	movabs $0x800471f008,%rax
  8004217ba6:	00 00 00 
  8004217ba9:	48 8b 00             	mov    (%rax),%rax
  8004217bac:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217baf:	48 63 d2             	movslq %edx,%rdx
  8004217bb2:	48 c1 e2 02          	shl    $0x2,%rdx
  8004217bb6:	48 01 c2             	add    %rax,%rdx
  8004217bb9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217bbc:	89 02                	mov    %eax,(%rdx)
  8004217bbe:	48 b8 08 f0 71 04 80 	movabs $0x800471f008,%rax
  8004217bc5:	00 00 00 
  8004217bc8:	48 8b 00             	mov    (%rax),%rax
  8004217bcb:	48 83 c0 20          	add    $0x20,%rax
  8004217bcf:	8b 00                	mov    (%rax),%eax
  8004217bd1:	c9                   	leaveq 
  8004217bd2:	c3                   	retq   

0000008004217bd3 <lapic_init>:
  8004217bd3:	55                   	push   %rbp
  8004217bd4:	48 89 e5             	mov    %rsp,%rbp
  8004217bd7:	48 b8 00 f0 71 04 80 	movabs $0x800471f000,%rax
  8004217bde:	00 00 00 
  8004217be1:	48 8b 00             	mov    (%rax),%rax
  8004217be4:	48 85 c0             	test   %rax,%rax
  8004217be7:	75 05                	jne    8004217bee <lapic_init+0x1b>
  8004217be9:	e9 da 01 00 00       	jmpq   8004217dc8 <lapic_init+0x1f5>
  8004217bee:	48 b8 00 f0 71 04 80 	movabs $0x800471f000,%rax
  8004217bf5:	00 00 00 
  8004217bf8:	48 8b 00             	mov    (%rax),%rax
  8004217bfb:	be 00 10 00 00       	mov    $0x1000,%esi
  8004217c00:	48 89 c7             	mov    %rax,%rdi
  8004217c03:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  8004217c0a:	00 00 00 
  8004217c0d:	ff d0                	callq  *%rax
  8004217c0f:	48 ba 08 f0 71 04 80 	movabs $0x800471f008,%rdx
  8004217c16:	00 00 00 
  8004217c19:	48 89 02             	mov    %rax,(%rdx)
  8004217c1c:	be 27 01 00 00       	mov    $0x127,%esi
  8004217c21:	bf 3c 00 00 00       	mov    $0x3c,%edi
  8004217c26:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217c2d:	00 00 00 
  8004217c30:	ff d0                	callq  *%rax
  8004217c32:	be 0b 00 00 00       	mov    $0xb,%esi
  8004217c37:	bf f8 00 00 00       	mov    $0xf8,%edi
  8004217c3c:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217c43:	00 00 00 
  8004217c46:	ff d0                	callq  *%rax
  8004217c48:	be 20 00 02 00       	mov    $0x20020,%esi
  8004217c4d:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217c52:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217c59:	00 00 00 
  8004217c5c:	ff d0                	callq  *%rax
  8004217c5e:	be 80 96 98 00       	mov    $0x989680,%esi
  8004217c63:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004217c68:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217c6f:	00 00 00 
  8004217c72:	ff d0                	callq  *%rax
  8004217c74:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004217c7b:	00 00 00 
  8004217c7e:	ff d0                	callq  *%rax
  8004217c80:	48 98                	cltq   
  8004217c82:	48 c1 e0 03          	shl    $0x3,%rax
  8004217c86:	48 89 c2             	mov    %rax,%rdx
  8004217c89:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217c8d:	48 01 d0             	add    %rdx,%rax
  8004217c90:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004217c97:	00 00 00 
  8004217c9a:	48 01 c2             	add    %rax,%rdx
  8004217c9d:	48 b8 40 e2 6d 04 80 	movabs $0x80046de240,%rax
  8004217ca4:	00 00 00 
  8004217ca7:	48 8b 00             	mov    (%rax),%rax
  8004217caa:	48 39 c2             	cmp    %rax,%rdx
  8004217cad:	74 16                	je     8004217cc5 <lapic_init+0xf2>
  8004217caf:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217cb4:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004217cb9:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217cc0:	00 00 00 
  8004217cc3:	ff d0                	callq  *%rax
  8004217cc5:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217cca:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004217ccf:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217cd6:	00 00 00 
  8004217cd9:	ff d0                	callq  *%rax
  8004217cdb:	48 b8 08 f0 71 04 80 	movabs $0x800471f008,%rax
  8004217ce2:	00 00 00 
  8004217ce5:	48 8b 00             	mov    (%rax),%rax
  8004217ce8:	48 83 c0 30          	add    $0x30,%rax
  8004217cec:	8b 00                	mov    (%rax),%eax
  8004217cee:	c1 e8 10             	shr    $0x10,%eax
  8004217cf1:	0f b6 c0             	movzbl %al,%eax
  8004217cf4:	83 f8 03             	cmp    $0x3,%eax
  8004217cf7:	76 16                	jbe    8004217d0f <lapic_init+0x13c>
  8004217cf9:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217cfe:	bf d0 00 00 00       	mov    $0xd0,%edi
  8004217d03:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217d0a:	00 00 00 
  8004217d0d:	ff d0                	callq  *%rax
  8004217d0f:	be 33 00 00 00       	mov    $0x33,%esi
  8004217d14:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004217d19:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217d20:	00 00 00 
  8004217d23:	ff d0                	callq  *%rax
  8004217d25:	be 00 00 00 00       	mov    $0x0,%esi
  8004217d2a:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217d2f:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217d36:	00 00 00 
  8004217d39:	ff d0                	callq  *%rax
  8004217d3b:	be 00 00 00 00       	mov    $0x0,%esi
  8004217d40:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217d45:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217d4c:	00 00 00 
  8004217d4f:	ff d0                	callq  *%rax
  8004217d51:	be 00 00 00 00       	mov    $0x0,%esi
  8004217d56:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217d5b:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217d62:	00 00 00 
  8004217d65:	ff d0                	callq  *%rax
  8004217d67:	be 00 00 00 00       	mov    $0x0,%esi
  8004217d6c:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217d71:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217d78:	00 00 00 
  8004217d7b:	ff d0                	callq  *%rax
  8004217d7d:	be 00 85 08 00       	mov    $0x88500,%esi
  8004217d82:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217d87:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217d8e:	00 00 00 
  8004217d91:	ff d0                	callq  *%rax
  8004217d93:	90                   	nop
  8004217d94:	48 b8 08 f0 71 04 80 	movabs $0x800471f008,%rax
  8004217d9b:	00 00 00 
  8004217d9e:	48 8b 00             	mov    (%rax),%rax
  8004217da1:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217da7:	8b 00                	mov    (%rax),%eax
  8004217da9:	25 00 10 00 00       	and    $0x1000,%eax
  8004217dae:	85 c0                	test   %eax,%eax
  8004217db0:	75 e2                	jne    8004217d94 <lapic_init+0x1c1>
  8004217db2:	be 00 00 00 00       	mov    $0x0,%esi
  8004217db7:	bf 20 00 00 00       	mov    $0x20,%edi
  8004217dbc:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217dc3:	00 00 00 
  8004217dc6:	ff d0                	callq  *%rax
  8004217dc8:	5d                   	pop    %rbp
  8004217dc9:	c3                   	retq   

0000008004217dca <cpunum>:
  8004217dca:	55                   	push   %rbp
  8004217dcb:	48 89 e5             	mov    %rsp,%rbp
  8004217dce:	48 b8 08 f0 71 04 80 	movabs $0x800471f008,%rax
  8004217dd5:	00 00 00 
  8004217dd8:	48 8b 00             	mov    (%rax),%rax
  8004217ddb:	48 85 c0             	test   %rax,%rax
  8004217dde:	74 18                	je     8004217df8 <cpunum+0x2e>
  8004217de0:	48 b8 08 f0 71 04 80 	movabs $0x800471f008,%rax
  8004217de7:	00 00 00 
  8004217dea:	48 8b 00             	mov    (%rax),%rax
  8004217ded:	48 83 c0 20          	add    $0x20,%rax
  8004217df1:	8b 00                	mov    (%rax),%eax
  8004217df3:	c1 e8 18             	shr    $0x18,%eax
  8004217df6:	eb 05                	jmp    8004217dfd <cpunum+0x33>
  8004217df8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217dfd:	5d                   	pop    %rbp
  8004217dfe:	c3                   	retq   

0000008004217dff <lapic_eoi>:
  8004217dff:	55                   	push   %rbp
  8004217e00:	48 89 e5             	mov    %rsp,%rbp
  8004217e03:	48 b8 08 f0 71 04 80 	movabs $0x800471f008,%rax
  8004217e0a:	00 00 00 
  8004217e0d:	48 8b 00             	mov    (%rax),%rax
  8004217e10:	48 85 c0             	test   %rax,%rax
  8004217e13:	74 16                	je     8004217e2b <lapic_eoi+0x2c>
  8004217e15:	be 00 00 00 00       	mov    $0x0,%esi
  8004217e1a:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217e1f:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217e26:	00 00 00 
  8004217e29:	ff d0                	callq  *%rax
  8004217e2b:	5d                   	pop    %rbp
  8004217e2c:	c3                   	retq   

0000008004217e2d <microdelay>:
  8004217e2d:	55                   	push   %rbp
  8004217e2e:	48 89 e5             	mov    %rsp,%rbp
  8004217e31:	48 83 ec 04          	sub    $0x4,%rsp
  8004217e35:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217e38:	c9                   	leaveq 
  8004217e39:	c3                   	retq   

0000008004217e3a <lapic_startap>:
  8004217e3a:	55                   	push   %rbp
  8004217e3b:	48 89 e5             	mov    %rsp,%rbp
  8004217e3e:	48 83 ec 40          	sub    $0x40,%rsp
  8004217e42:	89 f8                	mov    %edi,%eax
  8004217e44:	89 75 c8             	mov    %esi,-0x38(%rbp)
  8004217e47:	88 45 cc             	mov    %al,-0x34(%rbp)
  8004217e4a:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  8004217e51:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  8004217e55:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217e59:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217e5c:	ee                   	out    %al,(%dx)
  8004217e5d:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  8004217e64:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  8004217e68:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004217e6c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004217e6f:	ee                   	out    %al,(%dx)
  8004217e70:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  8004217e77:	00 
  8004217e78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217e7c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217e80:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217e83:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004217e86:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004217e8d:	00 00 00 
  8004217e90:	48 8b 00             	mov    (%rax),%rax
  8004217e93:	48 39 c2             	cmp    %rax,%rdx
  8004217e96:	72 32                	jb     8004217eca <lapic_startap+0x90>
  8004217e98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217e9c:	48 89 c1             	mov    %rax,%rcx
  8004217e9f:	48 ba 10 15 22 04 80 	movabs $0x8004221510,%rdx
  8004217ea6:	00 00 00 
  8004217ea9:	be 99 00 00 00       	mov    $0x99,%esi
  8004217eae:	48 bf 33 15 22 04 80 	movabs $0x8004221533,%rdi
  8004217eb5:	00 00 00 
  8004217eb8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ebd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217ec4:	00 00 00 
  8004217ec7:	41 ff d0             	callq  *%r8
  8004217eca:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217ed1:	00 00 00 
  8004217ed4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217ed8:	48 01 d0             	add    %rdx,%rax
  8004217edb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217edf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217ee3:	66 c7 00 00 00       	movw   $0x0,(%rax)
  8004217ee8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217eec:	48 8d 50 02          	lea    0x2(%rax),%rdx
  8004217ef0:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217ef3:	c1 e8 04             	shr    $0x4,%eax
  8004217ef6:	66 89 02             	mov    %ax,(%rdx)
  8004217ef9:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217efd:	c1 e0 18             	shl    $0x18,%eax
  8004217f00:	89 c6                	mov    %eax,%esi
  8004217f02:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217f07:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217f0e:	00 00 00 
  8004217f11:	ff d0                	callq  *%rax
  8004217f13:	be 00 c5 00 00       	mov    $0xc500,%esi
  8004217f18:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217f1d:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217f24:	00 00 00 
  8004217f27:	ff d0                	callq  *%rax
  8004217f29:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217f2e:	48 b8 2d 7e 21 04 80 	movabs $0x8004217e2d,%rax
  8004217f35:	00 00 00 
  8004217f38:	ff d0                	callq  *%rax
  8004217f3a:	be 00 85 00 00       	mov    $0x8500,%esi
  8004217f3f:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217f44:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217f4b:	00 00 00 
  8004217f4e:	ff d0                	callq  *%rax
  8004217f50:	bf 64 00 00 00       	mov    $0x64,%edi
  8004217f55:	48 b8 2d 7e 21 04 80 	movabs $0x8004217e2d,%rax
  8004217f5c:	00 00 00 
  8004217f5f:	ff d0                	callq  *%rax
  8004217f61:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217f68:	eb 4b                	jmp    8004217fb5 <lapic_startap+0x17b>
  8004217f6a:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217f6e:	c1 e0 18             	shl    $0x18,%eax
  8004217f71:	89 c6                	mov    %eax,%esi
  8004217f73:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217f78:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217f7f:	00 00 00 
  8004217f82:	ff d0                	callq  *%rax
  8004217f84:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217f87:	c1 e8 0c             	shr    $0xc,%eax
  8004217f8a:	80 cc 06             	or     $0x6,%ah
  8004217f8d:	89 c6                	mov    %eax,%esi
  8004217f8f:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217f94:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217f9b:	00 00 00 
  8004217f9e:	ff d0                	callq  *%rax
  8004217fa0:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217fa5:	48 b8 2d 7e 21 04 80 	movabs $0x8004217e2d,%rax
  8004217fac:	00 00 00 
  8004217faf:	ff d0                	callq  *%rax
  8004217fb1:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217fb5:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  8004217fb9:	7e af                	jle    8004217f6a <lapic_startap+0x130>
  8004217fbb:	c9                   	leaveq 
  8004217fbc:	c3                   	retq   

0000008004217fbd <lapic_ipi>:
  8004217fbd:	55                   	push   %rbp
  8004217fbe:	48 89 e5             	mov    %rsp,%rbp
  8004217fc1:	48 83 ec 08          	sub    $0x8,%rsp
  8004217fc5:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217fc8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217fcb:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004217fd0:	89 c6                	mov    %eax,%esi
  8004217fd2:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217fd7:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217fde:	00 00 00 
  8004217fe1:	ff d0                	callq  *%rax
  8004217fe3:	90                   	nop
  8004217fe4:	48 b8 08 f0 71 04 80 	movabs $0x800471f008,%rax
  8004217feb:	00 00 00 
  8004217fee:	48 8b 00             	mov    (%rax),%rax
  8004217ff1:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217ff7:	8b 00                	mov    (%rax),%eax
  8004217ff9:	25 00 10 00 00       	and    $0x1000,%eax
  8004217ffe:	85 c0                	test   %eax,%eax
  8004218000:	75 e2                	jne    8004217fe4 <lapic_ipi+0x27>
  8004218002:	c9                   	leaveq 
  8004218003:	c3                   	retq   

0000008004218004 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004218004:	55                   	push   %rbp
  8004218005:	48 89 e5             	mov    %rsp,%rbp
  8004218008:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421800c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218010:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004218013:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004218017:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421801a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421801e:	f0 87 02             	lock xchg %eax,(%rdx)
  8004218021:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004218024:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004218027:	c9                   	leaveq 
  8004218028:	c3                   	retq   

0000008004218029 <get_caller_pcs>:
  8004218029:	55                   	push   %rbp
  800421802a:	48 89 e5             	mov    %rsp,%rbp
  800421802d:	48 83 ec 28          	sub    $0x28,%rsp
  8004218031:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004218035:	48 89 e8             	mov    %rbp,%rax
  8004218038:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  800421803c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218040:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218044:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800421804b:	eb 45                	jmp    8004218092 <get_caller_pcs+0x69>
  800421804d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004218052:	74 44                	je     8004218098 <get_caller_pcs+0x6f>
  8004218054:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800421805b:	00 00 00 
  800421805e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004218062:	76 34                	jbe    8004218098 <get_caller_pcs+0x6f>
  8004218064:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218067:	48 98                	cltq   
  8004218069:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004218070:	00 
  8004218071:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218075:	48 01 c2             	add    %rax,%rdx
  8004218078:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421807c:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218080:	48 89 02             	mov    %rax,(%rdx)
  8004218083:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218087:	48 8b 00             	mov    (%rax),%rax
  800421808a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421808e:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004218092:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004218096:	7e b5                	jle    800421804d <get_caller_pcs+0x24>
  8004218098:	eb 1f                	jmp    80042180b9 <get_caller_pcs+0x90>
  800421809a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421809d:	48 98                	cltq   
  800421809f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042180a6:	00 
  80042180a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042180ab:	48 01 d0             	add    %rdx,%rax
  80042180ae:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042180b5:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042180b9:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  80042180bd:	7e db                	jle    800421809a <get_caller_pcs+0x71>
  80042180bf:	c9                   	leaveq 
  80042180c0:	c3                   	retq   

00000080042180c1 <holding>:
  80042180c1:	55                   	push   %rbp
  80042180c2:	48 89 e5             	mov    %rsp,%rbp
  80042180c5:	53                   	push   %rbx
  80042180c6:	48 83 ec 18          	sub    $0x18,%rsp
  80042180ca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042180ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180d2:	8b 00                	mov    (%rax),%eax
  80042180d4:	85 c0                	test   %eax,%eax
  80042180d6:	74 3d                	je     8004218115 <holding+0x54>
  80042180d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042180dc:	48 8b 58 10          	mov    0x10(%rax),%rbx
  80042180e0:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042180e7:	00 00 00 
  80042180ea:	ff d0                	callq  *%rax
  80042180ec:	48 98                	cltq   
  80042180ee:	48 c1 e0 03          	shl    $0x3,%rax
  80042180f2:	48 89 c2             	mov    %rax,%rdx
  80042180f5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042180f9:	48 01 d0             	add    %rdx,%rax
  80042180fc:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004218103:	00 00 00 
  8004218106:	48 01 d0             	add    %rdx,%rax
  8004218109:	48 39 c3             	cmp    %rax,%rbx
  800421810c:	75 07                	jne    8004218115 <holding+0x54>
  800421810e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218113:	eb 05                	jmp    800421811a <holding+0x59>
  8004218115:	b8 00 00 00 00       	mov    $0x0,%eax
  800421811a:	48 83 c4 18          	add    $0x18,%rsp
  800421811e:	5b                   	pop    %rbx
  800421811f:	5d                   	pop    %rbp
  8004218120:	c3                   	retq   

0000008004218121 <__spin_initlock>:
  8004218121:	55                   	push   %rbp
  8004218122:	48 89 e5             	mov    %rsp,%rbp
  8004218125:	48 83 ec 10          	sub    $0x10,%rsp
  8004218129:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421812d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004218131:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218135:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  800421813b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421813f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004218143:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004218147:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421814b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004218152:	00 
  8004218153:	c9                   	leaveq 
  8004218154:	c3                   	retq   

0000008004218155 <spin_lock>:
  8004218155:	55                   	push   %rbp
  8004218156:	48 89 e5             	mov    %rsp,%rbp
  8004218159:	53                   	push   %rbx
  800421815a:	48 83 ec 18          	sub    $0x18,%rsp
  800421815e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218162:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218166:	48 89 c7             	mov    %rax,%rdi
  8004218169:	48 b8 c1 80 21 04 80 	movabs $0x80042180c1,%rax
  8004218170:	00 00 00 
  8004218173:	ff d0                	callq  *%rax
  8004218175:	85 c0                	test   %eax,%eax
  8004218177:	74 44                	je     80042181bd <spin_lock+0x68>
  8004218179:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421817d:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004218181:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  8004218188:	00 00 00 
  800421818b:	ff d0                	callq  *%rax
  800421818d:	49 89 d8             	mov    %rbx,%r8
  8004218190:	89 c1                	mov    %eax,%ecx
  8004218192:	48 ba 58 15 22 04 80 	movabs $0x8004221558,%rdx
  8004218199:	00 00 00 
  800421819c:	be 42 00 00 00       	mov    $0x42,%esi
  80042181a1:	48 bf 82 15 22 04 80 	movabs $0x8004221582,%rdi
  80042181a8:	00 00 00 
  80042181ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042181b0:	49 b9 c9 04 20 04 80 	movabs $0x80042004c9,%r9
  80042181b7:	00 00 00 
  80042181ba:	41 ff d1             	callq  *%r9
  80042181bd:	eb 02                	jmp    80042181c1 <spin_lock+0x6c>
  80042181bf:	f3 90                	pause  
  80042181c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042181c5:	be 01 00 00 00       	mov    $0x1,%esi
  80042181ca:	48 89 c7             	mov    %rax,%rdi
  80042181cd:	48 b8 04 80 21 04 80 	movabs $0x8004218004,%rax
  80042181d4:	00 00 00 
  80042181d7:	ff d0                	callq  *%rax
  80042181d9:	85 c0                	test   %eax,%eax
  80042181db:	75 e2                	jne    80042181bf <spin_lock+0x6a>
  80042181dd:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042181e4:	00 00 00 
  80042181e7:	ff d0                	callq  *%rax
  80042181e9:	48 98                	cltq   
  80042181eb:	48 c1 e0 03          	shl    $0x3,%rax
  80042181ef:	48 89 c2             	mov    %rax,%rdx
  80042181f2:	48 c1 e2 04          	shl    $0x4,%rdx
  80042181f6:	48 01 d0             	add    %rdx,%rax
  80042181f9:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  8004218200:	00 00 00 
  8004218203:	48 01 c2             	add    %rax,%rdx
  8004218206:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421820a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421820e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218212:	48 83 c0 18          	add    $0x18,%rax
  8004218216:	48 89 c7             	mov    %rax,%rdi
  8004218219:	48 b8 29 80 21 04 80 	movabs $0x8004218029,%rax
  8004218220:	00 00 00 
  8004218223:	ff d0                	callq  *%rax
  8004218225:	48 83 c4 18          	add    $0x18,%rsp
  8004218229:	5b                   	pop    %rbx
  800421822a:	5d                   	pop    %rbp
  800421822b:	c3                   	retq   

000000800421822c <spin_unlock>:
  800421822c:	55                   	push   %rbp
  800421822d:	48 89 e5             	mov    %rsp,%rbp
  8004218230:	41 54                	push   %r12
  8004218232:	53                   	push   %rbx
  8004218233:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  800421823a:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  8004218241:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218248:	48 89 c7             	mov    %rax,%rdi
  800421824b:	48 b8 c1 80 21 04 80 	movabs $0x80042180c1,%rax
  8004218252:	00 00 00 
  8004218255:	ff d0                	callq  *%rax
  8004218257:	85 c0                	test   %eax,%eax
  8004218259:	0f 85 d2 01 00 00    	jne    8004218431 <spin_unlock+0x205>
  800421825f:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218266:	48 8d 48 18          	lea    0x18(%rax),%rcx
  800421826a:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  8004218271:	ba 28 00 00 00       	mov    $0x28,%edx
  8004218276:	48 89 ce             	mov    %rcx,%rsi
  8004218279:	48 89 c7             	mov    %rax,%rdi
  800421827c:	48 b8 53 0e 21 04 80 	movabs $0x8004210e53,%rax
  8004218283:	00 00 00 
  8004218286:	ff d0                	callq  *%rax
  8004218288:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421828f:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004218293:	48 85 c0             	test   %rax,%rax
  8004218296:	75 39                	jne    80042182d1 <spin_unlock+0xa5>
  8004218298:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421829f:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042182a3:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042182aa:	00 00 00 
  80042182ad:	ff d0                	callq  *%rax
  80042182af:	48 89 da             	mov    %rbx,%rdx
  80042182b2:	89 c6                	mov    %eax,%esi
  80042182b4:	48 bf 98 15 22 04 80 	movabs $0x8004221598,%rdi
  80042182bb:	00 00 00 
  80042182be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042182c3:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042182ca:	00 00 00 
  80042182cd:	ff d1                	callq  *%rcx
  80042182cf:	eb 4d                	jmp    800421831e <spin_unlock+0xf2>
  80042182d1:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042182d8:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042182dc:	0f b6 00             	movzbl (%rax),%eax
  80042182df:	44 0f b6 e0          	movzbl %al,%r12d
  80042182e3:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042182ea:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042182ee:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  80042182f5:	00 00 00 
  80042182f8:	ff d0                	callq  *%rax
  80042182fa:	44 89 e1             	mov    %r12d,%ecx
  80042182fd:	48 89 da             	mov    %rbx,%rdx
  8004218300:	89 c6                	mov    %eax,%esi
  8004218302:	48 bf d8 15 22 04 80 	movabs $0x80042215d8,%rdi
  8004218309:	00 00 00 
  800421830c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218311:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004218318:	00 00 00 
  800421831b:	41 ff d0             	callq  *%r8
  800421831e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004218325:	e9 c3 00 00 00       	jmpq   80042183ed <spin_unlock+0x1c1>
  800421832a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421832d:	48 98                	cltq   
  800421832f:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218336:	89 c0                	mov    %eax,%eax
  8004218338:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  800421833f:	48 89 d6             	mov    %rdx,%rsi
  8004218342:	48 89 c7             	mov    %rax,%rdi
  8004218345:	48 b8 34 fa 20 04 80 	movabs $0x800420fa34,%rax
  800421834c:	00 00 00 
  800421834f:	ff d0                	callq  *%rax
  8004218351:	85 c0                	test   %eax,%eax
  8004218353:	78 6b                	js     80042183c0 <spin_unlock+0x194>
  8004218355:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218358:	48 98                	cltq   
  800421835a:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218361:	89 c2                	mov    %eax,%edx
  8004218363:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  800421836a:	48 29 c2             	sub    %rax,%rdx
  800421836d:	49 89 d0             	mov    %rdx,%r8
  8004218370:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  8004218377:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  800421837d:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  8004218383:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  800421838a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421838d:	48 98                	cltq   
  800421838f:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218396:	4c 89 04 24          	mov    %r8,(%rsp)
  800421839a:	49 89 f9             	mov    %rdi,%r9
  800421839d:	41 89 f0             	mov    %esi,%r8d
  80042183a0:	89 c6                	mov    %eax,%esi
  80042183a2:	48 bf 0e 16 22 04 80 	movabs $0x800422160e,%rdi
  80042183a9:	00 00 00 
  80042183ac:	b8 00 00 00 00       	mov    $0x0,%eax
  80042183b1:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  80042183b8:	00 00 00 
  80042183bb:	41 ff d2             	callq  *%r10
  80042183be:	eb 29                	jmp    80042183e9 <spin_unlock+0x1bd>
  80042183c0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042183c3:	48 98                	cltq   
  80042183c5:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042183cc:	89 c6                	mov    %eax,%esi
  80042183ce:	48 bf 25 16 22 04 80 	movabs $0x8004221625,%rdi
  80042183d5:	00 00 00 
  80042183d8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042183dd:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042183e4:	00 00 00 
  80042183e7:	ff d2                	callq  *%rdx
  80042183e9:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042183ed:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  80042183f1:	7f 14                	jg     8004218407 <spin_unlock+0x1db>
  80042183f3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042183f6:	48 98                	cltq   
  80042183f8:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042183ff:	85 c0                	test   %eax,%eax
  8004218401:	0f 85 23 ff ff ff    	jne    800421832a <spin_unlock+0xfe>
  8004218407:	48 ba 2d 16 22 04 80 	movabs $0x800422162d,%rdx
  800421840e:	00 00 00 
  8004218411:	be 6c 00 00 00       	mov    $0x6c,%esi
  8004218416:	48 bf 82 15 22 04 80 	movabs $0x8004221582,%rdi
  800421841d:	00 00 00 
  8004218420:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218425:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421842c:	00 00 00 
  800421842f:	ff d1                	callq  *%rcx
  8004218431:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218438:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  800421843f:	00 
  8004218440:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218447:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  800421844e:	00 
  800421844f:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218456:	be 00 00 00 00       	mov    $0x0,%esi
  800421845b:	48 89 c7             	mov    %rax,%rdi
  800421845e:	48 b8 04 80 21 04 80 	movabs $0x8004218004,%rax
  8004218465:	00 00 00 
  8004218468:	ff d0                	callq  *%rax
  800421846a:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  8004218471:	5b                   	pop    %rbx
  8004218472:	41 5c                	pop    %r12
  8004218474:	5d                   	pop    %rbp
  8004218475:	c3                   	retq   

0000008004218476 <e1000_attach>:
  8004218476:	55                   	push   %rbp
  8004218477:	48 89 e5             	mov    %rsp,%rbp
  800421847a:	48 83 ec 40          	sub    $0x40,%rsp
  800421847e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004218482:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218486:	48 89 c7             	mov    %rax,%rdi
  8004218489:	48 b8 33 93 21 04 80 	movabs $0x8004219333,%rax
  8004218490:	00 00 00 
  8004218493:	ff d0                	callq  *%rax
  8004218495:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218499:	8b 40 30             	mov    0x30(%rax),%eax
  800421849c:	89 c2                	mov    %eax,%edx
  800421849e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042184a2:	8b 40 18             	mov    0x18(%rax),%eax
  80042184a5:	89 c0                	mov    %eax,%eax
  80042184a7:	48 89 d6             	mov    %rdx,%rsi
  80042184aa:	48 89 c7             	mov    %rax,%rdi
  80042184ad:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042184b4:	00 00 00 
  80042184b7:	ff d0                	callq  *%rax
  80042184b9:	48 ba 20 e7 4d 04 80 	movabs $0x80044de720,%rdx
  80042184c0:	00 00 00 
  80042184c3:	48 89 02             	mov    %rax,(%rdx)
  80042184c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042184cd:	e9 a9 00 00 00       	jmpq   800421857b <e1000_attach+0x105>
  80042184d2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042184d5:	48 98                	cltq   
  80042184d7:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  80042184de:	48 b8 40 e8 4d 04 80 	movabs $0x80044de840,%rax
  80042184e5:	00 00 00 
  80042184e8:	48 01 d0             	add    %rdx,%rax
  80042184eb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042184ef:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042184f6:	00 00 00 
  80042184f9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042184fd:	77 32                	ja     8004218531 <e1000_attach+0xbb>
  80042184ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004218503:	48 89 c1             	mov    %rax,%rcx
  8004218506:	48 ba 40 16 22 04 80 	movabs $0x8004221640,%rdx
  800421850d:	00 00 00 
  8004218510:	be 97 00 00 00       	mov    $0x97,%esi
  8004218515:	48 bf 64 16 22 04 80 	movabs $0x8004221664,%rdi
  800421851c:	00 00 00 
  800421851f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218524:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421852b:	00 00 00 
  800421852e:	41 ff d0             	callq  *%r8
  8004218531:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004218538:	ff ff ff 
  800421853b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421853f:	48 01 c2             	add    %rax,%rdx
  8004218542:	48 b8 30 e7 4d 04 80 	movabs $0x80044de730,%rax
  8004218549:	00 00 00 
  800421854c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421854f:	48 63 c9             	movslq %ecx,%rcx
  8004218552:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218556:	48 01 c8             	add    %rcx,%rax
  8004218559:	48 89 10             	mov    %rdx,(%rax)
  800421855c:	48 b8 30 e7 4d 04 80 	movabs $0x80044de730,%rax
  8004218563:	00 00 00 
  8004218566:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218569:	48 63 d2             	movslq %edx,%rdx
  800421856c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218570:	48 01 d0             	add    %rdx,%rax
  8004218573:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  8004218577:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421857b:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  800421857f:	0f 8e 4d ff ff ff    	jle    80042184d2 <e1000_attach+0x5c>
  8004218585:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  800421858c:	00 00 00 
  800421858f:	48 8b 00             	mov    (%rax),%rax
  8004218592:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  8004218599:	48 b8 30 e7 4d 04 80 	movabs $0x80044de730,%rax
  80042185a0:	00 00 00 
  80042185a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042185a7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042185ae:	00 00 00 
  80042185b1:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  80042185b5:	77 32                	ja     80042185e9 <e1000_attach+0x173>
  80042185b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042185bb:	48 89 c1             	mov    %rax,%rcx
  80042185be:	48 ba 40 16 22 04 80 	movabs $0x8004221640,%rdx
  80042185c5:	00 00 00 
  80042185c8:	be 9a 00 00 00       	mov    $0x9a,%esi
  80042185cd:	48 bf 64 16 22 04 80 	movabs $0x8004221664,%rdi
  80042185d4:	00 00 00 
  80042185d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042185dc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042185e3:	00 00 00 
  80042185e6:	41 ff d0             	callq  *%r8
  80042185e9:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042185f0:	ff ff ff 
  80042185f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042185f7:	48 01 c8             	add    %rcx,%rax
  80042185fa:	89 02                	mov    %eax,(%rdx)
  80042185fc:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  8004218603:	00 00 00 
  8004218606:	48 8b 00             	mov    (%rax),%rax
  8004218609:	48 05 08 38 00 00    	add    $0x3808,%rax
  800421860f:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  8004218615:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  800421861c:	00 00 00 
  800421861f:	48 8b 00             	mov    (%rax),%rax
  8004218622:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  8004218629:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  8004218630:	00 00 00 
  8004218633:	48 8b 00             	mov    (%rax),%rax
  8004218636:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  800421863d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218642:	89 01                	mov    %eax,(%rcx)
  8004218644:	89 02                	mov    %eax,(%rdx)
  8004218646:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  800421864d:	00 00 00 
  8004218650:	48 8b 00             	mov    (%rax),%rax
  8004218653:	48 05 00 04 00 00    	add    $0x400,%rax
  8004218659:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  800421865f:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  8004218666:	00 00 00 
  8004218669:	48 8b 00             	mov    (%rax),%rax
  800421866c:	48 05 10 04 00 00    	add    $0x410,%rax
  8004218672:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  8004218678:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421867f:	e9 8e 00 00 00       	jmpq   8004218712 <e1000_attach+0x29c>
  8004218684:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218687:	48 98                	cltq   
  8004218689:	48 c1 e0 0b          	shl    $0xb,%rax
  800421868d:	48 89 c2             	mov    %rax,%rdx
  8004218690:	48 b8 a0 85 4e 04 80 	movabs $0x80044e85a0,%rax
  8004218697:	00 00 00 
  800421869a:	48 01 d0             	add    %rdx,%rax
  800421869d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042186a1:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042186a8:	00 00 00 
  80042186ab:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042186af:	77 32                	ja     80042186e3 <e1000_attach+0x26d>
  80042186b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042186b5:	48 89 c1             	mov    %rax,%rcx
  80042186b8:	48 ba 40 16 22 04 80 	movabs $0x8004221640,%rdx
  80042186bf:	00 00 00 
  80042186c2:	be b8 00 00 00       	mov    $0xb8,%esi
  80042186c7:	48 bf 64 16 22 04 80 	movabs $0x8004221664,%rdi
  80042186ce:	00 00 00 
  80042186d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042186d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042186dd:	00 00 00 
  80042186e0:	41 ff d0             	callq  *%r8
  80042186e3:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042186ea:	ff ff ff 
  80042186ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042186f1:	48 01 c2             	add    %rax,%rdx
  80042186f4:	48 b8 20 47 4e 04 80 	movabs $0x80044e4720,%rax
  80042186fb:	00 00 00 
  80042186fe:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218701:	48 63 c9             	movslq %ecx,%rcx
  8004218704:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218708:	48 01 c8             	add    %rcx,%rax
  800421870b:	48 89 10             	mov    %rdx,(%rax)
  800421870e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218712:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  8004218719:	0f 8e 65 ff ff ff    	jle    8004218684 <e1000_attach+0x20e>
  800421871f:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  8004218726:	00 00 00 
  8004218729:	48 8b 00             	mov    (%rax),%rax
  800421872c:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  8004218733:	48 b8 20 47 4e 04 80 	movabs $0x80044e4720,%rax
  800421873a:	00 00 00 
  800421873d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004218741:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218748:	00 00 00 
  800421874b:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800421874f:	77 32                	ja     8004218783 <e1000_attach+0x30d>
  8004218751:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218755:	48 89 c1             	mov    %rax,%rcx
  8004218758:	48 ba 40 16 22 04 80 	movabs $0x8004221640,%rdx
  800421875f:	00 00 00 
  8004218762:	be ba 00 00 00       	mov    $0xba,%esi
  8004218767:	48 bf 64 16 22 04 80 	movabs $0x8004221664,%rdi
  800421876e:	00 00 00 
  8004218771:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218776:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421877d:	00 00 00 
  8004218780:	41 ff d0             	callq  *%r8
  8004218783:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800421878a:	ff ff ff 
  800421878d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218791:	48 01 c8             	add    %rcx,%rax
  8004218794:	89 02                	mov    %eax,(%rdx)
  8004218796:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  800421879d:	00 00 00 
  80042187a0:	48 8b 00             	mov    (%rax),%rax
  80042187a3:	48 05 08 28 00 00    	add    $0x2808,%rax
  80042187a9:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  80042187af:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  80042187b6:	00 00 00 
  80042187b9:	48 8b 00             	mov    (%rax),%rax
  80042187bc:	48 05 10 28 00 00    	add    $0x2810,%rax
  80042187c2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042187c8:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  80042187cf:	00 00 00 
  80042187d2:	48 8b 00             	mov    (%rax),%rax
  80042187d5:	48 05 18 28 00 00    	add    $0x2818,%rax
  80042187db:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  80042187e1:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  80042187e8:	00 00 00 
  80042187eb:	48 8b 00             	mov    (%rax),%rax
  80042187ee:	48 05 00 01 00 00    	add    $0x100,%rax
  80042187f4:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  80042187fa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042187ff:	c9                   	leaveq 
  8004218800:	c3                   	retq   

0000008004218801 <e1000_transmit>:
  8004218801:	55                   	push   %rbp
  8004218802:	48 89 e5             	mov    %rsp,%rbp
  8004218805:	48 83 ec 20          	sub    $0x20,%rsp
  8004218809:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421880d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218810:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  8004218817:	00 00 00 
  800421881a:	48 8b 00             	mov    (%rax),%rax
  800421881d:	48 85 c0             	test   %rax,%rax
  8004218820:	74 09                	je     800421882b <e1000_transmit+0x2a>
  8004218822:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  8004218829:	76 0a                	jbe    8004218835 <e1000_transmit+0x34>
  800421882b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004218830:	e9 39 01 00 00       	jmpq   800421896e <e1000_transmit+0x16d>
  8004218835:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  800421883c:	00 00 00 
  800421883f:	48 8b 00             	mov    (%rax),%rax
  8004218842:	48 05 18 38 00 00    	add    $0x3818,%rax
  8004218848:	8b 00                	mov    (%rax),%eax
  800421884a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421884d:	48 b8 30 e7 4d 04 80 	movabs $0x80044de730,%rax
  8004218854:	00 00 00 
  8004218857:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421885a:	48 63 d2             	movslq %edx,%rdx
  800421885d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218861:	48 01 d0             	add    %rdx,%rax
  8004218864:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218868:	0f b6 c0             	movzbl %al,%eax
  800421886b:	83 e0 01             	and    $0x1,%eax
  800421886e:	85 c0                	test   %eax,%eax
  8004218870:	75 25                	jne    8004218897 <e1000_transmit+0x96>
  8004218872:	48 bf 74 16 22 04 80 	movabs $0x8004221674,%rdi
  8004218879:	00 00 00 
  800421887c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218881:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004218888:	00 00 00 
  800421888b:	ff d2                	callq  *%rdx
  800421888d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218892:	e9 d7 00 00 00       	jmpq   800421896e <e1000_transmit+0x16d>
  8004218897:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421889a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421889d:	48 98                	cltq   
  800421889f:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  80042188a6:	48 b8 40 e8 4d 04 80 	movabs $0x80044de840,%rax
  80042188ad:	00 00 00 
  80042188b0:	48 01 c1             	add    %rax,%rcx
  80042188b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042188b7:	48 89 c6             	mov    %rax,%rsi
  80042188ba:	48 89 cf             	mov    %rcx,%rdi
  80042188bd:	48 b8 53 0e 21 04 80 	movabs $0x8004210e53,%rax
  80042188c4:	00 00 00 
  80042188c7:	ff d0                	callq  *%rax
  80042188c9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042188cc:	48 ba 30 e7 4d 04 80 	movabs $0x80044de730,%rdx
  80042188d3:	00 00 00 
  80042188d6:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042188d9:	48 63 c9             	movslq %ecx,%rcx
  80042188dc:	48 c1 e1 04          	shl    $0x4,%rcx
  80042188e0:	48 01 ca             	add    %rcx,%rdx
  80042188e3:	66 89 42 08          	mov    %ax,0x8(%rdx)
  80042188e7:	48 b8 30 e7 4d 04 80 	movabs $0x80044de730,%rax
  80042188ee:	00 00 00 
  80042188f1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042188f4:	48 63 d2             	movslq %edx,%rdx
  80042188f7:	48 c1 e2 04          	shl    $0x4,%rdx
  80042188fb:	48 01 d0             	add    %rdx,%rax
  80042188fe:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218902:	83 e0 fe             	and    $0xfffffffe,%eax
  8004218905:	89 c2                	mov    %eax,%edx
  8004218907:	48 b8 30 e7 4d 04 80 	movabs $0x80044de730,%rax
  800421890e:	00 00 00 
  8004218911:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218914:	48 63 c9             	movslq %ecx,%rcx
  8004218917:	48 c1 e1 04          	shl    $0x4,%rcx
  800421891b:	48 01 c8             	add    %rcx,%rax
  800421891e:	88 50 0c             	mov    %dl,0xc(%rax)
  8004218921:	48 b8 30 e7 4d 04 80 	movabs $0x80044de730,%rax
  8004218928:	00 00 00 
  800421892b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421892e:	48 63 d2             	movslq %edx,%rdx
  8004218931:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218935:	48 01 d0             	add    %rdx,%rax
  8004218938:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  800421893c:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  8004218943:	00 00 00 
  8004218946:	48 8b 00             	mov    (%rax),%rax
  8004218949:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004218950:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218953:	8d 50 01             	lea    0x1(%rax),%edx
  8004218956:	89 d0                	mov    %edx,%eax
  8004218958:	c1 f8 1f             	sar    $0x1f,%eax
  800421895b:	c1 e8 1c             	shr    $0x1c,%eax
  800421895e:	01 c2                	add    %eax,%edx
  8004218960:	83 e2 0f             	and    $0xf,%edx
  8004218963:	29 c2                	sub    %eax,%edx
  8004218965:	89 d0                	mov    %edx,%eax
  8004218967:	89 01                	mov    %eax,(%rcx)
  8004218969:	b8 00 00 00 00       	mov    $0x0,%eax
  800421896e:	c9                   	leaveq 
  800421896f:	c3                   	retq   

0000008004218970 <e1000_receive>:
  8004218970:	55                   	push   %rbp
  8004218971:	48 89 e5             	mov    %rsp,%rbp
  8004218974:	48 83 ec 20          	sub    $0x20,%rsp
  8004218978:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421897c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800421897f:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  8004218986:	00 00 00 
  8004218989:	48 8b 00             	mov    (%rax),%rax
  800421898c:	48 85 c0             	test   %rax,%rax
  800421898f:	75 0a                	jne    800421899b <e1000_receive+0x2b>
  8004218991:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218996:	e9 59 01 00 00       	jmpq   8004218af4 <e1000_receive+0x184>
  800421899b:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  80042189a2:	00 00 00 
  80042189a5:	48 8b 00             	mov    (%rax),%rax
  80042189a8:	48 05 18 28 00 00    	add    $0x2818,%rax
  80042189ae:	8b 00                	mov    (%rax),%eax
  80042189b0:	8d 48 01             	lea    0x1(%rax),%ecx
  80042189b3:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  80042189b8:	89 c8                	mov    %ecx,%eax
  80042189ba:	f7 e2                	mul    %edx
  80042189bc:	89 d0                	mov    %edx,%eax
  80042189be:	c1 e8 06             	shr    $0x6,%eax
  80042189c1:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  80042189c7:	29 c1                	sub    %eax,%ecx
  80042189c9:	89 c8                	mov    %ecx,%eax
  80042189cb:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042189ce:	48 b8 20 47 4e 04 80 	movabs $0x80044e4720,%rax
  80042189d5:	00 00 00 
  80042189d8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042189db:	48 63 d2             	movslq %edx,%rdx
  80042189de:	48 c1 e2 04          	shl    $0x4,%rdx
  80042189e2:	48 01 d0             	add    %rdx,%rax
  80042189e5:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042189e9:	0f b6 c0             	movzbl %al,%eax
  80042189ec:	83 e0 01             	and    $0x1,%eax
  80042189ef:	85 c0                	test   %eax,%eax
  80042189f1:	75 0a                	jne    80042189fd <e1000_receive+0x8d>
  80042189f3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042189f8:	e9 f7 00 00 00       	jmpq   8004218af4 <e1000_receive+0x184>
  80042189fd:	48 b8 20 47 4e 04 80 	movabs $0x80044e4720,%rax
  8004218a04:	00 00 00 
  8004218a07:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218a0a:	48 63 d2             	movslq %edx,%rdx
  8004218a0d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218a11:	48 01 d0             	add    %rdx,%rax
  8004218a14:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218a18:	0f b6 c0             	movzbl %al,%eax
  8004218a1b:	83 e0 02             	and    $0x2,%eax
  8004218a1e:	85 c0                	test   %eax,%eax
  8004218a20:	75 35                	jne    8004218a57 <e1000_receive+0xe7>
  8004218a22:	48 b9 88 16 22 04 80 	movabs $0x8004221688,%rcx
  8004218a29:	00 00 00 
  8004218a2c:	48 ba b2 16 22 04 80 	movabs $0x80042216b2,%rdx
  8004218a33:	00 00 00 
  8004218a36:	be ef 00 00 00       	mov    $0xef,%esi
  8004218a3b:	48 bf 64 16 22 04 80 	movabs $0x8004221664,%rdi
  8004218a42:	00 00 00 
  8004218a45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218a4a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218a51:	00 00 00 
  8004218a54:	41 ff d0             	callq  *%r8
  8004218a57:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218a5a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218a5d:	48 b8 20 47 4e 04 80 	movabs $0x80044e4720,%rax
  8004218a64:	00 00 00 
  8004218a67:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218a6a:	48 63 d2             	movslq %edx,%rdx
  8004218a6d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218a71:	48 01 d0             	add    %rdx,%rax
  8004218a74:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004218a78:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004218a7c:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004218a80:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218a83:	39 c2                	cmp    %eax,%edx
  8004218a85:	0f 46 c2             	cmovbe %edx,%eax
  8004218a88:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218a8b:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218a8e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218a91:	48 98                	cltq   
  8004218a93:	48 c1 e0 0b          	shl    $0xb,%rax
  8004218a97:	48 89 c1             	mov    %rax,%rcx
  8004218a9a:	48 b8 a0 85 4e 04 80 	movabs $0x80044e85a0,%rax
  8004218aa1:	00 00 00 
  8004218aa4:	48 01 c1             	add    %rax,%rcx
  8004218aa7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218aab:	48 89 ce             	mov    %rcx,%rsi
  8004218aae:	48 89 c7             	mov    %rax,%rdi
  8004218ab1:	48 b8 53 0e 21 04 80 	movabs $0x8004210e53,%rax
  8004218ab8:	00 00 00 
  8004218abb:	ff d0                	callq  *%rax
  8004218abd:	48 b8 20 47 4e 04 80 	movabs $0x80044e4720,%rax
  8004218ac4:	00 00 00 
  8004218ac7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218aca:	48 63 d2             	movslq %edx,%rdx
  8004218acd:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218ad1:	48 01 d0             	add    %rdx,%rax
  8004218ad4:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004218ad8:	48 b8 20 e7 4d 04 80 	movabs $0x80044de720,%rax
  8004218adf:	00 00 00 
  8004218ae2:	48 8b 00             	mov    (%rax),%rax
  8004218ae5:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  8004218aec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218aef:	89 02                	mov    %eax,(%rdx)
  8004218af1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218af4:	c9                   	leaveq 
  8004218af5:	c3                   	retq   

0000008004218af6 <pci_conf1_set_addr>:
  8004218af6:	55                   	push   %rbp
  8004218af7:	48 89 e5             	mov    %rsp,%rbp
  8004218afa:	48 83 ec 20          	sub    $0x20,%rsp
  8004218afe:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218b01:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004218b04:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  8004218b07:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  8004218b0a:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  8004218b11:	76 35                	jbe    8004218b48 <pci_conf1_set_addr+0x52>
  8004218b13:	48 b9 c8 16 22 04 80 	movabs $0x80042216c8,%rcx
  8004218b1a:	00 00 00 
  8004218b1d:	48 ba d2 16 22 04 80 	movabs $0x80042216d2,%rdx
  8004218b24:	00 00 00 
  8004218b27:	be 31 00 00 00       	mov    $0x31,%esi
  8004218b2c:	48 bf e7 16 22 04 80 	movabs $0x80042216e7,%rdi
  8004218b33:	00 00 00 
  8004218b36:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218b3b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218b42:	00 00 00 
  8004218b45:	41 ff d0             	callq  *%r8
  8004218b48:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  8004218b4c:	76 35                	jbe    8004218b83 <pci_conf1_set_addr+0x8d>
  8004218b4e:	48 b9 f5 16 22 04 80 	movabs $0x80042216f5,%rcx
  8004218b55:	00 00 00 
  8004218b58:	48 ba d2 16 22 04 80 	movabs $0x80042216d2,%rdx
  8004218b5f:	00 00 00 
  8004218b62:	be 32 00 00 00       	mov    $0x32,%esi
  8004218b67:	48 bf e7 16 22 04 80 	movabs $0x80042216e7,%rdi
  8004218b6e:	00 00 00 
  8004218b71:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218b76:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218b7d:	00 00 00 
  8004218b80:	41 ff d0             	callq  *%r8
  8004218b83:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  8004218b87:	76 35                	jbe    8004218bbe <pci_conf1_set_addr+0xc8>
  8004218b89:	48 b9 fe 16 22 04 80 	movabs $0x80042216fe,%rcx
  8004218b90:	00 00 00 
  8004218b93:	48 ba d2 16 22 04 80 	movabs $0x80042216d2,%rdx
  8004218b9a:	00 00 00 
  8004218b9d:	be 33 00 00 00       	mov    $0x33,%esi
  8004218ba2:	48 bf e7 16 22 04 80 	movabs $0x80042216e7,%rdi
  8004218ba9:	00 00 00 
  8004218bac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218bb1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218bb8:	00 00 00 
  8004218bbb:	41 ff d0             	callq  *%r8
  8004218bbe:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  8004218bc5:	76 35                	jbe    8004218bfc <pci_conf1_set_addr+0x106>
  8004218bc7:	48 b9 07 17 22 04 80 	movabs $0x8004221707,%rcx
  8004218bce:	00 00 00 
  8004218bd1:	48 ba d2 16 22 04 80 	movabs $0x80042216d2,%rdx
  8004218bd8:	00 00 00 
  8004218bdb:	be 34 00 00 00       	mov    $0x34,%esi
  8004218be0:	48 bf e7 16 22 04 80 	movabs $0x80042216e7,%rdi
  8004218be7:	00 00 00 
  8004218bea:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218bef:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218bf6:	00 00 00 
  8004218bf9:	41 ff d0             	callq  *%r8
  8004218bfc:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004218bff:	83 e0 03             	and    $0x3,%eax
  8004218c02:	85 c0                	test   %eax,%eax
  8004218c04:	74 35                	je     8004218c3b <pci_conf1_set_addr+0x145>
  8004218c06:	48 b9 14 17 22 04 80 	movabs $0x8004221714,%rcx
  8004218c0d:	00 00 00 
  8004218c10:	48 ba d2 16 22 04 80 	movabs $0x80042216d2,%rdx
  8004218c17:	00 00 00 
  8004218c1a:	be 35 00 00 00       	mov    $0x35,%esi
  8004218c1f:	48 bf e7 16 22 04 80 	movabs $0x80042216e7,%rdi
  8004218c26:	00 00 00 
  8004218c29:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218c2e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218c35:	00 00 00 
  8004218c38:	41 ff d0             	callq  *%r8
  8004218c3b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218c3e:	c1 e0 10             	shl    $0x10,%eax
  8004218c41:	89 c2                	mov    %eax,%edx
  8004218c43:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218c46:	c1 e0 0b             	shl    $0xb,%eax
  8004218c49:	09 c2                	or     %eax,%edx
  8004218c4b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218c4e:	c1 e0 08             	shl    $0x8,%eax
  8004218c51:	09 d0                	or     %edx,%eax
  8004218c53:	0b 45 e0             	or     -0x20(%rbp),%eax
  8004218c56:	0d 00 00 00 80       	or     $0x80000000,%eax
  8004218c5b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218c5e:	48 b8 e4 57 23 04 80 	movabs $0x80042357e4,%rax
  8004218c65:	00 00 00 
  8004218c68:	8b 00                	mov    (%rax),%eax
  8004218c6a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218c6d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218c70:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218c73:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218c76:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218c79:	ef                   	out    %eax,(%dx)
  8004218c7a:	c9                   	leaveq 
  8004218c7b:	c3                   	retq   

0000008004218c7c <pci_conf_read>:
  8004218c7c:	55                   	push   %rbp
  8004218c7d:	48 89 e5             	mov    %rsp,%rbp
  8004218c80:	48 83 ec 20          	sub    $0x20,%rsp
  8004218c84:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218c88:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218c8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218c8f:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218c92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218c96:	8b 70 08             	mov    0x8(%rax),%esi
  8004218c99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218c9d:	48 8b 00             	mov    (%rax),%rax
  8004218ca0:	8b 40 08             	mov    0x8(%rax),%eax
  8004218ca3:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218ca6:	89 c7                	mov    %eax,%edi
  8004218ca8:	48 b8 f6 8a 21 04 80 	movabs $0x8004218af6,%rax
  8004218caf:	00 00 00 
  8004218cb2:	ff d0                	callq  *%rax
  8004218cb4:	48 b8 e8 57 23 04 80 	movabs $0x80042357e8,%rax
  8004218cbb:	00 00 00 
  8004218cbe:	8b 00                	mov    (%rax),%eax
  8004218cc0:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  8004218cc3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218cc6:	89 c2                	mov    %eax,%edx
  8004218cc8:	ed                   	in     (%dx),%eax
  8004218cc9:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004218ccc:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218ccf:	c9                   	leaveq 
  8004218cd0:	c3                   	retq   

0000008004218cd1 <pci_conf_write>:
  8004218cd1:	55                   	push   %rbp
  8004218cd2:	48 89 e5             	mov    %rsp,%rbp
  8004218cd5:	48 83 ec 20          	sub    $0x20,%rsp
  8004218cd9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218cdd:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218ce0:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004218ce3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ce7:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218cea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cee:	8b 70 08             	mov    0x8(%rax),%esi
  8004218cf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cf5:	48 8b 00             	mov    (%rax),%rax
  8004218cf8:	8b 40 08             	mov    0x8(%rax),%eax
  8004218cfb:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218cfe:	89 c7                	mov    %eax,%edi
  8004218d00:	48 b8 f6 8a 21 04 80 	movabs $0x8004218af6,%rax
  8004218d07:	00 00 00 
  8004218d0a:	ff d0                	callq  *%rax
  8004218d0c:	48 b8 e8 57 23 04 80 	movabs $0x80042357e8,%rax
  8004218d13:	00 00 00 
  8004218d16:	8b 00                	mov    (%rax),%eax
  8004218d18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218d1b:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004218d1e:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218d21:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218d24:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218d27:	ef                   	out    %eax,(%dx)
  8004218d28:	c9                   	leaveq 
  8004218d29:	c3                   	retq   

0000008004218d2a <pci_attach_match>:
  8004218d2a:	55                   	push   %rbp
  8004218d2b:	48 89 e5             	mov    %rsp,%rbp
  8004218d2e:	48 83 ec 30          	sub    $0x30,%rsp
  8004218d32:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218d35:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004218d38:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  8004218d3c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004218d40:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218d47:	e9 aa 00 00 00       	jmpq   8004218df6 <pci_attach_match+0xcc>
  8004218d4c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218d4f:	48 c1 e0 04          	shl    $0x4,%rax
  8004218d53:	48 89 c2             	mov    %rax,%rdx
  8004218d56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218d5a:	48 01 d0             	add    %rdx,%rax
  8004218d5d:	8b 00                	mov    (%rax),%eax
  8004218d5f:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004218d62:	0f 85 8a 00 00 00    	jne    8004218df2 <pci_attach_match+0xc8>
  8004218d68:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218d6b:	48 c1 e0 04          	shl    $0x4,%rax
  8004218d6f:	48 89 c2             	mov    %rax,%rdx
  8004218d72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218d76:	48 01 d0             	add    %rdx,%rax
  8004218d79:	8b 40 04             	mov    0x4(%rax),%eax
  8004218d7c:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004218d7f:	75 71                	jne    8004218df2 <pci_attach_match+0xc8>
  8004218d81:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218d84:	48 c1 e0 04          	shl    $0x4,%rax
  8004218d88:	48 89 c2             	mov    %rax,%rdx
  8004218d8b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218d8f:	48 01 d0             	add    %rdx,%rax
  8004218d92:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218d96:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004218d9a:	48 89 d7             	mov    %rdx,%rdi
  8004218d9d:	ff d0                	callq  *%rax
  8004218d9f:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218da2:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218da6:	7e 05                	jle    8004218dad <pci_attach_match+0x83>
  8004218da8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218dab:	eb 6c                	jmp    8004218e19 <pci_attach_match+0xef>
  8004218dad:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218db1:	79 3f                	jns    8004218df2 <pci_attach_match+0xc8>
  8004218db3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218db6:	48 c1 e0 04          	shl    $0x4,%rax
  8004218dba:	48 89 c2             	mov    %rax,%rdx
  8004218dbd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218dc1:	48 01 d0             	add    %rdx,%rax
  8004218dc4:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004218dc8:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004218dcb:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004218dce:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218dd1:	41 89 f0             	mov    %esi,%r8d
  8004218dd4:	89 c6                	mov    %eax,%esi
  8004218dd6:	48 bf 28 17 22 04 80 	movabs $0x8004221728,%rdi
  8004218ddd:	00 00 00 
  8004218de0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218de5:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004218dec:	00 00 00 
  8004218def:	41 ff d1             	callq  *%r9
  8004218df2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218df6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218df9:	48 c1 e0 04          	shl    $0x4,%rax
  8004218dfd:	48 89 c2             	mov    %rax,%rdx
  8004218e00:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218e04:	48 01 d0             	add    %rdx,%rax
  8004218e07:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218e0b:	48 85 c0             	test   %rax,%rax
  8004218e0e:	0f 85 38 ff ff ff    	jne    8004218d4c <pci_attach_match+0x22>
  8004218e14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218e19:	c9                   	leaveq 
  8004218e1a:	c3                   	retq   

0000008004218e1b <pci_attach>:
  8004218e1b:	55                   	push   %rbp
  8004218e1c:	48 89 e5             	mov    %rsp,%rbp
  8004218e1f:	48 83 ec 10          	sub    $0x10,%rsp
  8004218e23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004218e27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218e2b:	8b 40 14             	mov    0x14(%rax),%eax
  8004218e2e:	c1 e8 10             	shr    $0x10,%eax
  8004218e31:	0f b6 c0             	movzbl %al,%eax
  8004218e34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218e38:	8b 52 14             	mov    0x14(%rdx),%edx
  8004218e3b:	89 d7                	mov    %edx,%edi
  8004218e3d:	c1 ef 18             	shr    $0x18,%edi
  8004218e40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218e44:	48 89 d1             	mov    %rdx,%rcx
  8004218e47:	48 ba 00 58 23 04 80 	movabs $0x8004235800,%rdx
  8004218e4e:	00 00 00 
  8004218e51:	89 c6                	mov    %eax,%esi
  8004218e53:	48 b8 2a 8d 21 04 80 	movabs $0x8004218d2a,%rax
  8004218e5a:	00 00 00 
  8004218e5d:	ff d0                	callq  *%rax
  8004218e5f:	85 c0                	test   %eax,%eax
  8004218e61:	75 39                	jne    8004218e9c <pci_attach+0x81>
  8004218e63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218e67:	8b 40 10             	mov    0x10(%rax),%eax
  8004218e6a:	c1 e8 10             	shr    $0x10,%eax
  8004218e6d:	89 c6                	mov    %eax,%esi
  8004218e6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218e73:	8b 40 10             	mov    0x10(%rax),%eax
  8004218e76:	0f b7 c0             	movzwl %ax,%eax
  8004218e79:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218e7d:	48 89 d1             	mov    %rdx,%rcx
  8004218e80:	48 ba 20 58 23 04 80 	movabs $0x8004235820,%rdx
  8004218e87:	00 00 00 
  8004218e8a:	89 c7                	mov    %eax,%edi
  8004218e8c:	48 b8 2a 8d 21 04 80 	movabs $0x8004218d2a,%rax
  8004218e93:	00 00 00 
  8004218e96:	ff d0                	callq  *%rax
  8004218e98:	85 c0                	test   %eax,%eax
  8004218e9a:	74 07                	je     8004218ea3 <pci_attach+0x88>
  8004218e9c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218ea1:	eb 05                	jmp    8004218ea8 <pci_attach+0x8d>
  8004218ea3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218ea8:	c9                   	leaveq 
  8004218ea9:	c3                   	retq   

0000008004218eaa <pci_print_func>:
  8004218eaa:	55                   	push   %rbp
  8004218eab:	48 89 e5             	mov    %rsp,%rbp
  8004218eae:	48 83 ec 40          	sub    $0x40,%rsp
  8004218eb2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218eb6:	48 b8 40 58 23 04 80 	movabs $0x8004235840,%rax
  8004218ebd:	00 00 00 
  8004218ec0:	48 8b 00             	mov    (%rax),%rax
  8004218ec3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218ec7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ecb:	8b 40 14             	mov    0x14(%rax),%eax
  8004218ece:	c1 e8 18             	shr    $0x18,%eax
  8004218ed1:	83 f8 06             	cmp    $0x6,%eax
  8004218ed4:	77 20                	ja     8004218ef6 <pci_print_func+0x4c>
  8004218ed6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218eda:	8b 40 14             	mov    0x14(%rax),%eax
  8004218edd:	c1 e8 18             	shr    $0x18,%eax
  8004218ee0:	89 c2                	mov    %eax,%edx
  8004218ee2:	48 b8 40 58 23 04 80 	movabs $0x8004235840,%rax
  8004218ee9:	00 00 00 
  8004218eec:	89 d2                	mov    %edx,%edx
  8004218eee:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004218ef2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218ef6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218efa:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  8004218efe:	0f b6 f8             	movzbl %al,%edi
  8004218f01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f05:	8b 40 14             	mov    0x14(%rax),%eax
  8004218f08:	c1 e8 10             	shr    $0x10,%eax
  8004218f0b:	0f b6 f0             	movzbl %al,%esi
  8004218f0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f12:	8b 40 14             	mov    0x14(%rax),%eax
  8004218f15:	c1 e8 18             	shr    $0x18,%eax
  8004218f18:	41 89 c1             	mov    %eax,%r9d
  8004218f1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f1f:	8b 40 10             	mov    0x10(%rax),%eax
  8004218f22:	c1 e8 10             	shr    $0x10,%eax
  8004218f25:	41 89 c2             	mov    %eax,%r10d
  8004218f28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f2c:	8b 40 10             	mov    0x10(%rax),%eax
  8004218f2f:	44 0f b7 c0          	movzwl %ax,%r8d
  8004218f33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f37:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218f3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f3e:	8b 50 08             	mov    0x8(%rax),%edx
  8004218f41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218f45:	48 8b 00             	mov    (%rax),%rax
  8004218f48:	8b 40 08             	mov    0x8(%rax),%eax
  8004218f4b:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  8004218f4f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  8004218f53:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004218f58:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004218f5c:	44 89 0c 24          	mov    %r9d,(%rsp)
  8004218f60:	45 89 d1             	mov    %r10d,%r9d
  8004218f63:	89 c6                	mov    %eax,%esi
  8004218f65:	48 bf c8 17 22 04 80 	movabs $0x80042217c8,%rdi
  8004218f6c:	00 00 00 
  8004218f6f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218f74:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004218f7b:	00 00 00 
  8004218f7e:	41 ff d2             	callq  *%r10
  8004218f81:	c9                   	leaveq 
  8004218f82:	c3                   	retq   

0000008004218f83 <pci_scan_bus>:
  8004218f83:	55                   	push   %rbp
  8004218f84:	48 89 e5             	mov    %rsp,%rbp
  8004218f87:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004218f8e:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  8004218f95:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218f9c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218fa0:	ba 50 00 00 00       	mov    $0x50,%edx
  8004218fa5:	be 00 00 00 00       	mov    $0x0,%esi
  8004218faa:	48 89 c7             	mov    %rax,%rdi
  8004218fad:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  8004218fb4:	00 00 00 
  8004218fb7:	ff d0                	callq  *%rax
  8004218fb9:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004218fc0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004218fc4:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  8004218fcb:	e9 22 02 00 00       	jmpq   80042191f2 <pci_scan_bus+0x26f>
  8004218fd0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218fd4:	be 0c 00 00 00       	mov    $0xc,%esi
  8004218fd9:	48 89 c7             	mov    %rax,%rdi
  8004218fdc:	48 b8 7c 8c 21 04 80 	movabs $0x8004218c7c,%rax
  8004218fe3:	00 00 00 
  8004218fe6:	ff d0                	callq  *%rax
  8004218fe8:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218feb:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218fee:	c1 e8 10             	shr    $0x10,%eax
  8004218ff1:	83 e0 7f             	and    $0x7f,%eax
  8004218ff4:	83 f8 01             	cmp    $0x1,%eax
  8004218ff7:	0f 87 ec 01 00 00    	ja     80042191e9 <pci_scan_bus+0x266>
  8004218ffd:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219001:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004219005:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  800421900c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004219010:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  8004219017:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421901b:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004219022:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219026:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  800421902d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219031:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004219038:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421903c:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004219043:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219047:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  800421904e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219052:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004219059:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421905d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004219064:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219068:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800421906f:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  8004219076:	00 00 00 
  8004219079:	e9 45 01 00 00       	jmpq   80042191c3 <pci_scan_bus+0x240>
  800421907e:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004219085:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421908c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004219093:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  800421909a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042190a1:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  80042190a8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042190af:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  80042190b6:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042190bd:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  80042190c4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042190cb:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042190d2:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  80042190d9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042190dd:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042190e4:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042190e8:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  80042190ef:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042190f3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042190fa:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042190fe:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  8004219105:	be 00 00 00 00       	mov    $0x0,%esi
  800421910a:	48 89 c7             	mov    %rax,%rdi
  800421910d:	48 b8 7c 8c 21 04 80 	movabs $0x8004218c7c,%rax
  8004219114:	00 00 00 
  8004219117:	ff d0                	callq  *%rax
  8004219119:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  800421911f:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  8004219125:	0f b7 c0             	movzwl %ax,%eax
  8004219128:	3d ff ff 00 00       	cmp    $0xffff,%eax
  800421912d:	0f 84 81 00 00 00    	je     80042191b4 <pci_scan_bus+0x231>
  8004219133:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421913a:	be 3c 00 00 00       	mov    $0x3c,%esi
  800421913f:	48 89 c7             	mov    %rax,%rdi
  8004219142:	48 b8 7c 8c 21 04 80 	movabs $0x8004218c7c,%rax
  8004219149:	00 00 00 
  800421914c:	ff d0                	callq  *%rax
  800421914e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219151:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004219154:	88 45 98             	mov    %al,-0x68(%rbp)
  8004219157:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421915e:	be 08 00 00 00       	mov    $0x8,%esi
  8004219163:	48 89 c7             	mov    %rax,%rdi
  8004219166:	48 b8 7c 8c 21 04 80 	movabs $0x8004218c7c,%rax
  800421916d:	00 00 00 
  8004219170:	ff d0                	callq  *%rax
  8004219172:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  8004219178:	48 b8 e0 57 23 04 80 	movabs $0x80042357e0,%rax
  800421917f:	00 00 00 
  8004219182:	8b 00                	mov    (%rax),%eax
  8004219184:	85 c0                	test   %eax,%eax
  8004219186:	74 16                	je     800421919e <pci_scan_bus+0x21b>
  8004219188:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421918f:	48 89 c7             	mov    %rax,%rdi
  8004219192:	48 b8 aa 8e 21 04 80 	movabs $0x8004218eaa,%rax
  8004219199:	00 00 00 
  800421919c:	ff d0                	callq  *%rax
  800421919e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042191a5:	48 89 c7             	mov    %rax,%rdi
  80042191a8:	48 b8 1b 8e 21 04 80 	movabs $0x8004218e1b,%rax
  80042191af:	00 00 00 
  80042191b2:	ff d0                	callq  *%rax
  80042191b4:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  80042191ba:	83 c0 01             	add    $0x1,%eax
  80042191bd:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  80042191c3:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  80042191c9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042191cc:	25 00 00 80 00       	and    $0x800000,%eax
  80042191d1:	85 c0                	test   %eax,%eax
  80042191d3:	74 07                	je     80042191dc <pci_scan_bus+0x259>
  80042191d5:	b8 08 00 00 00       	mov    $0x8,%eax
  80042191da:	eb 05                	jmp    80042191e1 <pci_scan_bus+0x25e>
  80042191dc:	b8 01 00 00 00       	mov    $0x1,%eax
  80042191e1:	39 c2                	cmp    %eax,%edx
  80042191e3:	0f 82 95 fe ff ff    	jb     800421907e <pci_scan_bus+0xfb>
  80042191e9:	8b 45 a8             	mov    -0x58(%rbp),%eax
  80042191ec:	83 c0 01             	add    $0x1,%eax
  80042191ef:	89 45 a8             	mov    %eax,-0x58(%rbp)
  80042191f2:	8b 45 a8             	mov    -0x58(%rbp),%eax
  80042191f5:	83 f8 1f             	cmp    $0x1f,%eax
  80042191f8:	0f 86 d2 fd ff ff    	jbe    8004218fd0 <pci_scan_bus+0x4d>
  80042191fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219201:	c9                   	leaveq 
  8004219202:	c3                   	retq   

0000008004219203 <pci_bridge_attach>:
  8004219203:	55                   	push   %rbp
  8004219204:	48 89 e5             	mov    %rsp,%rbp
  8004219207:	48 83 ec 30          	sub    $0x30,%rsp
  800421920b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421920f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219213:	be 1c 00 00 00       	mov    $0x1c,%esi
  8004219218:	48 89 c7             	mov    %rax,%rdi
  800421921b:	48 b8 7c 8c 21 04 80 	movabs $0x8004218c7c,%rax
  8004219222:	00 00 00 
  8004219225:	ff d0                	callq  *%rax
  8004219227:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421922a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421922e:	be 18 00 00 00       	mov    $0x18,%esi
  8004219233:	48 89 c7             	mov    %rax,%rdi
  8004219236:	48 b8 7c 8c 21 04 80 	movabs $0x8004218c7c,%rax
  800421923d:	00 00 00 
  8004219240:	ff d0                	callq  *%rax
  8004219242:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004219245:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219248:	83 e0 0f             	and    $0xf,%eax
  800421924b:	83 f8 01             	cmp    $0x1,%eax
  800421924e:	75 40                	jne    8004219290 <pci_bridge_attach+0x8d>
  8004219250:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219254:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004219257:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421925b:	8b 50 08             	mov    0x8(%rax),%edx
  800421925e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219262:	48 8b 00             	mov    (%rax),%rax
  8004219265:	8b 40 08             	mov    0x8(%rax),%eax
  8004219268:	89 c6                	mov    %eax,%esi
  800421926a:	48 bf 08 18 22 04 80 	movabs $0x8004221808,%rdi
  8004219271:	00 00 00 
  8004219274:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219279:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004219280:	00 00 00 
  8004219283:	41 ff d0             	callq  *%r8
  8004219286:	b8 00 00 00 00       	mov    $0x0,%eax
  800421928b:	e9 a1 00 00 00       	jmpq   8004219331 <pci_bridge_attach+0x12e>
  8004219290:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004219294:	ba 10 00 00 00       	mov    $0x10,%edx
  8004219299:	be 00 00 00 00       	mov    $0x0,%esi
  800421929e:	48 89 c7             	mov    %rax,%rdi
  80042192a1:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  80042192a8:	00 00 00 
  80042192ab:	ff d0                	callq  *%rax
  80042192ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192b1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042192b5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042192b8:	c1 e8 08             	shr    $0x8,%eax
  80042192bb:	0f b6 c0             	movzbl %al,%eax
  80042192be:	89 45 e8             	mov    %eax,-0x18(%rbp)
  80042192c1:	48 b8 e0 57 23 04 80 	movabs $0x80042357e0,%rax
  80042192c8:	00 00 00 
  80042192cb:	8b 00                	mov    (%rax),%eax
  80042192cd:	85 c0                	test   %eax,%eax
  80042192cf:	74 48                	je     8004219319 <pci_bridge_attach+0x116>
  80042192d1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042192d4:	c1 e8 10             	shr    $0x10,%eax
  80042192d7:	0f b6 f8             	movzbl %al,%edi
  80042192da:	8b 75 e8             	mov    -0x18(%rbp),%esi
  80042192dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192e1:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042192e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192e8:	8b 50 08             	mov    0x8(%rax),%edx
  80042192eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192ef:	48 8b 00             	mov    (%rax),%rax
  80042192f2:	8b 40 08             	mov    0x8(%rax),%eax
  80042192f5:	41 89 f9             	mov    %edi,%r9d
  80042192f8:	41 89 f0             	mov    %esi,%r8d
  80042192fb:	89 c6                	mov    %eax,%esi
  80042192fd:	48 bf 40 18 22 04 80 	movabs $0x8004221840,%rdi
  8004219304:	00 00 00 
  8004219307:	b8 00 00 00 00       	mov    $0x0,%eax
  800421930c:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004219313:	00 00 00 
  8004219316:	41 ff d2             	callq  *%r10
  8004219319:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800421931d:	48 89 c7             	mov    %rax,%rdi
  8004219320:	48 b8 83 8f 21 04 80 	movabs $0x8004218f83,%rax
  8004219327:	00 00 00 
  800421932a:	ff d0                	callq  *%rax
  800421932c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219331:	c9                   	leaveq 
  8004219332:	c3                   	retq   

0000008004219333 <pci_func_enable>:
  8004219333:	55                   	push   %rbp
  8004219334:	48 89 e5             	mov    %rsp,%rbp
  8004219337:	48 83 ec 40          	sub    $0x40,%rsp
  800421933b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421933f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219343:	ba 07 00 00 00       	mov    $0x7,%edx
  8004219348:	be 04 00 00 00       	mov    $0x4,%esi
  800421934d:	48 89 c7             	mov    %rax,%rdi
  8004219350:	48 b8 d1 8c 21 04 80 	movabs $0x8004218cd1,%rax
  8004219357:	00 00 00 
  800421935a:	ff d0                	callq  *%rax
  800421935c:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  8004219363:	e9 ee 01 00 00       	jmpq   8004219556 <pci_func_enable+0x223>
  8004219368:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421936b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421936f:	89 d6                	mov    %edx,%esi
  8004219371:	48 89 c7             	mov    %rax,%rdi
  8004219374:	48 b8 7c 8c 21 04 80 	movabs $0x8004218c7c,%rax
  800421937b:	00 00 00 
  800421937e:	ff d0                	callq  *%rax
  8004219380:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004219383:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  800421938a:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421938d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219391:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004219396:	89 ce                	mov    %ecx,%esi
  8004219398:	48 89 c7             	mov    %rax,%rdi
  800421939b:	48 b8 d1 8c 21 04 80 	movabs $0x8004218cd1,%rax
  80042193a2:	00 00 00 
  80042193a5:	ff d0                	callq  *%rax
  80042193a7:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042193aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042193ae:	89 d6                	mov    %edx,%esi
  80042193b0:	48 89 c7             	mov    %rax,%rdi
  80042193b3:	48 b8 7c 8c 21 04 80 	movabs $0x8004218c7c,%rax
  80042193ba:	00 00 00 
  80042193bd:	ff d0                	callq  *%rax
  80042193bf:	89 45 e8             	mov    %eax,-0x18(%rbp)
  80042193c2:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  80042193c6:	75 05                	jne    80042193cd <pci_func_enable+0x9a>
  80042193c8:	e9 83 01 00 00       	jmpq   8004219550 <pci_func_enable+0x21d>
  80042193cd:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042193d0:	83 e8 10             	sub    $0x10,%eax
  80042193d3:	c1 e8 02             	shr    $0x2,%eax
  80042193d6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042193d9:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042193dc:	83 e0 01             	and    $0x1,%eax
  80042193df:	85 c0                	test   %eax,%eax
  80042193e1:	75 65                	jne    8004219448 <pci_func_enable+0x115>
  80042193e3:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042193e6:	83 e0 06             	and    $0x6,%eax
  80042193e9:	83 f8 04             	cmp    $0x4,%eax
  80042193ec:	75 07                	jne    80042193f5 <pci_func_enable+0xc2>
  80042193ee:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  80042193f5:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042193f8:	83 e0 f0             	and    $0xfffffff0,%eax
  80042193fb:	f7 d8                	neg    %eax
  80042193fd:	23 45 e8             	and    -0x18(%rbp),%eax
  8004219400:	83 e0 f0             	and    $0xfffffff0,%eax
  8004219403:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004219406:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219409:	83 e0 f0             	and    $0xfffffff0,%eax
  800421940c:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421940f:	48 b8 a0 c5 6d 04 80 	movabs $0x80046dc5a0,%rax
  8004219416:	00 00 00 
  8004219419:	8b 00                	mov    (%rax),%eax
  800421941b:	85 c0                	test   %eax,%eax
  800421941d:	74 7a                	je     8004219499 <pci_func_enable+0x166>
  800421941f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004219422:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219425:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004219428:	89 c6                	mov    %eax,%esi
  800421942a:	48 bf 70 18 22 04 80 	movabs $0x8004221870,%rdi
  8004219431:	00 00 00 
  8004219434:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219439:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004219440:	00 00 00 
  8004219443:	41 ff d0             	callq  *%r8
  8004219446:	eb 51                	jmp    8004219499 <pci_func_enable+0x166>
  8004219448:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421944b:	83 e0 fc             	and    $0xfffffffc,%eax
  800421944e:	f7 d8                	neg    %eax
  8004219450:	23 45 e8             	and    -0x18(%rbp),%eax
  8004219453:	83 e0 fc             	and    $0xfffffffc,%eax
  8004219456:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004219459:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421945c:	83 e0 fc             	and    $0xfffffffc,%eax
  800421945f:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219462:	48 b8 a0 c5 6d 04 80 	movabs $0x80046dc5a0,%rax
  8004219469:	00 00 00 
  800421946c:	8b 00                	mov    (%rax),%eax
  800421946e:	85 c0                	test   %eax,%eax
  8004219470:	74 27                	je     8004219499 <pci_func_enable+0x166>
  8004219472:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004219475:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219478:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421947b:	89 c6                	mov    %eax,%esi
  800421947d:	48 bf 98 18 22 04 80 	movabs $0x8004221898,%rdi
  8004219484:	00 00 00 
  8004219487:	b8 00 00 00 00       	mov    $0x0,%eax
  800421948c:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004219493:	00 00 00 
  8004219496:	41 ff d0             	callq  *%r8
  8004219499:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421949c:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421949f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042194a3:	89 ce                	mov    %ecx,%esi
  80042194a5:	48 89 c7             	mov    %rax,%rdi
  80042194a8:	48 b8 d1 8c 21 04 80 	movabs $0x8004218cd1,%rax
  80042194af:	00 00 00 
  80042194b2:	ff d0                	callq  *%rax
  80042194b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042194b8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042194bb:	48 63 d2             	movslq %edx,%rdx
  80042194be:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  80042194c2:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042194c5:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  80042194c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042194cd:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042194d0:	48 63 d2             	movslq %edx,%rdx
  80042194d3:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  80042194d7:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042194da:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  80042194dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  80042194e1:	74 6d                	je     8004219550 <pci_func_enable+0x21d>
  80042194e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042194e7:	75 67                	jne    8004219550 <pci_func_enable+0x21d>
  80042194e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042194ed:	8b 40 10             	mov    0x10(%rax),%eax
  80042194f0:	c1 e8 10             	shr    $0x10,%eax
  80042194f3:	41 89 c0             	mov    %eax,%r8d
  80042194f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042194fa:	8b 40 10             	mov    0x10(%rax),%eax
  80042194fd:	0f b7 f8             	movzwl %ax,%edi
  8004219500:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219504:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004219507:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421950b:	8b 50 08             	mov    0x8(%rax),%edx
  800421950e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219512:	48 8b 00             	mov    (%rax),%rax
  8004219515:	8b 40 08             	mov    0x8(%rax),%eax
  8004219518:	8b 75 f0             	mov    -0x10(%rbp),%esi
  800421951b:	89 74 24 10          	mov    %esi,0x10(%rsp)
  800421951f:	8b 75 f4             	mov    -0xc(%rbp),%esi
  8004219522:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004219526:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  8004219529:	89 34 24             	mov    %esi,(%rsp)
  800421952c:	45 89 c1             	mov    %r8d,%r9d
  800421952f:	41 89 f8             	mov    %edi,%r8d
  8004219532:	89 c6                	mov    %eax,%esi
  8004219534:	48 bf c0 18 22 04 80 	movabs $0x80042218c0,%rdi
  800421953b:	00 00 00 
  800421953e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219543:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  800421954a:	00 00 00 
  800421954d:	41 ff d2             	callq  *%r10
  8004219550:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219553:	01 45 f8             	add    %eax,-0x8(%rbp)
  8004219556:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  800421955a:	0f 86 08 fe ff ff    	jbe    8004219368 <pci_func_enable+0x35>
  8004219560:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219564:	8b 40 10             	mov    0x10(%rax),%eax
  8004219567:	c1 e8 10             	shr    $0x10,%eax
  800421956a:	89 c7                	mov    %eax,%edi
  800421956c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219570:	8b 40 10             	mov    0x10(%rax),%eax
  8004219573:	0f b7 f0             	movzwl %ax,%esi
  8004219576:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421957a:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421957d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219581:	8b 50 08             	mov    0x8(%rax),%edx
  8004219584:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219588:	48 8b 00             	mov    (%rax),%rax
  800421958b:	8b 40 08             	mov    0x8(%rax),%eax
  800421958e:	41 89 f9             	mov    %edi,%r9d
  8004219591:	41 89 f0             	mov    %esi,%r8d
  8004219594:	89 c6                	mov    %eax,%esi
  8004219596:	48 bf 20 19 22 04 80 	movabs $0x8004221920,%rdi
  800421959d:	00 00 00 
  80042195a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042195a5:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  80042195ac:	00 00 00 
  80042195af:	41 ff d2             	callq  *%r10
  80042195b2:	c9                   	leaveq 
  80042195b3:	c3                   	retq   

00000080042195b4 <pci_init>:
  80042195b4:	55                   	push   %rbp
  80042195b5:	48 89 e5             	mov    %rsp,%rbp
  80042195b8:	ba 10 00 00 00       	mov    $0x10,%edx
  80042195bd:	be 00 00 00 00       	mov    $0x0,%esi
  80042195c2:	48 bf b0 c5 6d 04 80 	movabs $0x80046dc5b0,%rdi
  80042195c9:	00 00 00 
  80042195cc:	48 b8 c8 0d 21 04 80 	movabs $0x8004210dc8,%rax
  80042195d3:	00 00 00 
  80042195d6:	ff d0                	callq  *%rax
  80042195d8:	48 bf b0 c5 6d 04 80 	movabs $0x80046dc5b0,%rdi
  80042195df:	00 00 00 
  80042195e2:	48 b8 83 8f 21 04 80 	movabs $0x8004218f83,%rax
  80042195e9:	00 00 00 
  80042195ec:	ff d0                	callq  *%rax
  80042195ee:	5d                   	pop    %rbp
  80042195ef:	c3                   	retq   

00000080042195f0 <time_init>:
  80042195f0:	55                   	push   %rbp
  80042195f1:	48 89 e5             	mov    %rsp,%rbp
  80042195f4:	48 b8 c0 c5 6d 04 80 	movabs $0x80046dc5c0,%rax
  80042195fb:	00 00 00 
  80042195fe:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004219604:	5d                   	pop    %rbp
  8004219605:	c3                   	retq   

0000008004219606 <time_tick>:
  8004219606:	55                   	push   %rbp
  8004219607:	48 89 e5             	mov    %rsp,%rbp
  800421960a:	48 b8 c0 c5 6d 04 80 	movabs $0x80046dc5c0,%rax
  8004219611:	00 00 00 
  8004219614:	8b 00                	mov    (%rax),%eax
  8004219616:	8d 50 01             	lea    0x1(%rax),%edx
  8004219619:	48 b8 c0 c5 6d 04 80 	movabs $0x80046dc5c0,%rax
  8004219620:	00 00 00 
  8004219623:	89 10                	mov    %edx,(%rax)
  8004219625:	48 b8 c0 c5 6d 04 80 	movabs $0x80046dc5c0,%rax
  800421962c:	00 00 00 
  800421962f:	8b 10                	mov    (%rax),%edx
  8004219631:	89 d0                	mov    %edx,%eax
  8004219633:	c1 e0 02             	shl    $0x2,%eax
  8004219636:	01 d0                	add    %edx,%eax
  8004219638:	01 c0                	add    %eax,%eax
  800421963a:	89 c2                	mov    %eax,%edx
  800421963c:	48 b8 c0 c5 6d 04 80 	movabs $0x80046dc5c0,%rax
  8004219643:	00 00 00 
  8004219646:	8b 00                	mov    (%rax),%eax
  8004219648:	39 c2                	cmp    %eax,%edx
  800421964a:	73 2a                	jae    8004219676 <time_tick+0x70>
  800421964c:	48 ba 4f 19 22 04 80 	movabs $0x800422194f,%rdx
  8004219653:	00 00 00 
  8004219656:	be 14 00 00 00       	mov    $0x14,%esi
  800421965b:	48 bf 6a 19 22 04 80 	movabs $0x800422196a,%rdi
  8004219662:	00 00 00 
  8004219665:	b8 00 00 00 00       	mov    $0x0,%eax
  800421966a:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219671:	00 00 00 
  8004219674:	ff d1                	callq  *%rcx
  8004219676:	5d                   	pop    %rbp
  8004219677:	c3                   	retq   

0000008004219678 <time_msec>:
  8004219678:	55                   	push   %rbp
  8004219679:	48 89 e5             	mov    %rsp,%rbp
  800421967c:	48 b8 c0 c5 6d 04 80 	movabs $0x80046dc5c0,%rax
  8004219683:	00 00 00 
  8004219686:	8b 10                	mov    (%rax),%edx
  8004219688:	89 d0                	mov    %edx,%eax
  800421968a:	c1 e0 02             	shl    $0x2,%eax
  800421968d:	01 d0                	add    %edx,%eax
  800421968f:	01 c0                	add    %eax,%eax
  8004219691:	5d                   	pop    %rbp
  8004219692:	c3                   	retq   

0000008004219693 <page2ppn>:
  8004219693:	55                   	push   %rbp
  8004219694:	48 89 e5             	mov    %rsp,%rbp
  8004219697:	48 83 ec 08          	sub    $0x8,%rsp
  800421969b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421969f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042196a3:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  80042196aa:	00 00 00 
  80042196ad:	48 8b 00             	mov    (%rax),%rax
  80042196b0:	48 29 c2             	sub    %rax,%rdx
  80042196b3:	48 89 d0             	mov    %rdx,%rax
  80042196b6:	48 c1 f8 04          	sar    $0x4,%rax
  80042196ba:	c9                   	leaveq 
  80042196bb:	c3                   	retq   

00000080042196bc <page2pa>:
  80042196bc:	55                   	push   %rbp
  80042196bd:	48 89 e5             	mov    %rsp,%rbp
  80042196c0:	48 83 ec 08          	sub    $0x8,%rsp
  80042196c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042196c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042196cc:	48 89 c7             	mov    %rax,%rdi
  80042196cf:	48 b8 93 96 21 04 80 	movabs $0x8004219693,%rax
  80042196d6:	00 00 00 
  80042196d9:	ff d0                	callq  *%rax
  80042196db:	48 c1 e0 0c          	shl    $0xc,%rax
  80042196df:	c9                   	leaveq 
  80042196e0:	c3                   	retq   

00000080042196e1 <pa2page>:
  80042196e1:	55                   	push   %rbp
  80042196e2:	48 89 e5             	mov    %rsp,%rbp
  80042196e5:	48 83 ec 10          	sub    $0x10,%rsp
  80042196e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042196ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042196f1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042196f5:	48 89 c2             	mov    %rax,%rdx
  80042196f8:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  80042196ff:	00 00 00 
  8004219702:	48 8b 00             	mov    (%rax),%rax
  8004219705:	48 39 c2             	cmp    %rax,%rdx
  8004219708:	72 2a                	jb     8004219734 <pa2page+0x53>
  800421970a:	48 ba 80 19 22 04 80 	movabs $0x8004221980,%rdx
  8004219711:	00 00 00 
  8004219714:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004219719:	48 bf 9f 19 22 04 80 	movabs $0x800422199f,%rdi
  8004219720:	00 00 00 
  8004219723:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219728:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421972f:	00 00 00 
  8004219732:	ff d1                	callq  *%rcx
  8004219734:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  800421973b:	00 00 00 
  800421973e:	48 8b 00             	mov    (%rax),%rax
  8004219741:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219745:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004219749:	48 c1 e2 04          	shl    $0x4,%rdx
  800421974d:	48 01 d0             	add    %rdx,%rax
  8004219750:	c9                   	leaveq 
  8004219751:	c3                   	retq   

0000008004219752 <page2kva>:
  8004219752:	55                   	push   %rbp
  8004219753:	48 89 e5             	mov    %rsp,%rbp
  8004219756:	48 83 ec 20          	sub    $0x20,%rsp
  800421975a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421975e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219762:	48 89 c7             	mov    %rax,%rdi
  8004219765:	48 b8 bc 96 21 04 80 	movabs $0x80042196bc,%rax
  800421976c:	00 00 00 
  800421976f:	ff d0                	callq  *%rax
  8004219771:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219775:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219779:	48 c1 e8 0c          	shr    $0xc,%rax
  800421977d:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219780:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004219783:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800421978a:	00 00 00 
  800421978d:	48 8b 00             	mov    (%rax),%rax
  8004219790:	48 39 c2             	cmp    %rax,%rdx
  8004219793:	72 32                	jb     80042197c7 <page2kva+0x75>
  8004219795:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219799:	48 89 c1             	mov    %rax,%rcx
  800421979c:	48 ba b0 19 22 04 80 	movabs $0x80042219b0,%rdx
  80042197a3:	00 00 00 
  80042197a6:	be 62 00 00 00       	mov    $0x62,%esi
  80042197ab:	48 bf 9f 19 22 04 80 	movabs $0x800422199f,%rdi
  80042197b2:	00 00 00 
  80042197b5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042197ba:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042197c1:	00 00 00 
  80042197c4:	41 ff d0             	callq  *%r8
  80042197c7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042197ce:	00 00 00 
  80042197d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042197d5:	48 01 d0             	add    %rdx,%rax
  80042197d8:	c9                   	leaveq 
  80042197d9:	c3                   	retq   

00000080042197da <epte_addr>:
  80042197da:	55                   	push   %rbp
  80042197db:	48 89 e5             	mov    %rsp,%rbp
  80042197de:	48 83 ec 08          	sub    $0x8,%rsp
  80042197e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042197e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042197ea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042197f0:	c9                   	leaveq 
  80042197f1:	c3                   	retq   

00000080042197f2 <epte_page_vaddr>:
  80042197f2:	55                   	push   %rbp
  80042197f3:	48 89 e5             	mov    %rsp,%rbp
  80042197f6:	48 83 ec 20          	sub    $0x20,%rsp
  80042197fa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042197fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219802:	48 89 c7             	mov    %rax,%rdi
  8004219805:	48 b8 da 97 21 04 80 	movabs $0x80042197da,%rax
  800421980c:	00 00 00 
  800421980f:	ff d0                	callq  *%rax
  8004219811:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219815:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219819:	48 c1 e8 0c          	shr    $0xc,%rax
  800421981d:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219820:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004219823:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800421982a:	00 00 00 
  800421982d:	48 8b 00             	mov    (%rax),%rax
  8004219830:	48 39 c2             	cmp    %rax,%rdx
  8004219833:	72 32                	jb     8004219867 <epte_page_vaddr+0x75>
  8004219835:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219839:	48 89 c1             	mov    %rax,%rcx
  800421983c:	48 ba b0 19 22 04 80 	movabs $0x80042219b0,%rdx
  8004219843:	00 00 00 
  8004219846:	be 13 00 00 00       	mov    $0x13,%esi
  800421984b:	48 bf d3 19 22 04 80 	movabs $0x80042219d3,%rdi
  8004219852:	00 00 00 
  8004219855:	b8 00 00 00 00       	mov    $0x0,%eax
  800421985a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219861:	00 00 00 
  8004219864:	41 ff d0             	callq  *%r8
  8004219867:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421986e:	00 00 00 
  8004219871:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219875:	48 01 d0             	add    %rdx,%rax
  8004219878:	c9                   	leaveq 
  8004219879:	c3                   	retq   

000000800421987a <epte_present>:
  800421987a:	55                   	push   %rbp
  800421987b:	48 89 e5             	mov    %rsp,%rbp
  800421987e:	48 83 ec 08          	sub    $0x8,%rsp
  8004219882:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219886:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421988a:	83 e0 07             	and    $0x7,%eax
  800421988d:	48 85 c0             	test   %rax,%rax
  8004219890:	0f 95 c0             	setne  %al
  8004219893:	0f b6 c0             	movzbl %al,%eax
  8004219896:	c9                   	leaveq 
  8004219897:	c3                   	retq   

0000008004219898 <ept_lookup_gpa>:
  8004219898:	55                   	push   %rbp
  8004219899:	48 89 e5             	mov    %rsp,%rbp
  800421989c:	48 83 ec 30          	sub    $0x30,%rsp
  80042198a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042198a4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042198a8:	89 55 dc             	mov    %edx,-0x24(%rbp)
  80042198ab:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  80042198af:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042198b4:	75 07                	jne    80042198bd <ept_lookup_gpa+0x25>
  80042198b6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  80042198bb:	eb 49                	jmp    8004219906 <ept_lookup_gpa+0x6e>
  80042198bd:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042198c0:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  80042198c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042198c8:	b9 07 00 00 00       	mov    $0x7,%ecx
  80042198cd:	48 89 c7             	mov    %rax,%rdi
  80042198d0:	48 b8 08 99 21 04 80 	movabs $0x8004219908,%rax
  80042198d7:	00 00 00 
  80042198da:	ff d0                	callq  *%rax
  80042198dc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042198e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042198e4:	48 85 c0             	test   %rax,%rax
  80042198e7:	79 06                	jns    80042198ef <ept_lookup_gpa+0x57>
  80042198e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042198ed:	eb 17                	jmp    8004219906 <ept_lookup_gpa+0x6e>
  80042198ef:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042198f4:	74 0b                	je     8004219901 <ept_lookup_gpa+0x69>
  80042198f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042198fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042198fe:	48 89 10             	mov    %rdx,(%rax)
  8004219901:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219906:	c9                   	leaveq 
  8004219907:	c3                   	retq   

0000008004219908 <ept_walk_1>:
  8004219908:	55                   	push   %rbp
  8004219909:	48 89 e5             	mov    %rsp,%rbp
  800421990c:	53                   	push   %rbx
  800421990d:	48 83 ec 68          	sub    $0x68,%rsp
  8004219911:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004219915:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004219919:	89 55 9c             	mov    %edx,-0x64(%rbp)
  800421991c:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004219920:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004219925:	0f 84 71 02 00 00    	je     8004219b9c <ept_walk_1+0x294>
  800421992b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421992f:	48 c1 e8 27          	shr    $0x27,%rax
  8004219933:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219938:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421993f:	00 
  8004219940:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004219944:	48 01 d0             	add    %rdx,%rax
  8004219947:	48 8b 00             	mov    (%rax),%rax
  800421994a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421994e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219952:	83 e0 01             	and    $0x1,%eax
  8004219955:	48 85 c0             	test   %rax,%rax
  8004219958:	0f 85 83 01 00 00    	jne    8004219ae1 <ept_walk_1+0x1d9>
  800421995e:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004219962:	0f 84 79 01 00 00    	je     8004219ae1 <ept_walk_1+0x1d9>
  8004219968:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800421996f:	00 
  8004219970:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219975:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421997c:	00 00 00 
  800421997f:	ff d0                	callq  *%rax
  8004219981:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219985:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421998a:	0f 84 45 01 00 00    	je     8004219ad5 <ept_walk_1+0x1cd>
  8004219990:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219994:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219998:	8d 50 01             	lea    0x1(%rax),%edx
  800421999b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421999f:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042199a3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042199a7:	48 c1 e8 27          	shr    $0x27,%rax
  80042199ab:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042199b0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042199b7:	00 
  80042199b8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042199bc:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042199c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042199c4:	48 89 c7             	mov    %rax,%rdi
  80042199c7:	48 b8 bc 96 21 04 80 	movabs $0x80042196bc,%rax
  80042199ce:	00 00 00 
  80042199d1:	ff d0                	callq  *%rax
  80042199d3:	48 0b 45 90          	or     -0x70(%rbp),%rax
  80042199d7:	48 89 03             	mov    %rax,(%rbx)
  80042199da:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042199de:	48 c1 e8 27          	shr    $0x27,%rax
  80042199e2:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042199e7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042199ee:	00 
  80042199ef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042199f3:	48 01 d0             	add    %rdx,%rax
  80042199f6:	48 8b 00             	mov    (%rax),%rax
  80042199f9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042199ff:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004219a03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219a07:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219a0b:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004219a0e:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004219a11:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004219a18:	00 00 00 
  8004219a1b:	48 8b 00             	mov    (%rax),%rax
  8004219a1e:	48 39 c2             	cmp    %rax,%rdx
  8004219a21:	72 32                	jb     8004219a55 <ept_walk_1+0x14d>
  8004219a23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219a27:	48 89 c1             	mov    %rax,%rcx
  8004219a2a:	48 ba b0 19 22 04 80 	movabs $0x80042219b0,%rdx
  8004219a31:	00 00 00 
  8004219a34:	be 79 02 00 00       	mov    $0x279,%esi
  8004219a39:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  8004219a40:	00 00 00 
  8004219a43:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219a48:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219a4f:	00 00 00 
  8004219a52:	41 ff d0             	callq  *%r8
  8004219a55:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219a5c:	00 00 00 
  8004219a5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219a63:	48 01 d0             	add    %rdx,%rax
  8004219a66:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  8004219a6a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004219a6d:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004219a71:	48 89 c7             	mov    %rax,%rdi
  8004219a74:	48 b8 a8 9b 21 04 80 	movabs $0x8004219ba8,%rax
  8004219a7b:	00 00 00 
  8004219a7e:	ff d0                	callq  *%rax
  8004219a80:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004219a84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219a88:	48 85 c0             	test   %rax,%rax
  8004219a8b:	79 09                	jns    8004219a96 <ept_walk_1+0x18e>
  8004219a8d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219a91:	e9 0b 01 00 00       	jmpq   8004219ba1 <ept_walk_1+0x299>
  8004219a96:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004219a9a:	48 c1 e8 27          	shr    $0x27,%rax
  8004219a9e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219aa3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219aaa:	00 
  8004219aab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004219aaf:	48 01 d0             	add    %rdx,%rax
  8004219ab2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004219ab9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219abd:	48 89 c7             	mov    %rax,%rdi
  8004219ac0:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219ac7:	00 00 00 
  8004219aca:	ff d0                	callq  *%rax
  8004219acc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219ad0:	e9 cc 00 00 00       	jmpq   8004219ba1 <ept_walk_1+0x299>
  8004219ad5:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
  8004219adc:	e9 c0 00 00 00       	jmpq   8004219ba1 <ept_walk_1+0x299>
  8004219ae1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219ae5:	83 e0 01             	and    $0x1,%eax
  8004219ae8:	48 85 c0             	test   %rax,%rax
  8004219aeb:	75 12                	jne    8004219aff <ept_walk_1+0x1f7>
  8004219aed:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004219af1:	75 0c                	jne    8004219aff <ept_walk_1+0x1f7>
  8004219af3:	48 c7 c0 eb ff ff ff 	mov    $0xffffffffffffffeb,%rax
  8004219afa:	e9 a2 00 00 00       	jmpq   8004219ba1 <ept_walk_1+0x299>
  8004219aff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219b03:	83 e0 01             	and    $0x1,%eax
  8004219b06:	48 85 c0             	test   %rax,%rax
  8004219b09:	0f 84 8d 00 00 00    	je     8004219b9c <ept_walk_1+0x294>
  8004219b0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219b13:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219b19:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004219b1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219b21:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219b25:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004219b28:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004219b2b:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004219b32:	00 00 00 
  8004219b35:	48 8b 00             	mov    (%rax),%rax
  8004219b38:	48 39 c2             	cmp    %rax,%rdx
  8004219b3b:	72 32                	jb     8004219b6f <ept_walk_1+0x267>
  8004219b3d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219b41:	48 89 c1             	mov    %rax,%rcx
  8004219b44:	48 ba b0 19 22 04 80 	movabs $0x80042219b0,%rdx
  8004219b4b:	00 00 00 
  8004219b4e:	be 85 02 00 00       	mov    $0x285,%esi
  8004219b53:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  8004219b5a:	00 00 00 
  8004219b5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b62:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219b69:	00 00 00 
  8004219b6c:	41 ff d0             	callq  *%r8
  8004219b6f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219b76:	00 00 00 
  8004219b79:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219b7d:	48 01 d0             	add    %rdx,%rax
  8004219b80:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  8004219b84:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004219b87:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004219b8b:	48 89 c7             	mov    %rax,%rdi
  8004219b8e:	48 b8 a8 9b 21 04 80 	movabs $0x8004219ba8,%rax
  8004219b95:	00 00 00 
  8004219b98:	ff d0                	callq  *%rax
  8004219b9a:	eb 05                	jmp    8004219ba1 <ept_walk_1+0x299>
  8004219b9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219ba1:	48 83 c4 68          	add    $0x68,%rsp
  8004219ba5:	5b                   	pop    %rbx
  8004219ba6:	5d                   	pop    %rbp
  8004219ba7:	c3                   	retq   

0000008004219ba8 <ept_walk_2>:
  8004219ba8:	55                   	push   %rbp
  8004219ba9:	48 89 e5             	mov    %rsp,%rbp
  8004219bac:	53                   	push   %rbx
  8004219bad:	48 83 ec 68          	sub    $0x68,%rsp
  8004219bb1:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004219bb5:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004219bb9:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004219bbc:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004219bc0:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004219bc5:	0f 84 71 02 00 00    	je     8004219e3c <ept_walk_2+0x294>
  8004219bcb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004219bcf:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004219bd3:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219bd8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219bdf:	00 
  8004219be0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004219be4:	48 01 d0             	add    %rdx,%rax
  8004219be7:	48 8b 00             	mov    (%rax),%rax
  8004219bea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219bee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219bf2:	83 e0 01             	and    $0x1,%eax
  8004219bf5:	48 85 c0             	test   %rax,%rax
  8004219bf8:	0f 85 83 01 00 00    	jne    8004219d81 <ept_walk_2+0x1d9>
  8004219bfe:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004219c02:	0f 84 79 01 00 00    	je     8004219d81 <ept_walk_2+0x1d9>
  8004219c08:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004219c0f:	00 
  8004219c10:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219c15:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219c1c:	00 00 00 
  8004219c1f:	ff d0                	callq  *%rax
  8004219c21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219c25:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004219c2a:	0f 84 45 01 00 00    	je     8004219d75 <ept_walk_2+0x1cd>
  8004219c30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219c34:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219c38:	8d 50 01             	lea    0x1(%rax),%edx
  8004219c3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219c3f:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219c43:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004219c47:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004219c4b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219c50:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219c57:	00 
  8004219c58:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004219c5c:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004219c60:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219c64:	48 89 c7             	mov    %rax,%rdi
  8004219c67:	48 b8 bc 96 21 04 80 	movabs $0x80042196bc,%rax
  8004219c6e:	00 00 00 
  8004219c71:	ff d0                	callq  *%rax
  8004219c73:	48 0b 45 90          	or     -0x70(%rbp),%rax
  8004219c77:	48 89 03             	mov    %rax,(%rbx)
  8004219c7a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004219c7e:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004219c82:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219c87:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219c8e:	00 
  8004219c8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004219c93:	48 01 d0             	add    %rdx,%rax
  8004219c96:	48 8b 00             	mov    (%rax),%rax
  8004219c99:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219c9f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004219ca3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219ca7:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219cab:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004219cae:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004219cb1:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004219cb8:	00 00 00 
  8004219cbb:	48 8b 00             	mov    (%rax),%rax
  8004219cbe:	48 39 c2             	cmp    %rax,%rdx
  8004219cc1:	72 32                	jb     8004219cf5 <ept_walk_2+0x14d>
  8004219cc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219cc7:	48 89 c1             	mov    %rax,%rcx
  8004219cca:	48 ba b0 19 22 04 80 	movabs $0x80042219b0,%rdx
  8004219cd1:	00 00 00 
  8004219cd4:	be 9c 02 00 00       	mov    $0x29c,%esi
  8004219cd9:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  8004219ce0:	00 00 00 
  8004219ce3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219ce8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219cef:	00 00 00 
  8004219cf2:	41 ff d0             	callq  *%r8
  8004219cf5:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219cfc:	00 00 00 
  8004219cff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219d03:	48 01 d0             	add    %rdx,%rax
  8004219d06:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  8004219d0a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004219d0d:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004219d11:	48 89 c7             	mov    %rax,%rdi
  8004219d14:	48 b8 48 9e 21 04 80 	movabs $0x8004219e48,%rax
  8004219d1b:	00 00 00 
  8004219d1e:	ff d0                	callq  *%rax
  8004219d20:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004219d24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219d28:	48 85 c0             	test   %rax,%rax
  8004219d2b:	79 09                	jns    8004219d36 <ept_walk_2+0x18e>
  8004219d2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219d31:	e9 0b 01 00 00       	jmpq   8004219e41 <ept_walk_2+0x299>
  8004219d36:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004219d3a:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004219d3e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219d43:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219d4a:	00 
  8004219d4b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004219d4f:	48 01 d0             	add    %rdx,%rax
  8004219d52:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004219d59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219d5d:	48 89 c7             	mov    %rax,%rdi
  8004219d60:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219d67:	00 00 00 
  8004219d6a:	ff d0                	callq  *%rax
  8004219d6c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219d70:	e9 cc 00 00 00       	jmpq   8004219e41 <ept_walk_2+0x299>
  8004219d75:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
  8004219d7c:	e9 c0 00 00 00       	jmpq   8004219e41 <ept_walk_2+0x299>
  8004219d81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219d85:	83 e0 01             	and    $0x1,%eax
  8004219d88:	48 85 c0             	test   %rax,%rax
  8004219d8b:	75 12                	jne    8004219d9f <ept_walk_2+0x1f7>
  8004219d8d:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004219d91:	75 0c                	jne    8004219d9f <ept_walk_2+0x1f7>
  8004219d93:	48 c7 c0 eb ff ff ff 	mov    $0xffffffffffffffeb,%rax
  8004219d9a:	e9 a2 00 00 00       	jmpq   8004219e41 <ept_walk_2+0x299>
  8004219d9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219da3:	83 e0 01             	and    $0x1,%eax
  8004219da6:	48 85 c0             	test   %rax,%rax
  8004219da9:	0f 84 8d 00 00 00    	je     8004219e3c <ept_walk_2+0x294>
  8004219daf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219db3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219db9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004219dbd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219dc1:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219dc5:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004219dc8:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004219dcb:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004219dd2:	00 00 00 
  8004219dd5:	48 8b 00             	mov    (%rax),%rax
  8004219dd8:	48 39 c2             	cmp    %rax,%rdx
  8004219ddb:	72 32                	jb     8004219e0f <ept_walk_2+0x267>
  8004219ddd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219de1:	48 89 c1             	mov    %rax,%rcx
  8004219de4:	48 ba b0 19 22 04 80 	movabs $0x80042219b0,%rdx
  8004219deb:	00 00 00 
  8004219dee:	be a8 02 00 00       	mov    $0x2a8,%esi
  8004219df3:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  8004219dfa:	00 00 00 
  8004219dfd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e02:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219e09:	00 00 00 
  8004219e0c:	41 ff d0             	callq  *%r8
  8004219e0f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219e16:	00 00 00 
  8004219e19:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219e1d:	48 01 d0             	add    %rdx,%rax
  8004219e20:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  8004219e24:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004219e27:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004219e2b:	48 89 c7             	mov    %rax,%rdi
  8004219e2e:	48 b8 48 9e 21 04 80 	movabs $0x8004219e48,%rax
  8004219e35:	00 00 00 
  8004219e38:	ff d0                	callq  *%rax
  8004219e3a:	eb 05                	jmp    8004219e41 <ept_walk_2+0x299>
  8004219e3c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e41:	48 83 c4 68          	add    $0x68,%rsp
  8004219e45:	5b                   	pop    %rbx
  8004219e46:	5d                   	pop    %rbp
  8004219e47:	c3                   	retq   

0000008004219e48 <ept_walk_3>:
  8004219e48:	55                   	push   %rbp
  8004219e49:	48 89 e5             	mov    %rsp,%rbp
  8004219e4c:	53                   	push   %rbx
  8004219e4d:	48 83 ec 58          	sub    $0x58,%rsp
  8004219e51:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004219e55:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004219e59:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004219e5c:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  8004219e60:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004219e65:	0f 84 1d 02 00 00    	je     800421a088 <ept_walk_3+0x240>
  8004219e6b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219e6f:	48 c1 e8 15          	shr    $0x15,%rax
  8004219e73:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219e78:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219e7f:	00 
  8004219e80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219e84:	48 01 d0             	add    %rdx,%rax
  8004219e87:	48 8b 00             	mov    (%rax),%rax
  8004219e8a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219e8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219e92:	83 e0 01             	and    $0x1,%eax
  8004219e95:	48 85 c0             	test   %rax,%rax
  8004219e98:	0f 85 31 01 00 00    	jne    8004219fcf <ept_walk_3+0x187>
  8004219e9e:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004219ea2:	0f 84 27 01 00 00    	je     8004219fcf <ept_walk_3+0x187>
  8004219ea8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004219eaf:	00 
  8004219eb0:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219eb5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219ebc:	00 00 00 
  8004219ebf:	ff d0                	callq  *%rax
  8004219ec1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219ec5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004219eca:	0f 84 f3 00 00 00    	je     8004219fc3 <ept_walk_3+0x17b>
  8004219ed0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219ed4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219ed8:	8d 50 01             	lea    0x1(%rax),%edx
  8004219edb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219edf:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219ee3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219ee7:	48 c1 e8 15          	shr    $0x15,%rax
  8004219eeb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219ef0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219ef7:	00 
  8004219ef8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219efc:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004219f00:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219f04:	48 89 c7             	mov    %rax,%rdi
  8004219f07:	48 b8 bc 96 21 04 80 	movabs $0x80042196bc,%rax
  8004219f0e:	00 00 00 
  8004219f11:	ff d0                	callq  *%rax
  8004219f13:	48 0b 45 a0          	or     -0x60(%rbp),%rax
  8004219f17:	48 89 03             	mov    %rax,(%rbx)
  8004219f1a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219f1e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219f22:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219f27:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219f2e:	00 
  8004219f2f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219f33:	48 c1 e8 15          	shr    $0x15,%rax
  8004219f37:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004219f3c:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  8004219f43:	00 
  8004219f44:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219f48:	48 01 c8             	add    %rcx,%rax
  8004219f4b:	48 8b 00             	mov    (%rax),%rax
  8004219f4e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219f54:	48 01 d0             	add    %rdx,%rax
  8004219f57:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004219f5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219f5f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219f63:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004219f66:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004219f69:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  8004219f70:	00 00 00 
  8004219f73:	48 8b 00             	mov    (%rax),%rax
  8004219f76:	48 39 c2             	cmp    %rax,%rdx
  8004219f79:	72 32                	jb     8004219fad <ept_walk_3+0x165>
  8004219f7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219f7f:	48 89 c1             	mov    %rax,%rcx
  8004219f82:	48 ba b0 19 22 04 80 	movabs $0x80042219b0,%rdx
  8004219f89:	00 00 00 
  8004219f8c:	be be 02 00 00       	mov    $0x2be,%esi
  8004219f91:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  8004219f98:	00 00 00 
  8004219f9b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219fa0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219fa7:	00 00 00 
  8004219faa:	41 ff d0             	callq  *%r8
  8004219fad:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219fb4:	00 00 00 
  8004219fb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219fbb:	48 01 d0             	add    %rdx,%rax
  8004219fbe:	e9 ca 00 00 00       	jmpq   800421a08d <ept_walk_3+0x245>
  8004219fc3:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
  8004219fca:	e9 be 00 00 00       	jmpq   800421a08d <ept_walk_3+0x245>
  8004219fcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219fd3:	83 e0 01             	and    $0x1,%eax
  8004219fd6:	48 85 c0             	test   %rax,%rax
  8004219fd9:	75 12                	jne    8004219fed <ept_walk_3+0x1a5>
  8004219fdb:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004219fdf:	75 0c                	jne    8004219fed <ept_walk_3+0x1a5>
  8004219fe1:	48 c7 c0 eb ff ff ff 	mov    $0xffffffffffffffeb,%rax
  8004219fe8:	e9 a0 00 00 00       	jmpq   800421a08d <ept_walk_3+0x245>
  8004219fed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219ff1:	83 e0 01             	and    $0x1,%eax
  8004219ff4:	48 85 c0             	test   %rax,%rax
  8004219ff7:	0f 84 8b 00 00 00    	je     800421a088 <ept_walk_3+0x240>
  8004219ffd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a001:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a005:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421a00a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a011:	00 
  800421a012:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a016:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800421a01c:	48 01 d0             	add    %rdx,%rax
  800421a01f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800421a023:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a027:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a02b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800421a02e:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800421a031:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800421a038:	00 00 00 
  800421a03b:	48 8b 00             	mov    (%rax),%rax
  800421a03e:	48 39 c2             	cmp    %rax,%rdx
  800421a041:	72 32                	jb     800421a075 <ept_walk_3+0x22d>
  800421a043:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a047:	48 89 c1             	mov    %rax,%rcx
  800421a04a:	48 ba b0 19 22 04 80 	movabs $0x80042219b0,%rdx
  800421a051:	00 00 00 
  800421a054:	be c5 02 00 00       	mov    $0x2c5,%esi
  800421a059:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a060:	00 00 00 
  800421a063:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a068:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a06f:	00 00 00 
  800421a072:	41 ff d0             	callq  *%r8
  800421a075:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421a07c:	00 00 00 
  800421a07f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a083:	48 01 d0             	add    %rdx,%rax
  800421a086:	eb 05                	jmp    800421a08d <ept_walk_3+0x245>
  800421a088:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a08d:	48 83 c4 58          	add    $0x58,%rsp
  800421a091:	5b                   	pop    %rbx
  800421a092:	5d                   	pop    %rbp
  800421a093:	c3                   	retq   

000000800421a094 <ept_gpa2hva>:
  800421a094:	55                   	push   %rbp
  800421a095:	48 89 e5             	mov    %rsp,%rbp
  800421a098:	48 83 ec 40          	sub    $0x40,%rsp
  800421a09c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421a0a0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421a0a4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421a0a8:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  800421a0ac:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421a0b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421a0b4:	48 89 d1             	mov    %rdx,%rcx
  800421a0b7:	ba 00 00 00 00       	mov    $0x0,%edx
  800421a0bc:	48 89 c7             	mov    %rax,%rdi
  800421a0bf:	48 b8 98 98 21 04 80 	movabs $0x8004219898,%rax
  800421a0c6:	00 00 00 
  800421a0c9:	ff d0                	callq  *%rax
  800421a0cb:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421a0ce:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421a0d2:	79 10                	jns    800421a0e4 <ept_gpa2hva+0x50>
  800421a0d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a0d8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421a0df:	e9 b1 00 00 00       	jmpq   800421a195 <ept_gpa2hva+0x101>
  800421a0e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a0e8:	48 8b 00             	mov    (%rax),%rax
  800421a0eb:	48 89 c7             	mov    %rax,%rdi
  800421a0ee:	48 b8 7a 98 21 04 80 	movabs $0x800421987a,%rax
  800421a0f5:	00 00 00 
  800421a0f8:	ff d0                	callq  *%rax
  800421a0fa:	85 c0                	test   %eax,%eax
  800421a0fc:	75 10                	jne    800421a10e <ept_gpa2hva+0x7a>
  800421a0fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a102:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421a109:	e9 87 00 00 00       	jmpq   800421a195 <ept_gpa2hva+0x101>
  800421a10e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a112:	48 8b 00             	mov    (%rax),%rax
  800421a115:	48 89 c7             	mov    %rax,%rdi
  800421a118:	48 b8 da 97 21 04 80 	movabs $0x80042197da,%rax
  800421a11f:	00 00 00 
  800421a122:	ff d0                	callq  *%rax
  800421a124:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421a128:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a12c:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a130:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421a133:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421a136:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800421a13d:	00 00 00 
  800421a140:	48 8b 00             	mov    (%rax),%rax
  800421a143:	48 39 c2             	cmp    %rax,%rdx
  800421a146:	72 32                	jb     800421a17a <ept_gpa2hva+0xe6>
  800421a148:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a14c:	48 89 c1             	mov    %rax,%rcx
  800421a14f:	48 ba b0 19 22 04 80 	movabs $0x80042219b0,%rdx
  800421a156:	00 00 00 
  800421a159:	be d8 02 00 00       	mov    $0x2d8,%esi
  800421a15e:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a165:	00 00 00 
  800421a168:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a16d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a174:	00 00 00 
  800421a177:	41 ff d0             	callq  *%r8
  800421a17a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421a181:	00 00 00 
  800421a184:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a188:	48 01 d0             	add    %rdx,%rax
  800421a18b:	48 89 c2             	mov    %rax,%rdx
  800421a18e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a192:	48 89 10             	mov    %rdx,(%rax)
  800421a195:	c9                   	leaveq 
  800421a196:	c3                   	retq   

000000800421a197 <free_ept_level>:
  800421a197:	55                   	push   %rbp
  800421a198:	48 89 e5             	mov    %rsp,%rbp
  800421a19b:	48 83 ec 40          	sub    $0x40,%rsp
  800421a19f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421a1a3:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800421a1a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a1aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421a1ae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421a1b5:	e9 82 01 00 00       	jmpq   800421a33c <free_ept_level+0x1a5>
  800421a1ba:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800421a1be:	0f 84 fe 00 00 00    	je     800421a2c2 <free_ept_level+0x12b>
  800421a1c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a1c7:	48 98                	cltq   
  800421a1c9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a1d0:	00 
  800421a1d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a1d5:	48 01 d0             	add    %rdx,%rax
  800421a1d8:	48 8b 00             	mov    (%rax),%rax
  800421a1db:	48 89 c7             	mov    %rax,%rdi
  800421a1de:	48 b8 7a 98 21 04 80 	movabs $0x800421987a,%rax
  800421a1e5:	00 00 00 
  800421a1e8:	ff d0                	callq  *%rax
  800421a1ea:	85 c0                	test   %eax,%eax
  800421a1ec:	0f 84 46 01 00 00    	je     800421a338 <free_ept_level+0x1a1>
  800421a1f2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a1f5:	48 98                	cltq   
  800421a1f7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a1fe:	00 
  800421a1ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a203:	48 01 d0             	add    %rdx,%rax
  800421a206:	48 8b 00             	mov    (%rax),%rax
  800421a209:	48 89 c7             	mov    %rax,%rdi
  800421a20c:	48 b8 da 97 21 04 80 	movabs $0x80042197da,%rax
  800421a213:	00 00 00 
  800421a216:	ff d0                	callq  *%rax
  800421a218:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421a21c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421a21f:	8d 50 ff             	lea    -0x1(%rax),%edx
  800421a222:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a226:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a22a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a22e:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a232:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a235:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  800421a238:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800421a23f:	00 00 00 
  800421a242:	48 8b 00             	mov    (%rax),%rax
  800421a245:	48 39 c1             	cmp    %rax,%rcx
  800421a248:	72 32                	jb     800421a27c <free_ept_level+0xe5>
  800421a24a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a24e:	48 89 c1             	mov    %rax,%rcx
  800421a251:	48 ba b0 19 22 04 80 	movabs $0x80042219b0,%rdx
  800421a258:	00 00 00 
  800421a25b:	be e5 02 00 00       	mov    $0x2e5,%esi
  800421a260:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a267:	00 00 00 
  800421a26a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a26f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a276:	00 00 00 
  800421a279:	41 ff d0             	callq  *%r8
  800421a27c:	48 b9 00 00 00 04 80 	movabs $0x8004000000,%rcx
  800421a283:	00 00 00 
  800421a286:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a28a:	48 01 c8             	add    %rcx,%rax
  800421a28d:	89 d6                	mov    %edx,%esi
  800421a28f:	48 89 c7             	mov    %rax,%rdi
  800421a292:	48 b8 97 a1 21 04 80 	movabs $0x800421a197,%rax
  800421a299:	00 00 00 
  800421a29c:	ff d0                	callq  *%rax
  800421a29e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a2a2:	48 89 c7             	mov    %rax,%rdi
  800421a2a5:	48 b8 e1 96 21 04 80 	movabs $0x80042196e1,%rax
  800421a2ac:	00 00 00 
  800421a2af:	ff d0                	callq  *%rax
  800421a2b1:	48 89 c7             	mov    %rax,%rdi
  800421a2b4:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421a2bb:	00 00 00 
  800421a2be:	ff d0                	callq  *%rax
  800421a2c0:	eb 76                	jmp    800421a338 <free_ept_level+0x1a1>
  800421a2c2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a2c5:	48 98                	cltq   
  800421a2c7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a2ce:	00 
  800421a2cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a2d3:	48 01 d0             	add    %rdx,%rax
  800421a2d6:	48 8b 00             	mov    (%rax),%rax
  800421a2d9:	48 89 c7             	mov    %rax,%rdi
  800421a2dc:	48 b8 7a 98 21 04 80 	movabs $0x800421987a,%rax
  800421a2e3:	00 00 00 
  800421a2e6:	ff d0                	callq  *%rax
  800421a2e8:	85 c0                	test   %eax,%eax
  800421a2ea:	74 4c                	je     800421a338 <free_ept_level+0x1a1>
  800421a2ec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a2ef:	48 98                	cltq   
  800421a2f1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a2f8:	00 
  800421a2f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a2fd:	48 01 d0             	add    %rdx,%rax
  800421a300:	48 8b 00             	mov    (%rax),%rax
  800421a303:	48 89 c7             	mov    %rax,%rdi
  800421a306:	48 b8 da 97 21 04 80 	movabs $0x80042197da,%rax
  800421a30d:	00 00 00 
  800421a310:	ff d0                	callq  *%rax
  800421a312:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421a316:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a31a:	48 89 c7             	mov    %rax,%rdi
  800421a31d:	48 b8 e1 96 21 04 80 	movabs $0x80042196e1,%rax
  800421a324:	00 00 00 
  800421a327:	ff d0                	callq  *%rax
  800421a329:	48 89 c7             	mov    %rax,%rdi
  800421a32c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421a333:	00 00 00 
  800421a336:	ff d0                	callq  *%rax
  800421a338:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421a33c:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  800421a343:	0f 8e 71 fe ff ff    	jle    800421a1ba <free_ept_level+0x23>
  800421a349:	90                   	nop
  800421a34a:	c9                   	leaveq 
  800421a34b:	c3                   	retq   

000000800421a34c <free_guest_mem>:
  800421a34c:	55                   	push   %rbp
  800421a34d:	48 89 e5             	mov    %rsp,%rbp
  800421a350:	48 83 ec 20          	sub    $0x20,%rsp
  800421a354:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421a358:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a35c:	be 03 00 00 00       	mov    $0x3,%esi
  800421a361:	48 89 c7             	mov    %rax,%rdi
  800421a364:	48 b8 97 a1 21 04 80 	movabs $0x800421a197,%rax
  800421a36b:	00 00 00 
  800421a36e:	ff d0                	callq  *%rax

static __inline void
tlbflush(void)
{
	uint64_t cr3;
	__asm __volatile("movq %%cr3,%0" : "=r" (cr3));
  800421a370:	0f 20 d8             	mov    %cr3,%rax
  800421a373:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (cr3));
  800421a377:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a37b:	0f 22 d8             	mov    %rax,%cr3
  800421a37e:	c9                   	leaveq 
  800421a37f:	c3                   	retq   

000000800421a380 <ept_page_insert>:
  800421a380:	55                   	push   %rbp
  800421a381:	48 89 e5             	mov    %rsp,%rbp
  800421a384:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421a388:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421a38c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421a390:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421a394:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  800421a397:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a39c:	c9                   	leaveq 
  800421a39d:	c3                   	retq   

000000800421a39e <ept_map_hva2gpa>:
  800421a39e:	55                   	push   %rbp
  800421a39f:	48 89 e5             	mov    %rsp,%rbp
  800421a3a2:	48 83 ec 40          	sub    $0x40,%rsp
  800421a3a6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421a3aa:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421a3ae:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421a3b2:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  800421a3b5:	44 89 45 c0          	mov    %r8d,-0x40(%rbp)
  800421a3b9:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  800421a3bd:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  800421a3c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421a3c5:	48 89 d1             	mov    %rdx,%rcx
  800421a3c8:	ba 01 00 00 00       	mov    $0x1,%edx
  800421a3cd:	48 89 c7             	mov    %rax,%rdi
  800421a3d0:	48 b8 98 98 21 04 80 	movabs $0x8004219898,%rax
  800421a3d7:	00 00 00 
  800421a3da:	ff d0                	callq  *%rax
  800421a3dc:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421a3df:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421a3e3:	74 08                	je     800421a3ed <ept_map_hva2gpa+0x4f>
  800421a3e5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a3e8:	e9 8d 00 00 00       	jmpq   800421a47a <ept_map_hva2gpa+0xdc>
  800421a3ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a3f1:	48 8b 00             	mov    (%rax),%rax
  800421a3f4:	48 85 c0             	test   %rax,%rax
  800421a3f7:	74 0d                	je     800421a406 <ept_map_hva2gpa+0x68>
  800421a3f9:	83 7d c0 00          	cmpl   $0x0,-0x40(%rbp)
  800421a3fd:	75 07                	jne    800421a406 <ept_map_hva2gpa+0x68>
  800421a3ff:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421a404:	eb 74                	jmp    800421a47a <ept_map_hva2gpa+0xdc>
  800421a406:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a40a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421a40e:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  800421a412:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800421a419:	00 00 00 
  800421a41c:	48 39 55 f0          	cmp    %rdx,-0x10(%rbp)
  800421a420:	77 32                	ja     800421a454 <ept_map_hva2gpa+0xb6>
  800421a422:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a426:	48 89 c1             	mov    %rax,%rcx
  800421a429:	48 ba f0 19 22 04 80 	movabs $0x80042219f0,%rdx
  800421a430:	00 00 00 
  800421a433:	be 21 03 00 00       	mov    $0x321,%esi
  800421a438:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a43f:	00 00 00 
  800421a442:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a447:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a44e:	00 00 00 
  800421a451:	41 ff d0             	callq  *%r8
  800421a454:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800421a45b:	ff ff ff 
  800421a45e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421a462:	48 01 d1             	add    %rdx,%rcx
  800421a465:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800421a468:	48 63 d2             	movslq %edx,%rdx
  800421a46b:	48 09 ca             	or     %rcx,%rdx
  800421a46e:	48 83 ca 70          	or     $0x70,%rdx
  800421a472:	48 89 10             	mov    %rdx,(%rax)
  800421a475:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a47a:	c9                   	leaveq 
  800421a47b:	c3                   	retq   

000000800421a47c <ept_alloc_static>:
  800421a47c:	55                   	push   %rbp
  800421a47d:	48 89 e5             	mov    %rsp,%rbp
  800421a480:	53                   	push   %rbx
  800421a481:	48 83 ec 48          	sub    $0x48,%rsp
  800421a485:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421a489:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421a48d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421a494:	00 
  800421a495:	eb 6e                	jmp    800421a505 <ept_alloc_static+0x89>
  800421a497:	bf 00 00 00 00       	mov    $0x0,%edi
  800421a49c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421a4a3:	00 00 00 
  800421a4a6:	ff d0                	callq  *%rax
  800421a4a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a4ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a4b0:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a4b4:	8d 50 01             	lea    0x1(%rax),%edx
  800421a4b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a4bb:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421a4bf:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  800421a4c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a4c7:	48 89 c7             	mov    %rax,%rdi
  800421a4ca:	48 b8 52 97 21 04 80 	movabs $0x8004219752,%rax
  800421a4d1:	00 00 00 
  800421a4d4:	ff d0                	callq  *%rax
  800421a4d6:	48 89 c6             	mov    %rax,%rsi
  800421a4d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a4dd:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a4e3:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421a4e8:	48 89 da             	mov    %rbx,%rdx
  800421a4eb:	48 89 c7             	mov    %rax,%rdi
  800421a4ee:	48 b8 9e a3 21 04 80 	movabs $0x800421a39e,%rax
  800421a4f5:	00 00 00 
  800421a4f8:	ff d0                	callq  *%rax
  800421a4fa:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a4fd:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800421a504:	00 
  800421a505:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421a50c:	00 
  800421a50d:	76 88                	jbe    800421a497 <ept_alloc_static+0x1b>
  800421a50f:	48 c7 45 e8 00 00 10 	movq   $0x100000,-0x18(%rbp)
  800421a516:	00 
  800421a517:	eb 6e                	jmp    800421a587 <ept_alloc_static+0x10b>
  800421a519:	bf 00 00 00 00       	mov    $0x0,%edi
  800421a51e:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421a525:	00 00 00 
  800421a528:	ff d0                	callq  *%rax
  800421a52a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421a52e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a532:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a536:	8d 50 01             	lea    0x1(%rax),%edx
  800421a539:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a53d:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421a541:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  800421a545:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a549:	48 89 c7             	mov    %rax,%rdi
  800421a54c:	48 b8 52 97 21 04 80 	movabs $0x8004219752,%rax
  800421a553:	00 00 00 
  800421a556:	ff d0                	callq  *%rax
  800421a558:	48 89 c6             	mov    %rax,%rsi
  800421a55b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a55f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a565:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421a56a:	48 89 da             	mov    %rbx,%rdx
  800421a56d:	48 89 c7             	mov    %rax,%rdi
  800421a570:	48 b8 9e a3 21 04 80 	movabs $0x800421a39e,%rax
  800421a577:	00 00 00 
  800421a57a:	ff d0                	callq  *%rax
  800421a57c:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a57f:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800421a586:	00 
  800421a587:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a58b:	48 8b 00             	mov    (%rax),%rax
  800421a58e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421a592:	77 85                	ja     800421a519 <ept_alloc_static+0x9d>
  800421a594:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a599:	48 83 c4 48          	add    $0x48,%rsp
  800421a59d:	5b                   	pop    %rbx
  800421a59e:	5d                   	pop    %rbp
  800421a59f:	c3                   	retq   

000000800421a5a0 <test_ept_map>:
  800421a5a0:	55                   	push   %rbp
  800421a5a1:	48 89 e5             	mov    %rsp,%rbp
  800421a5a4:	53                   	push   %rbx
  800421a5a5:	48 83 ec 48          	sub    $0x48,%rsp
  800421a5a9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  800421a5ad:	be 00 00 00 00       	mov    $0x0,%esi
  800421a5b2:	48 89 c7             	mov    %rax,%rdi
  800421a5b5:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  800421a5bc:	00 00 00 
  800421a5bf:	ff d0                	callq  *%rax
  800421a5c1:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a5c4:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a5c8:	79 30                	jns    800421a5fa <test_ept_map+0x5a>
  800421a5ca:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a5cd:	89 c1                	mov    %eax,%ecx
  800421a5cf:	48 ba 14 1a 22 04 80 	movabs $0x8004221a14,%rdx
  800421a5d6:	00 00 00 
  800421a5d9:	be 49 03 00 00       	mov    $0x349,%esi
  800421a5de:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a5e5:	00 00 00 
  800421a5e8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a5ed:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a5f4:	00 00 00 
  800421a5f7:	41 ff d0             	callq  *%r8
  800421a5fa:	bf 01 00 00 00       	mov    $0x1,%edi
  800421a5ff:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421a606:	00 00 00 
  800421a609:	ff d0                	callq  *%rax
  800421a60b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421a60f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421a614:	75 30                	jne    800421a646 <test_ept_map+0xa6>
  800421a616:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a619:	89 c1                	mov    %eax,%ecx
  800421a61b:	48 ba 31 1a 22 04 80 	movabs $0x8004221a31,%rdx
  800421a622:	00 00 00 
  800421a625:	be 4b 03 00 00       	mov    $0x34b,%esi
  800421a62a:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a631:	00 00 00 
  800421a634:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a639:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a640:	00 00 00 
  800421a643:	41 ff d0             	callq  *%r8
  800421a646:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a64a:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a651:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421a655:	b9 00 00 00 00       	mov    $0x0,%ecx
  800421a65a:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421a65f:	48 89 c7             	mov    %rax,%rdi
  800421a662:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800421a669:	00 00 00 
  800421a66c:	ff d0                	callq  *%rax
  800421a66e:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a671:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a675:	79 30                	jns    800421a6a7 <test_ept_map+0x107>
  800421a677:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a67a:	89 c1                	mov    %eax,%ecx
  800421a67c:	48 ba 4f 1a 22 04 80 	movabs $0x8004221a4f,%rdx
  800421a683:	00 00 00 
  800421a686:	be 4d 03 00 00       	mov    $0x34d,%esi
  800421a68b:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a692:	00 00 00 
  800421a695:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a69a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a6a1:	00 00 00 
  800421a6a4:	41 ff d0             	callq  *%r8
  800421a6a7:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421a6ae:	00 00 00 
  800421a6b1:	ff d0                	callq  *%rax
  800421a6b3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421a6b7:	48 b9 20 e0 6d 04 80 	movabs $0x80046de020,%rcx
  800421a6be:	00 00 00 
  800421a6c1:	48 98                	cltq   
  800421a6c3:	48 c1 e0 03          	shl    $0x3,%rax
  800421a6c7:	48 89 c6             	mov    %rax,%rsi
  800421a6ca:	48 c1 e6 04          	shl    $0x4,%rsi
  800421a6ce:	48 01 f0             	add    %rsi,%rax
  800421a6d1:	48 01 c8             	add    %rcx,%rax
  800421a6d4:	48 83 c0 08          	add    $0x8,%rax
  800421a6d8:	48 89 10             	mov    %rdx,(%rax)
  800421a6db:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a6df:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a6e5:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421a6e9:	89 d6                	mov    %edx,%esi
  800421a6eb:	48 89 c7             	mov    %rax,%rdi
  800421a6ee:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  800421a6f5:	00 00 00 
  800421a6f8:	ff d0                	callq  *%rax
  800421a6fa:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a6fd:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a701:	79 30                	jns    800421a733 <test_ept_map+0x193>
  800421a703:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a706:	89 c1                	mov    %eax,%ecx
  800421a708:	48 ba 14 1a 22 04 80 	movabs $0x8004221a14,%rdx
  800421a70f:	00 00 00 
  800421a712:	be 52 03 00 00       	mov    $0x352,%esi
  800421a717:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a71e:	00 00 00 
  800421a721:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a726:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a72d:	00 00 00 
  800421a730:	41 ff d0             	callq  *%r8
  800421a733:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a737:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a73d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a741:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a747:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a74d:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a752:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a757:	89 c7                	mov    %eax,%edi
  800421a759:	48 b8 90 f2 20 04 80 	movabs $0x800420f290,%rax
  800421a760:	00 00 00 
  800421a763:	ff d0                	callq  *%rax
  800421a765:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a768:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a76c:	79 4a                	jns    800421a7b8 <test_ept_map+0x218>
  800421a76e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a771:	89 c6                	mov    %eax,%esi
  800421a773:	48 bf 70 1a 22 04 80 	movabs $0x8004221a70,%rdi
  800421a77a:	00 00 00 
  800421a77d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a782:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a789:	00 00 00 
  800421a78c:	ff d2                	callq  *%rdx
  800421a78e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a792:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a798:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421a79c:	89 d6                	mov    %edx,%esi
  800421a79e:	48 89 c7             	mov    %rax,%rdi
  800421a7a1:	48 b8 90 81 20 04 80 	movabs $0x8004208190,%rax
  800421a7a8:	00 00 00 
  800421a7ab:	ff d0                	callq  *%rax
  800421a7ad:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a7b0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a7b4:	79 5c                	jns    800421a812 <test_ept_map+0x272>
  800421a7b6:	eb 2a                	jmp    800421a7e2 <test_ept_map+0x242>
  800421a7b8:	48 ba a8 1a 22 04 80 	movabs $0x8004221aa8,%rdx
  800421a7bf:	00 00 00 
  800421a7c2:	be 56 03 00 00       	mov    $0x356,%esi
  800421a7c7:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a7ce:	00 00 00 
  800421a7d1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a7d6:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a7dd:	00 00 00 
  800421a7e0:	ff d1                	callq  *%rcx
  800421a7e2:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a7e5:	89 c1                	mov    %eax,%ecx
  800421a7e7:	48 ba d0 1a 22 04 80 	movabs $0x8004221ad0,%rdx
  800421a7ee:	00 00 00 
  800421a7f1:	be 5b 03 00 00       	mov    $0x35b,%esi
  800421a7f6:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a7fd:	00 00 00 
  800421a800:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a805:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a80c:	00 00 00 
  800421a80f:	41 ff d0             	callq  *%r8
  800421a812:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a816:	48 c7 80 20 01 00 00 	movq   $0x401000,0x120(%rax)
  800421a81d:	00 10 40 00 
  800421a821:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a825:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a82b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a82f:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a835:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a83b:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a840:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  800421a847:	00 00 00 
  800421a84a:	89 c7                	mov    %eax,%edi
  800421a84c:	48 b8 90 f2 20 04 80 	movabs $0x800420f290,%rax
  800421a853:	00 00 00 
  800421a856:	ff d0                	callq  *%rax
  800421a858:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a85b:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a85f:	79 61                	jns    800421a8c2 <test_ept_map+0x322>
  800421a861:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a864:	89 c6                	mov    %eax,%esi
  800421a866:	48 bf f8 1a 22 04 80 	movabs $0x8004221af8,%rdi
  800421a86d:	00 00 00 
  800421a870:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a875:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a87c:	00 00 00 
  800421a87f:	ff d2                	callq  *%rdx
  800421a881:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a885:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a88b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a88f:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a895:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a89b:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a8a0:	be 01 00 40 00       	mov    $0x400001,%esi
  800421a8a5:	89 c7                	mov    %eax,%edi
  800421a8a7:	48 b8 90 f2 20 04 80 	movabs $0x800420f290,%rax
  800421a8ae:	00 00 00 
  800421a8b1:	ff d0                	callq  *%rax
  800421a8b3:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a8b6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a8ba:	0f 89 8d 00 00 00    	jns    800421a94d <test_ept_map+0x3ad>
  800421a8c0:	eb 2a                	jmp    800421a8ec <test_ept_map+0x34c>
  800421a8c2:	48 ba 30 1b 22 04 80 	movabs $0x8004221b30,%rdx
  800421a8c9:	00 00 00 
  800421a8cc:	be 62 03 00 00       	mov    $0x362,%esi
  800421a8d1:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a8d8:	00 00 00 
  800421a8db:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a8e0:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a8e7:	00 00 00 
  800421a8ea:	ff d1                	callq  *%rcx
  800421a8ec:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a8ef:	89 c6                	mov    %eax,%esi
  800421a8f1:	48 bf 60 1b 22 04 80 	movabs $0x8004221b60,%rdi
  800421a8f8:	00 00 00 
  800421a8fb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a900:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a907:	00 00 00 
  800421a90a:	ff d2                	callq  *%rdx
  800421a90c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a910:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a916:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a91a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a920:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a926:	b9 00 10 40 00       	mov    $0x401000,%ecx
  800421a92b:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a930:	89 c7                	mov    %eax,%edi
  800421a932:	48 b8 90 f2 20 04 80 	movabs $0x800420f290,%rax
  800421a939:	00 00 00 
  800421a93c:	ff d0                	callq  *%rax
  800421a93e:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a941:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a945:	0f 89 8d 00 00 00    	jns    800421a9d8 <test_ept_map+0x438>
  800421a94b:	eb 2a                	jmp    800421a977 <test_ept_map+0x3d7>
  800421a94d:	48 ba 98 1b 22 04 80 	movabs $0x8004221b98,%rdx
  800421a954:	00 00 00 
  800421a957:	be 66 03 00 00       	mov    $0x366,%esi
  800421a95c:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a963:	00 00 00 
  800421a966:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a96b:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a972:	00 00 00 
  800421a975:	ff d1                	callq  *%rcx
  800421a977:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a97a:	89 c6                	mov    %eax,%esi
  800421a97c:	48 bf c8 1b 22 04 80 	movabs $0x8004221bc8,%rdi
  800421a983:	00 00 00 
  800421a986:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a98b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a992:	00 00 00 
  800421a995:	ff d2                	callq  *%rdx
  800421a997:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a99b:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a9a1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a9a5:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a9ab:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a9b1:	b9 ff ff 3f 00       	mov    $0x3fffff,%ecx
  800421a9b6:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a9bb:	89 c7                	mov    %eax,%edi
  800421a9bd:	48 b8 90 f2 20 04 80 	movabs $0x800420f290,%rax
  800421a9c4:	00 00 00 
  800421a9c7:	ff d0                	callq  *%rax
  800421a9c9:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a9cc:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a9d0:	0f 89 8d 00 00 00    	jns    800421aa63 <test_ept_map+0x4c3>
  800421a9d6:	eb 2a                	jmp    800421aa02 <test_ept_map+0x462>
  800421a9d8:	48 ba 08 1c 22 04 80 	movabs $0x8004221c08,%rdx
  800421a9df:	00 00 00 
  800421a9e2:	be 6c 03 00 00       	mov    $0x36c,%esi
  800421a9e7:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421a9ee:	00 00 00 
  800421a9f1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a9f6:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a9fd:	00 00 00 
  800421aa00:	ff d1                	callq  *%rcx
  800421aa02:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421aa05:	89 c6                	mov    %eax,%esi
  800421aa07:	48 bf 38 1c 22 04 80 	movabs $0x8004221c38,%rdi
  800421aa0e:	00 00 00 
  800421aa11:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa16:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421aa1d:	00 00 00 
  800421aa20:	ff d2                	callq  *%rdx
  800421aa22:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421aa26:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421aa2c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421aa30:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421aa36:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421aa3c:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421aa41:	be 00 00 40 00       	mov    $0x400000,%esi
  800421aa46:	89 c7                	mov    %eax,%edi
  800421aa48:	48 b8 90 f2 20 04 80 	movabs $0x800420f290,%rax
  800421aa4f:	00 00 00 
  800421aa52:	ff d0                	callq  *%rax
  800421aa54:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421aa57:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421aa5b:	0f 89 8d 00 00 00    	jns    800421aaee <test_ept_map+0x54e>
  800421aa61:	eb 2a                	jmp    800421aa8d <test_ept_map+0x4ed>
  800421aa63:	48 ba 70 1c 22 04 80 	movabs $0x8004221c70,%rdx
  800421aa6a:	00 00 00 
  800421aa6d:	be 70 03 00 00       	mov    $0x370,%esi
  800421aa72:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421aa79:	00 00 00 
  800421aa7c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa81:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421aa88:	00 00 00 
  800421aa8b:	ff d1                	callq  *%rcx
  800421aa8d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421aa90:	89 c6                	mov    %eax,%esi
  800421aa92:	48 bf a0 1c 22 04 80 	movabs $0x8004221ca0,%rdi
  800421aa99:	00 00 00 
  800421aa9c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aaa1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421aaa8:	00 00 00 
  800421aaab:	ff d2                	callq  *%rdx
  800421aaad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421aab1:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421aab7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421aabb:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421aac1:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  800421aac7:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421aacc:	be 00 00 40 00       	mov    $0x400000,%esi
  800421aad1:	89 c7                	mov    %eax,%edi
  800421aad3:	48 b8 90 f2 20 04 80 	movabs $0x800420f290,%rax
  800421aada:	00 00 00 
  800421aadd:	ff d0                	callq  *%rax
  800421aadf:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421aae2:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421aae6:	0f 89 97 00 00 00    	jns    800421ab83 <test_ept_map+0x5e3>
  800421aaec:	eb 2a                	jmp    800421ab18 <test_ept_map+0x578>
  800421aaee:	48 ba e0 1c 22 04 80 	movabs $0x8004221ce0,%rdx
  800421aaf5:	00 00 00 
  800421aaf8:	be 76 03 00 00       	mov    $0x376,%esi
  800421aafd:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421ab04:	00 00 00 
  800421ab07:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ab0c:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421ab13:	00 00 00 
  800421ab16:	ff d1                	callq  *%rcx
  800421ab18:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421ab1b:	89 c6                	mov    %eax,%esi
  800421ab1d:	48 bf 08 1d 22 04 80 	movabs $0x8004221d08,%rdi
  800421ab24:	00 00 00 
  800421ab27:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ab2c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421ab33:	00 00 00 
  800421ab36:	ff d2                	callq  *%rdx
  800421ab38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ab3c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421ab40:	0f b7 c0             	movzwl %ax,%eax
  800421ab43:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421ab46:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ab4a:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421ab50:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421ab54:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421ab5a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421ab60:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421ab65:	be 00 00 40 00       	mov    $0x400000,%esi
  800421ab6a:	89 c7                	mov    %eax,%edi
  800421ab6c:	48 b8 90 f2 20 04 80 	movabs $0x800420f290,%rax
  800421ab73:	00 00 00 
  800421ab76:	ff d0                	callq  *%rax
  800421ab78:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421ab7b:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421ab7f:	79 5c                	jns    800421abdd <test_ept_map+0x63d>
  800421ab81:	eb 2a                	jmp    800421abad <test_ept_map+0x60d>
  800421ab83:	48 ba 48 1d 22 04 80 	movabs $0x8004221d48,%rdx
  800421ab8a:	00 00 00 
  800421ab8d:	be 7a 03 00 00       	mov    $0x37a,%esi
  800421ab92:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421ab99:	00 00 00 
  800421ab9c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aba1:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421aba8:	00 00 00 
  800421abab:	ff d1                	callq  *%rcx
  800421abad:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421abb0:	89 c1                	mov    %eax,%ecx
  800421abb2:	48 ba 70 1d 22 04 80 	movabs $0x8004221d70,%rdx
  800421abb9:	00 00 00 
  800421abbc:	be 7f 03 00 00       	mov    $0x37f,%esi
  800421abc1:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421abc8:	00 00 00 
  800421abcb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421abd0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421abd7:	00 00 00 
  800421abda:	41 ff d0             	callq  *%r8
  800421abdd:	48 bf 90 1d 22 04 80 	movabs $0x8004221d90,%rdi
  800421abe4:	00 00 00 
  800421abe7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421abec:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421abf3:	00 00 00 
  800421abf6:	ff d2                	callq  *%rdx
  800421abf8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421abfc:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421ac00:	0f b7 c0             	movzwl %ax,%eax
  800421ac03:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800421ac06:	83 c2 01             	add    $0x1,%edx
  800421ac09:	39 d0                	cmp    %edx,%eax
  800421ac0b:	74 2a                	je     800421ac37 <test_ept_map+0x697>
  800421ac0d:	48 ba b0 1d 22 04 80 	movabs $0x8004221db0,%rdx
  800421ac14:	00 00 00 
  800421ac17:	be 84 03 00 00       	mov    $0x384,%esi
  800421ac1c:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421ac23:	00 00 00 
  800421ac26:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac2b:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421ac32:	00 00 00 
  800421ac35:	ff d1                	callq  *%rcx
  800421ac37:	48 bf cb 1d 22 04 80 	movabs $0x8004221dcb,%rdi
  800421ac3e:	00 00 00 
  800421ac41:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421ac4d:	00 00 00 
  800421ac50:	ff d2                	callq  *%rdx
  800421ac52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ac56:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421ac5a:	0f b7 c0             	movzwl %ax,%eax
  800421ac5d:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421ac60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ac64:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421ac6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421ac6e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421ac74:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421ac7a:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421ac7f:	be 00 00 40 00       	mov    $0x400000,%esi
  800421ac84:	89 c7                	mov    %eax,%edi
  800421ac86:	48 b8 90 f2 20 04 80 	movabs $0x800420f290,%rax
  800421ac8d:	00 00 00 
  800421ac90:	ff d0                	callq  *%rax
  800421ac92:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421ac95:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421ac99:	79 2d                	jns    800421acc8 <test_ept_map+0x728>
  800421ac9b:	48 bf 90 1d 22 04 80 	movabs $0x8004221d90,%rdi
  800421aca2:	00 00 00 
  800421aca5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421acaa:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421acb1:	00 00 00 
  800421acb4:	ff d2                	callq  *%rdx
  800421acb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421acba:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421acbe:	0f b7 c0             	movzwl %ax,%eax
  800421acc1:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  800421acc4:	75 74                	jne    800421ad3a <test_ept_map+0x79a>
  800421acc6:	eb 2a                	jmp    800421acf2 <test_ept_map+0x752>
  800421acc8:	48 ba f0 1d 22 04 80 	movabs $0x8004221df0,%rdx
  800421accf:	00 00 00 
  800421acd2:	be 8d 03 00 00       	mov    $0x38d,%esi
  800421acd7:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421acde:	00 00 00 
  800421ace1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ace6:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421aced:	00 00 00 
  800421acf0:	ff d1                	callq  *%rcx
  800421acf2:	48 bf 20 1e 22 04 80 	movabs $0x8004221e20,%rdi
  800421acf9:	00 00 00 
  800421acfc:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad01:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421ad08:	00 00 00 
  800421ad0b:	ff d2                	callq  *%rdx
  800421ad0d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  800421ad11:	48 89 c1             	mov    %rax,%rcx
  800421ad14:	ba 00 00 00 00       	mov    $0x0,%edx
  800421ad19:	be 00 00 40 00       	mov    $0x400000,%esi
  800421ad1e:	bf 00 00 00 00       	mov    $0x0,%edi
  800421ad23:	48 b8 98 98 21 04 80 	movabs $0x8004219898,%rax
  800421ad2a:	00 00 00 
  800421ad2d:	ff d0                	callq  *%rax
  800421ad2f:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421ad32:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421ad36:	79 7d                	jns    800421adb5 <test_ept_map+0x815>
  800421ad38:	eb 2a                	jmp    800421ad64 <test_ept_map+0x7c4>
  800421ad3a:	48 ba 48 1e 22 04 80 	movabs $0x8004221e48,%rdx
  800421ad41:	00 00 00 
  800421ad44:	be 92 03 00 00       	mov    $0x392,%esi
  800421ad49:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421ad50:	00 00 00 
  800421ad53:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad58:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421ad5f:	00 00 00 
  800421ad62:	ff d1                	callq  *%rcx
  800421ad64:	48 bf 70 1e 22 04 80 	movabs $0x8004221e70,%rdi
  800421ad6b:	00 00 00 
  800421ad6e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad73:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421ad7a:	00 00 00 
  800421ad7d:	ff d2                	callq  *%rdx
  800421ad7f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ad83:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421ad8a:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  800421ad8e:	48 89 d1             	mov    %rdx,%rcx
  800421ad91:	ba 00 00 00 00       	mov    $0x0,%edx
  800421ad96:	be 00 00 40 00       	mov    $0x400000,%esi
  800421ad9b:	48 89 c7             	mov    %rax,%rdi
  800421ad9e:	48 b8 98 98 21 04 80 	movabs $0x8004219898,%rax
  800421ada5:	00 00 00 
  800421ada8:	ff d0                	callq  *%rax
  800421adaa:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421adad:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421adb1:	79 5c                	jns    800421ae0f <test_ept_map+0x86f>
  800421adb3:	eb 2a                	jmp    800421addf <test_ept_map+0x83f>
  800421adb5:	48 ba a8 1e 22 04 80 	movabs $0x8004221ea8,%rdx
  800421adbc:	00 00 00 
  800421adbf:	be 98 03 00 00       	mov    $0x398,%esi
  800421adc4:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421adcb:	00 00 00 
  800421adce:	b8 00 00 00 00       	mov    $0x0,%eax
  800421add3:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421adda:	00 00 00 
  800421addd:	ff d1                	callq  *%rcx
  800421addf:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421ade2:	89 c1                	mov    %eax,%ecx
  800421ade4:	48 ba d0 1e 22 04 80 	movabs $0x8004221ed0,%rdx
  800421adeb:	00 00 00 
  800421adee:	be 9d 03 00 00       	mov    $0x39d,%esi
  800421adf3:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421adfa:	00 00 00 
  800421adfd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ae02:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421ae09:	00 00 00 
  800421ae0c:	41 ff d0             	callq  *%r8
  800421ae0f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ae13:	48 89 c7             	mov    %rax,%rdi
  800421ae16:	48 b8 bc 96 21 04 80 	movabs $0x80042196bc,%rax
  800421ae1d:	00 00 00 
  800421ae20:	ff d0                	callq  *%rax
  800421ae22:	48 89 c3             	mov    %rax,%rbx
  800421ae25:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421ae29:	48 8b 00             	mov    (%rax),%rax
  800421ae2c:	48 89 c7             	mov    %rax,%rdi
  800421ae2f:	48 b8 da 97 21 04 80 	movabs $0x80042197da,%rax
  800421ae36:	00 00 00 
  800421ae39:	ff d0                	callq  *%rax
  800421ae3b:	48 39 c3             	cmp    %rax,%rbx
  800421ae3e:	74 5d                	je     800421ae9d <test_ept_map+0x8fd>
  800421ae40:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421ae44:	48 8b 00             	mov    (%rax),%rax
  800421ae47:	48 89 c7             	mov    %rax,%rdi
  800421ae4a:	48 b8 da 97 21 04 80 	movabs $0x80042197da,%rax
  800421ae51:	00 00 00 
  800421ae54:	ff d0                	callq  *%rax
  800421ae56:	48 89 c3             	mov    %rax,%rbx
  800421ae59:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ae5d:	48 89 c7             	mov    %rax,%rdi
  800421ae60:	48 b8 bc 96 21 04 80 	movabs $0x80042196bc,%rax
  800421ae67:	00 00 00 
  800421ae6a:	ff d0                	callq  *%rax
  800421ae6c:	49 89 d8             	mov    %rbx,%r8
  800421ae6f:	48 89 c1             	mov    %rax,%rcx
  800421ae72:	48 ba f0 1e 22 04 80 	movabs $0x8004221ef0,%rdx
  800421ae79:	00 00 00 
  800421ae7c:	be a0 03 00 00       	mov    $0x3a0,%esi
  800421ae81:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421ae88:	00 00 00 
  800421ae8b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ae90:	49 b9 c9 04 20 04 80 	movabs $0x80042004c9,%r9
  800421ae97:	00 00 00 
  800421ae9a:	41 ff d1             	callq  *%r9
  800421ae9d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421aea1:	48 8b 00             	mov    (%rax),%rax
  800421aea4:	48 89 c7             	mov    %rax,%rdi
  800421aea7:	48 b8 da 97 21 04 80 	movabs $0x80042197da,%rax
  800421aeae:	00 00 00 
  800421aeb1:	ff d0                	callq  *%rax
  800421aeb3:	48 89 c3             	mov    %rax,%rbx
  800421aeb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421aeba:	48 89 c7             	mov    %rax,%rdi
  800421aebd:	48 b8 bc 96 21 04 80 	movabs $0x80042196bc,%rax
  800421aec4:	00 00 00 
  800421aec7:	ff d0                	callq  *%rax
  800421aec9:	48 89 da             	mov    %rbx,%rdx
  800421aecc:	48 89 c6             	mov    %rax,%rsi
  800421aecf:	48 bf 20 1f 22 04 80 	movabs $0x8004221f20,%rdi
  800421aed6:	00 00 00 
  800421aed9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aede:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421aee5:	00 00 00 
  800421aee8:	ff d1                	callq  *%rcx
  800421aeea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421aeee:	48 89 c7             	mov    %rax,%rdi
  800421aef1:	48 b8 52 97 21 04 80 	movabs $0x8004219752,%rax
  800421aef8:	00 00 00 
  800421aefb:	ff d0                	callq  *%rax
  800421aefd:	48 89 c6             	mov    %rax,%rsi
  800421af00:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421af04:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421af0b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421af11:	b9 01 00 00 00       	mov    $0x1,%ecx
  800421af16:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421af1b:	48 89 c7             	mov    %rax,%rdi
  800421af1e:	48 b8 9e a3 21 04 80 	movabs $0x800421a39e,%rax
  800421af25:	00 00 00 
  800421af28:	ff d0                	callq  *%rax
  800421af2a:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421af2d:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421af31:	79 66                	jns    800421af99 <test_ept_map+0x9f9>
  800421af33:	48 bf 50 1f 22 04 80 	movabs $0x8004221f50,%rdi
  800421af3a:	00 00 00 
  800421af3d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421af42:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421af49:	00 00 00 
  800421af4c:	ff d2                	callq  *%rdx
  800421af4e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421af52:	48 89 c7             	mov    %rax,%rdi
  800421af55:	48 b8 52 97 21 04 80 	movabs $0x8004219752,%rax
  800421af5c:	00 00 00 
  800421af5f:	ff d0                	callq  *%rax
  800421af61:	48 89 c6             	mov    %rax,%rsi
  800421af64:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421af68:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421af6f:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421af75:	b9 01 00 00 00       	mov    $0x1,%ecx
  800421af7a:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421af7f:	48 89 c7             	mov    %rax,%rdi
  800421af82:	48 b8 9e a3 21 04 80 	movabs $0x800421a39e,%rax
  800421af89:	00 00 00 
  800421af8c:	ff d0                	callq  *%rax
  800421af8e:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421af91:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421af95:	79 56                	jns    800421afed <test_ept_map+0xa4d>
  800421af97:	eb 2a                	jmp    800421afc3 <test_ept_map+0xa23>
  800421af99:	48 ba 80 1f 22 04 80 	movabs $0x8004221f80,%rdx
  800421afa0:	00 00 00 
  800421afa3:	be a9 03 00 00       	mov    $0x3a9,%esi
  800421afa8:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421afaf:	00 00 00 
  800421afb2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421afb7:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421afbe:	00 00 00 
  800421afc1:	ff d1                	callq  *%rcx
  800421afc3:	48 ba c8 1f 22 04 80 	movabs $0x8004221fc8,%rdx
  800421afca:	00 00 00 
  800421afcd:	be ad 03 00 00       	mov    $0x3ad,%esi
  800421afd2:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421afd9:	00 00 00 
  800421afdc:	b8 00 00 00 00       	mov    $0x0,%eax
  800421afe1:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421afe8:	00 00 00 
  800421afeb:	ff d1                	callq  *%rcx
  800421afed:	48 bf f8 1f 22 04 80 	movabs $0x8004221ff8,%rdi
  800421aff4:	00 00 00 
  800421aff7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421affc:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b003:	00 00 00 
  800421b006:	ff d2                	callq  *%rdx
  800421b008:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b00c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421b013:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  800421b017:	48 89 d1             	mov    %rdx,%rcx
  800421b01a:	ba 00 00 00 00       	mov    $0x0,%edx
  800421b01f:	be 00 00 40 00       	mov    $0x400000,%esi
  800421b024:	48 89 c7             	mov    %rax,%rdi
  800421b027:	48 b8 98 98 21 04 80 	movabs $0x8004219898,%rax
  800421b02e:	00 00 00 
  800421b031:	ff d0                	callq  *%rax
  800421b033:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421b036:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421b03a:	79 30                	jns    800421b06c <test_ept_map+0xacc>
  800421b03c:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b03f:	89 c1                	mov    %eax,%ecx
  800421b041:	48 ba d0 1e 22 04 80 	movabs $0x8004221ed0,%rdx
  800421b048:	00 00 00 
  800421b04b:	be b3 03 00 00       	mov    $0x3b3,%esi
  800421b050:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421b057:	00 00 00 
  800421b05a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b05f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b066:	00 00 00 
  800421b069:	41 ff d0             	callq  *%r8
  800421b06c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421b070:	48 8b 00             	mov    (%rax),%rax
  800421b073:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421b078:	48 83 f8 71          	cmp    $0x71,%rax
  800421b07c:	75 36                	jne    800421b0b4 <test_ept_map+0xb14>
  800421b07e:	48 bf 20 20 22 04 80 	movabs $0x8004222020,%rdi
  800421b085:	00 00 00 
  800421b088:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b08d:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b094:	00 00 00 
  800421b097:	ff d2                	callq  *%rdx
  800421b099:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b09d:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421b0a4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421b0a8:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%rbp)
  800421b0af:	e9 23 01 00 00       	jmpq   800421b1d7 <test_ept_map+0xc37>
  800421b0b4:	48 ba 48 20 22 04 80 	movabs $0x8004222048,%rdx
  800421b0bb:	00 00 00 
  800421b0be:	be b7 03 00 00       	mov    $0x3b7,%esi
  800421b0c3:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421b0ca:	00 00 00 
  800421b0cd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b0d2:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421b0d9:	00 00 00 
  800421b0dc:	ff d1                	callq  *%rcx
  800421b0de:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421b0e1:	89 d0                	mov    %edx,%eax
  800421b0e3:	c1 e0 03             	shl    $0x3,%eax
  800421b0e6:	01 d0                	add    %edx,%eax
  800421b0e8:	83 c0 0c             	add    $0xc,%eax
  800421b0eb:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421b0f0:	89 c1                	mov    %eax,%ecx
  800421b0f2:	48 d3 ea             	shr    %cl,%rdx
  800421b0f5:	48 89 d0             	mov    %rdx,%rax
  800421b0f8:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421b0fd:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421b100:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421b103:	48 98                	cltq   
  800421b105:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421b10c:	00 
  800421b10d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b111:	48 01 d0             	add    %rdx,%rax
  800421b114:	48 8b 00             	mov    (%rax),%rax
  800421b117:	48 89 c7             	mov    %rax,%rdi
  800421b11a:	48 b8 7a 98 21 04 80 	movabs $0x800421987a,%rax
  800421b121:	00 00 00 
  800421b124:	ff d0                	callq  *%rax
  800421b126:	85 c0                	test   %eax,%eax
  800421b128:	75 30                	jne    800421b15a <test_ept_map+0xbba>
  800421b12a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b12d:	89 c1                	mov    %eax,%ecx
  800421b12f:	48 ba 78 20 22 04 80 	movabs $0x8004222078,%rdx
  800421b136:	00 00 00 
  800421b139:	be bd 03 00 00       	mov    $0x3bd,%esi
  800421b13e:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421b145:	00 00 00 
  800421b148:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b14d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b154:	00 00 00 
  800421b157:	41 ff d0             	callq  *%r8
  800421b15a:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421b15d:	48 98                	cltq   
  800421b15f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421b166:	00 
  800421b167:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b16b:	48 01 d0             	add    %rdx,%rax
  800421b16e:	48 8b 00             	mov    (%rax),%rax
  800421b171:	83 e0 07             	and    $0x7,%eax
  800421b174:	48 85 c0             	test   %rax,%rax
  800421b177:	75 30                	jne    800421b1a9 <test_ept_map+0xc09>
  800421b179:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b17c:	89 c1                	mov    %eax,%ecx
  800421b17e:	48 ba b8 20 22 04 80 	movabs $0x80042220b8,%rdx
  800421b185:	00 00 00 
  800421b188:	be c0 03 00 00       	mov    $0x3c0,%esi
  800421b18d:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421b194:	00 00 00 
  800421b197:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b19c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b1a3:	00 00 00 
  800421b1a6:	41 ff d0             	callq  *%r8
  800421b1a9:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421b1ac:	48 98                	cltq   
  800421b1ae:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421b1b5:	00 
  800421b1b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b1ba:	48 01 d0             	add    %rdx,%rax
  800421b1bd:	48 8b 00             	mov    (%rax),%rax
  800421b1c0:	48 89 c7             	mov    %rax,%rdi
  800421b1c3:	48 b8 f2 97 21 04 80 	movabs $0x80042197f2,%rax
  800421b1ca:	00 00 00 
  800421b1cd:	ff d0                	callq  *%rax
  800421b1cf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421b1d3:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)
  800421b1d7:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800421b1db:	0f 8f fd fe ff ff    	jg     800421b0de <test_ept_map+0xb3e>
  800421b1e1:	48 bf e8 20 22 04 80 	movabs $0x80042220e8,%rdi
  800421b1e8:	00 00 00 
  800421b1eb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b1f0:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b1f7:	00 00 00 
  800421b1fa:	ff d2                	callq  *%rdx
  800421b1fc:	48 ba 10 21 22 04 80 	movabs $0x8004222110,%rdx
  800421b203:	00 00 00 
  800421b206:	be c8 03 00 00       	mov    $0x3c8,%esi
  800421b20b:	48 bf e0 19 22 04 80 	movabs $0x80042219e0,%rdi
  800421b212:	00 00 00 
  800421b215:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b21a:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421b221:	00 00 00 
  800421b224:	ff d1                	callq  *%rcx

000000800421b226 <vmcs_writel>:
  800421b226:	55                   	push   %rbp
  800421b227:	48 89 e5             	mov    %rsp,%rbp
  800421b22a:	48 83 ec 20          	sub    $0x20,%rsp
  800421b22e:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421b231:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421b235:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b239:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421b23c:	f8                   	clc    
  800421b23d:	0f 79 d0             	vmwrite %rax,%rdx
  800421b240:	0f 96 c0             	setbe  %al
  800421b243:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421b246:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421b24a:	c9                   	leaveq 
  800421b24b:	c3                   	retq   

000000800421b24c <vmcs_readl>:
  800421b24c:	55                   	push   %rbp
  800421b24d:	48 89 e5             	mov    %rsp,%rbp
  800421b250:	48 83 ec 14          	sub    $0x14,%rsp
  800421b254:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421b257:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b25a:	89 c2                	mov    %eax,%edx
  800421b25c:	0f 78 d0             	vmread %rdx,%rax
  800421b25f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b263:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b267:	c9                   	leaveq 
  800421b268:	c3                   	retq   

000000800421b269 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  800421b269:	55                   	push   %rbp
  800421b26a:	48 89 e5             	mov    %rsp,%rbp
  800421b26d:	53                   	push   %rbx
  800421b26e:	48 83 ec 38          	sub    $0x38,%rsp
  800421b272:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  800421b275:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  800421b279:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800421b27d:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  800421b281:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  800421b285:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b288:	0f a2                	cpuid  
  800421b28a:	89 de                	mov    %ebx,%esi
  800421b28c:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421b28f:	89 75 f0             	mov    %esi,-0x10(%rbp)
  800421b292:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  800421b295:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  800421b298:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421b29d:	74 09                	je     800421b2a8 <cpuid+0x3f>
		*eaxp = eax;
  800421b29f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b2a3:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421b2a6:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  800421b2a8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421b2ad:	74 09                	je     800421b2b8 <cpuid+0x4f>
		*ebxp = ebx;
  800421b2af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b2b3:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421b2b6:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  800421b2b8:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421b2bd:	74 09                	je     800421b2c8 <cpuid+0x5f>
		*ecxp = ecx;
  800421b2bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421b2c3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421b2c6:	89 10                	mov    %edx,(%rax)
	if (edxp)
  800421b2c8:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421b2cd:	74 09                	je     800421b2d8 <cpuid+0x6f>
		*edxp = edx;
  800421b2cf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421b2d3:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421b2d6:	89 10                	mov    %edx,(%rax)
}
  800421b2d8:	48 83 c4 38          	add    $0x38,%rsp
  800421b2dc:	5b                   	pop    %rbx
  800421b2dd:	5d                   	pop    %rbp
  800421b2de:	c3                   	retq   

000000800421b2df <page2ppn>:
  800421b2df:	55                   	push   %rbp
  800421b2e0:	48 89 e5             	mov    %rsp,%rbp
  800421b2e3:	48 83 ec 08          	sub    $0x8,%rsp
  800421b2e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421b2eb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421b2ef:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  800421b2f6:	00 00 00 
  800421b2f9:	48 8b 00             	mov    (%rax),%rax
  800421b2fc:	48 29 c2             	sub    %rax,%rdx
  800421b2ff:	48 89 d0             	mov    %rdx,%rax
  800421b302:	48 c1 f8 04          	sar    $0x4,%rax
  800421b306:	c9                   	leaveq 
  800421b307:	c3                   	retq   

000000800421b308 <page2pa>:
  800421b308:	55                   	push   %rbp
  800421b309:	48 89 e5             	mov    %rsp,%rbp
  800421b30c:	48 83 ec 08          	sub    $0x8,%rsp
  800421b310:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421b314:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b318:	48 89 c7             	mov    %rax,%rdi
  800421b31b:	48 b8 df b2 21 04 80 	movabs $0x800421b2df,%rax
  800421b322:	00 00 00 
  800421b325:	ff d0                	callq  *%rax
  800421b327:	48 c1 e0 0c          	shl    $0xc,%rax
  800421b32b:	c9                   	leaveq 
  800421b32c:	c3                   	retq   

000000800421b32d <page2kva>:
  800421b32d:	55                   	push   %rbp
  800421b32e:	48 89 e5             	mov    %rsp,%rbp
  800421b331:	48 83 ec 20          	sub    $0x20,%rsp
  800421b335:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421b339:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b33d:	48 89 c7             	mov    %rax,%rdi
  800421b340:	48 b8 08 b3 21 04 80 	movabs $0x800421b308,%rax
  800421b347:	00 00 00 
  800421b34a:	ff d0                	callq  *%rax
  800421b34c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b350:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b354:	48 c1 e8 0c          	shr    $0xc,%rax
  800421b358:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421b35b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421b35e:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800421b365:	00 00 00 
  800421b368:	48 8b 00             	mov    (%rax),%rax
  800421b36b:	48 39 c2             	cmp    %rax,%rdx
  800421b36e:	72 32                	jb     800421b3a2 <page2kva+0x75>
  800421b370:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b374:	48 89 c1             	mov    %rax,%rcx
  800421b377:	48 ba 40 21 22 04 80 	movabs $0x8004222140,%rdx
  800421b37e:	00 00 00 
  800421b381:	be 62 00 00 00       	mov    $0x62,%esi
  800421b386:	48 bf 63 21 22 04 80 	movabs $0x8004222163,%rdi
  800421b38d:	00 00 00 
  800421b390:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b395:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b39c:	00 00 00 
  800421b39f:	41 ff d0             	callq  *%r8
  800421b3a2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421b3a9:	00 00 00 
  800421b3ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b3b0:	48 01 d0             	add    %rdx,%rax
  800421b3b3:	c9                   	leaveq 
  800421b3b4:	c3                   	retq   

000000800421b3b5 <lock_kernel>:
  800421b3b5:	55                   	push   %rbp
  800421b3b6:	48 89 e5             	mov    %rsp,%rbp
  800421b3b9:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800421b3c0:	00 00 00 
  800421b3c3:	48 b8 55 81 21 04 80 	movabs $0x8004218155,%rax
  800421b3ca:	00 00 00 
  800421b3cd:	ff d0                	callq  *%rax
  800421b3cf:	5d                   	pop    %rbp
  800421b3d0:	c3                   	retq   

000000800421b3d1 <unlock_kernel>:
  800421b3d1:	55                   	push   %rbp
  800421b3d2:	48 89 e5             	mov    %rsp,%rbp
  800421b3d5:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800421b3dc:	00 00 00 
  800421b3df:	48 b8 2c 82 21 04 80 	movabs $0x800421822c,%rax
  800421b3e6:	00 00 00 
  800421b3e9:	ff d0                	callq  *%rax
  800421b3eb:	f3 90                	pause  
  800421b3ed:	5d                   	pop    %rbp
  800421b3ee:	c3                   	retq   

000000800421b3ef <vmx_list_vms>:
  800421b3ef:	55                   	push   %rbp
  800421b3f0:	48 89 e5             	mov    %rsp,%rbp
  800421b3f3:	48 83 ec 10          	sub    $0x10,%rsp
  800421b3f7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421b3fe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421b405:	e9 96 00 00 00       	jmpq   800421b4a0 <vmx_list_vms+0xb1>
  800421b40a:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800421b411:	00 00 00 
  800421b414:	48 8b 10             	mov    (%rax),%rdx
  800421b417:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b41a:	48 98                	cltq   
  800421b41c:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421b423:	48 01 d0             	add    %rdx,%rax
  800421b426:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421b42c:	83 f8 03             	cmp    $0x3,%eax
  800421b42f:	75 6b                	jne    800421b49c <vmx_list_vms+0xad>
  800421b431:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421b435:	75 1b                	jne    800421b452 <vmx_list_vms+0x63>
  800421b437:	48 bf 72 21 22 04 80 	movabs $0x8004222172,%rdi
  800421b43e:	00 00 00 
  800421b441:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b446:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b44d:	00 00 00 
  800421b450:	ff d2                	callq  *%rdx
  800421b452:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421b456:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800421b45d:	00 00 00 
  800421b460:	48 8b 10             	mov    (%rax),%rdx
  800421b463:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b466:	48 98                	cltq   
  800421b468:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421b46f:	48 01 d0             	add    %rdx,%rax
  800421b472:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421b478:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421b47b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421b47e:	89 c6                	mov    %eax,%esi
  800421b480:	48 bf 80 21 22 04 80 	movabs $0x8004222180,%rdi
  800421b487:	00 00 00 
  800421b48a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b48f:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800421b496:	00 00 00 
  800421b499:	41 ff d0             	callq  *%r8
  800421b49c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421b4a0:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421b4a7:	0f 8e 5d ff ff ff    	jle    800421b40a <vmx_list_vms+0x1b>
  800421b4ad:	c9                   	leaveq 
  800421b4ae:	c3                   	retq   

000000800421b4af <vmx_sel_resume>:
  800421b4af:	55                   	push   %rbp
  800421b4b0:	48 89 e5             	mov    %rsp,%rbp
  800421b4b3:	48 83 ec 20          	sub    $0x20,%rsp
  800421b4b7:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421b4ba:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421b4c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421b4c8:	e9 84 00 00 00       	jmpq   800421b551 <vmx_sel_resume+0xa2>
  800421b4cd:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800421b4d4:	00 00 00 
  800421b4d7:	48 8b 10             	mov    (%rax),%rdx
  800421b4da:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b4dd:	48 98                	cltq   
  800421b4df:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421b4e6:	48 01 d0             	add    %rdx,%rax
  800421b4e9:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421b4ef:	83 f8 03             	cmp    $0x3,%eax
  800421b4f2:	75 59                	jne    800421b54d <vmx_sel_resume+0x9e>
  800421b4f4:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421b4f8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421b4fb:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421b4fe:	75 4d                	jne    800421b54d <vmx_sel_resume+0x9e>
  800421b500:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b503:	89 c6                	mov    %eax,%esi
  800421b505:	48 bf 8d 21 22 04 80 	movabs $0x800422218d,%rdi
  800421b50c:	00 00 00 
  800421b50f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b514:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b51b:	00 00 00 
  800421b51e:	ff d2                	callq  *%rdx
  800421b520:	48 b8 58 d2 4d 04 80 	movabs $0x80044dd258,%rax
  800421b527:	00 00 00 
  800421b52a:	48 8b 10             	mov    (%rax),%rdx
  800421b52d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b530:	48 98                	cltq   
  800421b532:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421b539:	48 01 d0             	add    %rdx,%rax
  800421b53c:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800421b543:	00 00 00 
  800421b546:	b8 01 00 00 00       	mov    $0x1,%eax
  800421b54b:	eb 36                	jmp    800421b583 <vmx_sel_resume+0xd4>
  800421b54d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421b551:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421b558:	0f 8e 6f ff ff ff    	jle    800421b4cd <vmx_sel_resume+0x1e>
  800421b55e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b561:	89 c6                	mov    %eax,%esi
  800421b563:	48 bf a0 21 22 04 80 	movabs $0x80042221a0,%rdi
  800421b56a:	00 00 00 
  800421b56d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b572:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b579:	00 00 00 
  800421b57c:	ff d2                	callq  *%rdx
  800421b57e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b583:	c9                   	leaveq 
  800421b584:	c3                   	retq   

000000800421b585 <vmx_check_support>:
  800421b585:	55                   	push   %rbp
  800421b586:	48 89 e5             	mov    %rsp,%rbp
  800421b589:	48 83 ec 20          	sub    $0x20,%rsp
  800421b58d:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
  800421b591:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800421b595:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  800421b599:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  800421b59d:	49 89 f0             	mov    %rsi,%r8
  800421b5a0:	48 89 c6             	mov    %rax,%rsi
  800421b5a3:	bf 01 00 00 00       	mov    $0x1,%edi
  800421b5a8:	48 b8 69 b2 21 04 80 	movabs $0x800421b269,%rax
  800421b5af:	00 00 00 
  800421b5b2:	ff d0                	callq  *%rax
  800421b5b4:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421b5b7:	83 e0 20             	and    $0x20,%eax
  800421b5ba:	85 c0                	test   %eax,%eax
  800421b5bc:	0f 95 c0             	setne  %al
  800421b5bf:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421b5c2:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  800421b5c6:	74 1d                	je     800421b5e5 <vmx_check_support+0x60>
  800421b5c8:	48 bf c2 21 22 04 80 	movabs $0x80042221c2,%rdi
  800421b5cf:	00 00 00 
  800421b5d2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b5d7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b5de:	00 00 00 
  800421b5e1:	ff d2                	callq  *%rdx
  800421b5e3:	eb 1b                	jmp    800421b600 <vmx_check_support+0x7b>
  800421b5e5:	48 bf e0 21 22 04 80 	movabs $0x80042221e0,%rdi
  800421b5ec:	00 00 00 
  800421b5ef:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b5f4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b5fb:	00 00 00 
  800421b5fe:	ff d2                	callq  *%rdx
  800421b600:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421b604:	c9                   	leaveq 
  800421b605:	c3                   	retq   

000000800421b606 <vmx_check_ept>:
  800421b606:	55                   	push   %rbp
  800421b607:	48 89 e5             	mov    %rsp,%rbp
  800421b60a:	48 83 ec 50          	sub    $0x50,%rsp
  800421b60e:	c7 45 e0 82 04 00 00 	movl   $0x482,-0x20(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b615:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421b618:	89 c1                	mov    %eax,%ecx
  800421b61a:	0f 32                	rdmsr  
  800421b61c:	89 55 dc             	mov    %edx,-0x24(%rbp)
  800421b61f:	89 45 d8             	mov    %eax,-0x28(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b622:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421b629:	00 
	ret = edx;
  800421b62a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b62d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	ret = ret << 32;
  800421b631:	48 c1 65 d0 20       	shlq   $0x20,-0x30(%rbp)
	ret |= eax;
  800421b636:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421b639:	48 09 45 d0          	or     %rax,-0x30(%rbp)

	return ret;
  800421b63d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b641:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b645:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b649:	48 c1 e8 3f          	shr    $0x3f,%rax
  800421b64d:	88 45 f7             	mov    %al,-0x9(%rbp)
  800421b650:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  800421b654:	74 76                	je     800421b6cc <vmx_check_ept+0xc6>
  800421b656:	c7 45 cc 8b 04 00 00 	movl   $0x48b,-0x34(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b65d:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b660:	89 c1                	mov    %eax,%ecx
  800421b662:	0f 32                	rdmsr  
  800421b664:	89 55 c8             	mov    %edx,-0x38(%rbp)
  800421b667:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b66a:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800421b671:	00 
	ret = edx;
  800421b672:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421b675:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ret = ret << 32;
  800421b679:	48 c1 65 b8 20       	shlq   $0x20,-0x48(%rbp)
	ret |= eax;
  800421b67e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421b681:	48 09 45 b8          	or     %rax,-0x48(%rbp)

	return ret;
  800421b685:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b689:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b68d:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  800421b694:	00 00 00 
  800421b697:	48 23 45 e8          	and    -0x18(%rbp),%rax
  800421b69b:	48 85 c0             	test   %rax,%rax
  800421b69e:	0f 95 c0             	setne  %al
  800421b6a1:	88 45 e7             	mov    %al,-0x19(%rbp)
  800421b6a4:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
  800421b6a8:	74 22                	je     800421b6cc <vmx_check_ept+0xc6>
  800421b6aa:	48 bf 00 22 22 04 80 	movabs $0x8004222200,%rdi
  800421b6b1:	00 00 00 
  800421b6b4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b6b9:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b6c0:	00 00 00 
  800421b6c3:	ff d2                	callq  *%rdx
  800421b6c5:	b8 01 00 00 00       	mov    $0x1,%eax
  800421b6ca:	eb 05                	jmp    800421b6d1 <vmx_check_ept+0xcb>
  800421b6cc:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b6d1:	c9                   	leaveq 
  800421b6d2:	c3                   	retq   

000000800421b6d3 <check_fixed_bits>:
  800421b6d3:	55                   	push   %rbp
  800421b6d4:	48 89 e5             	mov    %rsp,%rbp
  800421b6d7:	48 83 ec 30          	sub    $0x30,%rsp
  800421b6db:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421b6df:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421b6e3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421b6e7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421b6ee:	e9 96 00 00 00       	jmpq   800421b789 <check_fixed_bits+0xb6>
  800421b6f3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b6f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421b6fa:	89 c1                	mov    %eax,%ecx
  800421b6fc:	48 d3 ea             	shr    %cl,%rdx
  800421b6ff:	48 89 d0             	mov    %rdx,%rax
  800421b702:	83 e0 01             	and    $0x1,%eax
  800421b705:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421b708:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  800421b70c:	75 1e                	jne    800421b72c <check_fixed_bits+0x59>
  800421b70e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b711:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421b715:	89 c1                	mov    %eax,%ecx
  800421b717:	48 d3 ea             	shr    %cl,%rdx
  800421b71a:	48 89 d0             	mov    %rdx,%rax
  800421b71d:	83 e0 01             	and    $0x1,%eax
  800421b720:	48 85 c0             	test   %rax,%rax
  800421b723:	75 60                	jne    800421b785 <check_fixed_bits+0xb2>
  800421b725:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b72a:	eb 6e                	jmp    800421b79a <check_fixed_bits+0xc7>
  800421b72c:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421b730:	75 1e                	jne    800421b750 <check_fixed_bits+0x7d>
  800421b732:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b735:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421b739:	89 c1                	mov    %eax,%ecx
  800421b73b:	48 d3 ea             	shr    %cl,%rdx
  800421b73e:	48 89 d0             	mov    %rdx,%rax
  800421b741:	83 e0 01             	and    $0x1,%eax
  800421b744:	48 85 c0             	test   %rax,%rax
  800421b747:	74 3c                	je     800421b785 <check_fixed_bits+0xb2>
  800421b749:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b74e:	eb 4a                	jmp    800421b79a <check_fixed_bits+0xc7>
  800421b750:	48 b9 18 22 22 04 80 	movabs $0x8004222218,%rcx
  800421b757:	00 00 00 
  800421b75a:	48 ba 1e 22 22 04 80 	movabs $0x800422221e,%rdx
  800421b761:	00 00 00 
  800421b764:	be 85 00 00 00       	mov    $0x85,%esi
  800421b769:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421b770:	00 00 00 
  800421b773:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b778:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b77f:	00 00 00 
  800421b782:	41 ff d0             	callq  *%r8
  800421b785:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421b789:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b78c:	83 f8 3f             	cmp    $0x3f,%eax
  800421b78f:	0f 86 5e ff ff ff    	jbe    800421b6f3 <check_fixed_bits+0x20>
  800421b795:	b8 01 00 00 00       	mov    $0x1,%eax
  800421b79a:	c9                   	leaveq 
  800421b79b:	c3                   	retq   

000000800421b79c <vmx_init_vmcs>:
  800421b79c:	55                   	push   %rbp
  800421b79d:	48 89 e5             	mov    %rsp,%rbp
  800421b7a0:	48 83 ec 40          	sub    $0x40,%rsp
  800421b7a4:	c7 45 dc 80 04 00 00 	movl   $0x480,-0x24(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b7ab:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b7ae:	89 c1                	mov    %eax,%ecx
  800421b7b0:	0f 32                	rdmsr  
  800421b7b2:	89 55 d8             	mov    %edx,-0x28(%rbp)
  800421b7b5:	89 45 d4             	mov    %eax,-0x2c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b7b8:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  800421b7bf:	00 
	ret = edx;
  800421b7c0:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421b7c3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	ret = ret << 32;
  800421b7c7:	48 c1 65 c8 20       	shlq   $0x20,-0x38(%rbp)
	ret |= eax;
  800421b7cc:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421b7cf:	48 09 45 c8          	or     %rax,-0x38(%rbp)

	return ret;
  800421b7d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421b7d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b7db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b7df:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800421b7e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b7e6:	48 c1 e8 20          	shr    $0x20,%rax
  800421b7ea:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421b7ef:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421b7f2:	81 7d f4 00 10 00 00 	cmpl   $0x1000,-0xc(%rbp)
  800421b7f9:	76 35                	jbe    800421b830 <vmx_init_vmcs+0x94>
  800421b7fb:	48 b9 40 22 22 04 80 	movabs $0x8004222240,%rcx
  800421b802:	00 00 00 
  800421b805:	48 ba 1e 22 22 04 80 	movabs $0x800422221e,%rdx
  800421b80c:	00 00 00 
  800421b80f:	be 95 00 00 00       	mov    $0x95,%esi
  800421b814:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421b81b:	00 00 00 
  800421b81e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b823:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b82a:	00 00 00 
  800421b82d:	41 ff d0             	callq  *%r8
  800421b830:	bf 01 00 00 00       	mov    $0x1,%edi
  800421b835:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421b83c:	00 00 00 
  800421b83f:	ff d0                	callq  *%rax
  800421b841:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b845:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421b84a:	75 07                	jne    800421b853 <vmx_init_vmcs+0xb7>
  800421b84c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b851:	eb 4d                	jmp    800421b8a0 <vmx_init_vmcs+0x104>
  800421b853:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b857:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421b85b:	8d 50 01             	lea    0x1(%rax),%edx
  800421b85e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b862:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421b866:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b86a:	48 89 c7             	mov    %rax,%rdi
  800421b86d:	48 b8 2d b3 21 04 80 	movabs $0x800421b32d,%rax
  800421b874:	00 00 00 
  800421b877:	ff d0                	callq  *%rax
  800421b879:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421b87d:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  800421b881:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b885:	ba 04 00 00 00       	mov    $0x4,%edx
  800421b88a:	48 89 ce             	mov    %rcx,%rsi
  800421b88d:	48 89 c7             	mov    %rax,%rdi
  800421b890:	48 b8 6a 0f 21 04 80 	movabs $0x8004210f6a,%rax
  800421b897:	00 00 00 
  800421b89a:	ff d0                	callq  *%rax
  800421b89c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b8a0:	c9                   	leaveq 
  800421b8a1:	c3                   	retq   

000000800421b8a2 <vmx_init_vmxon>:
  800421b8a2:	55                   	push   %rbp
  800421b8a3:	48 89 e5             	mov    %rsp,%rbp
  800421b8a6:	53                   	push   %rbx
  800421b8a7:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  800421b8ae:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b8b3:	48 ba 9c b7 21 04 80 	movabs $0x800421b79c,%rdx
  800421b8ba:	00 00 00 
  800421b8bd:	ff d2                	callq  *%rdx
  800421b8bf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421b8c3:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421b8c8:	75 0a                	jne    800421b8d4 <vmx_init_vmxon+0x32>
  800421b8ca:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800421b8cf:	e9 75 04 00 00       	jmpq   800421bd49 <vmx_init_vmxon+0x4a7>

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421b8d4:	0f 20 c0             	mov    %cr0,%rax
  800421b8d7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	return val;
  800421b8db:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421b8df:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421b8e3:	0f 20 e0             	mov    %cr4,%rax
  800421b8e6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421b8ea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b8ee:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421b8f2:	48 83 4d d8 20       	orq    $0x20,-0x28(%rbp)
  800421b8f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b8fb:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
}

static __inline void
lcr0(uint64_t val)
{
	__asm __volatile("movq %0,%%cr0" : : "r" (val));
  800421b8ff:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421b903:	0f 22 c0             	mov    %rax,%cr0
  800421b906:	c7 45 ac 87 04 00 00 	movl   $0x487,-0x54(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b90d:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421b910:	89 c1                	mov    %eax,%ecx
  800421b912:	0f 32                	rdmsr  
  800421b914:	89 55 a8             	mov    %edx,-0x58(%rbp)
  800421b917:	89 45 a4             	mov    %eax,-0x5c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b91a:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  800421b921:	00 
	ret = edx;
  800421b922:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800421b925:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ret = ret << 32;
  800421b929:	48 c1 65 98 20       	shlq   $0x20,-0x68(%rbp)
	ret |= eax;
  800421b92e:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421b931:	48 09 45 98          	or     %rax,-0x68(%rbp)

	return ret;
  800421b935:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421b939:	48 89 c6             	mov    %rax,%rsi
  800421b93c:	c7 45 94 86 04 00 00 	movl   $0x486,-0x6c(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b943:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421b946:	89 c1                	mov    %eax,%ecx
  800421b948:	0f 32                	rdmsr  
  800421b94a:	89 55 90             	mov    %edx,-0x70(%rbp)
  800421b94d:	89 45 8c             	mov    %eax,-0x74(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b950:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421b957:	00 
	ret = edx;
  800421b958:	8b 45 90             	mov    -0x70(%rbp),%eax
  800421b95b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	ret = ret << 32;
  800421b95f:	48 c1 65 80 20       	shlq   $0x20,-0x80(%rbp)
	ret |= eax;
  800421b964:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421b967:	48 09 45 80          	or     %rax,-0x80(%rbp)

	return ret;
  800421b96b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421b96f:	48 89 c1             	mov    %rax,%rcx
  800421b972:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b976:	48 89 f2             	mov    %rsi,%rdx
  800421b979:	48 89 ce             	mov    %rcx,%rsi
  800421b97c:	48 89 c7             	mov    %rax,%rdi
  800421b97f:	48 b8 d3 b6 21 04 80 	movabs $0x800421b6d3,%rax
  800421b986:	00 00 00 
  800421b989:	ff d0                	callq  *%rax
  800421b98b:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421b98e:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421b992:	83 f0 01             	xor    $0x1,%eax
  800421b995:	84 c0                	test   %al,%al
  800421b997:	74 1d                	je     800421b9b6 <vmx_init_vmxon+0x114>
  800421b999:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b99d:	48 89 c7             	mov    %rax,%rdi
  800421b9a0:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421b9a7:	00 00 00 
  800421b9aa:	ff d0                	callq  *%rax
  800421b9ac:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421b9b1:	e9 93 03 00 00       	jmpq   800421bd49 <vmx_init_vmxon+0x4a7>
  800421b9b6:	48 81 4d d0 00 20 00 	orq    $0x2000,-0x30(%rbp)
  800421b9bd:	00 
  800421b9be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b9c2:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
}

static __inline void
lcr4(uint64_t val)
{
	__asm __volatile("movq %0,%%cr4" : : "r" (val));
  800421b9c9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421b9d0:	0f 22 e0             	mov    %rax,%cr4
  800421b9d3:	c7 85 74 ff ff ff 89 	movl   $0x489,-0x8c(%rbp)
  800421b9da:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b9dd:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421b9e3:	89 c1                	mov    %eax,%ecx
  800421b9e5:	0f 32                	rdmsr  
  800421b9e7:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
  800421b9ed:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b9f3:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421b9fa:	00 00 00 00 
	ret = edx;
  800421b9fe:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  800421ba04:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
	ret = ret << 32;
  800421ba0b:	48 c1 a5 60 ff ff ff 	shlq   $0x20,-0xa0(%rbp)
  800421ba12:	20 
	ret |= eax;
  800421ba13:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421ba19:	48 09 85 60 ff ff ff 	or     %rax,-0xa0(%rbp)

	return ret;
  800421ba20:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421ba27:	48 89 c6             	mov    %rax,%rsi
  800421ba2a:	c7 85 5c ff ff ff 88 	movl   $0x488,-0xa4(%rbp)
  800421ba31:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ba34:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421ba3a:	89 c1                	mov    %eax,%ecx
  800421ba3c:	0f 32                	rdmsr  
  800421ba3e:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
  800421ba44:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ba4a:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  800421ba51:	00 00 00 00 
	ret = edx;
  800421ba55:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  800421ba5b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	ret = ret << 32;
  800421ba62:	48 c1 a5 48 ff ff ff 	shlq   $0x20,-0xb8(%rbp)
  800421ba69:	20 
	ret |= eax;
  800421ba6a:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
  800421ba70:	48 09 85 48 ff ff ff 	or     %rax,-0xb8(%rbp)

	return ret;
  800421ba77:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421ba7e:	48 89 c1             	mov    %rax,%rcx
  800421ba81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ba85:	48 89 f2             	mov    %rsi,%rdx
  800421ba88:	48 89 ce             	mov    %rcx,%rsi
  800421ba8b:	48 89 c7             	mov    %rax,%rdi
  800421ba8e:	48 b8 d3 b6 21 04 80 	movabs $0x800421b6d3,%rax
  800421ba95:	00 00 00 
  800421ba98:	ff d0                	callq  *%rax
  800421ba9a:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421ba9d:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421baa1:	83 f0 01             	xor    $0x1,%eax
  800421baa4:	84 c0                	test   %al,%al
  800421baa6:	74 1d                	je     800421bac5 <vmx_init_vmxon+0x223>
  800421baa8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421baac:	48 89 c7             	mov    %rax,%rdi
  800421baaf:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421bab6:	00 00 00 
  800421bab9:	ff d0                	callq  *%rax
  800421babb:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421bac0:	e9 84 02 00 00       	jmpq   800421bd49 <vmx_init_vmxon+0x4a7>
  800421bac5:	c7 85 44 ff ff ff 3a 	movl   $0x3a,-0xbc(%rbp)
  800421bacc:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421bacf:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421bad5:	89 c1                	mov    %eax,%ecx
  800421bad7:	0f 32                	rdmsr  
  800421bad9:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%rbp)
  800421badf:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421bae5:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421baec:	00 00 00 00 
	ret = edx;
  800421baf0:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
  800421baf6:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
	ret = ret << 32;
  800421bafd:	48 c1 a5 30 ff ff ff 	shlq   $0x20,-0xd0(%rbp)
  800421bb04:	20 
	ret |= eax;
  800421bb05:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421bb0b:	48 09 85 30 ff ff ff 	or     %rax,-0xd0(%rbp)

	return ret;
  800421bb12:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  800421bb19:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421bb1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421bb21:	83 e0 04             	and    $0x4,%eax
  800421bb24:	48 85 c0             	test   %rax,%rax
  800421bb27:	0f 85 e8 00 00 00    	jne    800421bc15 <vmx_init_vmxon+0x373>
  800421bb2d:	48 83 4d e8 04       	orq    $0x4,-0x18(%rbp)
  800421bb32:	c7 85 2c ff ff ff 3a 	movl   $0x3a,-0xd4(%rbp)
  800421bb39:	00 00 00 
  800421bb3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421bb40:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421bb47:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421bb4e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421bb54:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421bb5b:	48 c1 e8 20          	shr    $0x20,%rax
  800421bb5f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
	__asm __volatile("wrmsr"
  800421bb65:	8b 8d 2c ff ff ff    	mov    -0xd4(%rbp),%ecx
  800421bb6b:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421bb71:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bb77:	0f 30                	wrmsr  
  800421bb79:	c7 85 14 ff ff ff 3a 	movl   $0x3a,-0xec(%rbp)
  800421bb80:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421bb83:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421bb89:	89 c1                	mov    %eax,%ecx
  800421bb8b:	0f 32                	rdmsr  
  800421bb8d:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
  800421bb93:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421bb99:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
  800421bba0:	00 00 00 00 
	ret = edx;
  800421bba4:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421bbaa:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
	ret = ret << 32;
  800421bbb1:	48 c1 a5 00 ff ff ff 	shlq   $0x20,-0x100(%rbp)
  800421bbb8:	20 
	ret |= eax;
  800421bbb9:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421bbbf:	48 09 85 00 ff ff ff 	or     %rax,-0x100(%rbp)

	return ret;
  800421bbc6:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421bbcd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421bbd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421bbd5:	83 e0 04             	and    $0x4,%eax
  800421bbd8:	48 85 c0             	test   %rax,%rax
  800421bbdb:	75 38                	jne    800421bc15 <vmx_init_vmxon+0x373>
  800421bbdd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421bbe1:	48 89 c7             	mov    %rax,%rdi
  800421bbe4:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421bbeb:	00 00 00 
  800421bbee:	ff d0                	callq  *%rax
  800421bbf0:	48 bf 58 22 22 04 80 	movabs $0x8004222258,%rdi
  800421bbf7:	00 00 00 
  800421bbfa:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bbff:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421bc06:	00 00 00 
  800421bc09:	ff d2                	callq  *%rdx
  800421bc0b:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800421bc10:	e9 34 01 00 00       	jmpq   800421bd49 <vmx_init_vmxon+0x4a7>
  800421bc15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421bc19:	83 e0 01             	and    $0x1,%eax
  800421bc1c:	48 85 c0             	test   %rax,%rax
  800421bc1f:	75 4c                	jne    800421bc6d <vmx_init_vmxon+0x3cb>
  800421bc21:	48 83 4d e8 01       	orq    $0x1,-0x18(%rbp)
  800421bc26:	c7 85 fc fe ff ff 3a 	movl   $0x3a,-0x104(%rbp)
  800421bc2d:	00 00 00 
  800421bc30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421bc34:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421bc3b:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421bc42:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421bc48:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421bc4f:	48 c1 e8 20          	shr    $0x20,%rax
  800421bc53:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%rbp)
	__asm __volatile("wrmsr"
  800421bc59:	8b 8d fc fe ff ff    	mov    -0x104(%rbp),%ecx
  800421bc5f:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421bc65:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421bc6b:	0f 30                	wrmsr  
  800421bc6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421bc71:	48 89 c7             	mov    %rax,%rdi
  800421bc74:	48 b8 08 b3 21 04 80 	movabs $0x800421b308,%rax
  800421bc7b:	00 00 00 
  800421bc7e:	ff d0                	callq  *%rax
  800421bc80:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  800421bc87:	c6 85 e7 fe ff ff 00 	movb   $0x0,-0x119(%rbp)
  800421bc8e:	f8                   	clc    
  800421bc8f:	f3 0f c7 b5 d8 fe ff 	vmxon  -0x128(%rbp)
  800421bc96:	ff 
  800421bc97:	0f 96 c0             	setbe  %al
  800421bc9a:	88 85 e7 fe ff ff    	mov    %al,-0x119(%rbp)
  800421bca0:	0f b6 85 e7 fe ff ff 	movzbl -0x119(%rbp),%eax
  800421bca7:	88 45 ce             	mov    %al,-0x32(%rbp)
  800421bcaa:	80 7d ce 00          	cmpb   $0x0,-0x32(%rbp)
  800421bcae:	74 1a                	je     800421bcca <vmx_init_vmxon+0x428>
  800421bcb0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421bcb4:	48 89 c7             	mov    %rax,%rdi
  800421bcb7:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421bcbe:	00 00 00 
  800421bcc1:	ff d0                	callq  *%rax
  800421bcc3:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421bcc8:	eb 7f                	jmp    800421bd49 <vmx_init_vmxon+0x4a7>
  800421bcca:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421bcd1:	00 00 00 
  800421bcd4:	ff d0                	callq  *%rax
  800421bcd6:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421bcdd:	00 00 00 
  800421bce0:	48 98                	cltq   
  800421bce2:	48 c1 e0 03          	shl    $0x3,%rax
  800421bce6:	48 89 c1             	mov    %rax,%rcx
  800421bce9:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bced:	48 01 c8             	add    %rcx,%rax
  800421bcf0:	48 01 d0             	add    %rdx,%rax
  800421bcf3:	48 83 c0 70          	add    $0x70,%rax
  800421bcf7:	c6 40 08 01          	movb   $0x1,0x8(%rax)
  800421bcfb:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421bd02:	00 00 00 
  800421bd05:	ff d0                	callq  *%rax
  800421bd07:	89 c3                	mov    %eax,%ebx
  800421bd09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421bd0d:	48 89 c7             	mov    %rax,%rdi
  800421bd10:	48 b8 2d b3 21 04 80 	movabs $0x800421b32d,%rax
  800421bd17:	00 00 00 
  800421bd1a:	ff d0                	callq  *%rax
  800421bd1c:	48 89 c2             	mov    %rax,%rdx
  800421bd1f:	48 b9 20 e0 6d 04 80 	movabs $0x80046de020,%rcx
  800421bd26:	00 00 00 
  800421bd29:	48 63 c3             	movslq %ebx,%rax
  800421bd2c:	48 c1 e0 03          	shl    $0x3,%rax
  800421bd30:	48 89 c6             	mov    %rax,%rsi
  800421bd33:	48 c1 e6 04          	shl    $0x4,%rsi
  800421bd37:	48 01 f0             	add    %rsi,%rax
  800421bd3a:	48 01 c8             	add    %rcx,%rax
  800421bd3d:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  800421bd41:	48 89 10             	mov    %rdx,(%rax)
  800421bd44:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bd49:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  800421bd50:	5b                   	pop    %rbx
  800421bd51:	5d                   	pop    %rbp
  800421bd52:	c3                   	retq   

000000800421bd53 <vmcs_host_init>:
  800421bd53:	55                   	push   %rbp
  800421bd54:	48 89 e5             	mov    %rsp,%rbp
  800421bd57:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421bd5e:	0f 20 c0             	mov    %cr0,%rax
  800421bd61:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return val;
  800421bd65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421bd69:	c7 45 e4 00 6c 00 00 	movl   $0x6c00,-0x1c(%rbp)
  800421bd70:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421bd74:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421bd78:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421bd7b:	48 89 d6             	mov    %rdx,%rsi
  800421bd7e:	89 c7                	mov    %eax,%edi
  800421bd80:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421bd87:	00 00 00 
  800421bd8a:	ff d0                	callq  *%rax

static __inline uint64_t
rcr3(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr3,%0" : "=r" (val));
  800421bd8c:	0f 20 d8             	mov    %cr3,%rax
  800421bd8f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return val;
  800421bd93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421bd97:	c7 45 cc 02 6c 00 00 	movl   $0x6c02,-0x34(%rbp)
  800421bd9e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421bda2:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421bda6:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421bda9:	48 89 d6             	mov    %rdx,%rsi
  800421bdac:	89 c7                	mov    %eax,%edi
  800421bdae:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421bdb5:	00 00 00 
  800421bdb8:	ff d0                	callq  *%rax

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421bdba:	0f 20 e0             	mov    %cr4,%rax
  800421bdbd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421bdc1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421bdc5:	c7 45 b4 04 6c 00 00 	movl   $0x6c04,-0x4c(%rbp)
  800421bdcc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421bdd0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421bdd4:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421bdd7:	48 89 d6             	mov    %rdx,%rsi
  800421bdda:	89 c7                	mov    %eax,%edi
  800421bddc:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421bde3:	00 00 00 
  800421bde6:	ff d0                	callq  *%rax
  800421bde8:	c7 45 a4 00 0c 00 00 	movl   $0xc00,-0x5c(%rbp)
  800421bdef:	66 c7 45 a2 10 00    	movw   $0x10,-0x5e(%rbp)
  800421bdf5:	0f b7 55 a2          	movzwl -0x5e(%rbp),%edx
  800421bdf9:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421bdfc:	48 89 d6             	mov    %rdx,%rsi
  800421bdff:	89 c7                	mov    %eax,%edi
  800421be01:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421be08:	00 00 00 
  800421be0b:	ff d0                	callq  *%rax
  800421be0d:	c7 45 9c 04 0c 00 00 	movl   $0xc04,-0x64(%rbp)
  800421be14:	66 c7 45 9a 10 00    	movw   $0x10,-0x66(%rbp)
  800421be1a:	0f b7 55 9a          	movzwl -0x66(%rbp),%edx
  800421be1e:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421be21:	48 89 d6             	mov    %rdx,%rsi
  800421be24:	89 c7                	mov    %eax,%edi
  800421be26:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421be2d:	00 00 00 
  800421be30:	ff d0                	callq  *%rax
  800421be32:	c7 45 94 06 0c 00 00 	movl   $0xc06,-0x6c(%rbp)
  800421be39:	66 c7 45 92 10 00    	movw   $0x10,-0x6e(%rbp)
  800421be3f:	0f b7 55 92          	movzwl -0x6e(%rbp),%edx
  800421be43:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421be46:	48 89 d6             	mov    %rdx,%rsi
  800421be49:	89 c7                	mov    %eax,%edi
  800421be4b:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421be52:	00 00 00 
  800421be55:	ff d0                	callq  *%rax
  800421be57:	c7 45 8c 08 0c 00 00 	movl   $0xc08,-0x74(%rbp)
  800421be5e:	66 c7 45 8a 10 00    	movw   $0x10,-0x76(%rbp)
  800421be64:	0f b7 55 8a          	movzwl -0x76(%rbp),%edx
  800421be68:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421be6b:	48 89 d6             	mov    %rdx,%rsi
  800421be6e:	89 c7                	mov    %eax,%edi
  800421be70:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421be77:	00 00 00 
  800421be7a:	ff d0                	callq  *%rax
  800421be7c:	c7 45 84 0a 0c 00 00 	movl   $0xc0a,-0x7c(%rbp)
  800421be83:	66 c7 45 82 10 00    	movw   $0x10,-0x7e(%rbp)
  800421be89:	0f b7 55 82          	movzwl -0x7e(%rbp),%edx
  800421be8d:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421be90:	48 89 d6             	mov    %rdx,%rsi
  800421be93:	89 c7                	mov    %eax,%edi
  800421be95:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421be9c:	00 00 00 
  800421be9f:	ff d0                	callq  *%rax
  800421bea1:	c7 85 7c ff ff ff 02 	movl   $0xc02,-0x84(%rbp)
  800421bea8:	0c 00 00 
  800421beab:	66 c7 85 7a ff ff ff 	movw   $0x8,-0x86(%rbp)
  800421beb2:	08 00 
  800421beb4:	0f b7 95 7a ff ff ff 	movzwl -0x86(%rbp),%edx
  800421bebb:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421bec1:	48 89 d6             	mov    %rdx,%rsi
  800421bec4:	89 c7                	mov    %eax,%edi
  800421bec6:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421becd:	00 00 00 
  800421bed0:	ff d0                	callq  *%rax
  800421bed2:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421bed9:	00 00 00 
  800421bedc:	ff d0                	callq  *%rax
  800421bede:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421bee5:	00 00 00 
  800421bee8:	48 98                	cltq   
  800421beea:	48 c1 e0 03          	shl    $0x3,%rax
  800421beee:	48 89 c1             	mov    %rax,%rcx
  800421bef1:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bef5:	48 01 c8             	add    %rcx,%rax
  800421bef8:	48 01 d0             	add    %rdx,%rax
  800421befb:	0f b6 00             	movzbl (%rax),%eax
  800421befe:	0f b6 c0             	movzbl %al,%eax
  800421bf01:	01 c0                	add    %eax,%eax
  800421bf03:	83 c0 05             	add    $0x5,%eax
  800421bf06:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421bf09:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bf0c:	c1 e0 03             	shl    $0x3,%eax
  800421bf0f:	0f b7 c0             	movzwl %ax,%eax
  800421bf12:	c7 85 74 ff ff ff 0c 	movl   $0xc0c,-0x8c(%rbp)
  800421bf19:	0c 00 00 
  800421bf1c:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
  800421bf23:	0f b7 95 72 ff ff ff 	movzwl -0x8e(%rbp),%edx
  800421bf2a:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421bf30:	48 89 d6             	mov    %rdx,%rsi
  800421bf33:	89 c7                	mov    %eax,%edi
  800421bf35:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421bf3c:	00 00 00 
  800421bf3f:	ff d0                	callq  *%rax
  800421bf41:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421bf48:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421bf4f:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421bf56:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
static __inline void
read_idtr (uint64_t *idtbase, uint16_t *idtlimit)
{
	struct Pseudodesc idtr;

	asm volatile ("sidt %0"
  800421bf5d:	0f 01 8d d0 fe ff ff 	sidt   -0x130(%rbp)
			: "=m" (idtr));
	*idtbase = idtr.pd_base;
  800421bf64:	48 8b 95 d2 fe ff ff 	mov    -0x12e(%rbp),%rdx
  800421bf6b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421bf72:	48 89 10             	mov    %rdx,(%rax)
	*idtlimit = idtr.pd_lim;
  800421bf75:	0f b7 95 d0 fe ff ff 	movzwl -0x130(%rbp),%edx
  800421bf7c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421bf83:	66 89 10             	mov    %dx,(%rax)
  800421bf86:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421bf8d:	c7 85 5c ff ff ff 0e 	movl   $0x6c0e,-0xa4(%rbp)
  800421bf94:	6c 00 00 
  800421bf97:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421bf9e:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421bfa5:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421bfab:	48 89 d6             	mov    %rdx,%rsi
  800421bfae:	89 c7                	mov    %eax,%edi
  800421bfb0:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421bfb7:	00 00 00 
  800421bfba:	ff d0                	callq  *%rax
  800421bfbc:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421bfc3:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800421bfca:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421bfd1:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
static __inline void
read_gdtr (uint64_t *gdtbase, uint16_t *gdtlimit)
{
	struct Pseudodesc gdtr;

	asm volatile ("sgdt %0"
  800421bfd8:	0f 01 85 e0 fe ff ff 	sgdt   -0x120(%rbp)
			: "=m" (gdtr));
	*gdtbase = gdtr.pd_base;
  800421bfdf:	48 8b 95 e2 fe ff ff 	mov    -0x11e(%rbp),%rdx
  800421bfe6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421bfed:	48 89 10             	mov    %rdx,(%rax)
	*gdtlimit = gdtr.pd_lim;
  800421bff0:	0f b7 95 e0 fe ff ff 	movzwl -0x120(%rbp),%edx
  800421bff7:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421bffe:	66 89 10             	mov    %dx,(%rax)
  800421c001:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421c008:	c7 85 3c ff ff ff 0c 	movl   $0x6c0c,-0xc4(%rbp)
  800421c00f:	6c 00 00 
  800421c012:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  800421c019:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421c020:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421c026:	48 89 d6             	mov    %rdx,%rsi
  800421c029:	89 c7                	mov    %eax,%edi
  800421c02b:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c032:	00 00 00 
  800421c035:	ff d0                	callq  *%rax
  800421c037:	c7 85 2c ff ff ff 06 	movl   $0x6c06,-0xd4(%rbp)
  800421c03e:	6c 00 00 
  800421c041:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421c048:	00 00 00 00 
  800421c04c:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421c053:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421c059:	48 89 d6             	mov    %rdx,%rsi
  800421c05c:	89 c7                	mov    %eax,%edi
  800421c05e:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c065:	00 00 00 
  800421c068:	ff d0                	callq  *%rax
  800421c06a:	c7 85 1c ff ff ff 08 	movl   $0x6c08,-0xe4(%rbp)
  800421c071:	6c 00 00 
  800421c074:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  800421c07b:	00 00 00 00 
  800421c07f:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421c086:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c08c:	48 89 d6             	mov    %rdx,%rsi
  800421c08f:	89 c7                	mov    %eax,%edi
  800421c091:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c098:	00 00 00 
  800421c09b:	ff d0                	callq  *%rax
  800421c09d:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421c0a4:	00 00 00 
  800421c0a7:	ff d0                	callq  *%rax
  800421c0a9:	48 98                	cltq   
  800421c0ab:	48 c1 e0 03          	shl    $0x3,%rax
  800421c0af:	48 89 c2             	mov    %rax,%rdx
  800421c0b2:	48 c1 e2 04          	shl    $0x4,%rdx
  800421c0b6:	48 01 d0             	add    %rdx,%rax
  800421c0b9:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800421c0bd:	48 b8 20 e0 6d 04 80 	movabs $0x80046de020,%rax
  800421c0c4:	00 00 00 
  800421c0c7:	48 01 d0             	add    %rdx,%rax
  800421c0ca:	c7 85 0c ff ff ff 0a 	movl   $0x6c0a,-0xf4(%rbp)
  800421c0d1:	6c 00 00 
  800421c0d4:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  800421c0db:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  800421c0e2:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c0e8:	48 89 d6             	mov    %rdx,%rsi
  800421c0eb:	89 c7                	mov    %eax,%edi
  800421c0ed:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c0f4:	00 00 00 
  800421c0f7:	ff d0                	callq  *%rax
  800421c0f9:	48 b8 00 d8 21 04 80 	movabs $0x800421d800,%rax
  800421c100:	00 00 00 
  800421c103:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421c107:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c10b:	48 89 c6             	mov    %rax,%rsi
  800421c10e:	bf 16 6c 00 00       	mov    $0x6c16,%edi
  800421c113:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c11a:	00 00 00 
  800421c11d:	ff d0                	callq  *%rax
  800421c11f:	c9                   	leaveq 
  800421c120:	c3                   	retq   

000000800421c121 <vmcs_guest_init>:
  800421c121:	55                   	push   %rbp
  800421c122:	48 89 e5             	mov    %rsp,%rbp
  800421c125:	48 81 ec f0 01 00 00 	sub    $0x1f0,%rsp
  800421c12c:	c7 45 fc 02 08 00 00 	movl   $0x802,-0x4(%rbp)
  800421c133:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%rbp)
  800421c139:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
  800421c13d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c140:	48 89 d6             	mov    %rdx,%rsi
  800421c143:	89 c7                	mov    %eax,%edi
  800421c145:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c14c:	00 00 00 
  800421c14f:	ff d0                	callq  *%rax
  800421c151:	c7 45 f4 00 08 00 00 	movl   $0x800,-0xc(%rbp)
  800421c158:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%rbp)
  800421c15e:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
  800421c162:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421c165:	48 89 d6             	mov    %rdx,%rsi
  800421c168:	89 c7                	mov    %eax,%edi
  800421c16a:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c171:	00 00 00 
  800421c174:	ff d0                	callq  *%rax
  800421c176:	c7 45 ec 04 08 00 00 	movl   $0x804,-0x14(%rbp)
  800421c17d:	66 c7 45 ea 00 00    	movw   $0x0,-0x16(%rbp)
  800421c183:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
  800421c187:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421c18a:	48 89 d6             	mov    %rdx,%rsi
  800421c18d:	89 c7                	mov    %eax,%edi
  800421c18f:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c196:	00 00 00 
  800421c199:	ff d0                	callq  *%rax
  800421c19b:	c7 45 e4 06 08 00 00 	movl   $0x806,-0x1c(%rbp)
  800421c1a2:	66 c7 45 e2 00 00    	movw   $0x0,-0x1e(%rbp)
  800421c1a8:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
  800421c1ac:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421c1af:	48 89 d6             	mov    %rdx,%rsi
  800421c1b2:	89 c7                	mov    %eax,%edi
  800421c1b4:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c1bb:	00 00 00 
  800421c1be:	ff d0                	callq  *%rax
  800421c1c0:	c7 45 dc 08 08 00 00 	movl   $0x808,-0x24(%rbp)
  800421c1c7:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
  800421c1cd:	0f b7 55 da          	movzwl -0x26(%rbp),%edx
  800421c1d1:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421c1d4:	48 89 d6             	mov    %rdx,%rsi
  800421c1d7:	89 c7                	mov    %eax,%edi
  800421c1d9:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c1e0:	00 00 00 
  800421c1e3:	ff d0                	callq  *%rax
  800421c1e5:	c7 45 d4 0a 08 00 00 	movl   $0x80a,-0x2c(%rbp)
  800421c1ec:	66 c7 45 d2 00 00    	movw   $0x0,-0x2e(%rbp)
  800421c1f2:	0f b7 55 d2          	movzwl -0x2e(%rbp),%edx
  800421c1f6:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421c1f9:	48 89 d6             	mov    %rdx,%rsi
  800421c1fc:	89 c7                	mov    %eax,%edi
  800421c1fe:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c205:	00 00 00 
  800421c208:	ff d0                	callq  *%rax
  800421c20a:	c7 45 cc 0e 08 00 00 	movl   $0x80e,-0x34(%rbp)
  800421c211:	66 c7 45 ca 00 00    	movw   $0x0,-0x36(%rbp)
  800421c217:	0f b7 55 ca          	movzwl -0x36(%rbp),%edx
  800421c21b:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c21e:	48 89 d6             	mov    %rdx,%rsi
  800421c221:	89 c7                	mov    %eax,%edi
  800421c223:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c22a:	00 00 00 
  800421c22d:	ff d0                	callq  *%rax
  800421c22f:	c7 45 c4 0c 08 00 00 	movl   $0x80c,-0x3c(%rbp)
  800421c236:	66 c7 45 c2 00 00    	movw   $0x0,-0x3e(%rbp)
  800421c23c:	0f b7 55 c2          	movzwl -0x3e(%rbp),%edx
  800421c240:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421c243:	48 89 d6             	mov    %rdx,%rsi
  800421c246:	89 c7                	mov    %eax,%edi
  800421c248:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c24f:	00 00 00 
  800421c252:	ff d0                	callq  *%rax
  800421c254:	c7 45 bc 08 68 00 00 	movl   $0x6808,-0x44(%rbp)
  800421c25b:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  800421c262:	00 
  800421c263:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421c267:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421c26a:	48 89 d6             	mov    %rdx,%rsi
  800421c26d:	89 c7                	mov    %eax,%edi
  800421c26f:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c276:	00 00 00 
  800421c279:	ff d0                	callq  *%rax
  800421c27b:	c7 45 ac 06 68 00 00 	movl   $0x6806,-0x54(%rbp)
  800421c282:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  800421c289:	00 
  800421c28a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421c28e:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421c291:	48 89 d6             	mov    %rdx,%rsi
  800421c294:	89 c7                	mov    %eax,%edi
  800421c296:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c29d:	00 00 00 
  800421c2a0:	ff d0                	callq  *%rax
  800421c2a2:	c7 45 9c 0a 68 00 00 	movl   $0x680a,-0x64(%rbp)
  800421c2a9:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  800421c2b0:	00 
  800421c2b1:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421c2b5:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421c2b8:	48 89 d6             	mov    %rdx,%rsi
  800421c2bb:	89 c7                	mov    %eax,%edi
  800421c2bd:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c2c4:	00 00 00 
  800421c2c7:	ff d0                	callq  *%rax
  800421c2c9:	c7 45 8c 0c 68 00 00 	movl   $0x680c,-0x74(%rbp)
  800421c2d0:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421c2d7:	00 
  800421c2d8:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421c2dc:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421c2df:	48 89 d6             	mov    %rdx,%rsi
  800421c2e2:	89 c7                	mov    %eax,%edi
  800421c2e4:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c2eb:	00 00 00 
  800421c2ee:	ff d0                	callq  *%rax
  800421c2f0:	c7 85 7c ff ff ff 0e 	movl   $0x680e,-0x84(%rbp)
  800421c2f7:	68 00 00 
  800421c2fa:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  800421c301:	00 00 00 00 
  800421c305:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421c30c:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421c312:	48 89 d6             	mov    %rdx,%rsi
  800421c315:	89 c7                	mov    %eax,%edi
  800421c317:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c31e:	00 00 00 
  800421c321:	ff d0                	callq  *%rax
  800421c323:	c7 85 6c ff ff ff 10 	movl   $0x6810,-0x94(%rbp)
  800421c32a:	68 00 00 
  800421c32d:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421c334:	00 00 00 00 
  800421c338:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421c33f:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421c345:	48 89 d6             	mov    %rdx,%rsi
  800421c348:	89 c7                	mov    %eax,%edi
  800421c34a:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c351:	00 00 00 
  800421c354:	ff d0                	callq  *%rax
  800421c356:	c7 85 5c ff ff ff 12 	movl   $0x6812,-0xa4(%rbp)
  800421c35d:	68 00 00 
  800421c360:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  800421c367:	00 00 00 00 
  800421c36b:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421c372:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421c378:	48 89 d6             	mov    %rdx,%rsi
  800421c37b:	89 c7                	mov    %eax,%edi
  800421c37d:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c384:	00 00 00 
  800421c387:	ff d0                	callq  *%rax
  800421c389:	c7 85 4c ff ff ff 16 	movl   $0x6816,-0xb4(%rbp)
  800421c390:	68 00 00 
  800421c393:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  800421c39a:	00 00 00 00 
  800421c39e:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  800421c3a5:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421c3ab:	48 89 d6             	mov    %rdx,%rsi
  800421c3ae:	89 c7                	mov    %eax,%edi
  800421c3b0:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c3b7:	00 00 00 
  800421c3ba:	ff d0                	callq  *%rax
  800421c3bc:	c7 85 3c ff ff ff 18 	movl   $0x6818,-0xc4(%rbp)
  800421c3c3:	68 00 00 
  800421c3c6:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421c3cd:	00 00 00 00 
  800421c3d1:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421c3d8:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421c3de:	48 89 d6             	mov    %rdx,%rsi
  800421c3e1:	89 c7                	mov    %eax,%edi
  800421c3e3:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c3ea:	00 00 00 
  800421c3ed:	ff d0                	callq  *%rax
  800421c3ef:	c7 85 2c ff ff ff 14 	movl   $0x6814,-0xd4(%rbp)
  800421c3f6:	68 00 00 
  800421c3f9:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421c400:	00 00 00 00 
  800421c404:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421c40b:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421c411:	48 89 d6             	mov    %rdx,%rsi
  800421c414:	89 c7                	mov    %eax,%edi
  800421c416:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c41d:	00 00 00 
  800421c420:	ff d0                	callq  *%rax
  800421c422:	c7 85 1c ff ff ff 02 	movl   $0x4802,-0xe4(%rbp)
  800421c429:	48 00 00 
  800421c42c:	c7 85 18 ff ff ff ff 	movl   $0xffff,-0xe8(%rbp)
  800421c433:	ff 00 00 
  800421c436:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421c43c:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c442:	48 89 d6             	mov    %rdx,%rsi
  800421c445:	89 c7                	mov    %eax,%edi
  800421c447:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c44e:	00 00 00 
  800421c451:	ff d0                	callq  *%rax
  800421c453:	c7 85 14 ff ff ff 00 	movl   $0x4800,-0xec(%rbp)
  800421c45a:	48 00 00 
  800421c45d:	c7 85 10 ff ff ff ff 	movl   $0xffff,-0xf0(%rbp)
  800421c464:	ff 00 00 
  800421c467:	8b 95 10 ff ff ff    	mov    -0xf0(%rbp),%edx
  800421c46d:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c473:	48 89 d6             	mov    %rdx,%rsi
  800421c476:	89 c7                	mov    %eax,%edi
  800421c478:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c47f:	00 00 00 
  800421c482:	ff d0                	callq  *%rax
  800421c484:	c7 85 0c ff ff ff 04 	movl   $0x4804,-0xf4(%rbp)
  800421c48b:	48 00 00 
  800421c48e:	c7 85 08 ff ff ff ff 	movl   $0xffff,-0xf8(%rbp)
  800421c495:	ff 00 00 
  800421c498:	8b 95 08 ff ff ff    	mov    -0xf8(%rbp),%edx
  800421c49e:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c4a4:	48 89 d6             	mov    %rdx,%rsi
  800421c4a7:	89 c7                	mov    %eax,%edi
  800421c4a9:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c4b0:	00 00 00 
  800421c4b3:	ff d0                	callq  *%rax
  800421c4b5:	c7 85 04 ff ff ff 06 	movl   $0x4806,-0xfc(%rbp)
  800421c4bc:	48 00 00 
  800421c4bf:	c7 85 00 ff ff ff ff 	movl   $0xffff,-0x100(%rbp)
  800421c4c6:	ff 00 00 
  800421c4c9:	8b 95 00 ff ff ff    	mov    -0x100(%rbp),%edx
  800421c4cf:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  800421c4d5:	48 89 d6             	mov    %rdx,%rsi
  800421c4d8:	89 c7                	mov    %eax,%edi
  800421c4da:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c4e1:	00 00 00 
  800421c4e4:	ff d0                	callq  *%rax
  800421c4e6:	c7 85 fc fe ff ff 08 	movl   $0x4808,-0x104(%rbp)
  800421c4ed:	48 00 00 
  800421c4f0:	c7 85 f8 fe ff ff ff 	movl   $0xffff,-0x108(%rbp)
  800421c4f7:	ff 00 00 
  800421c4fa:	8b 95 f8 fe ff ff    	mov    -0x108(%rbp),%edx
  800421c500:	8b 85 fc fe ff ff    	mov    -0x104(%rbp),%eax
  800421c506:	48 89 d6             	mov    %rdx,%rsi
  800421c509:	89 c7                	mov    %eax,%edi
  800421c50b:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c512:	00 00 00 
  800421c515:	ff d0                	callq  *%rax
  800421c517:	c7 85 f4 fe ff ff 0a 	movl   $0x480a,-0x10c(%rbp)
  800421c51e:	48 00 00 
  800421c521:	c7 85 f0 fe ff ff ff 	movl   $0xffff,-0x110(%rbp)
  800421c528:	ff 00 00 
  800421c52b:	8b 95 f0 fe ff ff    	mov    -0x110(%rbp),%edx
  800421c531:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  800421c537:	48 89 d6             	mov    %rdx,%rsi
  800421c53a:	89 c7                	mov    %eax,%edi
  800421c53c:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c543:	00 00 00 
  800421c546:	ff d0                	callq  *%rax
  800421c548:	c7 85 ec fe ff ff 0c 	movl   $0x480c,-0x114(%rbp)
  800421c54f:	48 00 00 
  800421c552:	c7 85 e8 fe ff ff ff 	movl   $0xffff,-0x118(%rbp)
  800421c559:	ff 00 00 
  800421c55c:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421c562:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421c568:	48 89 d6             	mov    %rdx,%rsi
  800421c56b:	89 c7                	mov    %eax,%edi
  800421c56d:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c574:	00 00 00 
  800421c577:	ff d0                	callq  *%rax
  800421c579:	c7 85 e4 fe ff ff 0e 	movl   $0x480e,-0x11c(%rbp)
  800421c580:	48 00 00 
  800421c583:	c7 85 e0 fe ff ff ff 	movl   $0xfffff,-0x120(%rbp)
  800421c58a:	ff 0f 00 
  800421c58d:	8b 95 e0 fe ff ff    	mov    -0x120(%rbp),%edx
  800421c593:	8b 85 e4 fe ff ff    	mov    -0x11c(%rbp),%eax
  800421c599:	48 89 d6             	mov    %rdx,%rsi
  800421c59c:	89 c7                	mov    %eax,%edi
  800421c59e:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c5a5:	00 00 00 
  800421c5a8:	ff d0                	callq  *%rax
  800421c5aa:	c7 85 dc fe ff ff 10 	movl   $0x4810,-0x124(%rbp)
  800421c5b1:	48 00 00 
  800421c5b4:	c7 85 d8 fe ff ff 30 	movl   $0x30,-0x128(%rbp)
  800421c5bb:	00 00 00 
  800421c5be:	8b 95 d8 fe ff ff    	mov    -0x128(%rbp),%edx
  800421c5c4:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
  800421c5ca:	48 89 d6             	mov    %rdx,%rsi
  800421c5cd:	89 c7                	mov    %eax,%edi
  800421c5cf:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c5d6:	00 00 00 
  800421c5d9:	ff d0                	callq  *%rax
  800421c5db:	c7 85 d4 fe ff ff 12 	movl   $0x4812,-0x12c(%rbp)
  800421c5e2:	48 00 00 
  800421c5e5:	c7 85 d0 fe ff ff ff 	movl   $0x3ff,-0x130(%rbp)
  800421c5ec:	03 00 00 
  800421c5ef:	8b 95 d0 fe ff ff    	mov    -0x130(%rbp),%edx
  800421c5f5:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
  800421c5fb:	48 89 d6             	mov    %rdx,%rsi
  800421c5fe:	89 c7                	mov    %eax,%edi
  800421c600:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c607:	00 00 00 
  800421c60a:	ff d0                	callq  *%rax
  800421c60c:	c7 85 cc fe ff ff 16 	movl   $0x4816,-0x134(%rbp)
  800421c613:	48 00 00 
  800421c616:	c7 85 c8 fe ff ff 93 	movl   $0x93,-0x138(%rbp)
  800421c61d:	00 00 00 
  800421c620:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  800421c626:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
  800421c62c:	48 89 d6             	mov    %rdx,%rsi
  800421c62f:	89 c7                	mov    %eax,%edi
  800421c631:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c638:	00 00 00 
  800421c63b:	ff d0                	callq  *%rax
  800421c63d:	c7 85 c4 fe ff ff 14 	movl   $0x4814,-0x13c(%rbp)
  800421c644:	48 00 00 
  800421c647:	c7 85 c0 fe ff ff 93 	movl   $0x93,-0x140(%rbp)
  800421c64e:	00 00 00 
  800421c651:	8b 95 c0 fe ff ff    	mov    -0x140(%rbp),%edx
  800421c657:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
  800421c65d:	48 89 d6             	mov    %rdx,%rsi
  800421c660:	89 c7                	mov    %eax,%edi
  800421c662:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c669:	00 00 00 
  800421c66c:	ff d0                	callq  *%rax
  800421c66e:	c7 85 bc fe ff ff 18 	movl   $0x4818,-0x144(%rbp)
  800421c675:	48 00 00 
  800421c678:	c7 85 b8 fe ff ff 93 	movl   $0x93,-0x148(%rbp)
  800421c67f:	00 00 00 
  800421c682:	8b 95 b8 fe ff ff    	mov    -0x148(%rbp),%edx
  800421c688:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  800421c68e:	48 89 d6             	mov    %rdx,%rsi
  800421c691:	89 c7                	mov    %eax,%edi
  800421c693:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c69a:	00 00 00 
  800421c69d:	ff d0                	callq  *%rax
  800421c69f:	c7 85 b4 fe ff ff 1a 	movl   $0x481a,-0x14c(%rbp)
  800421c6a6:	48 00 00 
  800421c6a9:	c7 85 b0 fe ff ff 93 	movl   $0x93,-0x150(%rbp)
  800421c6b0:	00 00 00 
  800421c6b3:	8b 95 b0 fe ff ff    	mov    -0x150(%rbp),%edx
  800421c6b9:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
  800421c6bf:	48 89 d6             	mov    %rdx,%rsi
  800421c6c2:	89 c7                	mov    %eax,%edi
  800421c6c4:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c6cb:	00 00 00 
  800421c6ce:	ff d0                	callq  *%rax
  800421c6d0:	c7 85 ac fe ff ff 1c 	movl   $0x481c,-0x154(%rbp)
  800421c6d7:	48 00 00 
  800421c6da:	c7 85 a8 fe ff ff 93 	movl   $0x93,-0x158(%rbp)
  800421c6e1:	00 00 00 
  800421c6e4:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
  800421c6ea:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  800421c6f0:	48 89 d6             	mov    %rdx,%rsi
  800421c6f3:	89 c7                	mov    %eax,%edi
  800421c6f5:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c6fc:	00 00 00 
  800421c6ff:	ff d0                	callq  *%rax
  800421c701:	c7 85 a4 fe ff ff 1e 	movl   $0x481e,-0x15c(%rbp)
  800421c708:	48 00 00 
  800421c70b:	c7 85 a0 fe ff ff 93 	movl   $0x93,-0x160(%rbp)
  800421c712:	00 00 00 
  800421c715:	8b 95 a0 fe ff ff    	mov    -0x160(%rbp),%edx
  800421c71b:	8b 85 a4 fe ff ff    	mov    -0x15c(%rbp),%eax
  800421c721:	48 89 d6             	mov    %rdx,%rsi
  800421c724:	89 c7                	mov    %eax,%edi
  800421c726:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c72d:	00 00 00 
  800421c730:	ff d0                	callq  *%rax
  800421c732:	c7 85 9c fe ff ff 20 	movl   $0x4820,-0x164(%rbp)
  800421c739:	48 00 00 
  800421c73c:	c7 85 98 fe ff ff 82 	movl   $0x82,-0x168(%rbp)
  800421c743:	00 00 00 
  800421c746:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
  800421c74c:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
  800421c752:	48 89 d6             	mov    %rdx,%rsi
  800421c755:	89 c7                	mov    %eax,%edi
  800421c757:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c75e:	00 00 00 
  800421c761:	ff d0                	callq  *%rax
  800421c763:	c7 85 94 fe ff ff 22 	movl   $0x4822,-0x16c(%rbp)
  800421c76a:	48 00 00 
  800421c76d:	c7 85 90 fe ff ff 8b 	movl   $0x8b,-0x170(%rbp)
  800421c774:	00 00 00 
  800421c777:	8b 95 90 fe ff ff    	mov    -0x170(%rbp),%edx
  800421c77d:	8b 85 94 fe ff ff    	mov    -0x16c(%rbp),%eax
  800421c783:	48 89 d6             	mov    %rdx,%rsi
  800421c786:	89 c7                	mov    %eax,%edi
  800421c788:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c78f:	00 00 00 
  800421c792:	ff d0                	callq  *%rax
  800421c794:	c7 85 8c fe ff ff 26 	movl   $0x4826,-0x174(%rbp)
  800421c79b:	48 00 00 
  800421c79e:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
  800421c7a5:	00 00 00 
  800421c7a8:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
  800421c7ae:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
  800421c7b4:	48 89 d6             	mov    %rdx,%rsi
  800421c7b7:	89 c7                	mov    %eax,%edi
  800421c7b9:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c7c0:	00 00 00 
  800421c7c3:	ff d0                	callq  *%rax
  800421c7c5:	c7 85 84 fe ff ff 24 	movl   $0x4824,-0x17c(%rbp)
  800421c7cc:	48 00 00 
  800421c7cf:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
  800421c7d6:	00 00 00 
  800421c7d9:	8b 95 80 fe ff ff    	mov    -0x180(%rbp),%edx
  800421c7df:	8b 85 84 fe ff ff    	mov    -0x17c(%rbp),%eax
  800421c7e5:	48 89 d6             	mov    %rdx,%rsi
  800421c7e8:	89 c7                	mov    %eax,%edi
  800421c7ea:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c7f1:	00 00 00 
  800421c7f4:	ff d0                	callq  *%rax
  800421c7f6:	c7 85 7c fe ff ff 02 	movl   $0x6802,-0x184(%rbp)
  800421c7fd:	68 00 00 
  800421c800:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
  800421c807:	00 00 00 00 
  800421c80b:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  800421c812:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
  800421c818:	48 89 d6             	mov    %rdx,%rsi
  800421c81b:	89 c7                	mov    %eax,%edi
  800421c81d:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c824:	00 00 00 
  800421c827:	ff d0                	callq  *%rax
  800421c829:	c7 85 6c fe ff ff 00 	movl   $0x6800,-0x194(%rbp)
  800421c830:	68 00 00 
  800421c833:	48 c7 85 60 fe ff ff 	movq   $0x20,-0x1a0(%rbp)
  800421c83a:	20 00 00 00 
  800421c83e:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  800421c845:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
  800421c84b:	48 89 d6             	mov    %rdx,%rsi
  800421c84e:	89 c7                	mov    %eax,%edi
  800421c850:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c857:	00 00 00 
  800421c85a:	ff d0                	callq  *%rax
  800421c85c:	c7 85 5c fe ff ff 04 	movl   $0x6804,-0x1a4(%rbp)
  800421c863:	68 00 00 
  800421c866:	48 c7 85 50 fe ff ff 	movq   $0x2000,-0x1b0(%rbp)
  800421c86d:	00 20 00 00 
  800421c871:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  800421c878:	8b 85 5c fe ff ff    	mov    -0x1a4(%rbp),%eax
  800421c87e:	48 89 d6             	mov    %rdx,%rsi
  800421c881:	89 c7                	mov    %eax,%edi
  800421c883:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c88a:	00 00 00 
  800421c88d:	ff d0                	callq  *%rax
  800421c88f:	c7 85 4c fe ff ff 00 	movl   $0x2800,-0x1b4(%rbp)
  800421c896:	28 00 00 
  800421c899:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421c89e:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  800421c8a5:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  800421c8ac:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
  800421c8b2:	48 89 d6             	mov    %rdx,%rsi
  800421c8b5:	89 c7                	mov    %eax,%edi
  800421c8b7:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c8be:	00 00 00 
  800421c8c1:	ff d0                	callq  *%rax
  800421c8c3:	c7 85 3c fe ff ff 01 	movl   $0x2801,-0x1c4(%rbp)
  800421c8ca:	28 00 00 
  800421c8cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421c8d2:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  800421c8d9:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  800421c8e0:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  800421c8e6:	48 89 d6             	mov    %rdx,%rsi
  800421c8e9:	89 c7                	mov    %eax,%edi
  800421c8eb:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c8f2:	00 00 00 
  800421c8f5:	ff d0                	callq  *%rax
  800421c8f7:	c7 85 2c fe ff ff 1a 	movl   $0x681a,-0x1d4(%rbp)
  800421c8fe:	68 00 00 
  800421c901:	48 c7 85 20 fe ff ff 	movq   $0x0,-0x1e0(%rbp)
  800421c908:	00 00 00 00 
  800421c90c:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  800421c913:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
  800421c919:	48 89 d6             	mov    %rdx,%rsi
  800421c91c:	89 c7                	mov    %eax,%edi
  800421c91e:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c925:	00 00 00 
  800421c928:	ff d0                	callq  *%rax
  800421c92a:	c7 85 1c fe ff ff 20 	movl   $0x6820,-0x1e4(%rbp)
  800421c931:	68 00 00 
  800421c934:	48 c7 85 10 fe ff ff 	movq   $0x2,-0x1f0(%rbp)
  800421c93b:	02 00 00 00 
  800421c93f:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
  800421c946:	8b 85 1c fe ff ff    	mov    -0x1e4(%rbp),%eax
  800421c94c:	48 89 d6             	mov    %rdx,%rsi
  800421c94f:	89 c7                	mov    %eax,%edi
  800421c951:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421c958:	00 00 00 
  800421c95b:	ff d0                	callq  *%rax
  800421c95d:	c9                   	leaveq 
  800421c95e:	c3                   	retq   

000000800421c95f <vmx_read_capability_msr>:
  800421c95f:	55                   	push   %rbp
  800421c960:	48 89 e5             	mov    %rsp,%rbp
  800421c963:	48 83 ec 38          	sub    $0x38,%rsp
  800421c967:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800421c96a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421c96e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421c972:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421c975:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421c978:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421c97b:	89 c1                	mov    %eax,%ecx
  800421c97d:	0f 32                	rdmsr  
  800421c97f:	89 55 f0             	mov    %edx,-0x10(%rbp)
  800421c982:	89 45 ec             	mov    %eax,-0x14(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421c985:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800421c98c:	00 
	ret = edx;
  800421c98d:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421c990:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	ret = ret << 32;
  800421c994:	48 c1 65 e0 20       	shlq   $0x20,-0x20(%rbp)
	ret |= eax;
  800421c999:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421c99c:	48 09 45 e0          	or     %rax,-0x20(%rbp)

	return ret;
  800421c9a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c9a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c9a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c9ac:	48 c1 e8 20          	shr    $0x20,%rax
  800421c9b0:	89 c2                	mov    %eax,%edx
  800421c9b2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c9b6:	89 10                	mov    %edx,(%rax)
  800421c9b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c9bc:	89 c2                	mov    %eax,%edx
  800421c9be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421c9c2:	89 10                	mov    %edx,(%rax)
  800421c9c4:	c9                   	leaveq 
  800421c9c5:	c3                   	retq   

000000800421c9c6 <vmcs_ctls_init>:
  800421c9c6:	55                   	push   %rbp
  800421c9c7:	48 89 e5             	mov    %rsp,%rbp
  800421c9ca:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800421c9d1:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421c9d8:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  800421c9df:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  800421c9e6:	48 89 c6             	mov    %rax,%rsi
  800421c9e9:	bf 81 04 00 00       	mov    $0x481,%edi
  800421c9ee:	48 b8 5f c9 21 04 80 	movabs $0x800421c95f,%rax
  800421c9f5:	00 00 00 
  800421c9f8:	ff d0                	callq  *%rax
  800421c9fa:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  800421ca00:	83 c8 01             	or     $0x1,%eax
  800421ca03:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  800421ca09:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800421ca0f:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
  800421ca15:	21 d0                	and    %edx,%eax
  800421ca17:	c7 45 cc 00 40 00 00 	movl   $0x4000,-0x34(%rbp)
  800421ca1e:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421ca21:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421ca24:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421ca27:	48 89 d6             	mov    %rdx,%rsi
  800421ca2a:	89 c7                	mov    %eax,%edi
  800421ca2c:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421ca33:	00 00 00 
  800421ca36:	ff d0                	callq  *%rax
  800421ca38:	48 8d 95 1c ff ff ff 	lea    -0xe4(%rbp),%rdx
  800421ca3f:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800421ca46:	48 89 c6             	mov    %rax,%rsi
  800421ca49:	bf 82 04 00 00       	mov    $0x482,%edi
  800421ca4e:	48 b8 5f c9 21 04 80 	movabs $0x800421c95f,%rax
  800421ca55:	00 00 00 
  800421ca58:	ff d0                	callq  *%rax
  800421ca5a:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421ca60:	c1 e8 1f             	shr    $0x1f,%eax
  800421ca63:	83 f8 01             	cmp    $0x1,%eax
  800421ca66:	74 35                	je     800421ca9d <vmcs_ctls_init+0xd7>
  800421ca68:	48 b9 88 22 22 04 80 	movabs $0x8004222288,%rcx
  800421ca6f:	00 00 00 
  800421ca72:	48 ba 1e 22 22 04 80 	movabs $0x800422221e,%rdx
  800421ca79:	00 00 00 
  800421ca7c:	be 5e 01 00 00       	mov    $0x15e,%esi
  800421ca81:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421ca88:	00 00 00 
  800421ca8b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ca90:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421ca97:	00 00 00 
  800421ca9a:	41 ff d0             	callq  *%r8
  800421ca9d:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421caa3:	0d 00 00 00 80       	or     $0x80000000,%eax
  800421caa8:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421caae:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421cab4:	0c 80                	or     $0x80,%al
  800421cab6:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421cabc:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421cac2:	0d 00 00 00 02       	or     $0x2000000,%eax
  800421cac7:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421cacd:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421cad3:	25 ff 7d fe ff       	and    $0xfffe7dff,%eax
  800421cad8:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421cade:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  800421cae4:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421caea:	21 d0                	and    %edx,%eax
  800421caec:	c7 45 c4 02 40 00 00 	movl   $0x4002,-0x3c(%rbp)
  800421caf3:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421caf6:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421caf9:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421cafc:	48 89 d6             	mov    %rdx,%rsi
  800421caff:	89 c7                	mov    %eax,%edi
  800421cb01:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421cb08:	00 00 00 
  800421cb0b:	ff d0                	callq  *%rax
  800421cb0d:	48 8d 95 14 ff ff ff 	lea    -0xec(%rbp),%rdx
  800421cb14:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  800421cb1b:	48 89 c6             	mov    %rax,%rsi
  800421cb1e:	bf 8b 04 00 00       	mov    $0x48b,%edi
  800421cb23:	48 b8 5f c9 21 04 80 	movabs $0x800421c95f,%rax
  800421cb2a:	00 00 00 
  800421cb2d:	ff d0                	callq  *%rax
  800421cb2f:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421cb35:	83 c8 02             	or     $0x2,%eax
  800421cb38:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421cb3e:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421cb44:	0c 80                	or     $0x80,%al
  800421cb46:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421cb4c:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
  800421cb52:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421cb58:	21 d0                	and    %edx,%eax
  800421cb5a:	c7 45 bc 1e 40 00 00 	movl   $0x401e,-0x44(%rbp)
  800421cb61:	89 45 b8             	mov    %eax,-0x48(%rbp)
  800421cb64:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421cb67:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421cb6a:	48 89 d6             	mov    %rdx,%rsi
  800421cb6d:	89 c7                	mov    %eax,%edi
  800421cb6f:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421cb76:	00 00 00 
  800421cb79:	ff d0                	callq  *%rax
  800421cb7b:	48 8d 95 0c ff ff ff 	lea    -0xf4(%rbp),%rdx
  800421cb82:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
  800421cb89:	48 89 c6             	mov    %rax,%rsi
  800421cb8c:	bf 83 04 00 00       	mov    $0x483,%edi
  800421cb91:	48 b8 5f c9 21 04 80 	movabs $0x800421c95f,%rax
  800421cb98:	00 00 00 
  800421cb9b:	ff d0                	callq  *%rax
  800421cb9d:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421cba3:	80 cc 02             	or     $0x2,%ah
  800421cba6:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421cbac:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421cbb2:	80 cc 80             	or     $0x80,%ah
  800421cbb5:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421cbbb:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800421cbc1:	8b 85 08 ff ff ff    	mov    -0xf8(%rbp),%eax
  800421cbc7:	21 d0                	and    %edx,%eax
  800421cbc9:	c7 45 b4 0c 40 00 00 	movl   $0x400c,-0x4c(%rbp)
  800421cbd0:	89 45 b0             	mov    %eax,-0x50(%rbp)
  800421cbd3:	8b 55 b0             	mov    -0x50(%rbp),%edx
  800421cbd6:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421cbd9:	48 89 d6             	mov    %rdx,%rsi
  800421cbdc:	89 c7                	mov    %eax,%edi
  800421cbde:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421cbe5:	00 00 00 
  800421cbe8:	ff d0                	callq  *%rax
  800421cbea:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cbf1:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421cbf8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421cbfc:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421cc03:	00 00 00 
  800421cc06:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421cc0a:	77 32                	ja     800421cc3e <vmcs_ctls_init+0x278>
  800421cc0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421cc10:	48 89 c1             	mov    %rax,%rcx
  800421cc13:	48 ba b0 22 22 04 80 	movabs $0x80042222b0,%rdx
  800421cc1a:	00 00 00 
  800421cc1d:	be 82 01 00 00       	mov    $0x182,%esi
  800421cc22:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421cc29:	00 00 00 
  800421cc2c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cc31:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421cc38:	00 00 00 
  800421cc3b:	41 ff d0             	callq  *%r8
  800421cc3e:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421cc45:	ff ff ff 
  800421cc48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421cc4c:	48 01 d0             	add    %rdx,%rax
  800421cc4f:	c7 45 ac 06 20 00 00 	movl   $0x2006,-0x54(%rbp)
  800421cc56:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421cc5a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421cc5e:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421cc61:	48 89 d6             	mov    %rdx,%rsi
  800421cc64:	89 c7                	mov    %eax,%edi
  800421cc66:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421cc6d:	00 00 00 
  800421cc70:	ff d0                	callq  *%rax
  800421cc72:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cc79:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421cc7f:	c7 45 9c 0e 40 00 00 	movl   $0x400e,-0x64(%rbp)
  800421cc86:	89 45 98             	mov    %eax,-0x68(%rbp)
  800421cc89:	8b 55 98             	mov    -0x68(%rbp),%edx
  800421cc8c:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421cc8f:	48 89 d6             	mov    %rdx,%rsi
  800421cc92:	89 c7                	mov    %eax,%edi
  800421cc94:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421cc9b:	00 00 00 
  800421cc9e:	ff d0                	callq  *%rax
  800421cca0:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cca7:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  800421ccae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421ccb2:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421ccb9:	00 00 00 
  800421ccbc:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800421ccc0:	77 32                	ja     800421ccf4 <vmcs_ctls_init+0x32e>
  800421ccc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421ccc6:	48 89 c1             	mov    %rax,%rcx
  800421ccc9:	48 ba b0 22 22 04 80 	movabs $0x80042222b0,%rdx
  800421ccd0:	00 00 00 
  800421ccd3:	be 86 01 00 00       	mov    $0x186,%esi
  800421ccd8:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421ccdf:	00 00 00 
  800421cce2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cce7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421ccee:	00 00 00 
  800421ccf1:	41 ff d0             	callq  *%r8
  800421ccf4:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421ccfb:	ff ff ff 
  800421ccfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421cd02:	48 01 d0             	add    %rdx,%rax
  800421cd05:	c7 45 94 08 20 00 00 	movl   $0x2008,-0x6c(%rbp)
  800421cd0c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800421cd10:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421cd14:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421cd17:	48 89 d6             	mov    %rdx,%rsi
  800421cd1a:	89 c7                	mov    %eax,%edi
  800421cd1c:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421cd23:	00 00 00 
  800421cd26:	ff d0                	callq  *%rax
  800421cd28:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cd2f:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421cd35:	c7 45 84 10 40 00 00 	movl   $0x4010,-0x7c(%rbp)
  800421cd3c:	89 45 80             	mov    %eax,-0x80(%rbp)
  800421cd3f:	8b 55 80             	mov    -0x80(%rbp),%edx
  800421cd42:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421cd45:	48 89 d6             	mov    %rdx,%rsi
  800421cd48:	89 c7                	mov    %eax,%edi
  800421cd4a:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421cd51:	00 00 00 
  800421cd54:	ff d0                	callq  *%rax
  800421cd56:	48 8d 95 04 ff ff ff 	lea    -0xfc(%rbp),%rdx
  800421cd5d:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421cd64:	48 89 c6             	mov    %rax,%rsi
  800421cd67:	bf 84 04 00 00       	mov    $0x484,%edi
  800421cd6c:	48 b8 5f c9 21 04 80 	movabs $0x800421c95f,%rax
  800421cd73:	00 00 00 
  800421cd76:	ff d0                	callq  *%rax
  800421cd78:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cd7f:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421cd86:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421cd8a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421cd91:	00 00 00 
  800421cd94:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421cd98:	77 32                	ja     800421cdcc <vmcs_ctls_init+0x406>
  800421cd9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421cd9e:	48 89 c1             	mov    %rax,%rcx
  800421cda1:	48 ba b0 22 22 04 80 	movabs $0x80042222b0,%rdx
  800421cda8:	00 00 00 
  800421cdab:	be 90 01 00 00       	mov    $0x190,%esi
  800421cdb0:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421cdb7:	00 00 00 
  800421cdba:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cdbf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421cdc6:	00 00 00 
  800421cdc9:	41 ff d0             	callq  *%r8
  800421cdcc:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421cdd3:	ff ff ff 
  800421cdd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421cdda:	48 01 d0             	add    %rdx,%rax
  800421cddd:	c7 85 7c ff ff ff 0a 	movl   $0x200a,-0x84(%rbp)
  800421cde4:	20 00 00 
  800421cde7:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421cdee:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421cdf5:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421cdfb:	48 89 d6             	mov    %rdx,%rsi
  800421cdfe:	89 c7                	mov    %eax,%edi
  800421ce00:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421ce07:	00 00 00 
  800421ce0a:	ff d0                	callq  *%rax
  800421ce0c:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ce13:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421ce19:	c7 85 6c ff ff ff 14 	movl   $0x4014,-0x94(%rbp)
  800421ce20:	40 00 00 
  800421ce23:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  800421ce29:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
  800421ce2f:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421ce35:	48 89 d6             	mov    %rdx,%rsi
  800421ce38:	89 c7                	mov    %eax,%edi
  800421ce3a:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421ce41:	00 00 00 
  800421ce44:	ff d0                	callq  *%rax
  800421ce46:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
  800421ce4c:	8b 85 00 ff ff ff    	mov    -0x100(%rbp),%eax
  800421ce52:	21 d0                	and    %edx,%eax
  800421ce54:	c7 85 64 ff ff ff 12 	movl   $0x4012,-0x9c(%rbp)
  800421ce5b:	40 00 00 
  800421ce5e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  800421ce64:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  800421ce6a:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  800421ce70:	48 89 d6             	mov    %rdx,%rsi
  800421ce73:	89 c7                	mov    %eax,%edi
  800421ce75:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421ce7c:	00 00 00 
  800421ce7f:	ff d0                	callq  *%rax
  800421ce81:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ce88:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800421ce8f:	48 83 c8 18          	or     $0x18,%rax
  800421ce93:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421ce97:	c7 85 5c ff ff ff 1a 	movl   $0x201a,-0xa4(%rbp)
  800421ce9e:	20 00 00 
  800421cea1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421cea5:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421ceac:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421ceb3:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421ceb9:	48 89 d6             	mov    %rdx,%rsi
  800421cebc:	89 c7                	mov    %eax,%edi
  800421cebe:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421cec5:	00 00 00 
  800421cec8:	ff d0                	callq  *%rax
  800421ceca:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421ced1:	8b 80 30 01 00 00    	mov    0x130(%rax),%eax
  800421ced7:	c7 85 4c ff ff ff 04 	movl   $0x4004,-0xb4(%rbp)
  800421cede:	40 00 00 
  800421cee1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  800421cee7:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
  800421ceed:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421cef3:	48 89 d6             	mov    %rdx,%rsi
  800421cef6:	89 c7                	mov    %eax,%edi
  800421cef8:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421ceff:	00 00 00 
  800421cf02:	ff d0                	callq  *%rax
  800421cf04:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cf0b:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  800421cf12:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421cf16:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421cf1d:	00 00 00 
  800421cf20:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800421cf24:	77 32                	ja     800421cf58 <vmcs_ctls_init+0x592>
  800421cf26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cf2a:	48 89 c1             	mov    %rax,%rcx
  800421cf2d:	48 ba b0 22 22 04 80 	movabs $0x80042222b0,%rdx
  800421cf34:	00 00 00 
  800421cf37:	be 9d 01 00 00       	mov    $0x19d,%esi
  800421cf3c:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421cf43:	00 00 00 
  800421cf46:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cf4b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421cf52:	00 00 00 
  800421cf55:	41 ff d0             	callq  *%r8
  800421cf58:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421cf5f:	ff ff ff 
  800421cf62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cf66:	48 01 d0             	add    %rdx,%rax
  800421cf69:	c7 85 44 ff ff ff 00 	movl   $0x2000,-0xbc(%rbp)
  800421cf70:	20 00 00 
  800421cf73:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800421cf7a:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  800421cf81:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421cf87:	48 89 d6             	mov    %rdx,%rsi
  800421cf8a:	89 c7                	mov    %eax,%edi
  800421cf8c:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421cf93:	00 00 00 
  800421cf96:	ff d0                	callq  *%rax
  800421cf98:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421cf9f:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  800421cfa6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421cfaa:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421cfb1:	00 00 00 
  800421cfb4:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800421cfb8:	77 32                	ja     800421cfec <vmcs_ctls_init+0x626>
  800421cfba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421cfbe:	48 89 c1             	mov    %rax,%rcx
  800421cfc1:	48 ba b0 22 22 04 80 	movabs $0x80042222b0,%rdx
  800421cfc8:	00 00 00 
  800421cfcb:	be 9f 01 00 00       	mov    $0x19f,%esi
  800421cfd0:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421cfd7:	00 00 00 
  800421cfda:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cfdf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421cfe6:	00 00 00 
  800421cfe9:	41 ff d0             	callq  *%r8
  800421cfec:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421cff3:	ff ff ff 
  800421cff6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421cffa:	48 01 d0             	add    %rdx,%rax
  800421cffd:	c7 85 34 ff ff ff 02 	movl   $0x2002,-0xcc(%rbp)
  800421d004:	20 00 00 
  800421d007:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421d00e:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  800421d015:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
  800421d01b:	48 89 d6             	mov    %rdx,%rsi
  800421d01e:	89 c7                	mov    %eax,%edi
  800421d020:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421d027:	00 00 00 
  800421d02a:	ff d0                	callq  *%rax
  800421d02c:	c9                   	leaveq 
  800421d02d:	c3                   	retq   

000000800421d02e <vmcs_dump_cpu>:
  800421d02e:	55                   	push   %rbp
  800421d02f:	48 89 e5             	mov    %rsp,%rbp
  800421d032:	53                   	push   %rbx
  800421d033:	48 83 ec 28          	sub    $0x28,%rsp
  800421d037:	bf 20 68 00 00       	mov    $0x6820,%edi
  800421d03c:	48 b8 4c b2 21 04 80 	movabs $0x800421b24c,%rax
  800421d043:	00 00 00 
  800421d046:	ff d0                	callq  *%rax
  800421d048:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421d04c:	48 bf d4 22 22 04 80 	movabs $0x80042222d4,%rdi
  800421d053:	00 00 00 
  800421d056:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d05b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421d062:	00 00 00 
  800421d065:	ff d2                	callq  *%rdx
  800421d067:	c7 45 e4 1c 68 00 00 	movl   $0x681c,-0x1c(%rbp)
  800421d06e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421d071:	89 c7                	mov    %eax,%edi
  800421d073:	48 b8 4c b2 21 04 80 	movabs $0x800421b24c,%rax
  800421d07a:	00 00 00 
  800421d07d:	ff d0                	callq  *%rax
  800421d07f:	48 89 c3             	mov    %rax,%rbx
  800421d082:	c7 45 e0 1e 68 00 00 	movl   $0x681e,-0x20(%rbp)
  800421d089:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421d08c:	89 c7                	mov    %eax,%edi
  800421d08e:	48 b8 4c b2 21 04 80 	movabs $0x800421b24c,%rax
  800421d095:	00 00 00 
  800421d098:	ff d0                	callq  *%rax
  800421d09a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421d09e:	48 89 d1             	mov    %rdx,%rcx
  800421d0a1:	48 89 da             	mov    %rbx,%rdx
  800421d0a4:	48 89 c6             	mov    %rax,%rsi
  800421d0a7:	48 bf f8 22 22 04 80 	movabs $0x80042222f8,%rdi
  800421d0ae:	00 00 00 
  800421d0b1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d0b6:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800421d0bd:	00 00 00 
  800421d0c0:	41 ff d0             	callq  *%r8
  800421d0c3:	c7 45 dc 02 68 00 00 	movl   $0x6802,-0x24(%rbp)
  800421d0ca:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421d0cd:	89 c7                	mov    %eax,%edi
  800421d0cf:	48 b8 4c b2 21 04 80 	movabs $0x800421b24c,%rax
  800421d0d6:	00 00 00 
  800421d0d9:	ff d0                	callq  *%rax
  800421d0db:	48 89 c3             	mov    %rax,%rbx
  800421d0de:	c7 45 d8 00 68 00 00 	movl   $0x6800,-0x28(%rbp)
  800421d0e5:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421d0e8:	89 c7                	mov    %eax,%edi
  800421d0ea:	48 b8 4c b2 21 04 80 	movabs $0x800421b24c,%rax
  800421d0f1:	00 00 00 
  800421d0f4:	ff d0                	callq  *%rax
  800421d0f6:	48 89 da             	mov    %rbx,%rdx
  800421d0f9:	48 89 c6             	mov    %rax,%rsi
  800421d0fc:	48 bf 30 23 22 04 80 	movabs $0x8004222330,%rdi
  800421d103:	00 00 00 
  800421d106:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d10b:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421d112:	00 00 00 
  800421d115:	ff d1                	callq  *%rcx
  800421d117:	c7 45 d4 04 68 00 00 	movl   $0x6804,-0x2c(%rbp)
  800421d11e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421d121:	89 c7                	mov    %eax,%edi
  800421d123:	48 b8 4c b2 21 04 80 	movabs $0x800421b24c,%rax
  800421d12a:	00 00 00 
  800421d12d:	ff d0                	callq  *%rax
  800421d12f:	48 89 c6             	mov    %rax,%rsi
  800421d132:	48 bf 52 23 22 04 80 	movabs $0x8004222352,%rdi
  800421d139:	00 00 00 
  800421d13c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d141:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421d148:	00 00 00 
  800421d14b:	ff d2                	callq  *%rdx
  800421d14d:	48 bf 67 23 22 04 80 	movabs $0x8004222367,%rdi
  800421d154:	00 00 00 
  800421d157:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d15c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421d163:	00 00 00 
  800421d166:	ff d2                	callq  *%rdx
  800421d168:	48 83 c4 28          	add    $0x28,%rsp
  800421d16c:	5b                   	pop    %rbx
  800421d16d:	5d                   	pop    %rbp
  800421d16e:	c3                   	retq   

000000800421d16f <vmexit>:
  800421d16f:	55                   	push   %rbp
  800421d170:	48 89 e5             	mov    %rsp,%rbp
  800421d173:	41 54                	push   %r12
  800421d175:	53                   	push   %rbx
  800421d176:	48 83 ec 10          	sub    $0x10,%rsp
  800421d17a:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%rbp)
  800421d181:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  800421d185:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421d188:	0f b7 c0             	movzwl %ax,%eax
  800421d18b:	83 f8 30             	cmp    $0x30,%eax
  800421d18e:	0f 87 03 05 00 00    	ja     800421d697 <vmexit+0x528>
  800421d194:	89 c0                	mov    %eax,%eax
  800421d196:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421d19d:	00 
  800421d19e:	48 b8 d0 23 22 04 80 	movabs $0x80042223d0,%rax
  800421d1a5:	00 00 00 
  800421d1a8:	48 01 d0             	add    %rdx,%rax
  800421d1ab:	48 8b 00             	mov    (%rax),%rax
  800421d1ae:	ff e0                	jmpq   *%rax
  800421d1b0:	c7 45 e4 04 44 00 00 	movl   $0x4404,-0x1c(%rbp)
  800421d1b7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421d1ba:	89 c7                	mov    %eax,%edi
  800421d1bc:	48 b8 4c b2 21 04 80 	movabs $0x800421b24c,%rax
  800421d1c3:	00 00 00 
  800421d1c6:	ff d0                	callq  *%rax
  800421d1c8:	89 c2                	mov    %eax,%edx
  800421d1ca:	48 b8 c4 c5 6d 04 80 	movabs $0x80046dc5c4,%rax
  800421d1d1:	00 00 00 
  800421d1d4:	89 10                	mov    %edx,(%rax)
  800421d1d6:	48 b8 c4 c5 6d 04 80 	movabs $0x80046dc5c4,%rax
  800421d1dd:	00 00 00 
  800421d1e0:	8b 18                	mov    (%rax),%ebx
  800421d1e2:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d1e9:	00 00 00 
  800421d1ec:	ff d0                	callq  *%rax
  800421d1ee:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d1f5:	00 00 00 
  800421d1f8:	48 98                	cltq   
  800421d1fa:	48 c1 e0 03          	shl    $0x3,%rax
  800421d1fe:	48 89 c1             	mov    %rax,%rcx
  800421d201:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d205:	48 01 c8             	add    %rcx,%rax
  800421d208:	48 01 d0             	add    %rdx,%rax
  800421d20b:	48 83 c0 08          	add    $0x8,%rax
  800421d20f:	48 8b 00             	mov    (%rax),%rax
  800421d212:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421d219:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d220:	00 00 00 
  800421d223:	ff d0                	callq  *%rax
  800421d225:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d22c:	00 00 00 
  800421d22f:	48 98                	cltq   
  800421d231:	48 c1 e0 03          	shl    $0x3,%rax
  800421d235:	48 89 c1             	mov    %rax,%rcx
  800421d238:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d23c:	48 01 c8             	add    %rcx,%rax
  800421d23f:	48 01 d0             	add    %rdx,%rax
  800421d242:	48 83 c0 08          	add    $0x8,%rax
  800421d246:	48 8b 00             	mov    (%rax),%rax
  800421d249:	89 da                	mov    %ebx,%edx
  800421d24b:	4c 89 e6             	mov    %r12,%rsi
  800421d24e:	48 89 c7             	mov    %rax,%rdi
  800421d251:	48 b8 81 e0 21 04 80 	movabs $0x800421e081,%rax
  800421d258:	00 00 00 
  800421d25b:	ff d0                	callq  *%rax
  800421d25d:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d260:	e9 32 04 00 00       	jmpq   800421d697 <vmexit+0x528>
  800421d265:	48 b8 c4 c5 6d 04 80 	movabs $0x80046dc5c4,%rax
  800421d26c:	00 00 00 
  800421d26f:	8b 18                	mov    (%rax),%ebx
  800421d271:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d278:	00 00 00 
  800421d27b:	ff d0                	callq  *%rax
  800421d27d:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d284:	00 00 00 
  800421d287:	48 98                	cltq   
  800421d289:	48 c1 e0 03          	shl    $0x3,%rax
  800421d28d:	48 89 c1             	mov    %rax,%rcx
  800421d290:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d294:	48 01 c8             	add    %rcx,%rax
  800421d297:	48 01 d0             	add    %rdx,%rax
  800421d29a:	48 83 c0 08          	add    $0x8,%rax
  800421d29e:	48 8b 00             	mov    (%rax),%rax
  800421d2a1:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421d2a8:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d2af:	00 00 00 
  800421d2b2:	ff d0                	callq  *%rax
  800421d2b4:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d2bb:	00 00 00 
  800421d2be:	48 98                	cltq   
  800421d2c0:	48 c1 e0 03          	shl    $0x3,%rax
  800421d2c4:	48 89 c1             	mov    %rax,%rcx
  800421d2c7:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d2cb:	48 01 c8             	add    %rcx,%rax
  800421d2ce:	48 01 d0             	add    %rdx,%rax
  800421d2d1:	48 83 c0 08          	add    $0x8,%rax
  800421d2d5:	48 8b 00             	mov    (%rax),%rax
  800421d2d8:	89 da                	mov    %ebx,%edx
  800421d2da:	4c 89 e6             	mov    %r12,%rsi
  800421d2dd:	48 89 c7             	mov    %rax,%rdi
  800421d2e0:	48 b8 00 e0 21 04 80 	movabs $0x800421e000,%rax
  800421d2e7:	00 00 00 
  800421d2ea:	ff d0                	callq  *%rax
  800421d2ec:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d2ef:	e9 a3 03 00 00       	jmpq   800421d697 <vmexit+0x528>
  800421d2f4:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d2fb:	00 00 00 
  800421d2fe:	ff d0                	callq  *%rax
  800421d300:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d307:	00 00 00 
  800421d30a:	48 98                	cltq   
  800421d30c:	48 c1 e0 03          	shl    $0x3,%rax
  800421d310:	48 89 c1             	mov    %rax,%rcx
  800421d313:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d317:	48 01 c8             	add    %rcx,%rax
  800421d31a:	48 01 d0             	add    %rdx,%rax
  800421d31d:	48 83 c0 08          	add    $0x8,%rax
  800421d321:	48 8b 00             	mov    (%rax),%rax
  800421d324:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421d32b:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d332:	00 00 00 
  800421d335:	ff d0                	callq  *%rax
  800421d337:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d33e:	00 00 00 
  800421d341:	48 98                	cltq   
  800421d343:	48 c1 e0 03          	shl    $0x3,%rax
  800421d347:	48 89 c1             	mov    %rax,%rcx
  800421d34a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d34e:	48 01 c8             	add    %rcx,%rax
  800421d351:	48 01 d0             	add    %rdx,%rax
  800421d354:	48 83 c0 08          	add    $0x8,%rax
  800421d358:	48 8b 00             	mov    (%rax),%rax
  800421d35b:	48 89 de             	mov    %rbx,%rsi
  800421d35e:	48 89 c7             	mov    %rax,%rdi
  800421d361:	48 b8 2e e1 21 04 80 	movabs $0x800421e12e,%rax
  800421d368:	00 00 00 
  800421d36b:	ff d0                	callq  *%rax
  800421d36d:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d370:	e9 22 03 00 00       	jmpq   800421d697 <vmexit+0x528>
  800421d375:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d37c:	00 00 00 
  800421d37f:	ff d0                	callq  *%rax
  800421d381:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d388:	00 00 00 
  800421d38b:	48 98                	cltq   
  800421d38d:	48 c1 e0 03          	shl    $0x3,%rax
  800421d391:	48 89 c1             	mov    %rax,%rcx
  800421d394:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d398:	48 01 c8             	add    %rcx,%rax
  800421d39b:	48 01 d0             	add    %rdx,%rax
  800421d39e:	48 83 c0 08          	add    $0x8,%rax
  800421d3a2:	48 8b 00             	mov    (%rax),%rax
  800421d3a5:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421d3ac:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d3b3:	00 00 00 
  800421d3b6:	ff d0                	callq  *%rax
  800421d3b8:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d3bf:	00 00 00 
  800421d3c2:	48 98                	cltq   
  800421d3c4:	48 c1 e0 03          	shl    $0x3,%rax
  800421d3c8:	48 89 c1             	mov    %rax,%rcx
  800421d3cb:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d3cf:	48 01 c8             	add    %rcx,%rax
  800421d3d2:	48 01 d0             	add    %rdx,%rax
  800421d3d5:	48 83 c0 08          	add    $0x8,%rax
  800421d3d9:	48 8b 00             	mov    (%rax),%rax
  800421d3dc:	48 89 de             	mov    %rbx,%rsi
  800421d3df:	48 89 c7             	mov    %rax,%rdi
  800421d3e2:	48 b8 36 e2 21 04 80 	movabs $0x800421e236,%rax
  800421d3e9:	00 00 00 
  800421d3ec:	ff d0                	callq  *%rax
  800421d3ee:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d3f1:	e9 a1 02 00 00       	jmpq   800421d697 <vmexit+0x528>
  800421d3f6:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d3fd:	00 00 00 
  800421d400:	ff d0                	callq  *%rax
  800421d402:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d409:	00 00 00 
  800421d40c:	48 98                	cltq   
  800421d40e:	48 c1 e0 03          	shl    $0x3,%rax
  800421d412:	48 89 c1             	mov    %rax,%rcx
  800421d415:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d419:	48 01 c8             	add    %rcx,%rax
  800421d41c:	48 01 d0             	add    %rdx,%rax
  800421d41f:	48 83 c0 08          	add    $0x8,%rax
  800421d423:	48 8b 00             	mov    (%rax),%rax
  800421d426:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421d42d:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d434:	00 00 00 
  800421d437:	ff d0                	callq  *%rax
  800421d439:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d440:	00 00 00 
  800421d443:	48 98                	cltq   
  800421d445:	48 c1 e0 03          	shl    $0x3,%rax
  800421d449:	48 89 c1             	mov    %rax,%rcx
  800421d44c:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d450:	48 01 c8             	add    %rcx,%rax
  800421d453:	48 01 d0             	add    %rdx,%rax
  800421d456:	48 83 c0 08          	add    $0x8,%rax
  800421d45a:	48 8b 00             	mov    (%rax),%rax
  800421d45d:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421d464:	48 89 de             	mov    %rbx,%rsi
  800421d467:	48 89 c7             	mov    %rax,%rdi
  800421d46a:	48 b8 a2 e3 21 04 80 	movabs $0x800421e3a2,%rax
  800421d471:	00 00 00 
  800421d474:	ff d0                	callq  *%rax
  800421d476:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d479:	e9 19 02 00 00       	jmpq   800421d697 <vmexit+0x528>
  800421d47e:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d485:	00 00 00 
  800421d488:	ff d0                	callq  *%rax
  800421d48a:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d491:	00 00 00 
  800421d494:	48 98                	cltq   
  800421d496:	48 c1 e0 03          	shl    $0x3,%rax
  800421d49a:	48 89 c1             	mov    %rax,%rcx
  800421d49d:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d4a1:	48 01 c8             	add    %rcx,%rax
  800421d4a4:	48 01 d0             	add    %rdx,%rax
  800421d4a7:	48 83 c0 08          	add    $0x8,%rax
  800421d4ab:	48 8b 00             	mov    (%rax),%rax
  800421d4ae:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421d4b5:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d4bc:	00 00 00 
  800421d4bf:	ff d0                	callq  *%rax
  800421d4c1:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d4c8:	00 00 00 
  800421d4cb:	48 98                	cltq   
  800421d4cd:	48 c1 e0 03          	shl    $0x3,%rax
  800421d4d1:	48 89 c1             	mov    %rax,%rcx
  800421d4d4:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d4d8:	48 01 c8             	add    %rcx,%rax
  800421d4db:	48 01 d0             	add    %rdx,%rax
  800421d4de:	48 83 c0 08          	add    $0x8,%rax
  800421d4e2:	48 8b 00             	mov    (%rax),%rax
  800421d4e5:	48 89 de             	mov    %rbx,%rsi
  800421d4e8:	48 89 c7             	mov    %rax,%rdi
  800421d4eb:	48 b8 94 e5 21 04 80 	movabs $0x800421e594,%rax
  800421d4f2:	00 00 00 
  800421d4f5:	ff d0                	callq  *%rax
  800421d4f7:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d4fa:	e9 98 01 00 00       	jmpq   800421d697 <vmexit+0x528>
  800421d4ff:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d506:	00 00 00 
  800421d509:	ff d0                	callq  *%rax
  800421d50b:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d512:	00 00 00 
  800421d515:	48 98                	cltq   
  800421d517:	48 c1 e0 03          	shl    $0x3,%rax
  800421d51b:	48 89 c1             	mov    %rax,%rcx
  800421d51e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d522:	48 01 c8             	add    %rcx,%rax
  800421d525:	48 01 d0             	add    %rdx,%rax
  800421d528:	48 83 c0 08          	add    $0x8,%rax
  800421d52c:	48 8b 00             	mov    (%rax),%rax
  800421d52f:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421d536:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d53d:	00 00 00 
  800421d540:	ff d0                	callq  *%rax
  800421d542:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d549:	00 00 00 
  800421d54c:	48 98                	cltq   
  800421d54e:	48 c1 e0 03          	shl    $0x3,%rax
  800421d552:	48 89 c1             	mov    %rax,%rcx
  800421d555:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d559:	48 01 c8             	add    %rcx,%rax
  800421d55c:	48 01 d0             	add    %rdx,%rax
  800421d55f:	48 83 c0 08          	add    $0x8,%rax
  800421d563:	48 8b 00             	mov    (%rax),%rax
  800421d566:	48 89 de             	mov    %rbx,%rsi
  800421d569:	48 89 c7             	mov    %rax,%rdi
  800421d56c:	48 b8 73 e7 21 04 80 	movabs $0x800421e773,%rax
  800421d573:	00 00 00 
  800421d576:	ff d0                	callq  *%rax
  800421d578:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d57b:	e9 17 01 00 00       	jmpq   800421d697 <vmexit+0x528>
  800421d580:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d587:	00 00 00 
  800421d58a:	ff d0                	callq  *%rax
  800421d58c:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d593:	00 00 00 
  800421d596:	48 98                	cltq   
  800421d598:	48 c1 e0 03          	shl    $0x3,%rax
  800421d59c:	48 89 c1             	mov    %rax,%rcx
  800421d59f:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d5a3:	48 01 c8             	add    %rcx,%rax
  800421d5a6:	48 01 d0             	add    %rdx,%rax
  800421d5a9:	48 83 c0 08          	add    $0x8,%rax
  800421d5ad:	48 8b 00             	mov    (%rax),%rax
  800421d5b0:	48 8b 98 e0 00 00 00 	mov    0xe0(%rax),%rbx
  800421d5b7:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d5be:	00 00 00 
  800421d5c1:	ff d0                	callq  *%rax
  800421d5c3:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d5ca:	00 00 00 
  800421d5cd:	48 98                	cltq   
  800421d5cf:	48 c1 e0 03          	shl    $0x3,%rax
  800421d5d3:	48 89 c1             	mov    %rax,%rcx
  800421d5d6:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d5da:	48 01 c8             	add    %rcx,%rax
  800421d5dd:	48 01 d0             	add    %rdx,%rax
  800421d5e0:	48 83 c0 08          	add    $0x8,%rax
  800421d5e4:	48 8b 00             	mov    (%rax),%rax
  800421d5e7:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421d5ee:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d5f5:	00 00 00 
  800421d5f8:	ff d0                	callq  *%rax
  800421d5fa:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d601:	00 00 00 
  800421d604:	48 98                	cltq   
  800421d606:	48 c1 e0 03          	shl    $0x3,%rax
  800421d60a:	48 89 c1             	mov    %rax,%rcx
  800421d60d:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d611:	48 01 c8             	add    %rcx,%rax
  800421d614:	48 01 d0             	add    %rdx,%rax
  800421d617:	48 83 c0 08          	add    $0x8,%rax
  800421d61b:	48 8b 00             	mov    (%rax),%rax
  800421d61e:	48 89 da             	mov    %rbx,%rdx
  800421d621:	4c 89 e6             	mov    %r12,%rsi
  800421d624:	48 89 c7             	mov    %rax,%rdi
  800421d627:	48 b8 ad e7 21 04 80 	movabs $0x800421e7ad,%rax
  800421d62e:	00 00 00 
  800421d631:	ff d0                	callq  *%rax
  800421d633:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d636:	eb 5f                	jmp    800421d697 <vmexit+0x528>
  800421d638:	48 bf 88 23 22 04 80 	movabs $0x8004222388,%rdi
  800421d63f:	00 00 00 
  800421d642:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d647:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421d64e:	00 00 00 
  800421d651:	ff d2                	callq  *%rdx
  800421d653:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d65a:	00 00 00 
  800421d65d:	ff d0                	callq  *%rax
  800421d65f:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d666:	00 00 00 
  800421d669:	48 98                	cltq   
  800421d66b:	48 c1 e0 03          	shl    $0x3,%rax
  800421d66f:	48 89 c1             	mov    %rax,%rcx
  800421d672:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d676:	48 01 c8             	add    %rcx,%rax
  800421d679:	48 01 d0             	add    %rdx,%rax
  800421d67c:	48 83 c0 08          	add    $0x8,%rax
  800421d680:	48 8b 00             	mov    (%rax),%rax
  800421d683:	48 89 c7             	mov    %rax,%rdi
  800421d686:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800421d68d:	00 00 00 
  800421d690:	ff d0                	callq  *%rax
  800421d692:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421d696:	90                   	nop
  800421d697:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800421d69b:	83 f0 01             	xor    $0x1,%eax
  800421d69e:	84 c0                	test   %al,%al
  800421d6a0:	74 6b                	je     800421d70d <vmexit+0x59e>
  800421d6a2:	48 bf a8 23 22 04 80 	movabs $0x80042223a8,%rdi
  800421d6a9:	00 00 00 
  800421d6ac:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d6b1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421d6b8:	00 00 00 
  800421d6bb:	ff d2                	callq  *%rdx
  800421d6bd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d6c2:	48 ba 2e d0 21 04 80 	movabs $0x800421d02e,%rdx
  800421d6c9:	00 00 00 
  800421d6cc:	ff d2                	callq  *%rdx
  800421d6ce:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d6d5:	00 00 00 
  800421d6d8:	ff d0                	callq  *%rax
  800421d6da:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d6e1:	00 00 00 
  800421d6e4:	48 98                	cltq   
  800421d6e6:	48 c1 e0 03          	shl    $0x3,%rax
  800421d6ea:	48 89 c1             	mov    %rax,%rcx
  800421d6ed:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d6f1:	48 01 c8             	add    %rcx,%rax
  800421d6f4:	48 01 d0             	add    %rdx,%rax
  800421d6f7:	48 83 c0 08          	add    $0x8,%rax
  800421d6fb:	48 8b 00             	mov    (%rax),%rax
  800421d6fe:	48 89 c7             	mov    %rax,%rdi
  800421d701:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800421d708:	00 00 00 
  800421d70b:	ff d0                	callq  *%rax
  800421d70d:	48 b8 16 da 20 04 80 	movabs $0x800420da16,%rax
  800421d714:	00 00 00 
  800421d717:	ff d0                	callq  *%rax

000000800421d719 <asm_vmrun>:
  800421d719:	55                   	push   %rbp
  800421d71a:	48 89 e5             	mov    %rsp,%rbp
  800421d71d:	41 57                	push   %r15
  800421d71f:	41 56                	push   %r14
  800421d721:	41 55                	push   %r13
  800421d723:	41 54                	push   %r12
  800421d725:	53                   	push   %rbx
  800421d726:	48 83 ec 28          	sub    $0x28,%rsp
  800421d72a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421d72e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d732:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800421d736:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d73d:	00 00 00 
  800421d740:	ff d0                	callq  *%rax
  800421d742:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d749:	00 00 00 
  800421d74c:	48 98                	cltq   
  800421d74e:	48 c1 e0 03          	shl    $0x3,%rax
  800421d752:	48 89 c1             	mov    %rax,%rcx
  800421d755:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d759:	48 01 c8             	add    %rcx,%rax
  800421d75c:	48 01 d0             	add    %rdx,%rax
  800421d75f:	48 83 c0 08          	add    $0x8,%rax
  800421d763:	48 8b 00             	mov    (%rax),%rax
  800421d766:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421d76c:	89 c2                	mov    %eax,%edx
  800421d76e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d772:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800421d779:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d77d:	66 c7 40 78 00 00    	movw   $0x0,0x78(%rax)
  800421d783:	48 b8 d1 b3 21 04 80 	movabs $0x800421b3d1,%rax
  800421d78a:	00 00 00 
  800421d78d:	ff d0                	callq  *%rax
  800421d78f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  800421d793:	ba 14 6c 00 00       	mov    $0x6c14,%edx
  800421d798:	52                   	push   %rdx
  800421d799:	55                   	push   %rbp
  800421d79a:	51                   	push   %rcx
  800421d79b:	51                   	push   %rcx
  800421d79c:	48 89 e0             	mov    %rsp,%rax
  800421d79f:	0f 79 d0             	vmwrite %rax,%rdx
  800421d7a2:	48 8b 81 90 00 00 00 	mov    0x90(%rcx),%rax
  800421d7a9:	0f 20 d2             	mov    %cr2,%rdx
  800421d7ac:	48 39 c2             	cmp    %rax,%rdx
  800421d7af:	74 03                	je     800421d7b4 <asm_vmrun+0x9b>
  800421d7b1:	0f 22 d0             	mov    %rax,%cr2
  800421d7b4:	83 b9 80 00 00 00 01 	cmpl   $0x1,0x80(%rcx)
  800421d7bb:	48 8b 41 70          	mov    0x70(%rcx),%rax
  800421d7bf:	48 8b 59 68          	mov    0x68(%rcx),%rbx
  800421d7c3:	48 8b 51 58          	mov    0x58(%rcx),%rdx
  800421d7c7:	48 8b 69 50          	mov    0x50(%rcx),%rbp
  800421d7cb:	48 8b 79 48          	mov    0x48(%rcx),%rdi
  800421d7cf:	48 8b 71 40          	mov    0x40(%rcx),%rsi
  800421d7d3:	4c 8b 41 38          	mov    0x38(%rcx),%r8
  800421d7d7:	4c 8b 49 30          	mov    0x30(%rcx),%r9
  800421d7db:	4c 8b 51 28          	mov    0x28(%rcx),%r10
  800421d7df:	4c 8b 59 20          	mov    0x20(%rcx),%r11
  800421d7e3:	4c 8b 61 18          	mov    0x18(%rcx),%r12
  800421d7e7:	4c 8b 69 10          	mov    0x10(%rcx),%r13
  800421d7eb:	4c 8b 71 08          	mov    0x8(%rcx),%r14
  800421d7ef:	4c 8b 39             	mov    (%rcx),%r15
  800421d7f2:	48 8b 49 60          	mov    0x60(%rcx),%rcx
  800421d7f6:	75 05                	jne    800421d7fd <asm_vmrun+0xe4>
  800421d7f8:	0f 01 c2             	vmlaunch 
  800421d7fb:	eb 03                	jmp    800421d800 <asm_vmrun+0xe7>
  800421d7fd:	0f 01 c3             	vmresume 
  800421d800:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800421d805:	59                   	pop    %rcx
  800421d806:	48 89 41 70          	mov    %rax,0x70(%rcx)
  800421d80a:	48 89 59 68          	mov    %rbx,0x68(%rcx)
  800421d80e:	8f 41 60             	popq   0x60(%rcx)
  800421d811:	48 89 51 58          	mov    %rdx,0x58(%rcx)
  800421d815:	48 89 69 50          	mov    %rbp,0x50(%rcx)
  800421d819:	48 89 79 48          	mov    %rdi,0x48(%rcx)
  800421d81d:	48 89 71 40          	mov    %rsi,0x40(%rcx)
  800421d821:	4c 89 41 38          	mov    %r8,0x38(%rcx)
  800421d825:	4c 89 49 30          	mov    %r9,0x30(%rcx)
  800421d829:	4c 89 51 28          	mov    %r10,0x28(%rcx)
  800421d82d:	4c 89 59 20          	mov    %r11,0x20(%rcx)
  800421d831:	4c 89 61 18          	mov    %r12,0x18(%rcx)
  800421d835:	4c 89 69 10          	mov    %r13,0x10(%rcx)
  800421d839:	4c 89 71 08          	mov    %r14,0x8(%rcx)
  800421d83d:	4c 89 39             	mov    %r15,(%rcx)
  800421d840:	0f 20 d0             	mov    %cr2,%rax
  800421d843:	48 89 81 90 00 00 00 	mov    %rax,0x90(%rcx)
  800421d84a:	5d                   	pop    %rbp
  800421d84b:	5a                   	pop    %rdx
  800421d84c:	0f 96 41 78          	setbe  0x78(%rcx)
  800421d850:	48 b8 b5 b3 21 04 80 	movabs $0x800421b3b5,%rax
  800421d857:	00 00 00 
  800421d85a:	ff d0                	callq  *%rax
  800421d85c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d860:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800421d864:	66 85 c0             	test   %ax,%ax
  800421d867:	74 20                	je     800421d889 <asm_vmrun+0x170>
  800421d869:	48 bf 58 25 22 04 80 	movabs $0x8004222558,%rdi
  800421d870:	00 00 00 
  800421d873:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d878:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421d87f:	00 00 00 
  800421d882:	ff d2                	callq  *%rdx
  800421d884:	e9 af 00 00 00       	jmpq   800421d938 <asm_vmrun+0x21f>
  800421d889:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d890:	00 00 00 
  800421d893:	ff d0                	callq  *%rax
  800421d895:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d89c:	00 00 00 
  800421d89f:	48 98                	cltq   
  800421d8a1:	48 c1 e0 03          	shl    $0x3,%rax
  800421d8a5:	48 89 c1             	mov    %rax,%rcx
  800421d8a8:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d8ac:	48 01 c8             	add    %rcx,%rax
  800421d8af:	48 01 d0             	add    %rdx,%rax
  800421d8b2:	48 83 c0 08          	add    $0x8,%rax
  800421d8b6:	48 8b 18             	mov    (%rax),%rbx
  800421d8b9:	c7 45 c4 1c 68 00 00 	movl   $0x681c,-0x3c(%rbp)
  800421d8c0:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421d8c3:	89 c7                	mov    %eax,%edi
  800421d8c5:	48 b8 4c b2 21 04 80 	movabs $0x800421b24c,%rax
  800421d8cc:	00 00 00 
  800421d8cf:	ff d0                	callq  *%rax
  800421d8d1:	48 89 83 b0 00 00 00 	mov    %rax,0xb0(%rbx)
  800421d8d8:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421d8df:	00 00 00 
  800421d8e2:	ff d0                	callq  *%rax
  800421d8e4:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421d8eb:	00 00 00 
  800421d8ee:	48 98                	cltq   
  800421d8f0:	48 c1 e0 03          	shl    $0x3,%rax
  800421d8f4:	48 89 c1             	mov    %rax,%rcx
  800421d8f7:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d8fb:	48 01 c8             	add    %rcx,%rax
  800421d8fe:	48 01 d0             	add    %rdx,%rax
  800421d901:	48 83 c0 08          	add    $0x8,%rax
  800421d905:	48 8b 18             	mov    (%rax),%rbx
  800421d908:	c7 45 c0 1e 68 00 00 	movl   $0x681e,-0x40(%rbp)
  800421d90f:	8b 45 c0             	mov    -0x40(%rbp),%eax
  800421d912:	89 c7                	mov    %eax,%edi
  800421d914:	48 b8 4c b2 21 04 80 	movabs $0x800421b24c,%rax
  800421d91b:	00 00 00 
  800421d91e:	ff d0                	callq  *%rax
  800421d920:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  800421d927:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d92c:	48 ba 6f d1 21 04 80 	movabs $0x800421d16f,%rdx
  800421d933:	00 00 00 
  800421d936:	ff d2                	callq  *%rdx
  800421d938:	48 83 c4 28          	add    $0x28,%rsp
  800421d93c:	5b                   	pop    %rbx
  800421d93d:	41 5c                	pop    %r12
  800421d93f:	41 5d                	pop    %r13
  800421d941:	41 5e                	pop    %r14
  800421d943:	41 5f                	pop    %r15
  800421d945:	5d                   	pop    %rbp
  800421d946:	c3                   	retq   

000000800421d947 <msr_setup>:
  800421d947:	55                   	push   %rbp
  800421d948:	48 89 e5             	mov    %rsp,%rbp
  800421d94b:	48 83 ec 40          	sub    $0x40,%rsp
  800421d94f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421d953:	c7 45 d0 80 00 00 c0 	movl   $0xc0000080,-0x30(%rbp)
  800421d95a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800421d961:	81 7d f8 80 00 00 00 	cmpl   $0x80,-0x8(%rbp)
  800421d968:	7e 35                	jle    800421d99f <msr_setup+0x58>
  800421d96a:	48 b9 78 25 22 04 80 	movabs $0x8004222578,%rcx
  800421d971:	00 00 00 
  800421d974:	48 ba 1e 22 22 04 80 	movabs $0x800422221e,%rdx
  800421d97b:	00 00 00 
  800421d97e:	be 81 02 00 00       	mov    $0x281,%esi
  800421d983:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421d98a:	00 00 00 
  800421d98d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d992:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d999:	00 00 00 
  800421d99c:	41 ff d0             	callq  *%r8
  800421d99f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d9a3:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421d9a6:	89 50 28             	mov    %edx,0x28(%rax)
  800421d9a9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421d9b0:	e9 97 00 00 00       	jmpq   800421da4c <msr_setup+0x105>
  800421d9b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d9b9:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421d9bd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421d9c0:	48 63 d2             	movslq %edx,%rdx
  800421d9c3:	48 c1 e2 04          	shl    $0x4,%rdx
  800421d9c7:	48 01 d0             	add    %rdx,%rax
  800421d9ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d9ce:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d9d1:	48 98                	cltq   
  800421d9d3:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421d9d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d9db:	89 10                	mov    %edx,(%rax)
  800421d9dd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d9e0:	48 98                	cltq   
  800421d9e2:	8b 44 85 d0          	mov    -0x30(%rbp,%rax,4),%eax
  800421d9e6:	89 45 ec             	mov    %eax,-0x14(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421d9e9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d9ec:	89 c1                	mov    %eax,%ecx
  800421d9ee:	0f 32                	rdmsr  
  800421d9f0:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421d9f3:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421d9f6:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800421d9fd:	00 
	ret = edx;
  800421d9fe:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421da01:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ret = ret << 32;
  800421da05:	48 c1 65 d8 20       	shlq   $0x20,-0x28(%rbp)
	ret |= eax;
  800421da0a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421da0d:	48 09 45 d8          	or     %rax,-0x28(%rbp)

	return ret;
  800421da11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421da15:	48 89 c2             	mov    %rax,%rdx
  800421da18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421da1c:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421da20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421da24:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421da28:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421da2b:	48 63 d2             	movslq %edx,%rdx
  800421da2e:	48 c1 e2 04          	shl    $0x4,%rdx
  800421da32:	48 01 d0             	add    %rdx,%rax
  800421da35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421da39:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421da3c:	48 98                	cltq   
  800421da3e:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421da42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421da46:	89 10                	mov    %edx,(%rax)
  800421da48:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421da4c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421da4f:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421da52:	0f 8c 5d ff ff ff    	jl     800421d9b5 <msr_setup+0x6e>
  800421da58:	c9                   	leaveq 
  800421da59:	c3                   	retq   

000000800421da5a <bitmap_setup>:
  800421da5a:	55                   	push   %rbp
  800421da5b:	48 89 e5             	mov    %rsp,%rbp
  800421da5e:	48 83 ec 30          	sub    $0x30,%rsp
  800421da62:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421da66:	c7 45 e0 70 00 00 00 	movl   $0x70,-0x20(%rbp)
  800421da6d:	c7 45 e4 71 00 00 00 	movl   $0x71,-0x1c(%rbp)
  800421da74:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%rbp)
  800421da7b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421da82:	e9 07 01 00 00       	jmpq   800421db8e <bitmap_setup+0x134>
  800421da87:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421da8a:	48 98                	cltq   
  800421da8c:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421da90:	c1 e8 06             	shr    $0x6,%eax
  800421da93:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421da96:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421da99:	48 98                	cltq   
  800421da9b:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421da9f:	3d fe 7f 00 00       	cmp    $0x7ffe,%eax
  800421daa4:	77 51                	ja     800421daf7 <bitmap_setup+0x9d>
  800421daa6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421daaa:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421daae:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421dab1:	48 63 d2             	movslq %edx,%rdx
  800421dab4:	48 c1 e2 03          	shl    $0x3,%rdx
  800421dab8:	48 01 c2             	add    %rax,%rdx
  800421dabb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421dabf:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421dac3:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421dac6:	48 63 c9             	movslq %ecx,%rcx
  800421dac9:	48 c1 e1 03          	shl    $0x3,%rcx
  800421dacd:	48 01 c8             	add    %rcx,%rax
  800421dad0:	48 8b 30             	mov    (%rax),%rsi
  800421dad3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421dad6:	48 98                	cltq   
  800421dad8:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421dadc:	83 e0 3f             	and    $0x3f,%eax
  800421dadf:	bf 01 00 00 00       	mov    $0x1,%edi
  800421dae4:	89 c1                	mov    %eax,%ecx
  800421dae6:	48 d3 e7             	shl    %cl,%rdi
  800421dae9:	48 89 f8             	mov    %rdi,%rax
  800421daec:	48 09 f0             	or     %rsi,%rax
  800421daef:	48 89 02             	mov    %rax,(%rdx)
  800421daf2:	e9 93 00 00 00       	jmpq   800421db8a <bitmap_setup+0x130>
  800421daf7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421dafa:	48 98                	cltq   
  800421dafc:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421db00:	3d fe ff 00 00       	cmp    $0xfffe,%eax
  800421db05:	77 4e                	ja     800421db55 <bitmap_setup+0xfb>
  800421db07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421db0b:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421db0f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421db12:	48 63 d2             	movslq %edx,%rdx
  800421db15:	48 c1 e2 03          	shl    $0x3,%rdx
  800421db19:	48 01 c2             	add    %rax,%rdx
  800421db1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421db20:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421db24:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421db27:	48 63 c9             	movslq %ecx,%rcx
  800421db2a:	48 c1 e1 03          	shl    $0x3,%rcx
  800421db2e:	48 01 c8             	add    %rcx,%rax
  800421db31:	48 8b 30             	mov    (%rax),%rsi
  800421db34:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421db37:	48 98                	cltq   
  800421db39:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421db3d:	83 e0 3f             	and    $0x3f,%eax
  800421db40:	bf 01 00 00 00       	mov    $0x1,%edi
  800421db45:	89 c1                	mov    %eax,%ecx
  800421db47:	48 d3 e7             	shl    %cl,%rdi
  800421db4a:	48 89 f8             	mov    %rdi,%rax
  800421db4d:	48 09 f0             	or     %rsi,%rax
  800421db50:	48 89 02             	mov    %rax,(%rdx)
  800421db53:	eb 35                	jmp    800421db8a <bitmap_setup+0x130>
  800421db55:	48 b9 18 22 22 04 80 	movabs $0x8004222218,%rcx
  800421db5c:	00 00 00 
  800421db5f:	48 ba 1e 22 22 04 80 	movabs $0x800422221e,%rdx
  800421db66:	00 00 00 
  800421db69:	be 9a 02 00 00       	mov    $0x29a,%esi
  800421db6e:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421db75:	00 00 00 
  800421db78:	b8 00 00 00 00       	mov    $0x0,%eax
  800421db7d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421db84:	00 00 00 
  800421db87:	41 ff d0             	callq  *%r8
  800421db8a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421db8e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421db91:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421db94:	0f 8c ed fe ff ff    	jl     800421da87 <bitmap_setup+0x2d>
  800421db9a:	c9                   	leaveq 
  800421db9b:	c3                   	retq   

000000800421db9c <vmx_vmrun>:
  800421db9c:	55                   	push   %rbp
  800421db9d:	48 89 e5             	mov    %rsp,%rbp
  800421dba0:	48 83 ec 70          	sub    $0x70,%rsp
  800421dba4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800421dba8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421dbac:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421dbb2:	83 f8 03             	cmp    $0x3,%eax
  800421dbb5:	74 0a                	je     800421dbc1 <vmx_vmrun+0x25>
  800421dbb7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421dbbc:	e9 9a 02 00 00       	jmpq   800421de5b <vmx_vmrun+0x2bf>
  800421dbc1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421dbc5:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421dbcb:	83 f8 01             	cmp    $0x1,%eax
  800421dbce:	0f 85 2f 01 00 00    	jne    800421dd03 <vmx_vmrun+0x167>
  800421dbd4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421dbd8:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421dbdf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421dbe3:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421dbea:	00 00 00 
  800421dbed:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421dbf1:	77 32                	ja     800421dc25 <vmx_vmrun+0x89>
  800421dbf3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421dbf7:	48 89 c1             	mov    %rax,%rcx
  800421dbfa:	48 ba b0 22 22 04 80 	movabs $0x80042222b0,%rdx
  800421dc01:	00 00 00 
  800421dc04:	be ad 02 00 00       	mov    $0x2ad,%esi
  800421dc09:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421dc10:	00 00 00 
  800421dc13:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dc18:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421dc1f:	00 00 00 
  800421dc22:	41 ff d0             	callq  *%r8
  800421dc25:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421dc2c:	ff ff ff 
  800421dc2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421dc33:	48 01 d0             	add    %rdx,%rax
  800421dc36:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421dc3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421dc3e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421dc42:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  800421dc46:	f8                   	clc    
  800421dc47:	66 0f c7 75 a8       	vmclear -0x58(%rbp)
  800421dc4c:	0f 96 c0             	setbe  %al
  800421dc4f:	88 45 df             	mov    %al,-0x21(%rbp)
  800421dc52:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800421dc56:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421dc59:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421dc5d:	74 0a                	je     800421dc69 <vmx_vmrun+0xcd>
  800421dc5f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421dc64:	e9 f2 01 00 00       	jmpq   800421de5b <vmx_vmrun+0x2bf>
  800421dc69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421dc6d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800421dc71:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
  800421dc75:	f8                   	clc    
  800421dc76:	0f c7 75 b0          	vmptrld -0x50(%rbp)
  800421dc7a:	0f 96 c0             	setbe  %al
  800421dc7d:	88 45 de             	mov    %al,-0x22(%rbp)
  800421dc80:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421dc84:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421dc87:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421dc8b:	74 0a                	je     800421dc97 <vmx_vmrun+0xfb>
  800421dc8d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421dc92:	e9 c4 01 00 00       	jmpq   800421de5b <vmx_vmrun+0x2bf>
  800421dc97:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dc9c:	48 ba 53 bd 21 04 80 	movabs $0x800421bd53,%rdx
  800421dca3:	00 00 00 
  800421dca6:	ff d2                	callq  *%rdx
  800421dca8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dcad:	48 ba 21 c1 21 04 80 	movabs $0x800421c121,%rdx
  800421dcb4:	00 00 00 
  800421dcb7:	ff d2                	callq  *%rdx
  800421dcb9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421dcbd:	48 05 20 01 00 00    	add    $0x120,%rax
  800421dcc3:	48 89 c7             	mov    %rax,%rdi
  800421dcc6:	48 b8 5a da 21 04 80 	movabs $0x800421da5a,%rax
  800421dccd:	00 00 00 
  800421dcd0:	ff d0                	callq  *%rax
  800421dcd2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421dcd6:	48 05 20 01 00 00    	add    $0x120,%rax
  800421dcdc:	48 89 c7             	mov    %rax,%rdi
  800421dcdf:	48 b8 47 d9 21 04 80 	movabs $0x800421d947,%rax
  800421dce6:	00 00 00 
  800421dce9:	ff d0                	callq  *%rax
  800421dceb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421dcef:	48 89 c7             	mov    %rax,%rdi
  800421dcf2:	48 b8 c6 c9 21 04 80 	movabs $0x800421c9c6,%rax
  800421dcf9:	00 00 00 
  800421dcfc:	ff d0                	callq  *%rax
  800421dcfe:	e9 8c 00 00 00       	jmpq   800421dd8f <vmx_vmrun+0x1f3>
  800421dd03:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421dd07:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421dd0e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421dd12:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421dd19:	00 00 00 
  800421dd1c:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421dd20:	77 32                	ja     800421dd54 <vmx_vmrun+0x1b8>
  800421dd22:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421dd26:	48 89 c1             	mov    %rax,%rcx
  800421dd29:	48 ba b0 22 22 04 80 	movabs $0x80042222b0,%rdx
  800421dd30:	00 00 00 
  800421dd33:	be c6 02 00 00       	mov    $0x2c6,%esi
  800421dd38:	48 bf 33 22 22 04 80 	movabs $0x8004222233,%rdi
  800421dd3f:	00 00 00 
  800421dd42:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dd47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421dd4e:	00 00 00 
  800421dd51:	41 ff d0             	callq  *%r8
  800421dd54:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421dd5b:	ff ff ff 
  800421dd5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421dd62:	48 01 d0             	add    %rdx,%rax
  800421dd65:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800421dd69:	c6 45 dd 00          	movb   $0x0,-0x23(%rbp)
  800421dd6d:	f8                   	clc    
  800421dd6e:	0f c7 75 b8          	vmptrld -0x48(%rbp)
  800421dd72:	0f 96 c0             	setbe  %al
  800421dd75:	88 45 dd             	mov    %al,-0x23(%rbp)
  800421dd78:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  800421dd7c:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421dd7f:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421dd83:	74 0a                	je     800421dd8f <vmx_vmrun+0x1f3>
  800421dd85:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421dd8a:	e9 cc 00 00 00       	jmpq   800421de5b <vmx_vmrun+0x2bf>
  800421dd8f:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421dd96:	00 00 00 
  800421dd99:	ff d0                	callq  *%rax
  800421dd9b:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421dda2:	00 00 00 
  800421dda5:	48 98                	cltq   
  800421dda7:	48 c1 e0 03          	shl    $0x3,%rax
  800421ddab:	48 89 c1             	mov    %rax,%rcx
  800421ddae:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ddb2:	48 01 c8             	add    %rcx,%rax
  800421ddb5:	48 01 d0             	add    %rdx,%rax
  800421ddb8:	48 83 c0 08          	add    $0x8,%rax
  800421ddbc:	48 8b 00             	mov    (%rax),%rax
  800421ddbf:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800421ddc6:	c7 45 d8 1c 68 00 00 	movl   $0x681c,-0x28(%rbp)
  800421ddcd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421ddd1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421ddd5:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421ddd8:	48 89 d6             	mov    %rdx,%rsi
  800421dddb:	89 c7                	mov    %eax,%edi
  800421dddd:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421dde4:	00 00 00 
  800421dde7:	ff d0                	callq  *%rax
  800421dde9:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421ddf0:	00 00 00 
  800421ddf3:	ff d0                	callq  *%rax
  800421ddf5:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421ddfc:	00 00 00 
  800421ddff:	48 98                	cltq   
  800421de01:	48 c1 e0 03          	shl    $0x3,%rax
  800421de05:	48 89 c1             	mov    %rax,%rcx
  800421de08:	48 c1 e1 04          	shl    $0x4,%rcx
  800421de0c:	48 01 c8             	add    %rcx,%rax
  800421de0f:	48 01 d0             	add    %rdx,%rax
  800421de12:	48 83 c0 08          	add    $0x8,%rax
  800421de16:	48 8b 00             	mov    (%rax),%rax
  800421de19:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800421de20:	c7 45 cc 1e 68 00 00 	movl   $0x681e,-0x34(%rbp)
  800421de27:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421de2b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421de2f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421de32:	48 89 d6             	mov    %rdx,%rsi
  800421de35:	89 c7                	mov    %eax,%edi
  800421de37:	48 b8 26 b2 21 04 80 	movabs $0x800421b226,%rax
  800421de3e:	00 00 00 
  800421de41:	ff d0                	callq  *%rax
  800421de43:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421de47:	48 89 c7             	mov    %rax,%rdi
  800421de4a:	48 b8 19 d7 21 04 80 	movabs $0x800421d719,%rax
  800421de51:	00 00 00 
  800421de54:	ff d0                	callq  *%rax
  800421de56:	b8 00 00 00 00       	mov    $0x0,%eax
  800421de5b:	c9                   	leaveq 
  800421de5c:	c3                   	retq   

000000800421de5d <vmcs_writel>:
  800421de5d:	55                   	push   %rbp
  800421de5e:	48 89 e5             	mov    %rsp,%rbp
  800421de61:	48 83 ec 20          	sub    $0x20,%rsp
  800421de65:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421de68:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421de6c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421de70:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421de73:	f8                   	clc    
  800421de74:	0f 79 d0             	vmwrite %rax,%rdx
  800421de77:	0f 96 c0             	setbe  %al
  800421de7a:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421de7d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421de81:	c9                   	leaveq 
  800421de82:	c3                   	retq   

000000800421de83 <vmcs_readl>:
  800421de83:	55                   	push   %rbp
  800421de84:	48 89 e5             	mov    %rsp,%rbp
  800421de87:	48 83 ec 14          	sub    $0x14,%rsp
  800421de8b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421de8e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421de91:	89 c2                	mov    %eax,%edx
  800421de93:	0f 78 d0             	vmread %rdx,%rax
  800421de96:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421de9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421de9e:	c9                   	leaveq 
  800421de9f:	c3                   	retq   

000000800421dea0 <page2ppn>:
  800421dea0:	55                   	push   %rbp
  800421dea1:	48 89 e5             	mov    %rsp,%rbp
  800421dea4:	48 83 ec 08          	sub    $0x8,%rsp
  800421dea8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421deac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421deb0:	48 b8 00 c6 6d 04 80 	movabs $0x80046dc600,%rax
  800421deb7:	00 00 00 
  800421deba:	48 8b 00             	mov    (%rax),%rax
  800421debd:	48 29 c2             	sub    %rax,%rdx
  800421dec0:	48 89 d0             	mov    %rdx,%rax
  800421dec3:	48 c1 f8 04          	sar    $0x4,%rax
  800421dec7:	c9                   	leaveq 
  800421dec8:	c3                   	retq   

000000800421dec9 <page2pa>:
  800421dec9:	55                   	push   %rbp
  800421deca:	48 89 e5             	mov    %rsp,%rbp
  800421decd:	48 83 ec 08          	sub    $0x8,%rsp
  800421ded1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421ded5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ded9:	48 89 c7             	mov    %rax,%rdi
  800421dedc:	48 b8 a0 de 21 04 80 	movabs $0x800421dea0,%rax
  800421dee3:	00 00 00 
  800421dee6:	ff d0                	callq  *%rax
  800421dee8:	48 c1 e0 0c          	shl    $0xc,%rax
  800421deec:	c9                   	leaveq 
  800421deed:	c3                   	retq   

000000800421deee <page2kva>:
  800421deee:	55                   	push   %rbp
  800421deef:	48 89 e5             	mov    %rsp,%rbp
  800421def2:	48 83 ec 20          	sub    $0x20,%rsp
  800421def6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421defa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421defe:	48 89 c7             	mov    %rax,%rdi
  800421df01:	48 b8 c9 de 21 04 80 	movabs $0x800421dec9,%rax
  800421df08:	00 00 00 
  800421df0b:	ff d0                	callq  *%rax
  800421df0d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421df11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421df15:	48 c1 e8 0c          	shr    $0xc,%rax
  800421df19:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421df1c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421df1f:	48 b8 f8 c5 6d 04 80 	movabs $0x80046dc5f8,%rax
  800421df26:	00 00 00 
  800421df29:	48 8b 00             	mov    (%rax),%rax
  800421df2c:	48 39 c2             	cmp    %rax,%rdx
  800421df2f:	72 32                	jb     800421df63 <page2kva+0x75>
  800421df31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421df35:	48 89 c1             	mov    %rax,%rcx
  800421df38:	48 ba 90 25 22 04 80 	movabs $0x8004222590,%rdx
  800421df3f:	00 00 00 
  800421df42:	be 62 00 00 00       	mov    $0x62,%esi
  800421df47:	48 bf b3 25 22 04 80 	movabs $0x80042225b3,%rdi
  800421df4e:	00 00 00 
  800421df51:	b8 00 00 00 00       	mov    $0x0,%eax
  800421df56:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421df5d:	00 00 00 
  800421df60:	41 ff d0             	callq  *%r8
  800421df63:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421df6a:	00 00 00 
  800421df6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421df71:	48 01 d0             	add    %rdx,%rax
  800421df74:	c9                   	leaveq 
  800421df75:	c3                   	retq   

000000800421df76 <vmx_get_vmdisk_number>:
#include <kern/env.h>
#include <kern/cpu.h>

static int vmdisk_number = 0;	//this number assign to the vm
int 
vmx_get_vmdisk_number() {
  800421df76:	55                   	push   %rbp
  800421df77:	48 89 e5             	mov    %rsp,%rbp
	return vmdisk_number;
  800421df7a:	48 b8 c8 c5 6d 04 80 	movabs $0x80046dc5c8,%rax
  800421df81:	00 00 00 
  800421df84:	8b 00                	mov    (%rax),%eax
}
  800421df86:	5d                   	pop    %rbp
  800421df87:	c3                   	retq   

000000800421df88 <vmx_incr_vmdisk_number>:

void
vmx_incr_vmdisk_number() {
  800421df88:	55                   	push   %rbp
  800421df89:	48 89 e5             	mov    %rsp,%rbp
	vmdisk_number++;
  800421df8c:	48 b8 c8 c5 6d 04 80 	movabs $0x80046dc5c8,%rax
  800421df93:	00 00 00 
  800421df96:	8b 00                	mov    (%rax),%eax
  800421df98:	8d 50 01             	lea    0x1(%rax),%edx
  800421df9b:	48 b8 c8 c5 6d 04 80 	movabs $0x80046dc5c8,%rax
  800421dfa2:	00 00 00 
  800421dfa5:	89 10                	mov    %edx,(%rax)
}
  800421dfa7:	5d                   	pop    %rbp
  800421dfa8:	c3                   	retq   

000000800421dfa9 <find_msr_in_region>:
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
  800421dfa9:	55                   	push   %rbp
  800421dfaa:	48 89 e5             	mov    %rsp,%rbp
  800421dfad:	48 83 ec 28          	sub    $0x28,%rsp
  800421dfb1:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421dfb4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421dfb8:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421dfbb:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
  800421dfbf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421dfc3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int i;
	for(i=0; i<area_sz; ++i) {
  800421dfc7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421dfce:	eb 21                	jmp    800421dff1 <find_msr_in_region+0x48>
		if(entry->msr_index == msr_idx) {
  800421dfd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421dfd4:	8b 00                	mov    (%rax),%eax
  800421dfd6:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421dfd9:	75 12                	jne    800421dfed <find_msr_in_region+0x44>
			*msr_entry = entry;
  800421dfdb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421dfdf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421dfe3:	48 89 10             	mov    %rdx,(%rax)
			return true;
  800421dfe6:	b8 01 00 00 00       	mov    $0x1,%eax
  800421dfeb:	eb 11                	jmp    800421dffe <find_msr_in_region+0x55>
}
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
	int i;
	for(i=0; i<area_sz; ++i) {
  800421dfed:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421dff1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421dff4:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  800421dff7:	7c d7                	jl     800421dfd0 <find_msr_in_region+0x27>
		if(entry->msr_index == msr_idx) {
			*msr_entry = entry;
			return true;
		}
	}
	return false;
  800421dff9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421dffe:	c9                   	leaveq 
  800421dfff:	c3                   	retq   

000000800421e000 <handle_interrupt_window>:

bool
handle_interrupt_window(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421e000:	55                   	push   %rbp
  800421e001:	48 89 e5             	mov    %rsp,%rbp
  800421e004:	48 83 ec 38          	sub    $0x38,%rsp
  800421e008:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421e00c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421e010:	89 55 cc             	mov    %edx,-0x34(%rbp)
  800421e013:	c7 45 f8 02 40 00 00 	movl   $0x4002,-0x8(%rbp)
  800421e01a:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421e01d:	89 c7                	mov    %eax,%edi
  800421e01f:	48 b8 83 de 21 04 80 	movabs $0x800421de83,%rax
  800421e026:	00 00 00 
  800421e029:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;

	procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS );
  800421e02b:	89 45 fc             	mov    %eax,-0x4(%rbp)

        //disable the interrupt window exiting
        procbased_ctls_or &= ~(VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT); 
  800421e02e:	83 65 fc fb          	andl   $0xfffffffb,-0x4(%rbp)
  800421e032:	c7 45 f4 02 40 00 00 	movl   $0x4002,-0xc(%rbp)
  800421e039:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421e03c:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421e03f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421e042:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421e045:	48 89 d6             	mov    %rdx,%rsi
  800421e048:	89 c7                	mov    %eax,%edi
  800421e04a:	48 b8 5d de 21 04 80 	movabs $0x800421de5d,%rax
  800421e051:	00 00 00 
  800421e054:	ff d0                	callq  *%rax
  800421e056:	c7 45 ec 16 40 00 00 	movl   $0x4016,-0x14(%rbp)
  800421e05d:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421e060:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421e063:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421e066:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421e069:	48 89 d6             	mov    %rdx,%rsi
  800421e06c:	89 c7                	mov    %eax,%edi
  800421e06e:	48 b8 5d de 21 04 80 	movabs $0x800421de5d,%rax
  800421e075:	00 00 00 
  800421e078:	ff d0                	callq  *%rax

        vmcs_write32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS, 
		      procbased_ctls_or);
        //write back the host_vector, which can insert a virtual interrupt
	vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	return true;
  800421e07a:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421e07f:	c9                   	leaveq 
  800421e080:	c3                   	retq   

000000800421e081 <handle_interrupts>:
bool
handle_interrupts(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421e081:	55                   	push   %rbp
  800421e082:	48 89 e5             	mov    %rsp,%rbp
  800421e085:	48 83 ec 48          	sub    $0x48,%rsp
  800421e089:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421e08d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421e091:	89 55 bc             	mov    %edx,-0x44(%rbp)
  800421e094:	c7 45 f0 20 68 00 00 	movl   $0x6820,-0x10(%rbp)
  800421e09b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421e09e:	89 c7                	mov    %eax,%edi
  800421e0a0:	48 b8 83 de 21 04 80 	movabs $0x800421de83,%rax
  800421e0a7:	00 00 00 
  800421e0aa:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;
	rflags = vmcs_read64(VMCS_GUEST_RFLAGS);
  800421e0ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if ( !(rflags & (0x1 << 9)) ) {	//we have to wait the interrupt window open
  800421e0b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421e0b4:	25 00 02 00 00       	and    $0x200,%eax
  800421e0b9:	48 85 c0             	test   %rax,%rax
  800421e0bc:	75 45                	jne    800421e103 <handle_interrupts+0x82>
  800421e0be:	c7 45 ec 02 40 00 00 	movl   $0x4002,-0x14(%rbp)
  800421e0c5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421e0c8:	89 c7                	mov    %eax,%edi
  800421e0ca:	48 b8 83 de 21 04 80 	movabs $0x800421de83,%rax
  800421e0d1:	00 00 00 
  800421e0d4:	ff d0                	callq  *%rax
		//get the interrupt info

		procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS);
  800421e0d6:	89 45 f4             	mov    %eax,-0xc(%rbp)

		//disable the interrupt window exiting
		procbased_ctls_or |= VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT; 
  800421e0d9:	83 4d f4 04          	orl    $0x4,-0xc(%rbp)
  800421e0dd:	c7 45 e8 02 40 00 00 	movl   $0x4002,-0x18(%rbp)
  800421e0e4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421e0e7:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421e0ea:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421e0ed:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421e0f0:	48 89 d6             	mov    %rdx,%rsi
  800421e0f3:	89 c7                	mov    %eax,%edi
  800421e0f5:	48 b8 5d de 21 04 80 	movabs $0x800421de5d,%rax
  800421e0fc:	00 00 00 
  800421e0ff:	ff d0                	callq  *%rax
  800421e101:	eb 24                	jmp    800421e127 <handle_interrupts+0xa6>
  800421e103:	c7 45 e0 16 40 00 00 	movl   $0x4016,-0x20(%rbp)
  800421e10a:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421e10d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421e110:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421e113:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421e116:	48 89 d6             	mov    %rdx,%rsi
  800421e119:	89 c7                	mov    %eax,%edi
  800421e11b:	48 b8 5d de 21 04 80 	movabs $0x800421de5d,%rax
  800421e122:	00 00 00 
  800421e125:	ff d0                	callq  *%rax
	}
	else {	//revector the host vector to the guest vector

		vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	}
	return true;
  800421e127:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421e12c:	c9                   	leaveq 
  800421e12d:	c3                   	retq   

000000800421e12e <handle_rdmsr>:

bool
handle_rdmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421e12e:	55                   	push   %rbp
  800421e12f:	48 89 e5             	mov    %rsp,%rbp
  800421e132:	53                   	push   %rbx
  800421e133:	48 83 ec 48          	sub    $0x48,%rsp
  800421e137:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421e13b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421e13f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421e143:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421e147:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421e14b:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421e150:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421e154:	0f 85 d0 00 00 00    	jne    800421e22a <handle_rdmsr+0xfc>
		// TODO: setup msr_bitmap to ignore EFER_MSR
		uint64_t val;
		struct vmx_msr_entry *entry;
		bool r = find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421e15a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421e15e:	8b 50 28             	mov    0x28(%rax),%edx
  800421e161:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421e165:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421e169:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421e16d:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  800421e171:	89 c7                	mov    %eax,%edi
  800421e173:	48 b8 a9 df 21 04 80 	movabs $0x800421dfa9,%rax
  800421e17a:	00 00 00 
  800421e17d:	ff d0                	callq  *%rax
  800421e17f:	88 45 e7             	mov    %al,-0x19(%rbp)
		assert(r);
  800421e182:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421e186:	83 f0 01             	xor    $0x1,%eax
  800421e189:	84 c0                	test   %al,%al
  800421e18b:	74 35                	je     800421e1c2 <handle_rdmsr+0x94>
  800421e18d:	48 b9 c2 25 22 04 80 	movabs $0x80042225c2,%rcx
  800421e194:	00 00 00 
  800421e197:	48 ba c4 25 22 04 80 	movabs $0x80042225c4,%rdx
  800421e19e:	00 00 00 
  800421e1a1:	be 59 00 00 00       	mov    $0x59,%esi
  800421e1a6:	48 bf d9 25 22 04 80 	movabs $0x80042225d9,%rdi
  800421e1ad:	00 00 00 
  800421e1b0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e1b5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421e1bc:	00 00 00 
  800421e1bf:	41 ff d0             	callq  *%r8
		val = entry->msr_value;
  800421e1c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e1c6:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421e1ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tf->tf_regs.reg_rdx = val << 32;
  800421e1ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421e1d2:	48 c1 e0 20          	shl    $0x20,%rax
  800421e1d6:	48 89 c2             	mov    %rax,%rdx
  800421e1d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421e1dd:	48 89 50 58          	mov    %rdx,0x58(%rax)
		tf->tf_regs.reg_rax = val & 0xFFFFFFFF;
  800421e1e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421e1e5:	89 c2                	mov    %eax,%edx
  800421e1e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421e1eb:	48 89 50 70          	mov    %rdx,0x70(%rax)

		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421e1ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421e1f3:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421e1fa:	c7 45 d4 0c 44 00 00 	movl   $0x440c,-0x2c(%rbp)
  800421e201:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421e204:	89 c7                	mov    %eax,%edi
  800421e206:	48 b8 83 de 21 04 80 	movabs $0x800421de83,%rax
  800421e20d:	00 00 00 
  800421e210:	ff d0                	callq  *%rax
  800421e212:	89 c0                	mov    %eax,%eax
  800421e214:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421e218:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421e21c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421e223:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e228:	eb 05                	jmp    800421e22f <handle_rdmsr+0x101>
	}

	return false;
  800421e22a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421e22f:	48 83 c4 48          	add    $0x48,%rsp
  800421e233:	5b                   	pop    %rbx
  800421e234:	5d                   	pop    %rbp
  800421e235:	c3                   	retq   

000000800421e236 <handle_wrmsr>:

bool 
handle_wrmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421e236:	55                   	push   %rbp
  800421e237:	48 89 e5             	mov    %rsp,%rbp
  800421e23a:	53                   	push   %rbx
  800421e23b:	48 83 ec 58          	sub    $0x58,%rsp
  800421e23f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421e243:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421e247:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e24b:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421e24f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421e253:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421e258:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421e25c:	0f 85 34 01 00 00    	jne    800421e396 <handle_wrmsr+0x160>

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421e262:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421e266:	8b 50 28             	mov    0x28(%rax),%edx
  800421e269:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421e26d:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421e271:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	uint64_t msr = tf->tf_regs.reg_rcx;
	if(msr == EFER_MSR) {

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
  800421e275:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  800421e279:	89 c7                	mov    %eax,%edi
  800421e27b:	48 b8 a9 df 21 04 80 	movabs $0x800421dfa9,%rax
  800421e282:	00 00 00 
  800421e285:	ff d0                	callq  *%rax
  800421e287:	88 45 e7             	mov    %al,-0x19(%rbp)
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
		assert(r);
  800421e28a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421e28e:	83 f0 01             	xor    $0x1,%eax
  800421e291:	84 c0                	test   %al,%al
  800421e293:	74 35                	je     800421e2ca <handle_wrmsr+0x94>
  800421e295:	48 b9 c2 25 22 04 80 	movabs $0x80042225c2,%rcx
  800421e29c:	00 00 00 
  800421e29f:	48 ba c4 25 22 04 80 	movabs $0x80042225c4,%rdx
  800421e2a6:	00 00 00 
  800421e2a9:	be 6f 00 00 00       	mov    $0x6f,%esi
  800421e2ae:	48 bf d9 25 22 04 80 	movabs $0x80042225d9,%rdi
  800421e2b5:	00 00 00 
  800421e2b8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e2bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421e2c4:	00 00 00 
  800421e2c7:	41 ff d0             	callq  *%r8
		cur_val = entry->msr_value;
  800421e2ca:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421e2ce:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421e2d2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		new_val = (tf->tf_regs.reg_rdx << 32)|tf->tf_regs.reg_rax;
  800421e2d6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e2da:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421e2de:	48 c1 e0 20          	shl    $0x20,%rax
  800421e2e2:	48 89 c2             	mov    %rax,%rdx
  800421e2e5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e2e9:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421e2ed:	48 09 d0             	or     %rdx,%rax
  800421e2f0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		if(BIT(cur_val, EFER_LME) == 0 && BIT(new_val, EFER_LME) == 1) {
  800421e2f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421e2f8:	25 00 01 00 00       	and    $0x100,%eax
  800421e2fd:	48 85 c0             	test   %rax,%rax
  800421e300:	75 4d                	jne    800421e34f <handle_wrmsr+0x119>
  800421e302:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e306:	25 00 01 00 00       	and    $0x100,%eax
  800421e30b:	48 85 c0             	test   %rax,%rax
  800421e30e:	74 3f                	je     800421e34f <handle_wrmsr+0x119>
  800421e310:	c7 45 c8 12 40 00 00 	movl   $0x4012,-0x38(%rbp)
  800421e317:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421e31a:	89 c7                	mov    %eax,%edi
  800421e31c:	48 b8 83 de 21 04 80 	movabs $0x800421de83,%rax
  800421e323:	00 00 00 
  800421e326:	ff d0                	callq  *%rax
			// Long mode enable.
			uint32_t entry_ctls = vmcs_read32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS );
  800421e328:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421e32b:	c7 45 c4 12 40 00 00 	movl   $0x4012,-0x3c(%rbp)
  800421e332:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421e335:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421e338:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421e33b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421e33e:	48 89 d6             	mov    %rdx,%rsi
  800421e341:	89 c7                	mov    %eax,%edi
  800421e343:	48 b8 5d de 21 04 80 	movabs $0x800421de5d,%rax
  800421e34a:	00 00 00 
  800421e34d:	ff d0                	callq  *%rax
			vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS, 
				      entry_ctls );

		}

		entry->msr_value = new_val;
  800421e34f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421e353:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421e357:	48 89 50 08          	mov    %rdx,0x8(%rax)
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421e35b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e35f:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421e366:	c7 45 bc 0c 44 00 00 	movl   $0x440c,-0x44(%rbp)
  800421e36d:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421e370:	89 c7                	mov    %eax,%edi
  800421e372:	48 b8 83 de 21 04 80 	movabs $0x800421de83,%rax
  800421e379:	00 00 00 
  800421e37c:	ff d0                	callq  *%rax
  800421e37e:	89 c0                	mov    %eax,%eax
  800421e380:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421e384:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e388:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421e38f:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e394:	eb 05                	jmp    800421e39b <handle_wrmsr+0x165>
	}

	return false;
  800421e396:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421e39b:	48 83 c4 58          	add    $0x58,%rsp
  800421e39f:	5b                   	pop    %rbx
  800421e3a0:	5d                   	pop    %rbp
  800421e3a1:	c3                   	retq   

000000800421e3a2 <handle_eptviolation>:

bool
handle_eptviolation(uint64_t *eptrt, struct VmxGuestInfo *ginfo) {
  800421e3a2:	55                   	push   %rbp
  800421e3a3:	48 89 e5             	mov    %rsp,%rbp
  800421e3a6:	53                   	push   %rbx
  800421e3a7:	48 83 ec 48          	sub    $0x48,%rsp
  800421e3ab:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421e3af:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421e3b3:	c7 45 cc 00 24 00 00 	movl   $0x2400,-0x34(%rbp)
  800421e3ba:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421e3bd:	89 c7                	mov    %eax,%edi
  800421e3bf:	48 b8 83 de 21 04 80 	movabs $0x800421de83,%rax
  800421e3c6:	00 00 00 
  800421e3c9:	ff d0                	callq  *%rax
	uint64_t gpa = vmcs_read64(VMCS_64BIT_GUEST_PHYSICAL_ADDR);
  800421e3cb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int r;
	if(gpa < 0xA0000 || (gpa >= 0x100000 && gpa < ginfo->phys_sz)) 
  800421e3cf:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421e3d6:	00 
  800421e3d7:	76 1f                	jbe    800421e3f8 <handle_eptviolation+0x56>
  800421e3d9:	48 81 7d e8 ff ff 0f 	cmpq   $0xfffff,-0x18(%rbp)
  800421e3e0:	00 
  800421e3e1:	0f 86 f9 00 00 00    	jbe    800421e4e0 <handle_eptviolation+0x13e>
  800421e3e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421e3eb:	48 8b 00             	mov    (%rax),%rax
  800421e3ee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421e3f2:	0f 86 e8 00 00 00    	jbe    800421e4e0 <handle_eptviolation+0x13e>
	{
		// Allocate a new page to the guest.
		struct PageInfo *p = page_alloc(0);
  800421e3f8:	bf 00 00 00 00       	mov    $0x0,%edi
  800421e3fd:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421e404:	00 00 00 
  800421e407:	ff d0                	callq  *%rax
  800421e409:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		if(!p) {
  800421e40d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421e412:	75 25                	jne    800421e439 <handle_eptviolation+0x97>
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
  800421e414:	48 bf e8 25 22 04 80 	movabs $0x80042225e8,%rdi
  800421e41b:	00 00 00 
  800421e41e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e423:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421e42a:	00 00 00 
  800421e42d:	ff d2                	callq  *%rdx
			return false;
  800421e42f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e434:	e9 54 01 00 00       	jmpq   800421e58d <handle_eptviolation+0x1eb>
		}
		p->pp_ref += 1;
  800421e439:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421e43d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421e441:	8d 50 01             	lea    0x1(%rax),%edx
  800421e444:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421e448:	66 89 50 08          	mov    %dx,0x8(%rax)
		r = ept_map_hva2gpa(eptrt, 
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
  800421e44c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421e450:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421e454:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421e458:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
		if(!p) {
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
			return false;
		}
		p->pp_ref += 1;
		r = ept_map_hva2gpa(eptrt, 
  800421e45e:	48 89 c3             	mov    %rax,%rbx
  800421e461:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421e465:	48 89 c7             	mov    %rax,%rdi
  800421e468:	48 b8 ee de 21 04 80 	movabs $0x800421deee,%rax
  800421e46f:	00 00 00 
  800421e472:	ff d0                	callq  *%rax
  800421e474:	48 89 c6             	mov    %rax,%rsi
  800421e477:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421e47b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421e481:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421e486:	48 89 da             	mov    %rbx,%rdx
  800421e489:	48 89 c7             	mov    %rax,%rdi
  800421e48c:	48 b8 9e a3 21 04 80 	movabs $0x800421a39e,%rax
  800421e493:	00 00 00 
  800421e496:	ff d0                	callq  *%rax
  800421e498:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
		assert(r >= 0);
  800421e49b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421e49f:	79 35                	jns    800421e4d6 <handle_eptviolation+0x134>
  800421e4a1:	48 b9 38 26 22 04 80 	movabs $0x8004222638,%rcx
  800421e4a8:	00 00 00 
  800421e4ab:	48 ba c4 25 22 04 80 	movabs $0x80042225c4,%rdx
  800421e4b2:	00 00 00 
  800421e4b5:	be 93 00 00 00       	mov    $0x93,%esi
  800421e4ba:	48 bf d9 25 22 04 80 	movabs $0x80042225d9,%rdi
  800421e4c1:	00 00 00 
  800421e4c4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e4c9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421e4d0:	00 00 00 
  800421e4d3:	41 ff d0             	callq  *%r8
		/* cprintf("EPT violation for gpa:%x mapped KVA:%x\n", gpa, page2kva(p)); */
		return true;
  800421e4d6:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e4db:	e9 ad 00 00 00       	jmpq   800421e58d <handle_eptviolation+0x1eb>
	} else if (gpa >= CGA_BUF && gpa < CGA_BUF + PGSIZE) {
  800421e4e0:	48 81 7d e8 ff 7f 0b 	cmpq   $0xb7fff,-0x18(%rbp)
  800421e4e7:	00 
  800421e4e8:	76 7c                	jbe    800421e566 <handle_eptviolation+0x1c4>
  800421e4ea:	48 81 7d e8 ff 8f 0b 	cmpq   $0xb8fff,-0x18(%rbp)
  800421e4f1:	00 
  800421e4f2:	77 72                	ja     800421e566 <handle_eptviolation+0x1c4>
		// FIXME: This give direct access to VGA MMIO region.
		r = ept_map_hva2gpa(eptrt, 
  800421e4f4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421e4f8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421e4fe:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421e503:	ba 00 80 0b 00       	mov    $0xb8000,%edx
  800421e508:	48 be 00 80 0b 04 80 	movabs $0x80040b8000,%rsi
  800421e50f:	00 00 00 
  800421e512:	48 89 c7             	mov    %rax,%rdi
  800421e515:	48 b8 9e a3 21 04 80 	movabs $0x800421a39e,%rax
  800421e51c:	00 00 00 
  800421e51f:	ff d0                	callq  *%rax
  800421e521:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    (void *)(KERNBASE + CGA_BUF), (void *)CGA_BUF, __EPTE_FULL, 0);
		assert(r >= 0);
  800421e524:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421e528:	79 35                	jns    800421e55f <handle_eptviolation+0x1bd>
  800421e52a:	48 b9 38 26 22 04 80 	movabs $0x8004222638,%rcx
  800421e531:	00 00 00 
  800421e534:	48 ba c4 25 22 04 80 	movabs $0x80042225c4,%rdx
  800421e53b:	00 00 00 
  800421e53e:	be 9a 00 00 00       	mov    $0x9a,%esi
  800421e543:	48 bf d9 25 22 04 80 	movabs $0x80042225d9,%rdi
  800421e54a:	00 00 00 
  800421e54d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e552:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421e559:	00 00 00 
  800421e55c:	41 ff d0             	callq  *%r8
		return true;
  800421e55f:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e564:	eb 27                	jmp    800421e58d <handle_eptviolation+0x1eb>
	}
	cprintf("vmm: handle_eptviolation: Case 2, gpa %x\n", gpa);
  800421e566:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421e56a:	48 89 c6             	mov    %rax,%rsi
  800421e56d:	48 bf 40 26 22 04 80 	movabs $0x8004222640,%rdi
  800421e574:	00 00 00 
  800421e577:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e57c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421e583:	00 00 00 
  800421e586:	ff d2                	callq  *%rdx
	return false;
  800421e588:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421e58d:	48 83 c4 48          	add    $0x48,%rsp
  800421e591:	5b                   	pop    %rbx
  800421e592:	5d                   	pop    %rbp
  800421e593:	c3                   	retq   

000000800421e594 <handle_ioinstr>:

bool
handle_ioinstr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421e594:	55                   	push   %rbp
  800421e595:	48 89 e5             	mov    %rsp,%rbp
  800421e598:	53                   	push   %rbx
  800421e599:	48 83 ec 38          	sub    $0x38,%rsp
  800421e59d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421e5a1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421e5a5:	c7 45 d4 00 64 00 00 	movl   $0x6400,-0x2c(%rbp)
  800421e5ac:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421e5af:	89 c7                	mov    %eax,%edi
  800421e5b1:	48 b8 83 de 21 04 80 	movabs $0x800421de83,%rax
  800421e5b8:	00 00 00 
  800421e5bb:	ff d0                	callq  *%rax
	static int port_iortc;

	uint64_t qualification = vmcs_read64(VMCS_VMEXIT_QUALIFICATION);
  800421e5bd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int port_number = (qualification >> 16) & 0xFFFF;
  800421e5c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421e5c5:	48 c1 e8 10          	shr    $0x10,%rax
  800421e5c9:	25 ff ff 00 00       	and    $0xffff,%eax
  800421e5ce:	89 45 dc             	mov    %eax,-0x24(%rbp)
	bool is_in = BIT(qualification, 3);
  800421e5d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421e5d5:	48 c1 e8 03          	shr    $0x3,%rax
  800421e5d9:	83 e0 01             	and    $0x1,%eax
  800421e5dc:	48 85 c0             	test   %rax,%rax
  800421e5df:	0f 95 c0             	setne  %al
  800421e5e2:	88 45 db             	mov    %al,-0x25(%rbp)
	bool handled = false;
  800421e5e5:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)

	// handle reading physical memory from the CMOS.
	if(port_number == IO_RTC) {
  800421e5e9:	83 7d dc 70          	cmpl   $0x70,-0x24(%rbp)
  800421e5ed:	75 2e                	jne    800421e61d <handle_ioinstr+0x89>
		if(!is_in) {
  800421e5ef:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800421e5f3:	83 f0 01             	xor    $0x1,%eax
  800421e5f6:	84 c0                	test   %al,%al
  800421e5f8:	0f 84 fa 00 00 00    	je     800421e6f8 <handle_ioinstr+0x164>
			port_iortc = tf->tf_regs.reg_rax;
  800421e5fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e602:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421e606:	89 c2                	mov    %eax,%edx
  800421e608:	48 b8 cc c5 6d 04 80 	movabs $0x80046dc5cc,%rax
  800421e60f:	00 00 00 
  800421e612:	89 10                	mov    %edx,(%rax)
			handled = true;
  800421e614:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e618:	e9 db 00 00 00       	jmpq   800421e6f8 <handle_ioinstr+0x164>
		}
	} else if (port_number == IO_RTC + 1) {
  800421e61d:	83 7d dc 71          	cmpl   $0x71,-0x24(%rbp)
  800421e621:	0f 85 d1 00 00 00    	jne    800421e6f8 <handle_ioinstr+0x164>
		if(is_in) {
  800421e627:	80 7d db 00          	cmpb   $0x0,-0x25(%rbp)
  800421e62b:	0f 84 c7 00 00 00    	je     800421e6f8 <handle_ioinstr+0x164>
			if(port_iortc == NVRAM_BASELO) {
  800421e631:	48 b8 cc c5 6d 04 80 	movabs $0x80046dc5cc,%rax
  800421e638:	00 00 00 
  800421e63b:	8b 00                	mov    (%rax),%eax
  800421e63d:	83 f8 15             	cmp    $0x15,%eax
  800421e640:	75 15                	jne    800421e657 <handle_ioinstr+0xc3>
				tf->tf_regs.reg_rax = 640 & 0xFF;
  800421e642:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e646:	48 c7 40 70 80 00 00 	movq   $0x80,0x70(%rax)
  800421e64d:	00 
				handled = true;
  800421e64e:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e652:	e9 a1 00 00 00       	jmpq   800421e6f8 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_BASEHI) {
  800421e657:	48 b8 cc c5 6d 04 80 	movabs $0x80046dc5cc,%rax
  800421e65e:	00 00 00 
  800421e661:	8b 00                	mov    (%rax),%eax
  800421e663:	83 f8 16             	cmp    $0x16,%eax
  800421e666:	75 12                	jne    800421e67a <handle_ioinstr+0xe6>
				tf->tf_regs.reg_rax = (640 >> 8) & 0xFF;
  800421e668:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e66c:	48 c7 40 70 02 00 00 	movq   $0x2,0x70(%rax)
  800421e673:	00 
				handled = true;
  800421e674:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e678:	eb 7e                	jmp    800421e6f8 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTLO) {
  800421e67a:	48 b8 cc c5 6d 04 80 	movabs $0x80046dc5cc,%rax
  800421e681:	00 00 00 
  800421e684:	8b 00                	mov    (%rax),%eax
  800421e686:	83 f8 17             	cmp    $0x17,%eax
  800421e689:	75 2a                	jne    800421e6b5 <handle_ioinstr+0x121>
				tf->tf_regs.reg_rax = ((ginfo->phys_sz / 1024) - 1024) & 0xFF;
  800421e68b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421e68f:	48 8b 00             	mov    (%rax),%rax
  800421e692:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421e699:	48 85 c0             	test   %rax,%rax
  800421e69c:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421e6a0:	48 c1 f8 0a          	sar    $0xa,%rax
  800421e6a4:	0f b6 d0             	movzbl %al,%edx
  800421e6a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e6ab:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421e6af:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421e6b3:	eb 43                	jmp    800421e6f8 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTHI) {
  800421e6b5:	48 b8 cc c5 6d 04 80 	movabs $0x80046dc5cc,%rax
  800421e6bc:	00 00 00 
  800421e6bf:	8b 00                	mov    (%rax),%eax
  800421e6c1:	83 f8 18             	cmp    $0x18,%eax
  800421e6c4:	75 32                	jne    800421e6f8 <handle_ioinstr+0x164>
				tf->tf_regs.reg_rax = (((ginfo->phys_sz / 1024) - 1024) >> 8) & 0xFF;
  800421e6c6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421e6ca:	48 8b 00             	mov    (%rax),%rax
  800421e6cd:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421e6d4:	48 85 c0             	test   %rax,%rax
  800421e6d7:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421e6db:	48 c1 f8 0a          	sar    $0xa,%rax
  800421e6df:	48 2d 00 04 00 00    	sub    $0x400,%rax
  800421e6e5:	48 c1 f8 08          	sar    $0x8,%rax
  800421e6e9:	0f b6 d0             	movzbl %al,%edx
  800421e6ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e6f0:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421e6f4:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
			}
		}

	} 
	if(handled) {
  800421e6f8:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421e6fc:	74 3b                	je     800421e739 <handle_ioinstr+0x1a5>
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421e6fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e702:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421e709:	c7 45 d0 0c 44 00 00 	movl   $0x440c,-0x30(%rbp)
  800421e710:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800421e713:	89 c7                	mov    %eax,%edi
  800421e715:	48 b8 83 de 21 04 80 	movabs $0x800421de83,%rax
  800421e71c:	00 00 00 
  800421e71f:	ff d0                	callq  *%rax
  800421e721:	89 c0                	mov    %eax,%eax
  800421e723:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421e727:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421e72b:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421e732:	b8 01 00 00 00       	mov    $0x1,%eax
  800421e737:	eb 33                	jmp    800421e76c <handle_ioinstr+0x1d8>
	} else {
		cprintf("%x %x\n", qualification, port_iortc);
  800421e739:	48 b8 cc c5 6d 04 80 	movabs $0x80046dc5cc,%rax
  800421e740:	00 00 00 
  800421e743:	8b 10                	mov    (%rax),%edx
  800421e745:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421e749:	48 89 c6             	mov    %rax,%rsi
  800421e74c:	48 bf 6a 26 22 04 80 	movabs $0x800422266a,%rdi
  800421e753:	00 00 00 
  800421e756:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e75b:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421e762:	00 00 00 
  800421e765:	ff d1                	callq  *%rcx
		return false;
  800421e767:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
  800421e76c:	48 83 c4 38          	add    $0x38,%rsp
  800421e770:	5b                   	pop    %rbx
  800421e771:	5d                   	pop    %rbp
  800421e772:	c3                   	retq   

000000800421e773 <handle_cpuid>:
// Finally, you need to increment the program counter in the trap frame.
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.
bool
handle_cpuid(struct Trapframe *tf, struct VmxGuestInfo *ginfo)
{
  800421e773:	55                   	push   %rbp
  800421e774:	48 89 e5             	mov    %rsp,%rbp
  800421e777:	48 83 ec 10          	sub    $0x10,%rsp
  800421e77b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421e77f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	/* Your code here  */
    panic("handle_cpuid is not impemented\n");
  800421e783:	48 ba 78 26 22 04 80 	movabs $0x8004222678,%rdx
  800421e78a:	00 00 00 
  800421e78d:	be d9 00 00 00       	mov    $0xd9,%esi
  800421e792:	48 bf d9 25 22 04 80 	movabs $0x80042225d9,%rdi
  800421e799:	00 00 00 
  800421e79c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e7a1:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421e7a8:	00 00 00 
  800421e7ab:	ff d1                	callq  *%rcx

000000800421e7ad <handle_vmcall>:
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.//

bool
handle_vmcall(struct Trapframe *tf, struct VmxGuestInfo *gInfo, uint64_t *eptrt)
{
  800421e7ad:	55                   	push   %rbp
  800421e7ae:	48 89 e5             	mov    %rsp,%rbp
  800421e7b1:	48 83 ec 70          	sub    $0x70,%rsp
  800421e7b5:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421e7b9:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421e7bd:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	bool handled = false;
  800421e7c1:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
	int perm, r;
	void *gpa_pg, *hva_pg;
	envid_t to_env;
	uint32_t val;
	// phys address of the multiboot map in the guest.
	uint64_t multiboot_map_addr = 0x6000;
  800421e7c5:	48 c7 45 f0 00 60 00 	movq   $0x6000,-0x10(%rbp)
  800421e7cc:	00 
	switch(tf->tf_regs.reg_rax) {
  800421e7cd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e7d1:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421e7d5:	48 83 f8 06          	cmp    $0x6,%rax
  800421e7d9:	0f 87 c1 00 00 00    	ja     800421e8a0 <handle_vmcall+0xf3>
  800421e7df:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421e7e6:	00 
  800421e7e7:	48 b8 f0 26 22 04 80 	movabs $0x80042226f0,%rax
  800421e7ee:	00 00 00 
  800421e7f1:	48 01 d0             	add    %rdx,%rax
  800421e7f4:	48 8b 00             	mov    (%rax),%rax
  800421e7f7:	ff e0                	jmpq   *%rax
		// NB: because recv can call schedule, clobbering the VMCS, 
		// you should go ahead and increment rip before this call.
		/* Your code here */
		break;
	case VMX_VMCALL_LAPICEOI:
		lapic_eoi();
  800421e7f9:	48 b8 ff 7d 21 04 80 	movabs $0x8004217dff,%rax
  800421e800:	00 00 00 
  800421e803:	ff d0                	callq  *%rax
		handled = true;
  800421e805:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421e809:	e9 92 00 00 00       	jmpq   800421e8a0 <handle_vmcall+0xf3>
	case VMX_VMCALL_BACKTOHOST:
		cprintf("Now back to the host, VM halt in the background, run vmmanager to resume the VM.\n");
  800421e80e:	48 bf 98 26 22 04 80 	movabs $0x8004222698,%rdi
  800421e815:	00 00 00 
  800421e818:	b8 00 00 00 00       	mov    $0x0,%eax
  800421e81d:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421e824:	00 00 00 
  800421e827:	ff d2                	callq  *%rdx
		curenv->env_status = ENV_NOT_RUNNABLE;	//mark the guest not runable
  800421e829:	48 b8 ca 7d 21 04 80 	movabs $0x8004217dca,%rax
  800421e830:	00 00 00 
  800421e833:	ff d0                	callq  *%rax
  800421e835:	48 ba 20 e0 6d 04 80 	movabs $0x80046de020,%rdx
  800421e83c:	00 00 00 
  800421e83f:	48 98                	cltq   
  800421e841:	48 c1 e0 03          	shl    $0x3,%rax
  800421e845:	48 89 c1             	mov    %rax,%rcx
  800421e848:	48 c1 e1 04          	shl    $0x4,%rcx
  800421e84c:	48 01 c8             	add    %rcx,%rax
  800421e84f:	48 01 d0             	add    %rdx,%rax
  800421e852:	48 83 c0 08          	add    $0x8,%rax
  800421e856:	48 8b 00             	mov    (%rax),%rax
  800421e859:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800421e860:	00 00 00 
		ENV_CREATE(user_sh, ENV_TYPE_USER);	//create a new host shell
  800421e863:	be 00 00 00 00       	mov    $0x0,%esi
  800421e868:	48 bf 08 eb 4b 04 80 	movabs $0x80044beb08,%rdi
  800421e86f:	00 00 00 
  800421e872:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  800421e879:	00 00 00 
  800421e87c:	ff d0                	callq  *%rax
		handled = true;
  800421e87e:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;	
  800421e882:	eb 1c                	jmp    800421e8a0 <handle_vmcall+0xf3>
	case VMX_VMCALL_GETDISKIMGNUM:	//alloc a number to guest
		tf->tf_regs.reg_rax = vmdisk_number;
  800421e884:	48 b8 c8 c5 6d 04 80 	movabs $0x80046dc5c8,%rax
  800421e88b:	00 00 00 
  800421e88e:	8b 00                	mov    (%rax),%eax
  800421e890:	48 63 d0             	movslq %eax,%rdx
  800421e893:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421e897:	48 89 50 70          	mov    %rdx,0x70(%rax)
		handled = true;
  800421e89b:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421e89f:	90                   	nop
		 * 
		 * Hint: The solution does not hard-code the length of the vmcall instruction.
		 */
		/* Your code here */
	}
	return handled;
  800421e8a0:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
  800421e8a4:	c9                   	leaveq 
  800421e8a5:	c3                   	retq   
